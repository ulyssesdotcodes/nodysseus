{
    "description": "function composition",
    "nodes": [
        {
            "id": "in",
            "script": "return (args) => args.data"
        },
        {
            "id": "flatten",
            "script": "return lib.no.flatten"
        },
        {
            "id": "replace_node_types_args",
            "target_path": [
                "graph",
                "nodes"
            ]
        },
        {
            "id": "replace_node_types_fn",
            "script": "return ({data}) => node => lib.no.unpackTypes(data.node_types, node)"
        },
        {
            "id": "replace_node_types",
            "script": "return lib.no.map_path_fn"
        },
        {
            "id": "initial_graph",
            "script": "return ({data}) => {graph: data.target.graph}"
        },
        {
            "id": "hyperapp_view",
            "nodes": [
                {
                    "id": "in",
                    "type": "fn_def"
                },
                {
                    "id": "out",
                    "type": "fn_return"
                },
                {
                    "id": "get_aggregate",
                    "type": "get",
                    "get_index": "aggregate"
                },
                {
                    "id": "base_editor_content",
                    "nodes": [
                        {
                            "id": "in",
                            "type": "identity"
                        },
                        {
                            "id": "children",
                            "type": "order_inputs",
                            "order": [
                                "node_editor",
                                "text_editor"
                            ]
                        },
                        {
                            "id": "concat_children",
                            "type": "children_els"
                        },
                        {
                            "id": "out",
                            "type": "identity"
                        },
                        {
                            "id": "node_editor",
                            "nodes": [
                                {
                                    "id": "in",
                                    "type": "identity"
                                },
                                {
                                    "id": "out",
                                    "type": "identity"
                                },
                                {
                                    "id": "parent",
                                    "type": "h",
                                    "dom_type": "svg"
                                },
                                {
                                    "id": "get_input",
                                    "script": "return ({data}) =>  data.graph"
                                },
                                {
                                    "id": "svgs",
                                    "nodes": [
                                        {
                                            "id": "in",
                                            "type": "identity"
                                        },
                                        {
                                            "id": "get_nodes",
                                            "type": "get",
                                            "get_index": [
                                                "graph",
                                                "nodes"
                                            ]
                                        },
                                        {
                                            "id": "get_edges",
                                            "type": "get",
                                            "get_index": [
                                                "graph",
                                                "edges"
                                            ]
                                        },
                                        {
                                            "id": "node_svgs",
                                            "script": "return lib.no.iterate"
                                        },
                                        {
                                            "id": "node_template",
                                            "nodes": [
                                                {
                                                    "id": "in",
                                                    "type": "identity"
                                                },
                                                {
                                                    "id": "out",
                                                    "type": "identity"
                                                },
                                                {
                                                    "id": "parent",
                                                    "type": "h",
                                                    "dom_type": "svg",
                                                    "attrs": {
                                                        "width": 128,
                                                        "height": 64
                                                    }
                                                },
                                                {
                                                    "id": "parent_attrs",
                                                    "script": "return ({data}) => ({ x: (data.x ?? 400) - 20, y: (data.y ?? 400) - 20, id: data.node_id })"
                                                },
                                                {
                                                    "id": "children",
                                                    "nodes": [
                                                        {
                                                            "id": "circle",
                                                            "type": "h",
                                                            "dom_type": "circle",
                                                            "attrs": {
                                                                "r": 16,
                                                                "cx": 20,
                                                                "cy": 20,
                                                                "fill": "blue"
                                                            }
                                                        },
                                                        {
                                                            "id": "text",
                                                            "nodes": [
                                                                {
                                                                    "id": "in",
                                                                    "type": "identity"
                                                                },
                                                                {
                                                                    "id": "out",
                                                                    "type": "identity"
                                                                },
                                                                {
                                                                    "id": "get_id",
                                                                    "type": "get",
                                                                    "index": "node_id"
                                                                },
                                                                {
                                                                    "id": "display_name",
                                                                    "type": "h_text",
                                                                    "text": "hi"
                                                                },
                                                                {
                                                                    "id": "text",
                                                                    "type": "h",
                                                                    "dom_type": "text",
                                                                    "attrs": {
                                                                        "x": 42,
                                                                        "y": 22,
                                                                        "font-size": 18
                                                                    }
                                                                }
                                                            ],
                                                            "edges": [
                                                                {
                                                                    "from": "in",
                                                                    "to": "get_id"
                                                                },
                                                                {
                                                                    "from": "in",
                                                                    "to": "display_name"
                                                                },
                                                                {
                                                                    "from": "display_name",
                                                                    "to": "text",
                                                                    "as": "children"
                                                                },
                                                                {
                                                                    "from": "text",
                                                                    "to": "out"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "id": "in",
                                                            "type": "identity"
                                                        },
                                                        {
                                                            "id": "order",
                                                            "type": "order_inputs",
                                                            "order": [
                                                                "circle",
                                                                "text"
                                                            ]
                                                        },
                                                        {
                                                            "id": "children_els",
                                                            "type": "children_els"
                                                        },
                                                        {
                                                            "id": "out",
                                                            "type": "identity"
                                                        }
                                                    ],
                                                    "edges": [
                                                        {
                                                            "from": "in",
                                                            "to": "circle"
                                                        },
                                                        {
                                                            "from": "in",
                                                            "to": "text"
                                                        },
                                                        {
                                                            "from": "circle",
                                                            "to": "order",
                                                            "as": "circle"
                                                        },
                                                        {
                                                            "from": "text",
                                                            "to": "order",
                                                            "as": "text"
                                                        },
                                                        {
                                                            "from": "order",
                                                            "to": "children_els",
                                                            "as": "children"
                                                        },
                                                        {
                                                            "from": "children_els",
                                                            "to": "out",
                                                            "as": "children"
                                                        }
                                                    ]
                                                }
                                            ],
                                            "edges": [
                                                {
                                                    "from": "parent_attrs",
                                                    "to": "parent",
                                                    "as": "attrs"
                                                },
                                                {
                                                    "from": "in",
                                                    "to": "children"
                                                },
                                                {
                                                    "from": "children",
                                                    "to": "parent"
                                                },
                                                {
                                                    "from": "parent",
                                                    "to": "out"
                                                }
                                            ]
                                        },
                                        {
                                            "id": "link_svgs",
                                            "script": "return lib.no.iterate"
                                        },
                                        {
                                            "id": "link_template",
                                            "type": "h",
                                            "dom_type": "line"
                                        },
                                        {
                                            "id": "concat_links",
                                            "type": "concat"
                                        },
                                        {
                                            "id": "concat_nodes",
                                            "type": "concat"
                                        },
                                        {
                                            "id": "concat_all",
                                            "script": "return ({data}) => data.nodes && [].concat(data.links ?? [], data.nodes)"
                                        },
                                        {
                                            "id": "children_els",
                                            "script": "return ({data}) => data.children.reduce((acc, c) => (acc.push(c.el), acc), [])"
                                        },
                                        {
                                            "id": "out",
                                            "type": "identity"
                                        }
                                    ],
                                    "edges": [
                                        {
                                            "from": "in",
                                            "to": "get_nodes"
                                        },
                                        {
                                            "from": "in",
                                            "to": "get_edges"
                                        },
                                        {
                                            "from": "get_nodes",
                                            "to": "node_svgs",
                                            "as": "target"
                                        },
                                        {
                                            "from": "get_edges",
                                            "to": "link_svgs",
                                            "as": "target"
                                        },
                                        {
                                            "from": "node_svgs",
                                            "to": "node_template"
                                        },
                                        {
                                            "from": "link_svgs",
                                            "to": "link_template"
                                        },
                                        {
                                            "from": "node_template",
                                            "to": "concat_nodes",
                                            "as": "value"
                                        },
                                        {
                                            "from": "link_template",
                                            "to": "concat_links",
                                            "as": "value"
                                        },
                                        {
                                            "from": "concat_nodes",
                                            "to": "concat_all",
                                            "as": "nodes"
                                        },
                                        {
                                            "from": "concat_links",
                                            "to": "concat_all",
                                            "as": "links"
                                        },
                                        {
                                            "from": "concat_all",
                                            "to": "children_els",
                                            "as": "children"
                                        },
                                        {
                                            "from": "children_els",
                                            "to": "out",
                                            "as": "children"
                                        }
                                    ]
                                },
                                {
                                    "id": "svgs_flatten",
                                    "script": "return ({data}) => data.target instanceof Map ? new Map([...lib.iter.map(data.target.values(), v => [...v])].flat()) : data.target.flat()"
                                },
                                {
                                    "id": "attrs",
                                    "script": "return () => ({id: 'node_parent', width: window.innerWidth, height: window.innerHeight})"
                                }
                            ],
                            "edges": [
                                {
                                    "from": "in",
                                    "to": "get_input"
                                },
                                {
                                    "from": "get_input",
                                    "to": "svgs"
                                },
                                {
                                    "from": "in",
                                    "to": "attrs"
                                },
                                {
                                    "from": "attrs",
                                    "to": "parent",
                                    "as": "attrs"
                                },
                                {
                                    "from": "svgs",
                                    "to": "parent"
                                },
                                {
                                    "from": "parent",
                                    "to": "out"
                                }
                            ]
                        },
                        {
                            "id": "text_editor",
                            "type": "h",
                            "attrs": {
                                "id": "text-editor"
                            },
                            "dom_type": "div"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "node_editor"
                        },
                        {
                            "from": "in",
                            "to": "text_editor"
                        },
                        {
                            "from": "node_editor",
                            "to": "children",
                            "as": "node_editor"
                        },
                        {
                            "from": "text_editor",
                            "to": "children",
                            "as": "text_editor"
                        },
                        {
                            "from": "children",
                            "to": "concat_children",
                            "as": "children"
                        },
                        {
                            "from": "concat_children",
                            "to": "out",
                            "as": "children"
                        }
                    ]
                },
                {
                    "id": "base_editor",
                    "type": "h",
                    "dom_type": "div"
                },
                {
                    "id": "apply_node_template",
                    "path": [
                        "nodes",
                        "node_editor",
                        "nodes",
                        "svgs",
                        "nodes",
                        "node_svgs",
                        "nodes"
                    ],
                    "source_path": [
                        "node_editor",
                        "nodes"
                    ],
                    "script": "return lib.no.apply_template(lib, self)",
                    "template": {}
                },
                {
                    "id": "apply_link_template",
                    "script": "return lib.no.apply_template(lib, self)",
                    "path": [
                        "nodes",
                        "node_editor",
                        "nodes",
                        "svgs",
                        "nodes",
                        "link_svgs",
                        "nodes"
                    ],
                    "source_path": [
                        "node_editor",
                        "links"
                    ],
                    "template": {
                        "type": "execute",
                        "nodes": {
                            "get_input": {
                                "script": "return (state, input) => input.links[input.parent]"
                            },
                            "attrs": {
                                "script": "return (state, input) => ({x1: input.source.x, y1: input.source.y, x2: input.target.x, y2: input.target.y, stroke: 'black'})"
                            },
                            "line": {
                                "type": "h",
                                "dom_type": "line"
                            }
                        },
                        "edges": [
                            {
                                "from": "in",
                                "to": "get_input"
                            },
                            {
                                "from": "get_input",
                                "to": "attrs"
                            },
                            {
                                "from": "attrs",
                                "to": "line",
                                "as": "attrs"
                            },
                            {
                                "from": "line",
                                "to": "out"
                            }
                        ]
                    }
                },
                {
                    "id": "apply_node_template_run",
                    "type": "run_fn",
                    "run_type": "aggregate"
                },
                {
                    "id": "simulate_layout",
                    "script": "return (state, input) => (state.has('simulation') ? state : state.set('simulation', lib.no.d3simulation(state, input))).get('simulation')"
                },
                {
                    "id": "simulation_dispatch",
                    "type": "compiled_fn",
                    "nodes": [
                        {
                            "id": "in",
                            "type": "identity"
                        },
                        {
                            "id": "out",
                            "type": "identity"
                        },
                        {
                            "id": "get_nodes",
                            "script": "return (state, input) => requestAnimationFrame(() => {if(!(input.dispatch && input.simulation && input.action)){ return } input.dispatch(input.action, { nodes: Object.fromEntries(input.simulation.nodes().map(n => [n.node_id, n])), links: input.simulation.force('links').links()  } ) })"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "get_nodes"
                        },
                        {
                            "from": "get_nodes",
                            "to": "out"
                        }
                    ]
                },
                {
                    "id": "simulation_subscription",
                    "type": "execute",
                    "nodes": [
                        {
                            "id": "in",
                            "type": "identity"
                        },
                        {
                            "id": "out",
                            "type": "identity"
                        },
                        {
                            "id": "subscription",
                            "script": "return (state, input) => (dispatch, props) => { input.simulation.on('tick.ha', function(v){ input.fn({simulation: this, dispatch: dispatch, action: props.action})}); return () => input.simulation.on('.ha', null); }"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "subscription"
                        },
                        {
                            "from": "subscription",
                            "to": "out"
                        }
                    ]
                },
                {
                    "id": "concat_children",
                    "type": "children_els"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "base_editor_content"
                },
                {
                    "from": "base_editor_content",
                    "to": "base_editor"
                },
                {
                    "from": "base_editor",
                    "to": "out"
                }
            ]
        },
        {
            "id": "hyperapp",
            "script": "return ({lib, state, data}) => { if(!state.has('dispatch') && data.view && data.dom){ state.set('dispatch', lib.ha.app({ init: data.init ?? {}, view: (s) => data.view(s).el ?? lib.ha.text('loading...'), node: data.dom })) }}"
        },
        {
            "id": "content_el_selector",
            "type": "el_selector",
            "selector": "#content"
        },
        {
            "id": "content_el",
            "type": "get",
            "get_index": 0
        },
        {
            "id": "verify",
            "script": "return lib.no.verify"
        },
        {
            "id": "node_types",
            "execute": {
                "script": "return lib.no.default_fn(lib, self)"
            },
            "data": {
                "script": "return () => self"
            },
            "el_selector": {
                "script": "return ({data}) => document.querySelector(data.selector);"
            },
            "get": {
                "script": "return ({data}) => lib._.get(data, data.get_index)"
            },
            "constant": {
                "script": "return () => self.value"
            },
            "merge": {
                "script": "return (state, input) => state.set('input', Object.assign({}, state.get('input') ?? {}, input)).get('input')"
            },
            "log": {
                "script": "return ({data}) => console.log(data)"
            },
            "aggregate_chain": {
                "script": "return lib.no.aggregateChain"
            },
            "concat": {
                "script": "return lib.no.concatValues"
            },
            "fold": {
                "script": "return (state, input) => (val) => lib._.reduce(lib.no.aggregate_fn(lib, self)(state, input), (v, fn) => fn(v), val)"
            },
            "h": {
                "script": "return lib.no.hFn"
            },
            "h_text": {
                "script": "return ({data}) => lib.ha.text(data.text)"
            },
            "compiled_fn": {
                "script": "const compiled_fn = lib.no.default_fn(lib, self); return (state, fn_input) => (input) => { const result = compiled_fn(state, lib._.merge(fn_input, input)); return (result === undefined ? state : state.set('output', result)).get('output') }"
            },
            "apply_fn": {
                "script": "return (state, input) => lib.util.overPath(self.path)(n => n.map(input.fn))(input.target)"
            },
            "merge_values": {
                "script": "return (state, input) => lib.util.overPath(self.path, {})(v => lib._.merge(v, input.values))"
            },
            "fn_def": {
                "script": "return lib.no.fnDef"
            },
            "fn_return": {
                "script": "return lib.no.fnReturn"
            },
            "identity": {
                "script": "return ({data}) => data"
            },
            "order_inputs": {
                "script": "return ({data}) => ({value: data.order.map(o => data[o]).reduce((acc, v) => v === undefined || acc.ordered === undefined ? {} : {ordered: acc.ordered.concat([v])}, {ordered: []}).ordered, delete: ['order'] })"
            },
            "children_els": {
                "script": "return ({data}) => ({value: data.children.reduce((acc, c) => (acc.push(c.el), acc), []).filter(v => v), delete: ['children'] })"
            }
        },
        {
            "id": "log",
            "type": "log"
        }
    ],
    "edges": [
        {"from": "hyperapp_view/base_editor_content/children", "to": "log"},
        {
            "from": "in",
            "to": "flatten"
        },
        {
            "from": "flatten",
            "to": "verify"
        },
        {
            "from": "verify",
            "to": "node_types"
        },
        {
            "from": "node_types",
            "to": "replace_node_types_fn",
            "as": "node_types"
        },
        {
            "from": "replace_node_types_fn",
            "to": "replace_node_types",
            "as": "map_fn"
        },
        {
            "from": "verify",
            "to": "replace_node_types_args"
        },
        {
            "from": "replace_node_types_args",
            "to": "replace_node_types"
        },
        {
            "from": "verify",
            "to": "replace_node_types",
            "as": "target"
        },
        {
            "from": "verify",
            "to": "replace_node_types_fn"
        },
        {
            "from": "replace_node_types",
            "to": "content_el_selector"
        },
        {
            "from": "replace_node_types",
            "to": "hyperapp_view"
        },
        {
            "from": "replace_node_types",
            "to": "hyperapp"
        },
        {
            "from": "content_el_selector",
            "to": "hyperapp",
            "as": "dom"
        },
        {
            "from": "hyperapp_view",
            "to": "hyperapp",
            "as": "view"
        }
    ]
}