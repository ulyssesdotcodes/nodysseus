{
    "description": "function composition",
    "nodes": [{
            "id": "in",
            "script": "return (args) => args.data"
        },
        {
            "id": "flatten",
            "script": "return lib.no.flatten"
        },
        {
            "id": "replace_node_types_args",
            "target_path": [
                "graph",
                "nodes"
            ]
        },
        {
            "id": "replace_node_types_fn",
            "script": "return ({data}) => ({ value: node => lib.no.unpackTypes(data.node_types, node)})"
        },
        {
            "id": "replace_node_types",
            "script": "return lib.no.map_path_fn"
        },
        {
            "id": "initial_state",
            "script": "return ({data}) => ({display_graph: data.display_graph, nodes: [], links: [] })"
        },
        {
            "id": "hyperapp_view",
            "nodes": [{
                    "id": "in",
                    "type": "fn_def",
                    "required_data": ["simulation", "display_graph"]
                },
                {
                    "id": "out",
                    "type": "fn_return",
                    "inherited_data": ["simulation", "display_graph"]
                },
                {
                    "id": "get_aggregate",
                    "type": "get",
                    "get_index": "aggregate"
                },
                {
                    "id": "base_editor_content",
                    "nodes": [{
                            "id": "in",
                            "type": "identity"
                        },
                        {
                            "id": "get_node_editor_el",
                            "script": "return ({data}) => [data.el]"
                        },
                        {
                            "id": "out",
                            "type": "identity"
                        },
                        {
                            "id": "node_editor",
                            "nodes": [{
                                    "id": "in",
                                    "type": "identity"
                                },
                                {
                                    "id": "out",
                                    "type": "identity"
                                },
                                {
                                    "id": "parent",
                                    "type": "h",
                                    "dom_type": "svg",
                                    "required_data": ["attrs", "children"]
                                },
                                {
                                    "id": "get_input",
                                    "script": "return ({data}) =>  data.graph"
                                },
                                {
                                    "id": "svgs",
                                    "nodes": [{
                                            "id": "in",
                                            "type": "identity"
                                        },
                                        {
                                            "id": "onclick_fn",
                                            "nodes": [
                                                { 
                                                    "id": "in",
                                                    "type": "fn_def"
                                                },
                                                {
                                                    "id": "map_fn_args",
                                                    "script": "return ({data}) => ({...data, ...data.fn_args[0], payload: data.fn_args[1] })"
                                                },
                                                {
                                                    "id": "update_simulation_nodes",
                                                    "script": "return ({data}) => () => lib.no.update_simulation_nodes({data})"
                                                },
                                                {
                                                    "id": "onclick_node_fn",
                                                    "script": "return lib.no.node_click"
                                                },
                                                {
                                                    "id": "out",
                                                    "type": "fn_return",
                                                    "inherited_data": ["simulation"]
                                                },
                                                {
                                                    "id": "prep_ha_action",
                                                    "required_data": ["hastate", "effect"],
                                                    "script": "return ({data}) => { const hastate = {...data.hastate}; delete hastate['fn_result']; return [hastate, [data.effect]]}"
                                                },
                                                {
                                                    "id": "cleanup",
                                                    "type": "delete_data",
                                                    "paths": ["node_id", "payload", "fn_args", "fn", "script"]
                                                }
                                            ],
                                            "edges": [
                                                {"from": "in", "to": "map_fn_args"},
                                                {"from": "map_fn_args", "to": "onclick_node_fn"},
                                                {"from": "onclick_node_fn", "to": "update_simulation_nodes"},
                                                {"from": "onclick_node_fn", "to": "cleanup"},
                                                {"from": "cleanup", "to": "prep_ha_action", "as": "hastate"},
                                                {"from": "update_simulation_nodes", "to": "prep_ha_action", "as": "effect"},
                                                {"from": "prep_ha_action", "to": "out", "as": "return_value"}
                                            ]
                                        },
                                        {
                                            "id": "get_nodes",
                                            "type": "get",
                                            "get_index": [
                                                "fn_args", "0", "nodes"
                                            ]
                                        },
                                        {
                                            "id": "delete_nodes",
                                            "type": "delete_data",
                                            "paths": ["nodes"]
                                        },
                                        {
                                            "id": "get_links",
                                            "type": "get",
                                            "get_index": [
                                                "fn_args", "0", "links"
                                            ]
                                        },
                                        {
                                            "id": "delete_links",
                                            "type": "delete_data",
                                            "paths": ["links"]
                                        },
                                        {
                                            "id": "node_svgs",
                                            "run_over_all": true,
                                            "path": ["fn_args", "0", "nodes"],
                                            "script": "return ({data}) => lib._.get(data[0], data[0].path).map(n => Object.assign({}, data[0], n))"
                                        },
                                        {
                                            "id": "node_template",
                                            "nodes": [{
                                                    "id": "in",
                                                    "type": "identity",
                                                    "required_data": ["onclick_fn"]
                                                },
                                                {
                                                    "id": "out",
                                                    "type": "identity"
                                                },
                                                {
                                                    "id": "parent",
                                                    "required_data": ["attrs", "children"],
                                                    "type": "h",
                                                    "dom_type": "svg"
                                                },
                                                {
                                                    "id": "log", "type": "log"
                                                },
                                                {
                                                    "id": "parent_attrs",
                                                    "required_data": ["node_id", "x", "y", "onclick_fn"],
                                                    "script": "return ({data}) => ({ x: (data.x ?? 400) - 20, y: (data.y ?? 400) - 20, id: data.node_id, onclick: (_, payload) => [data.onclick_fn, {x: payload.x, y: payload.y, node_id: data.node_id}], width: 256, height: 64})"
                                                },
                                                {
                                                    "id": "children",
                                                    "nodes": [{
                                                            "id": "circle",
                                                            "type": "h",
                                                            "dom_type": "circle",
                                                            "attrs": {
                                                                "r": 16,
                                                                "cx": 20,
                                                                "cy": 20,
                                                                "fill": "blue"
                                                            }
                                                        },
                                                        {
                                                            "id": "text",
                                                            "nodes": [{
                                                                    "id": "in",
                                                                    "type": "identity"
                                                                },
                                                                {
                                                                    "id": "out",
                                                                    "type": "identity"
                                                                },
                                                                {
                                                                    "id": "get_id",
                                                                    "type": "get",
                                                                    "get_index": "node_id"
                                                                },
                                                                {
                                                                    "id": "display_name",
                                                                    "type": "h_text"
                                                                },
                                                                {
                                                                    "id": "text",
                                                                    "type": "h",
                                                                    "dom_type": "text",
                                                                    "attrs": {
                                                                        "x": 42,
                                                                        "y": 22,
                                                                        "font-size": 18
                                                                    }
                                                                }
                                                            ],
                                                            "edges": [{
                                                                    "from": "in",
                                                                    "to": "get_id"
                                                                },
                                                                {
                                                                    "from": "get_id",
                                                                    "to": "display_name",
                                                                    "as": "text"
                                                                },
                                                                {
                                                                    "from": "display_name",
                                                                    "to": "text",
                                                                    "as": "children"
                                                                },
                                                                {
                                                                    "from": "text",
                                                                    "to": "out"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "id": "in",
                                                            "type": "identity"
                                                        },
                                                        {
                                                            "id": "order",
                                                            "type": "order_inputs",
                                                            "required_data": ["circle", "text"],
                                                            "order": [
                                                                "circle",
                                                                "text"
                                                            ]
                                                        },
                                                        {
                                                            "id": "children_els",
                                                            "type": "children_els"
                                                        },
                                                        {
                                                            "id": "out",
                                                            "type": "identity"
                                                        }
                                                    ],
                                                    "edges": [{
                                                            "from": "in",
                                                            "to": "circle"
                                                        },
                                                        {
                                                            "from": "in",
                                                            "to": "text"
                                                        },
                                                        {
                                                            "from": "circle",
                                                            "to": "order",
                                                            "as": "circle"
                                                        },
                                                        {
                                                            "from": "text",
                                                            "to": "order",
                                                            "as": "text"
                                                        },
                                                        {
                                                            "from": "order",
                                                            "to": "children_els",
                                                            "as": "children"
                                                        },
                                                        {
                                                            "from": "children_els",
                                                            "to": "out",
                                                            "as": "children"
                                                        }
                                                    ]
                                                }
                                            ],
                                            "edges": [{
                                                    "from": "in",
                                                    "to": "children"
                                                },
                                                {"from": "log", "to": "log", "as": "log_value"},
                                                {
                                                    "from": "in",
                                                    "to": "parent_attrs"
                                                },
                                                {
                                                    "from": "parent_attrs",
                                                    "to": "parent",
                                                    "as": "attrs"
                                                },
                                                {
                                                    "from": "children",
                                                    "to": "parent"
                                                },
                                                {
                                                    "from": "parent",
                                                    "to": "out"
                                                }
                                            ]
                                        },
                                        {
                                            "id": "link_svgs",
                                            "run_over_all": true,
                                            "path": ["fn_args", "0", "links"],
                                            "script": "return ({data}) => lib._.get(data[0], data[0].path).map(n => Object.assign({}, data[0], n))"
                                        },
                                        {
                                            "id": "link_template",
                                            "nodes": [{
                                                    "id": "attrs",
                                                    "script": "return ({data}) => ({x1: data.source.x, y1: data.source.y, x2: data.target.x, y2: data.target.y, stroke: 'black'})"
                                                },
                                                {
                                                    "id": "line",
                                                    "type": "h",
                                                    "dom_type": "line"
                                                },
                                                {
                                                    "id": "in",
                                                    "type": "identity"
                                                },
                                                {
                                                    "id": "out",
                                                    "type": "identity"
                                                }
                                            ],
                                            "edges": [{
                                                    "from": "in",
                                                    "to": "attrs"
                                                },
                                                {
                                                    "from": "attrs",
                                                    "to": "line",
                                                    "as": "attrs"
                                                },
                                                {
                                                    "from": "line",
                                                    "to": "out"
                                                }
                                            ]
                                        },
                                        {
                                            "id": "concat_links",
                                            "type": "concat_data"
                                        },
                                        {
                                            "id": "concat_nodes",
                                            "type": "concat_data"
                                        },
                                        {
                                            "id": "concat_all",
                                            "required_data": ["link_els", "node_els"],
                                            "script": "return ({data}) => data.link_els && data.node_els && [].concat(data.link_els, data.node_els)"
                                        },
                                        {
                                            "id": "children_els",
                                            "script": "return ({data}) => ({ value: data.children.reduce((acc, c) => (acc.push(c.el), acc), []), delete: ['children']})"
                                        },
                                        {
                                            "id": "out",
                                            "type": "identity"
                                        },
                                        {
                                            "id": "skip_when_empty_nodes",
                                            "script": "return ({data}) => data.target?.length > 0 ? undefined : []"
                                        },
                                        {
                                            "id": "skip_when_empty_links",
                                            "script": "return ({data}) => data.target?.length > 0 ? undefined : []"
                                        }
                                    ],
                                    "edges": [{
                                            "from": "in",
                                            "to": "node_svgs"
                                        },
                                        {
                                            "from": "in",
                                            "to": "link_svgs"
                                        },
                                        {
                                            "from": "in",
                                            "to": "onclick_fn"
                                        },
                                        {
                                            "from": "onclick_fn",
                                            "to": "node_svgs",
                                            "as": "onclick_fn"
                                        },
                                        {
                                            "from": "in",
                                            "to": "get_nodes"
                                        },
                                        {
                                            "from": "in",
                                            "to": "get_links"
                                        },
                                        {
                                            "from": "get_nodes",
                                            "to": "node_svgs",
                                            "as": "target"
                                        },
                                        {
                                            "from": "get_nodes",
                                            "to": "skip_when_empty_nodes",
                                            "as": "target"
                                        },
                                        {
                                            "from": "get_links",
                                            "to": "link_svgs",
                                            "as": "target"
                                        },
                                        {
                                            "from": "get_links",
                                            "to": "skip_when_empty_links",
                                            "as": "target"
                                        },
                                        {
                                            "from": "node_svgs",
                                            "to": "node_template"
                                        },
                                        {
                                            "from": "link_svgs",
                                            "to": "link_template"
                                        },
                                        {
                                            "from": "node_template",
                                            "to": "concat_nodes",
                                            "as": "concat_value"
                                        },
                                        {
                                            "from": "link_template",
                                            "to": "concat_links",
                                            "as": "concat_value"
                                        },
                                        {
                                            "from": "skip_when_empty_nodes",
                                            "to": "concat_all",
                                            "as": "node_els"
                                        },
                                        {
                                            "from": "skip_when_empty_links",
                                            "to": "concat_all",
                                            "as": "link_els"
                                        },
                                        {
                                            "from": "concat_nodes",
                                            "to": "concat_all",
                                            "as": "node_els"
                                        },
                                        {
                                            "from": "concat_links",
                                            "to": "concat_all",
                                            "as": "link_els"
                                        },
                                        {
                                            "from": "concat_all",
                                            "to": "children_els",
                                            "as": "children"
                                        },
                                        {
                                            "from": "children_els",
                                            "to": "out",
                                            "as": "children"
                                        }
                                    ]
                                },
                                {
                                    "id": "svgs_flatten",
                                    "script": "return ({data}) => data.target instanceof Map ? new Map([...lib.iter.map(data.target.values(), v => [...v])].flat()) : data.target.flat()"
                                },
                                {
                                    "id": "attrs",
                                    "script": "return () => ({id: 'node_parent', width: window.innerWidth, height: window.innerHeight})"
                                }
                            ],
                            "edges": [{
                                    "from": "in",
                                    "to": "get_input"
                                },
                                {
                                    "from": "in",
                                    "to": "svgs"
                                },
                                {
                                    "from": "in",
                                    "to": "attrs"
                                },
                                {
                                    "from": "attrs",
                                    "to": "parent",
                                    "as": "attrs"
                                },
                                {
                                    "from": "svgs",
                                    "to": "parent"
                                },
                                {
                                    "from": "parent",
                                    "to": "out"
                                }
                            ]
                        }
                    ],
                    "edges": [{
                            "from": "in",
                            "to": "node_editor"
                        },
                        {
                            "from": "node_editor",
                            "to": "get_node_editor_el"
                        },
                        {
                            "from": "get_node_editor_el",
                            "to": "out",
                            "as": "children"
                        }
                    ]
                },
                {
                    "id": "base_editor",
                    "type": "h",
                    "dom_type": "div"
                },
                {
                    "id": "concat_children",
                    "type": "children_els"
                }
            ],
            "edges": [{
                    "from": "in",
                    "to": "base_editor_content"
                },
                {
                    "from": "base_editor_content",
                    "to": "base_editor"
                },
                {
                    "from": "base_editor",
                    "to": "out",
                    "as": "return_value"
                }
            ]
        },
        {
            "id": "simulation_subscription",
            "nodes": [{
                    "id": "in",
                    "type": "identity"
                },
                {
                    "id": "out",
                    "type": "identity"
                },
                {
                    "id": "subscription",
                    "script": "return ({data}) => dispatch => { data.simulation.on('tick.ha', () => { requestAnimationFrame(() => dispatch(s => ({ ...s, nodes: data.simulation.nodes().map(n => ({node_id: n.node_id, x: Math.floor(n.x), y: Math.floor(n.y)})), links: data.simulation.force('links').links().map(l => ({source: ({node_id: l.source.node_id, x: Math.floor(l.source.x), y: Math.floor(l.source.y)}), target: ({node_id: l.target.node_id, x: Math.floor(l.target.x), y: Math.floor(l.target.y)})}))  }) ) ) }); return () => data.simulation.on('.ha', null); }"
                }
            ],
            "edges": [{
                    "from": "in",
                    "to": "subscription"
                },
                {
                    "from": "subscription",
                    "to": "out",
                    "as": "subscription"
                }
            ]
        },
        {
            "id": "simulate_layout",
            "required_data": ["display_graph", "graph"],
            "script": "return ({state, data}) => (state.has('simulation') ? state : state.set('simulation', lib.no.d3simulation({data, state}))).get('simulation')"
        },
        {
            "id": "hyperapp",
            "required_data": ["dom", "view", "subscription", "init"],
            "script": "return ({lib, state, data}) => { if(!state.has('dispatch') && data.view && data.dom && data.subscription){ state.set('dispatch', lib.ha.app({ init: data.init, view: (s) => data.view(s).el ?? lib.ha.text('loading...'), node: data.dom, subscriptions: () => [[data.subscription]] })) }}"
        },
        {
            "id": "node_editor_el_selector",
            "type": "el_selector",
            "selector": "#node-editor"
        },
        {
            "id": "node_editor_el",
            "type": "get",
            "get_index": 0
        },
        {
            "id": "verify",
            "script": "return lib.no.verify"
        },
        {
            "id": "node_types",
            "execute": {
                "script": "return lib.no.default_fn(lib, self)"
            },
            "data": {
                "script": "return () => self"
            },
            "el_selector": {
                "script": "return ({data}) => document.querySelector(data.selector);"
            },
            "get": {
                "script": "return ({data}) => ({ value: lib._.get(data, data.get_index), delete: data.delete ? [data.get_index, 'get_index'] : ['get_index']})"
            },
            "constant": {
                "script": "return () => self.value"
            },
            "log": {
                "script": "return ({data}) => console.log(data)"
            },
            "debug": {
                "script": "return lib.no.debug"
            },
            "aggregate_chain": {
                "script": "return lib.no.aggregateChain"
            },
            "concat": {
                "merge_data": false,
                "script": "return lib.no.concatValues"
            },
            "concat_data": {
                "run_over_all": true,
                "merge_data": false,
                "script": "return ({data}) => [{value: data}]"
            },
            "h": {
                "script": "return lib.no.hFn"
            },
            "h_text": {
                "script": "return ({data}) => ({ value: lib.ha.text(data.text), delete: ['text'] })"
            },
            "fn_def": {
                "script": "return lib.no.fnDef"
            },
            "fn_return": {
                "script": "return lib.no.fnReturn"
            },
            "identity": {
                "script": "return ({data}) => data"
            },
            "order_inputs": {
                "script": "return ({data}) => ({ value: data.order.map(o => data[o]).reduce((acc, v) => v === undefined || acc.ordered === undefined ? {} : {ordered: acc.ordered.concat([v])}, {ordered: []}).ordered, delete: ['order'].concat(data.order) })"
            },
            "children_els": {
                "script": "return ({data}) => ({value: data.children.reduce((acc, c) => (acc.push(c.el), acc), []).filter(v => v), delete: ['children'].concat(data.order) })"
            },
            "delete_data": {
                "script": "return ({data}) => ({ value: {...data}, delete: ['paths'].concat(data.paths) })"
            }
        },
        {
            "id": "log",
            "type": "log"
        },
        {
            "id": "debug",
            "type": "debug"
        },
        {
            "id": "get_graph",
            "script": "return ({data}) => data.graph"
        }
    ],
    "edges": [
        { "from": "log", "to": "log", "as": "log_value" },
        {
            "from": "in",
            "to": "get_graph"
        },
        {
            "from": "get_graph",
            "to": "flatten",
            "as": "display_graph"
        },
        {
            "from": "flatten",
            "to": "verify"
        },
        {
            "from": "verify",
            "to": "node_types"
        },
        {
            "from": "node_types",
            "to": "replace_node_types_fn",
            "as": "node_types"
        },
        {
            "from": "replace_node_types_fn",
            "to": "replace_node_types",
            "as": "map_fn"
        },
        {
            "from": "verify",
            "to": "replace_node_types_args"
        },
        {
            "from": "replace_node_types_args",
            "to": "replace_node_types"
        },
        {
            "from": "verify",
            "to": "replace_node_types",
            "as": "target"
        },
        {
            "from": "verify",
            "to": "replace_node_types_fn"
        },
        {
            "from": "replace_node_types",
            "to": "node_editor_el_selector"
        },
        {
            "from": "replace_node_types",
            "to": "hyperapp_view"
        },
        {
            "from": "replace_node_types",
            "to": "initial_state"
        },
        {
            "from": "replace_node_types",
            "to": "simulate_layout"
        },
        {
            "from": "simulate_layout",
            "to": "simulation_subscription",
            "as": "simulation"
        },
        {
            "from": "initial_state",
            "to": "hyperapp",
            "as": "init"
        },
        {
            "from": "simulate_layout",
            "to": "hyperapp_view",
            "as": "simulation"
        },
        {
            "from": "simulation_subscription",
            "to": "hyperapp"
        },
        {
            "from": "replace_node_types",
            "to": "hyperapp"
        },
        {
            "from": "node_editor_el_selector",
            "to": "hyperapp",
            "as": "dom"
        },
        {
            "from": "hyperapp_view",
            "to": "hyperapp",
            "as": "view"
        }
    ]
}