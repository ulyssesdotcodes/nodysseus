{
    "description": "function composition",
    "script": "return lib.no.default_fn(lib, self)",
    "nodes": {
        "content_el_selector": {
            "type": "el_selector",
            "selector": "#content"
        },
        "content_el": {
            "type": "get",
            "index": 0
        },
        "base_editor_content": {
            "description": "sibling aggregation",
            "type": "aggregate",
            "nodes": {
                "node_editor": {
                    "type": "h",
                    "dom_type": "div"
                },
                "text_editor": {
                    "nodes": {
                        "h_merge": {
                            "script": "return () => ({attrs: () => ({class: {editor: true}}) })"
                        },
                        "h": {
                            "type": "h",
                            "dom_type": "div"
                        }
                    },
                    "edges": [
                        {"from": "in", "to": "h_merge"},
                        {"from": "h_merge", "to": "h"},
                        {"from": "h", "to": "out"}
                    ]
                }
            },
            "edges": [
                {"from": "in", "to": "node_editor"},
                {"from": "node_editor", "to": "text_editor"}
            ]
        },
        "base_editor": {
            "type": "h",
            "dom_type": "div"
        },
        "hyperapp_input": {
            "type": "merge"
        },
        "hyperapp": {
            "script": "return (state, input) => { if(!state.has('dispatch') && input.view && input.dom){ state.set('dispatch', lib.ha.app({ init: {}, view: input.view, node: input.dom })); } return state.get('dispatch'); }"
        }
    },
    "node_types": {
        "el_selector": {
            "script": "return () => document.querySelector(self.selector);"
        },
        "get": {
            "script": "return () => input.target[input.index ?? self.index]"
        },
        "constant": {
            "script": "return () => self.value"
        },
        "merge": {
            "script": "return (state, input) => state.set('input', Object.assign({}, state.get('input') ?? {}, input)).get('input')"
        },
        "log": {
            "script": "return (_, input) => console.log(input)"
        },

        "aggregate": {
            "script": "return lib.no.aggregate_fn(lib, self)"
        },
        "h": {
            "script": "return lib.no.h_fn(lib, self)"
        }
    },
    "edges": [
        {
            "from": "in",
            "to": "content_el_selector"
        },
        {
            "from": "content_el_selector",
            "to": "hyperapp_input",
            "as": "dom"
        },
        {
            "from": "in",
            "to": "base_editor_content"
        },
        {
            "from": "base_editor_content",
            "to": "base_editor",
            "as": "children"
        },
        {
            "from": "base_editor",
            "to": "hyperapp_input",
            "as": "view"
        },
        {
            "from": "hyperapp_input",
            "to": "hyperapp"
        }
    ]
}