{
    "nodes": {
        "in": {
            "type": "in"
        },
        "content_el_selector": {
            "type": "el_selector",
            "selector": "#content"
        },
        "content_el": {
            "type": "get",
            "index": 0
        },
        "base_editor": {
            "type": "dom",
            "dom_type": "div",
            "nodes": {
                "in": {
                    "type": "in"
                },
                "node_editor": {
                    "type": "dom",
                    "dom_type": "div"
                },
                "text_editor": {
                    "type": "dom",
                    "dom_type": "div"
                },
                "out": {
                    "type": "out"
                }
            },
            "edges": [
                ["in", "node_editor"],
                ["node_editor", "text_editor"],
                ["text_editor", "out"]
            ]
        },
        "hyperapp": {
            "script": "if(!state.has('dispatch') && input.view && input.dom){ state.set('dispatch', lib.app({ init: {}, view: haState => input.view(haState).then(v => v.children[0]), node: input.dom }) } return state.get('dispatch');"
        },
        "out": {
            "type": "out"
        }
    },
    "node_types": {
        "in": {
            "script": "return input"
        },
        "out": {
            "script": "return input"
        },
        "el_selector": {
            "script": "return document.querySelector(node.selector);"
        },
        "get": {
            "script": "return input.target[input.index ?? node.index]"
        },
        "constant": {
            "script": "return node.value"
        },
        "dom": {
            "script": "return async props => { const output = await node.nodes ? lib.runGraph(state, node, props ?? {}) : Promise.resolve({children: [], attributes: {}}); return { children: (input.children ?? []).concat(lib.h(node.dom_type, output.attributes ?? {}, output.children)) }}"
        }
    },
    "edges": [
        {
            "from": "in",
            "to": "content_el_selector"
        },
        {
            "from": "content_el_selector",
            "to": "hyperapp",
            "as": "dom"
        },
        {
            "from": "in",
            "to": "base_editor"
        },
        {
            "from": "base_editor",
            "to": "hyperapp",
            "as": "view"
        }
    ]
}