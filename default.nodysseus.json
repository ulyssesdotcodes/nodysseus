{
    "description": "function composition",
    "script": "return lib.no.default_fn(lib, self)",
    "nodes": {
        "content_el_selector": {
            "type": "el_selector",
            "selector": "#content"
        },
        "content_el": {
            "type": "get",
            "index": 0
        },
        "base_editor_content_merge": "merge",
        "base_editor_view": {
            "type": "compiled_fn",
            "nodes": {
                "base_editor_content": {
                    "nodes": {
                        "node_editor": {
                            "type": "execute",
                            "nodes": {
                                "parent": {
                                    "type": "h",
                                    "dom_type": "svg"
                                },
                                "parent_input": "merge",
                                "get_input": {
                                    "script": "return (state, input) =>  input.node_editor.nodes"
                                },
                                "node_svgs": {
                                    "type": "aggregate",
                                    "nodes": {}
                                },
                                "attrs": {
                                    "script": "return (state, input) => ({id: 'node_parent', width: window.innerWidth, height: window.innerHeight})"
                                }
                            },
                            "edges": [
                                {
                                    "from": "in",
                                    "to": "get_input"
                                },
                                {
                                    "from": "get_input",
                                    "to": "node_svgs"
                                },
                                {
                                    "from": "in",
                                    "to": "attrs"
                                },
                                {
                                    "from": "attrs",
                                    "to": "parent_input",
                                    "as": "attrs"
                                },
                                {
                                    "from": "node_svgs",
                                    "to": "parent_input",
                                    "as": "children"
                                },
                                {
                                    "from": "parent_input",
                                    "to": "parent"
                                },
                                {
                                    "from": "parent",
                                    "to": "out"
                                }
                            ]
                        },
                        "text_editor": {
                            "type": "execute",
                            "nodes": {
                                "h_merge": {
                                    "script": "return () => ({})"
                                },
                                "h": {
                                    "type": "h",
                                    "attrs": {"id": "text-editor"},
                                    "dom_type": "div"
                                }
                            },
                            "edges": [
                                {
                                    "from": "in",
                                    "to": "h_merge"
                                },
                                {
                                    "from": "h_merge",
                                    "to": "h"
                                },
                                {
                                    "from": "h",
                                    "to": "out"
                                }
                            ]
                        }
                    },
                    "edges": [
                        {
                            "from": "in",
                            "to": "node_editor"
                        },
                        {
                            "from": "node_editor",
                            "to": "text_editor"
                        }
                    ]
                },
                "base_editor": {
                    "type": "h",
                    "dom_type": "div"
                },
                "apply_fn_in": "merge",
                "apply_node_template": {
                    "path": [
                        "nodes",
                        "node_editor",
                        "nodes",
                        "node_svgs",
                        "nodes"
                    ],
                    "script": "return lib.no.apply_template(lib, self)",
                    "template": {
                        "type": "execute",
                        "nodes": {
                            "parent": {
                                "type": "h",
                                "dom_type": "svg",
                                "attrs": {
                                    "width": 128,
                                    "height": 64
                                }
                            },
                            "get_input": {
                                "script": "return (state, input) => input[input.parent]"
                            },
                            "parent_input": "merge",
                            "parent_attrs": {
                                "script": "return (state, input) => ({ x: input.x, y: input.y, id: input.node_id })"
                            },
                            "children": {
                                "type": "aggregate",
                                "nodes": {
                                    "circle": {
                                        "type": "h",
                                        "dom_type": "circle",
                                        "attrs": {
                                            "r": 16,
                                            "cx": 20,
                                            "cy": 20,
                                            "fill": "blue"
                                        }
                                    },
                                    "text": {
                                        "type": "execute",
                                        "nodes": {
                                            "get_id": {
                                                "type": "get",
                                                "index": "node_id"
                                            },
                                            "display_name": {
                                                "type": "h_text",
                                                "text": "hi"
                                            },
                                            "text": {
                                                "type": "h",
                                                "dom_type": "text",
                                                "attrs": {
                                                    "x": 42,
                                                    "y": 22,
                                                    "font-size": 18
                                                }
                                            }
                                        },
                                        "edges": [
                                            {
                                                "from": "in",
                                                "to": "get_id"
                                            },
                                            {
                                                "from": "get_id",
                                                "to": "display_name",
                                                "as": "text"
                                            },
                                            {
                                                "from": "display_name",
                                                "to": "text",
                                                "as": "children"
                                            },
                                            {
                                                "from": "text",
                                                "to": "out"
                                            }
                                        ]
                                    }
                                },
                                "edges": [
                                    {
                                        "from": "in",
                                        "to": "circle"
                                    },
                                    {
                                        "from": "circle",
                                        "to": "text"
                                    }
                                ]
                            }
                        },
                        "edges": [
                            {
                                "from": "in",
                                "to": "get_input"
                            },
                            {
                                "from": "get_input",
                                "to": "parent_attrs"
                            },
                            {
                                "from": "parent_attrs",
                                "to": "parent_input",
                                "as": "attrs"
                            },
                            {
                                "from": "get_input",
                                "to": "children"
                            },
                            {
                                "from": "children",
                                "to": "parent_input",
                                "as": "children"
                            },
                            {
                                "from": "parent_input",
                                "to": "parent"
                            },
                            {
                                "from": "parent",
                                "to": "out"
                            }
                        ]
                    }
                },
                "run_in": "merge",
                "apply_node_template_run": {
                    "type": "run_fn",
                    "run_type": "aggregate"
                },
                "log_nt": "log"
            },
            "edges": [
                {
                    "from": "in",
                    "to": "base_editor_content"
                },
                {
                    "from": "in",
                    "to": "apply_fn_in",
                    "as": "source"
                },
                {
                    "from": "base_editor_content",
                    "to": "apply_fn_in",
                    "as": "target"
                },
                {
                    "from": "apply_fn_in",
                    "to": "apply_node_template"
                },
                {
                    "from": "apply_node_template",
                    "to": "run_in",
                    "as": "fn"
                },
                {
                    "from": "in",
                    "to": "run_in",
                    "as": "data"
                },
                {
                    "from": "run_in",
                    "to": "apply_node_template_run"
                },
                {
                    "from": "apply_node_template_run",
                    "to": "base_editor",
                    "as": "children"
                },
                {
                    "from": "base_editor",
                    "to": "out"
                }
            ]
        },
        "simulate_layout": {
            "script": "return (state, input) => (state.has('simulation') ? state : state.set('simulation', lib.no.d3simulation(state, input))).get('simulation')"
        },
        "simulation_dispatch": {
            "type": "compiled_fn",
            "nodes": {
                "get_nodes": {
                    "script": "return (state, input) => requestAnimationFrame(() => {if(!(input.dispatch && input.simulation && input.action)){ return } input.dispatch(input.action, Object.fromEntries(input.simulation.nodes().map(n => [n.node_id, n]))) })"
                }
            }
        },
        "simulation_subscription_in": "merge",
        "simulation_subscription": {
            "type": "execute",
            "nodes": {
                "subscription": {
                    "script": "return (state, input) => (dispatch, props) => { input.simulation.on('tick.ha', function(v){ input.fn({simulation: this, dispatch: dispatch, action: props.action})}); return () => input.simulation.on('.ha', null); }"
                }
            }
        },
        "hyperapp_input": {
            "type": "merge"
        },
        "hyperapp_state": {
            "script": "return (state, input) => { state.set('input', Object.assign({}, state.get('input') ?? {}, input)); return { node_editor: state.get('input') } }"
        },
        "hyperapp": {
            "script": "return (state, input) => { if(!state.has('dispatch') && input.view && input.dom && input.simulation_subscription){ state.set('dispatch', lib.ha.app({ init: input.init ?? {}, view: (s) => input.view(s), subscriptions:() => [[input.simulation_subscription, { action: (state, payload) => Object.assign({}, state, {node_editor: {nodes: payload}}) }]] , node: input.dom })); } return state.get('dispatch'); }"
        }
    },
    "node_types": {
        "execute": {
            "script": "return lib.no.default_fn(lib, self)"
        },
        "data": {
            "script": "return () => self"
        },
        "el_selector": {
            "script": "return () => document.querySelector(self.selector);"
        },
        "get": {
            "script": "return (state, input) => input[input.get_index ?? self.index]"
        },
        "constant": {
            "script": "return () => self.value"
        },
        "merge": {
            "script": "return (state, input) => state.set('input', Object.assign({}, state.get('input') ?? {}, input)).get('input')"
        },
        "log": {
            "script": "return (_, input) => console.log(input)"
        },
        "aggregate": {
            "script": "return lib.no.aggregate_fn(lib, self)"
        },
        "fold": {
            "script": "return (state, input) => (val) => lib._.reduce(lib.no.aggregate_fn(lib, self)(state, input), (v, fn) => fn(v), val)"
        },
        "h": {
            "script": "return lib.no.h_fn(lib, self)"
        },
        "h_text": {
            "script": "return (state, input) => lib.ha.text(input.text ?? self.text)"
        },
        "compiled_fn": {
            "script": "const compiled_fn = lib.no.default_fn(lib, self); return (state, fn_input) => (input) => { const result = compiled_fn(state, lib._.merge(fn_input, input)); return (result === undefined ? state : state.set('output', result)).get('output') }"
        },
        "apply_fn": {
            "script": "return (state, input) => lib.util.overPath(self.path)(n => n.map(input.fn))(input.target)"
        },
        "merge_values": {
            "script": "return (state, input) => lib.util.overPath(self.path, {})(v => lib._.merge(v, input.values))"
        },
        "run_fn": {
            "script": "return (state, input) => { if(!input.fn || !input.data) { return; } if(!lib._.isEqual(state.get('fn'), input.fn)) { state.set('compiled_fn', (self.run_type === 'aggregate' ? lib.no.aggregate_fn : lib.no.default_fn)(lib, input.fn))} state.set('fn', input.fn); return state.get('compiled_fn')(state, input.data); }"
        }
    },
    "edges": [
        {
            "from": "in",
            "to": "content_el_selector"
        },
        {
            "from": "in",
            "to": "hyperapp_state"
        },
        {
            "from": "in",
            "to": "simulate_layout"
        },
        {
            "from": "simulate_layout",
            "to": "simulation_subscription_in",
            "as": "simulation"
        },
        {
            "from": "in",
            "to": "simulation_dispatch"
        },
        {
            "from": "simulation_dispatch",
            "to": "simulation_subscription_in",
            "as": "fn"
        },
        {
            "from": "simulation_subscription_in",
            "to": "simulation_subscription"
        },
        {
            "from": "simulation_subscription",
            "to": "hyperapp_input",
            "as": "simulation_subscription"
        },
        {
            "from": "hyperapp_state",
            "to": "hyperapp_input",
            "as": "init"
        },
        {
            "from": "in",
            "to": "base_editor_content_merge",
            "as": "graph"
        },
        {
            "from": "content_el_selector",
            "to": "hyperapp_input",
            "as": "dom"
        },
        {
            "from": "base_editor_content_merge",
            "to": "base_editor_view"
        },
        {
            "from": "base_editor_view",
            "to": "hyperapp_input",
            "as": "view"
        },
        {
            "from": "hyperapp_input",
            "to": "hyperapp"
        }
    ]
}