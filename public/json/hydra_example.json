{
    "out": "main/out",
    "id": "new_hydra",
    "nodes": [
        {
            "id": "main/out",
            "ref": "return"
        },
        {
            "id": "undefined.out",
            "out": "out",
            "nodes": [
                {
                    "id": "self",
                    "ref": "arg",
                    "value": "self"
                },
                {
                    "id": "tex",
                    "ref": "arg",
                    "value": "tex"
                },
                {
                    "id": "args_tex",
                    "ref": "array"
                },
                {
                    "id": "args_no_tex",
                    "ref": "array"
                },
                {
                    "id": "args",
                    "ref": "if"
                },
                {
                    "id": "out_fn",
                    "value": "out"
                },
                {
                    "id": "out",
                    "ref": "call"
                }
            ],
            "edges": [
                {
                    "from": "tex",
                    "to": "args_tex",
                    "as": "a0"
                },
                {
                    "from": "tex",
                    "to": "args",
                    "as": "pred"
                },
                {
                    "from": "args_tex",
                    "to": "args",
                    "as": "true"
                },
                {
                    "from": "args_no_tex",
                    "to": "args",
                    "as": "false"
                },
                {
                    "from": "args",
                    "to": "out",
                    "as": "args"
                },
                {
                    "from": "self",
                    "to": "out",
                    "as": "self"
                },
                {
                    "from": "out_fn",
                    "to": "out",
                    "as": "fn"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "noise",
                "type": "src",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scale",
                        "default": 10
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0.1
                    }
                ],
                "glsl": "   return vec4(vec3(_noise(vec3(_st*scale, offset*time))), 1.0);"
            },
            "id": "undefined.noise",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scale"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "noise",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scale",
                    "type": "float",
                    "ref": "arg",
                    "value": "scale"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "voronoi",
                "type": "src",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scale",
                        "default": 5
                    },
                    {
                        "type": "float",
                        "name": "speed",
                        "default": 0.3
                    },
                    {
                        "type": "float",
                        "name": "blending",
                        "default": 0.3
                    }
                ],
                "glsl": "   vec3 color = vec3(.0);\n   // Scale\n   _st *= scale;\n   // Tile the space\n   vec2 i_st = floor(_st);\n   vec2 f_st = fract(_st);\n   float m_dist = 10.;  // minimun distance\n   vec2 m_point;        // minimum point\n   for (int j=-1; j<=1; j++ ) {\n   for (int i=-1; i<=1; i++ ) {\n   vec2 neighbor = vec2(float(i),float(j));\n   vec2 p = i_st + neighbor;\n   vec2 point = fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n   point = 0.5 + 0.5*sin(time*speed + 6.2831*point);\n   vec2 diff = neighbor + point - f_st;\n   float dist = length(diff);\n   if( dist < m_dist ) {\n   m_dist = dist;\n   m_point = point;\n   }\n   }\n   }\n   // Assign a color using the closest point position\n   color += dot(m_point,vec2(.3,.6));\n   color *= 1.0 - blending*m_dist;\n   return vec4(color, 1.0);"
            },
            "id": "undefined.voronoi",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scale"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "speed"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "blending"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "voronoi",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scale",
                    "type": "float",
                    "ref": "arg",
                    "value": "scale"
                },
                {
                    "id": "speed",
                    "type": "float",
                    "ref": "arg",
                    "value": "speed"
                },
                {
                    "id": "blending",
                    "type": "float",
                    "ref": "arg",
                    "value": "blending"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "osc",
                "type": "src",
                "inputs": [
                    {
                        "type": "float",
                        "name": "frequency",
                        "default": 60
                    },
                    {
                        "type": "float",
                        "name": "sync",
                        "default": 0.1
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0
                    }
                ],
                "glsl": "   vec2 st = _st;\n   float r = sin((st.x-offset/frequency+time*sync)*frequency)*0.5  + 0.5;\n   float g = sin((st.x+time*sync)*frequency)*0.5 + 0.5;\n   float b = sin((st.x+offset/frequency+time*sync)*frequency)*0.5  + 0.5;\n   return vec4(r, g, b, 1.0);"
            },
            "id": "undefined.osc",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "frequency"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "sync"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "osc",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "frequency",
                    "type": "float",
                    "ref": "arg",
                    "value": "frequency"
                },
                {
                    "id": "sync",
                    "type": "float",
                    "ref": "arg",
                    "value": "sync"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "shape",
                "type": "src",
                "inputs": [
                    {
                        "type": "float",
                        "name": "sides",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "radius",
                        "default": 0.3
                    },
                    {
                        "type": "float",
                        "name": "smoothing",
                        "default": 0.01
                    }
                ],
                "glsl": "   vec2 st = _st * 2. - 1.;\n   // Angle and radius from the current pixel\n   float a = atan(st.x,st.y)+3.1416;\n   float r = (2.*3.1416)/sides;\n   float d = cos(floor(.5+a/r)*r-a)*length(st);\n   return vec4(vec3(1.0-smoothstep(radius,radius + smoothing + 0.0000001,d)), 1.0);"
            },
            "id": "undefined.shape",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "sides"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "radius"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "smoothing"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "shape",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "sides",
                    "type": "float",
                    "ref": "arg",
                    "value": "sides"
                },
                {
                    "id": "radius",
                    "type": "float",
                    "ref": "arg",
                    "value": "radius"
                },
                {
                    "id": "smoothing",
                    "type": "float",
                    "ref": "arg",
                    "value": "smoothing"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "gradient",
                "type": "src",
                "inputs": [
                    {
                        "type": "float",
                        "name": "speed",
                        "default": 0
                    }
                ],
                "glsl": "   return vec4(_st, sin(time*speed), 1.0);"
            },
            "id": "undefined.gradient",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "speed"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "gradient",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "speed",
                    "type": "float",
                    "ref": "arg",
                    "value": "speed"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "src",
                "type": "src",
                "inputs": [
                    {
                        "type": "sampler2D",
                        "name": "tex",
                        "default": null
                    }
                ],
                "glsl": "   //  vec2 uv = gl_FragCoord.xy/vec2(1280., 720.);\n   return texture2D(tex, fract(_st));"
            },
            "id": "undefined.src",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "src",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "type": "sampler2D",
                    "ref": "arg",
                    "value": "tex"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "solid",
                "type": "src",
                "inputs": [
                    {
                        "type": "float",
                        "name": "r",
                        "default": 0
                    },
                    {
                        "type": "float",
                        "name": "g",
                        "default": 0
                    },
                    {
                        "type": "float",
                        "name": "b",
                        "default": 0
                    },
                    {
                        "type": "float",
                        "name": "a",
                        "default": 1
                    }
                ],
                "glsl": "   return vec4(r, g, b, a);"
            },
            "id": "undefined.solid",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "r"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "g"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "b"
                },
                {
                    "as": "arg3",
                    "to": "args",
                    "from": "a"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "solid",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "r",
                    "type": "float",
                    "ref": "arg",
                    "value": "r"
                },
                {
                    "id": "g",
                    "type": "float",
                    "ref": "arg",
                    "value": "g"
                },
                {
                    "id": "b",
                    "type": "float",
                    "ref": "arg",
                    "value": "b"
                },
                {
                    "id": "a",
                    "type": "float",
                    "ref": "arg",
                    "value": "a"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "rotate",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "angle",
                        "default": 10
                    },
                    {
                        "type": "float",
                        "name": "speed",
                        "default": 0
                    }
                ],
                "glsl": "   vec2 xy = _st - vec2(0.5);\n   float ang = angle + speed *time;\n   xy = mat2(cos(ang),-sin(ang), sin(ang),cos(ang))*xy;\n   xy += 0.5;\n   return xy;"
            },
            "id": "undefined.rotate",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "angle"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "speed"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "rotate",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "angle",
                    "type": "float",
                    "ref": "arg",
                    "value": "angle"
                },
                {
                    "id": "speed",
                    "type": "float",
                    "ref": "arg",
                    "value": "speed"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "scale",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 1.5
                    },
                    {
                        "type": "float",
                        "name": "xMult",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "yMult",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "offsetX",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "offsetY",
                        "default": 0.5
                    }
                ],
                "glsl": "   vec2 xy = _st - vec2(offsetX, offsetY);\n   xy*=(1.0/vec2(amount*xMult, amount*yMult));\n   xy+=vec2(offsetX, offsetY);\n   return xy;\n   "
            },
            "id": "undefined.scale",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "amount"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "xMult"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "yMult"
                },
                {
                    "as": "arg3",
                    "to": "args",
                    "from": "offsetX"
                },
                {
                    "as": "arg4",
                    "to": "args",
                    "from": "offsetY"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "scale",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                },
                {
                    "id": "xMult",
                    "type": "float",
                    "ref": "arg",
                    "value": "xMult"
                },
                {
                    "id": "yMult",
                    "type": "float",
                    "ref": "arg",
                    "value": "yMult"
                },
                {
                    "id": "offsetX",
                    "type": "float",
                    "ref": "arg",
                    "value": "offsetX"
                },
                {
                    "id": "offsetY",
                    "type": "float",
                    "ref": "arg",
                    "value": "offsetY"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "pixelate",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "pixelX",
                        "default": 20
                    },
                    {
                        "type": "float",
                        "name": "pixelY",
                        "default": 20
                    }
                ],
                "glsl": "   vec2 xy = vec2(pixelX, pixelY);\n   return (floor(_st * xy) + 0.5)/xy;"
            },
            "id": "undefined.pixelate",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "pixelX"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "pixelY"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "pixelate",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "pixelX",
                    "type": "float",
                    "ref": "arg",
                    "value": "pixelX"
                },
                {
                    "id": "pixelY",
                    "type": "float",
                    "ref": "arg",
                    "value": "pixelY"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "posterize",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "bins",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "gamma",
                        "default": 0.6
                    }
                ],
                "glsl": "   vec4 c2 = pow(_c0, vec4(gamma));\n   c2 *= vec4(bins);\n   c2 = floor(c2);\n   c2/= vec4(bins);\n   c2 = pow(c2, vec4(1.0/gamma));\n   return vec4(c2.xyz, _c0.a);"
            },
            "id": "undefined.posterize",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "bins"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "gamma"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "posterize",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "bins",
                    "type": "float",
                    "ref": "arg",
                    "value": "bins"
                },
                {
                    "id": "gamma",
                    "type": "float",
                    "ref": "arg",
                    "value": "gamma"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "shift",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "r",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "g",
                        "default": 0
                    },
                    {
                        "type": "float",
                        "name": "b",
                        "default": 0
                    },
                    {
                        "type": "float",
                        "name": "a",
                        "default": 0
                    }
                ],
                "glsl": "   vec4 c2 = vec4(_c0);\n   c2.r = fract(c2.r + r);\n   c2.g = fract(c2.g + g);\n   c2.b = fract(c2.b + b);\n   c2.a = fract(c2.a + a);\n   return vec4(c2.rgba);"
            },
            "id": "undefined.shift",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "r"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "g"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "b"
                },
                {
                    "as": "arg3",
                    "to": "args",
                    "from": "a"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "shift",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "r",
                    "type": "float",
                    "ref": "arg",
                    "value": "r"
                },
                {
                    "id": "g",
                    "type": "float",
                    "ref": "arg",
                    "value": "g"
                },
                {
                    "id": "b",
                    "type": "float",
                    "ref": "arg",
                    "value": "b"
                },
                {
                    "id": "a",
                    "type": "float",
                    "ref": "arg",
                    "value": "a"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "repeat",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "repeatX",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "repeatY",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "offsetX",
                        "default": 0
                    },
                    {
                        "type": "float",
                        "name": "offsetY",
                        "default": 0
                    }
                ],
                "glsl": "   vec2 st = _st * vec2(repeatX, repeatY);\n   st.x += step(1., mod(st.y,2.0)) * offsetX;\n   st.y += step(1., mod(st.x,2.0)) * offsetY;\n   return fract(st);"
            },
            "id": "undefined.repeat",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "repeatX"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "repeatY"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "offsetX"
                },
                {
                    "as": "arg3",
                    "to": "args",
                    "from": "offsetY"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "repeat",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "repeatX",
                    "type": "float",
                    "ref": "arg",
                    "value": "repeatX"
                },
                {
                    "id": "repeatY",
                    "type": "float",
                    "ref": "arg",
                    "value": "repeatY"
                },
                {
                    "id": "offsetX",
                    "type": "float",
                    "ref": "arg",
                    "value": "offsetX"
                },
                {
                    "id": "offsetY",
                    "type": "float",
                    "ref": "arg",
                    "value": "offsetY"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateRepeat",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "repeatX",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "repeatY",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "offsetX",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "offsetY",
                        "default": 0.5
                    }
                ],
                "glsl": "   vec2 st = _st * vec2(repeatX, repeatY);\n   st.x += step(1., mod(st.y,2.0)) + _c0.r * offsetX;\n   st.y += step(1., mod(st.x,2.0)) + _c0.g * offsetY;\n   return fract(st);"
            },
            "id": "undefined.modulateRepeat",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "repeatX"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "repeatY"
                },
                {
                    "as": "arg3",
                    "to": "args",
                    "from": "offsetX"
                },
                {
                    "as": "arg4",
                    "to": "args",
                    "from": "offsetY"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateRepeat",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "repeatX",
                    "type": "float",
                    "ref": "arg",
                    "value": "repeatX"
                },
                {
                    "id": "repeatY",
                    "type": "float",
                    "ref": "arg",
                    "value": "repeatY"
                },
                {
                    "id": "offsetX",
                    "type": "float",
                    "ref": "arg",
                    "value": "offsetX"
                },
                {
                    "id": "offsetY",
                    "type": "float",
                    "ref": "arg",
                    "value": "offsetY"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "repeatX",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "reps",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0
                    }
                ],
                "glsl": "   vec2 st = _st * vec2(reps, 1.0);\n   //  float f =  mod(_st.y,2.0);\n   st.y += step(1., mod(st.x,2.0))* offset;\n   return fract(st);"
            },
            "id": "undefined.repeatX",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "reps"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "repeatX",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "reps",
                    "type": "float",
                    "ref": "arg",
                    "value": "reps"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateRepeatX",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "reps",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0.5
                    }
                ],
                "glsl": "   vec2 st = _st * vec2(reps, 1.0);\n   //  float f =  mod(_st.y,2.0);\n   st.y += step(1., mod(st.x,2.0)) + _c0.r * offset;\n   return fract(st);"
            },
            "id": "undefined.modulateRepeatX",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "reps"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateRepeatX",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "reps",
                    "type": "float",
                    "ref": "arg",
                    "value": "reps"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "repeatY",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "reps",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0
                    }
                ],
                "glsl": "   vec2 st = _st * vec2(1.0, reps);\n   //  float f =  mod(_st.y,2.0);\n   st.x += step(1., mod(st.y,2.0))* offset;\n   return fract(st);"
            },
            "id": "undefined.repeatY",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "reps"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "repeatY",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "reps",
                    "type": "float",
                    "ref": "arg",
                    "value": "reps"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateRepeatY",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "reps",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0.5
                    }
                ],
                "glsl": "   vec2 st = _st * vec2(reps, 1.0);\n   //  float f =  mod(_st.y,2.0);\n   st.x += step(1., mod(st.y,2.0)) + _c0.r * offset;\n   return fract(st);"
            },
            "id": "undefined.modulateRepeatY",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "reps"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateRepeatY",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "reps",
                    "type": "float",
                    "ref": "arg",
                    "value": "reps"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "kaleid",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "nSides",
                        "default": 4
                    }
                ],
                "glsl": "   vec2 st = _st;\n   st -= 0.5;\n   float r = length(st);\n   float a = atan(st.y, st.x);\n   float pi = 2.*3.1416;\n   a = mod(a,pi/nSides);\n   a = abs(a-pi/nSides/2.);\n   return r*vec2(cos(a), sin(a));"
            },
            "id": "undefined.kaleid",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "nSides"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "kaleid",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "nSides",
                    "type": "float",
                    "ref": "arg",
                    "value": "nSides"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateKaleid",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "nSides",
                        "default": 4
                    }
                ],
                "glsl": "   vec2 st = _st - 0.5;\n   float r = length(st);\n   float a = atan(st.y, st.x);\n   float pi = 2.*3.1416;\n   a = mod(a,pi/nSides);\n   a = abs(a-pi/nSides/2.);\n   return (_c0.r+r)*vec2(cos(a), sin(a));"
            },
            "id": "undefined.modulateKaleid",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "nSides"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateKaleid",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "nSides",
                    "type": "float",
                    "ref": "arg",
                    "value": "nSides"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "scroll",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scrollX",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "scrollY",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "speedX",
                        "default": 0
                    },
                    {
                        "type": "float",
                        "name": "speedY",
                        "default": 0
                    }
                ],
                "glsl": "\n   _st.x += scrollX + time*speedX;\n   _st.y += scrollY + time*speedY;\n   return fract(_st);"
            },
            "id": "undefined.scroll",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scrollX"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "scrollY"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "speedX"
                },
                {
                    "as": "arg3",
                    "to": "args",
                    "from": "speedY"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "scroll",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scrollX",
                    "type": "float",
                    "ref": "arg",
                    "value": "scrollX"
                },
                {
                    "id": "scrollY",
                    "type": "float",
                    "ref": "arg",
                    "value": "scrollY"
                },
                {
                    "id": "speedX",
                    "type": "float",
                    "ref": "arg",
                    "value": "speedX"
                },
                {
                    "id": "speedY",
                    "type": "float",
                    "ref": "arg",
                    "value": "speedY"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "scrollX",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scrollX",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "speed",
                        "default": 0
                    }
                ],
                "glsl": "   _st.x += scrollX + time*speed;\n   return fract(_st);"
            },
            "id": "undefined.scrollX",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scrollX"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "speed"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "scrollX",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scrollX",
                    "type": "float",
                    "ref": "arg",
                    "value": "scrollX"
                },
                {
                    "id": "speed",
                    "type": "float",
                    "ref": "arg",
                    "value": "speed"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateScrollX",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scrollX",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "speed",
                        "default": 0
                    }
                ],
                "glsl": "   _st.x += _c0.r*scrollX + time*speed;\n   return fract(_st);"
            },
            "id": "undefined.modulateScrollX",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "scrollX"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "speed"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateScrollX",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "scrollX",
                    "type": "float",
                    "ref": "arg",
                    "value": "scrollX"
                },
                {
                    "id": "speed",
                    "type": "float",
                    "ref": "arg",
                    "value": "speed"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "scrollY",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scrollY",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "speed",
                        "default": 0
                    }
                ],
                "glsl": "   _st.y += scrollY + time*speed;\n   return fract(_st);"
            },
            "id": "undefined.scrollY",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scrollY"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "speed"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "scrollY",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scrollY",
                    "type": "float",
                    "ref": "arg",
                    "value": "scrollY"
                },
                {
                    "id": "speed",
                    "type": "float",
                    "ref": "arg",
                    "value": "speed"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateScrollY",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scrollY",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "speed",
                        "default": 0
                    }
                ],
                "glsl": "   _st.y += _c0.r*scrollY + time*speed;\n   return fract(_st);"
            },
            "id": "undefined.modulateScrollY",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "scrollY"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "speed"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateScrollY",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "scrollY",
                    "type": "float",
                    "ref": "arg",
                    "value": "scrollY"
                },
                {
                    "id": "speed",
                    "type": "float",
                    "ref": "arg",
                    "value": "speed"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "add",
                "type": "combine",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 1
                    }
                ],
                "glsl": "   return (_c0+_c1)*amount + _c0*(1.0-amount);"
            },
            "id": "undefined.add",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "add",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "sub",
                "type": "combine",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 1
                    }
                ],
                "glsl": "   return (_c0-_c1)*amount + _c0*(1.0-amount);"
            },
            "id": "undefined.sub",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "sub",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "layer",
                "type": "combine",
                "inputs": [],
                "glsl": "   return vec4(mix(_c0.rgb, _c1.rgb, _c1.a), clamp(_c0.a + _c1.a, 0.0, 1.0));"
            },
            "id": "undefined.layer",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "layer",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "blend",
                "type": "combine",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 0.5
                    }
                ],
                "glsl": "   return _c0*(1.0-amount)+_c1*amount;"
            },
            "id": "undefined.blend",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "blend",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "mult",
                "type": "combine",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 1
                    }
                ],
                "glsl": "   return _c0*(1.0-amount)+(_c0*_c1)*amount;"
            },
            "id": "undefined.mult",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "mult",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "diff",
                "type": "combine",
                "inputs": [],
                "glsl": "   return vec4(abs(_c0.rgb-_c1.rgb), max(_c0.a, _c1.a));"
            },
            "id": "undefined.diff",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "diff",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulate",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 0.1
                    }
                ],
                "glsl": "   //  return fract(st+(_c0.xy-0.5)*amount);\n   return _st + _c0.xy*amount;"
            },
            "id": "undefined.modulate",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulate",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateScale",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "multiple",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 1
                    }
                ],
                "glsl": "   vec2 xy = _st - vec2(0.5);\n   xy*=(1.0/vec2(offset + multiple*_c0.r, offset + multiple*_c0.g));\n   xy+=vec2(0.5);\n   return xy;"
            },
            "id": "undefined.modulateScale",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "multiple"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateScale",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "multiple",
                    "type": "float",
                    "ref": "arg",
                    "value": "multiple"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulatePixelate",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "multiple",
                        "default": 10
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 3
                    }
                ],
                "glsl": "   vec2 xy = vec2(offset + _c0.x*multiple, offset + _c0.y*multiple);\n   return (floor(_st * xy) + 0.5)/xy;"
            },
            "id": "undefined.modulatePixelate",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "multiple"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulatePixelate",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "multiple",
                    "type": "float",
                    "ref": "arg",
                    "value": "multiple"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateRotate",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "multiple",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0
                    }
                ],
                "glsl": "   vec2 xy = _st - vec2(0.5);\n   float angle = offset + _c0.x * multiple;\n   xy = mat2(cos(angle),-sin(angle), sin(angle),cos(angle))*xy;\n   xy += 0.5;\n   return xy;"
            },
            "id": "undefined.modulateRotate",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "multiple"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateRotate",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "multiple",
                    "type": "float",
                    "ref": "arg",
                    "value": "multiple"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateHue",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 1
                    }
                ],
                "glsl": "   return _st + (vec2(_c0.g - _c0.r, _c0.b - _c0.g) * amount * 1.0/resolution);"
            },
            "id": "undefined.modulateHue",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateHue",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "invert",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 1
                    }
                ],
                "glsl": "   return vec4((1.0-_c0.rgb)*amount + _c0.rgb*(1.0-amount), _c0.a);"
            },
            "id": "undefined.invert",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "invert",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "contrast",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 1.6
                    }
                ],
                "glsl": "   vec4 c = (_c0-vec4(0.5))*vec4(amount) + vec4(0.5);\n   return vec4(c.rgb, _c0.a);"
            },
            "id": "undefined.contrast",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "contrast",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "brightness",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 0.4
                    }
                ],
                "glsl": "   return vec4(_c0.rgb + vec3(amount), _c0.a);"
            },
            "id": "undefined.brightness",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "brightness",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "mask",
                "type": "combine",
                "inputs": [],
                "glsl": "   float a = _luminance(_c1.rgb);\n  return vec4(_c0.rgb*a, a*_c0.a);"
            },
            "id": "undefined.mask",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "mask",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "luma",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "threshold",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "tolerance",
                        "default": 0.1
                    }
                ],
                "glsl": "   float a = smoothstep(threshold-(tolerance+0.0000001), threshold+(tolerance+0.0000001), _luminance(_c0.rgb));\n   return vec4(_c0.rgb*a, a);"
            },
            "id": "undefined.luma",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "threshold"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "tolerance"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "luma",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "threshold",
                    "type": "float",
                    "ref": "arg",
                    "value": "threshold"
                },
                {
                    "id": "tolerance",
                    "type": "float",
                    "ref": "arg",
                    "value": "tolerance"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "thresh",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "threshold",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "tolerance",
                        "default": 0.04
                    }
                ],
                "glsl": "   return vec4(vec3(smoothstep(threshold-(tolerance+0.0000001), threshold+(tolerance+0.0000001), _luminance(_c0.rgb))), _c0.a);"
            },
            "id": "undefined.thresh",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "threshold"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "tolerance"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "thresh",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "threshold",
                    "type": "float",
                    "ref": "arg",
                    "value": "threshold"
                },
                {
                    "id": "tolerance",
                    "type": "float",
                    "ref": "arg",
                    "value": "tolerance"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "color",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "r",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "g",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "b",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "a",
                        "default": 1
                    }
                ],
                "glsl": "   vec4 c = vec4(r, g, b, a);\n   vec4 pos = step(0.0, c); // detect whether negative\n   // if > 0, return r * _c0\n   // if < 0 return (1.0-r) * _c0\n   return vec4(mix((1.0-_c0)*abs(c), c*_c0, pos));"
            },
            "id": "undefined.color",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "r"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "g"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "b"
                },
                {
                    "as": "arg3",
                    "to": "args",
                    "from": "a"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "color",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "r",
                    "type": "float",
                    "ref": "arg",
                    "value": "r"
                },
                {
                    "id": "g",
                    "type": "float",
                    "ref": "arg",
                    "value": "g"
                },
                {
                    "id": "b",
                    "type": "float",
                    "ref": "arg",
                    "value": "b"
                },
                {
                    "id": "a",
                    "type": "float",
                    "ref": "arg",
                    "value": "a"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "saturate",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 2
                    }
                ],
                "glsl": "   const vec3 W = vec3(0.2125, 0.7154, 0.0721);\n   vec3 intensity = vec3(dot(_c0.rgb, W));\n   return vec4(mix(intensity, _c0.rgb, amount), _c0.a);"
            },
            "id": "undefined.saturate",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "saturate",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "hue",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "hue",
                        "default": 0.4
                    }
                ],
                "glsl": "   vec3 c = _rgbToHsv(_c0.rgb);\n   c.r += hue;\n   //  c.r = fract(c.r);\n   return vec4(_hsvToRgb(c), _c0.a);"
            },
            "id": "undefined.hue",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "hue"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "hue",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "hue",
                    "type": "float",
                    "ref": "arg",
                    "value": "hue"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "colorama",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 0.005
                    }
                ],
                "glsl": "   vec3 c = _rgbToHsv(_c0.rgb);\n   c += vec3(amount);\n   c = _hsvToRgb(c);\n   c = fract(c);\n   return vec4(c, _c0.a);"
            },
            "id": "undefined.colorama",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "colorama",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "prev",
                "type": "src",
                "inputs": [],
                "glsl": "   return texture2D(prevBuffer, fract(_st));"
            },
            "id": "undefined.prev",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "prev",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "sum",
                "type": "color",
                "inputs": [
                    {
                        "type": "vec4",
                        "name": "scale",
                        "default": 1
                    }
                ],
                "glsl": "   vec4 v = _c0 * s;\n   return v.r + v.g + v.b + v.a;\n   }\n   float sum(vec2 _st, vec4 s) { // vec4 is not a typo, because argument type is not overloaded\n   vec2 v = _st.xy * s.xy;\n   return v.x + v.y;"
            },
            "id": "undefined.sum",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scale"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "sum",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scale",
                    "type": "vec4",
                    "ref": "arg",
                    "value": "scale"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "r",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scale",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0
                    }
                ],
                "glsl": "   return vec4(_c0.r * scale + offset);"
            },
            "id": "undefined.r",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scale"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "r",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scale",
                    "type": "float",
                    "ref": "arg",
                    "value": "scale"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "g",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scale",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0
                    }
                ],
                "glsl": "   return vec4(_c0.g * scale + offset);"
            },
            "id": "undefined.g",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scale"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "g",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scale",
                    "type": "float",
                    "ref": "arg",
                    "value": "scale"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "b",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scale",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0
                    }
                ],
                "glsl": "   return vec4(_c0.b * scale + offset);"
            },
            "id": "undefined.b",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scale"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "b",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scale",
                    "type": "float",
                    "ref": "arg",
                    "value": "scale"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "a",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scale",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0
                    }
                ],
                "glsl": "   return vec4(_c0.a * scale + offset);"
            },
            "id": "undefined.a",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scale"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "a",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scale",
                    "type": "float",
                    "ref": "arg",
                    "value": "scale"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "id": "hydra.out",
            "out": "out",
            "nodes": [
                {
                    "id": "self",
                    "ref": "arg",
                    "value": "self"
                },
                {
                    "id": "tex",
                    "ref": "arg",
                    "value": "tex"
                },
                {
                    "id": "args_tex",
                    "ref": "array"
                },
                {
                    "id": "args_no_tex",
                    "ref": "array"
                },
                {
                    "id": "args",
                    "ref": "if"
                },
                {
                    "id": "out_fn",
                    "value": "out"
                },
                {
                    "id": "out",
                    "ref": "call"
                }
            ],
            "edges": [
                {
                    "from": "tex",
                    "to": "args_tex",
                    "as": "a0"
                },
                {
                    "from": "tex",
                    "to": "args",
                    "as": "pred"
                },
                {
                    "from": "args_tex",
                    "to": "args",
                    "as": "true"
                },
                {
                    "from": "args_no_tex",
                    "to": "args",
                    "as": "false"
                },
                {
                    "from": "args",
                    "to": "out",
                    "as": "args"
                },
                {
                    "from": "self",
                    "to": "out",
                    "as": "self"
                },
                {
                    "from": "out_fn",
                    "to": "out",
                    "as": "fn"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "noise",
                "type": "src",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scale",
                        "default": 10
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0.1
                    }
                ],
                "glsl": "   return vec4(vec3(_noise(vec3(_st*scale, offset*time))), 1.0);"
            },
            "id": "hydra.noise",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scale"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "noise",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scale",
                    "type": "float",
                    "ref": "arg",
                    "value": "scale"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "voronoi",
                "type": "src",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scale",
                        "default": 5
                    },
                    {
                        "type": "float",
                        "name": "speed",
                        "default": 0.3
                    },
                    {
                        "type": "float",
                        "name": "blending",
                        "default": 0.3
                    }
                ],
                "glsl": "   vec3 color = vec3(.0);\n   // Scale\n   _st *= scale;\n   // Tile the space\n   vec2 i_st = floor(_st);\n   vec2 f_st = fract(_st);\n   float m_dist = 10.;  // minimun distance\n   vec2 m_point;        // minimum point\n   for (int j=-1; j<=1; j++ ) {\n   for (int i=-1; i<=1; i++ ) {\n   vec2 neighbor = vec2(float(i),float(j));\n   vec2 p = i_st + neighbor;\n   vec2 point = fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n   point = 0.5 + 0.5*sin(time*speed + 6.2831*point);\n   vec2 diff = neighbor + point - f_st;\n   float dist = length(diff);\n   if( dist < m_dist ) {\n   m_dist = dist;\n   m_point = point;\n   }\n   }\n   }\n   // Assign a color using the closest point position\n   color += dot(m_point,vec2(.3,.6));\n   color *= 1.0 - blending*m_dist;\n   return vec4(color, 1.0);"
            },
            "id": "hydra.voronoi",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scale"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "speed"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "blending"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "voronoi",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scale",
                    "type": "float",
                    "ref": "arg",
                    "value": "scale"
                },
                {
                    "id": "speed",
                    "type": "float",
                    "ref": "arg",
                    "value": "speed"
                },
                {
                    "id": "blending",
                    "type": "float",
                    "ref": "arg",
                    "value": "blending"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "osc",
                "type": "src",
                "inputs": [
                    {
                        "type": "float",
                        "name": "frequency",
                        "default": 60
                    },
                    {
                        "type": "float",
                        "name": "sync",
                        "default": 0.1
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0
                    }
                ],
                "glsl": "   vec2 st = _st;\n   float r = sin((st.x-offset/frequency+time*sync)*frequency)*0.5  + 0.5;\n   float g = sin((st.x+time*sync)*frequency)*0.5 + 0.5;\n   float b = sin((st.x+offset/frequency+time*sync)*frequency)*0.5  + 0.5;\n   return vec4(r, g, b, 1.0);"
            },
            "id": "hydra.osc",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "frequency"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "sync"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "osc",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "frequency",
                    "type": "float",
                    "ref": "arg",
                    "value": "frequency"
                },
                {
                    "id": "sync",
                    "type": "float",
                    "ref": "arg",
                    "value": "sync"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "shape",
                "type": "src",
                "inputs": [
                    {
                        "type": "float",
                        "name": "sides",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "radius",
                        "default": 0.3
                    },
                    {
                        "type": "float",
                        "name": "smoothing",
                        "default": 0.01
                    }
                ],
                "glsl": "   vec2 st = _st * 2. - 1.;\n   // Angle and radius from the current pixel\n   float a = atan(st.x,st.y)+3.1416;\n   float r = (2.*3.1416)/sides;\n   float d = cos(floor(.5+a/r)*r-a)*length(st);\n   return vec4(vec3(1.0-smoothstep(radius,radius + smoothing + 0.0000001,d)), 1.0);"
            },
            "id": "hydra.shape",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "sides"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "radius"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "smoothing"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "shape",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "sides",
                    "type": "float",
                    "ref": "arg",
                    "value": "sides"
                },
                {
                    "id": "radius",
                    "type": "float",
                    "ref": "arg",
                    "value": "radius"
                },
                {
                    "id": "smoothing",
                    "type": "float",
                    "ref": "arg",
                    "value": "smoothing"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "gradient",
                "type": "src",
                "inputs": [
                    {
                        "type": "float",
                        "name": "speed",
                        "default": 0
                    }
                ],
                "glsl": "   return vec4(_st, sin(time*speed), 1.0);"
            },
            "id": "hydra.gradient",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "speed"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "gradient",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "speed",
                    "type": "float",
                    "ref": "arg",
                    "value": "speed"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "src",
                "type": "src",
                "inputs": [
                    {
                        "type": "sampler2D",
                        "name": "tex",
                        "default": null
                    }
                ],
                "glsl": "   //  vec2 uv = gl_FragCoord.xy/vec2(1280., 720.);\n   return texture2D(tex, fract(_st));"
            },
            "id": "hydra.src",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "src",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "type": "sampler2D",
                    "ref": "arg",
                    "value": "tex"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "solid",
                "type": "src",
                "inputs": [
                    {
                        "type": "float",
                        "name": "r",
                        "default": 0
                    },
                    {
                        "type": "float",
                        "name": "g",
                        "default": 0
                    },
                    {
                        "type": "float",
                        "name": "b",
                        "default": 0
                    },
                    {
                        "type": "float",
                        "name": "a",
                        "default": 1
                    }
                ],
                "glsl": "   return vec4(r, g, b, a);"
            },
            "id": "hydra.solid",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "r"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "g"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "b"
                },
                {
                    "as": "arg3",
                    "to": "args",
                    "from": "a"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "solid",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "r",
                    "type": "float",
                    "ref": "arg",
                    "value": "r"
                },
                {
                    "id": "g",
                    "type": "float",
                    "ref": "arg",
                    "value": "g"
                },
                {
                    "id": "b",
                    "type": "float",
                    "ref": "arg",
                    "value": "b"
                },
                {
                    "id": "a",
                    "type": "float",
                    "ref": "arg",
                    "value": "a"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "rotate",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "angle",
                        "default": 10
                    },
                    {
                        "type": "float",
                        "name": "speed",
                        "default": 0
                    }
                ],
                "glsl": "   vec2 xy = _st - vec2(0.5);\n   float ang = angle + speed *time;\n   xy = mat2(cos(ang),-sin(ang), sin(ang),cos(ang))*xy;\n   xy += 0.5;\n   return xy;"
            },
            "id": "hydra.rotate",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "angle"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "speed"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "rotate",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "angle",
                    "type": "float",
                    "ref": "arg",
                    "value": "angle"
                },
                {
                    "id": "speed",
                    "type": "float",
                    "ref": "arg",
                    "value": "speed"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "scale",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 1.5
                    },
                    {
                        "type": "float",
                        "name": "xMult",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "yMult",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "offsetX",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "offsetY",
                        "default": 0.5
                    }
                ],
                "glsl": "   vec2 xy = _st - vec2(offsetX, offsetY);\n   xy*=(1.0/vec2(amount*xMult, amount*yMult));\n   xy+=vec2(offsetX, offsetY);\n   return xy;\n   "
            },
            "id": "hydra.scale",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "amount"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "xMult"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "yMult"
                },
                {
                    "as": "arg3",
                    "to": "args",
                    "from": "offsetX"
                },
                {
                    "as": "arg4",
                    "to": "args",
                    "from": "offsetY"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "scale",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                },
                {
                    "id": "xMult",
                    "type": "float",
                    "ref": "arg",
                    "value": "xMult"
                },
                {
                    "id": "yMult",
                    "type": "float",
                    "ref": "arg",
                    "value": "yMult"
                },
                {
                    "id": "offsetX",
                    "type": "float",
                    "ref": "arg",
                    "value": "offsetX"
                },
                {
                    "id": "offsetY",
                    "type": "float",
                    "ref": "arg",
                    "value": "offsetY"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "pixelate",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "pixelX",
                        "default": 20
                    },
                    {
                        "type": "float",
                        "name": "pixelY",
                        "default": 20
                    }
                ],
                "glsl": "   vec2 xy = vec2(pixelX, pixelY);\n   return (floor(_st * xy) + 0.5)/xy;"
            },
            "id": "hydra.pixelate",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "pixelX"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "pixelY"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "pixelate",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "pixelX",
                    "type": "float",
                    "ref": "arg",
                    "value": "pixelX"
                },
                {
                    "id": "pixelY",
                    "type": "float",
                    "ref": "arg",
                    "value": "pixelY"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "posterize",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "bins",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "gamma",
                        "default": 0.6
                    }
                ],
                "glsl": "   vec4 c2 = pow(_c0, vec4(gamma));\n   c2 *= vec4(bins);\n   c2 = floor(c2);\n   c2/= vec4(bins);\n   c2 = pow(c2, vec4(1.0/gamma));\n   return vec4(c2.xyz, _c0.a);"
            },
            "id": "hydra.posterize",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "bins"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "gamma"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "posterize",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "bins",
                    "type": "float",
                    "ref": "arg",
                    "value": "bins"
                },
                {
                    "id": "gamma",
                    "type": "float",
                    "ref": "arg",
                    "value": "gamma"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "shift",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "r",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "g",
                        "default": 0
                    },
                    {
                        "type": "float",
                        "name": "b",
                        "default": 0
                    },
                    {
                        "type": "float",
                        "name": "a",
                        "default": 0
                    }
                ],
                "glsl": "   vec4 c2 = vec4(_c0);\n   c2.r = fract(c2.r + r);\n   c2.g = fract(c2.g + g);\n   c2.b = fract(c2.b + b);\n   c2.a = fract(c2.a + a);\n   return vec4(c2.rgba);"
            },
            "id": "hydra.shift",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "r"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "g"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "b"
                },
                {
                    "as": "arg3",
                    "to": "args",
                    "from": "a"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "shift",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "r",
                    "type": "float",
                    "ref": "arg",
                    "value": "r"
                },
                {
                    "id": "g",
                    "type": "float",
                    "ref": "arg",
                    "value": "g"
                },
                {
                    "id": "b",
                    "type": "float",
                    "ref": "arg",
                    "value": "b"
                },
                {
                    "id": "a",
                    "type": "float",
                    "ref": "arg",
                    "value": "a"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "repeat",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "repeatX",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "repeatY",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "offsetX",
                        "default": 0
                    },
                    {
                        "type": "float",
                        "name": "offsetY",
                        "default": 0
                    }
                ],
                "glsl": "   vec2 st = _st * vec2(repeatX, repeatY);\n   st.x += step(1., mod(st.y,2.0)) * offsetX;\n   st.y += step(1., mod(st.x,2.0)) * offsetY;\n   return fract(st);"
            },
            "id": "hydra.repeat",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "repeatX"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "repeatY"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "offsetX"
                },
                {
                    "as": "arg3",
                    "to": "args",
                    "from": "offsetY"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "repeat",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "repeatX",
                    "type": "float",
                    "ref": "arg",
                    "value": "repeatX"
                },
                {
                    "id": "repeatY",
                    "type": "float",
                    "ref": "arg",
                    "value": "repeatY"
                },
                {
                    "id": "offsetX",
                    "type": "float",
                    "ref": "arg",
                    "value": "offsetX"
                },
                {
                    "id": "offsetY",
                    "type": "float",
                    "ref": "arg",
                    "value": "offsetY"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateRepeat",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "repeatX",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "repeatY",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "offsetX",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "offsetY",
                        "default": 0.5
                    }
                ],
                "glsl": "   vec2 st = _st * vec2(repeatX, repeatY);\n   st.x += step(1., mod(st.y,2.0)) + _c0.r * offsetX;\n   st.y += step(1., mod(st.x,2.0)) + _c0.g * offsetY;\n   return fract(st);"
            },
            "id": "hydra.modulateRepeat",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "repeatX"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "repeatY"
                },
                {
                    "as": "arg3",
                    "to": "args",
                    "from": "offsetX"
                },
                {
                    "as": "arg4",
                    "to": "args",
                    "from": "offsetY"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateRepeat",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "repeatX",
                    "type": "float",
                    "ref": "arg",
                    "value": "repeatX"
                },
                {
                    "id": "repeatY",
                    "type": "float",
                    "ref": "arg",
                    "value": "repeatY"
                },
                {
                    "id": "offsetX",
                    "type": "float",
                    "ref": "arg",
                    "value": "offsetX"
                },
                {
                    "id": "offsetY",
                    "type": "float",
                    "ref": "arg",
                    "value": "offsetY"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "repeatX",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "reps",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0
                    }
                ],
                "glsl": "   vec2 st = _st * vec2(reps, 1.0);\n   //  float f =  mod(_st.y,2.0);\n   st.y += step(1., mod(st.x,2.0))* offset;\n   return fract(st);"
            },
            "id": "hydra.repeatX",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "reps"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "repeatX",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "reps",
                    "type": "float",
                    "ref": "arg",
                    "value": "reps"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateRepeatX",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "reps",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0.5
                    }
                ],
                "glsl": "   vec2 st = _st * vec2(reps, 1.0);\n   //  float f =  mod(_st.y,2.0);\n   st.y += step(1., mod(st.x,2.0)) + _c0.r * offset;\n   return fract(st);"
            },
            "id": "hydra.modulateRepeatX",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "reps"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateRepeatX",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "reps",
                    "type": "float",
                    "ref": "arg",
                    "value": "reps"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "repeatY",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "reps",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0
                    }
                ],
                "glsl": "   vec2 st = _st * vec2(1.0, reps);\n   //  float f =  mod(_st.y,2.0);\n   st.x += step(1., mod(st.y,2.0))* offset;\n   return fract(st);"
            },
            "id": "hydra.repeatY",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "reps"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "repeatY",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "reps",
                    "type": "float",
                    "ref": "arg",
                    "value": "reps"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateRepeatY",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "reps",
                        "default": 3
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0.5
                    }
                ],
                "glsl": "   vec2 st = _st * vec2(reps, 1.0);\n   //  float f =  mod(_st.y,2.0);\n   st.x += step(1., mod(st.y,2.0)) + _c0.r * offset;\n   return fract(st);"
            },
            "id": "hydra.modulateRepeatY",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "reps"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateRepeatY",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "reps",
                    "type": "float",
                    "ref": "arg",
                    "value": "reps"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "kaleid",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "nSides",
                        "default": 4
                    }
                ],
                "glsl": "   vec2 st = _st;\n   st -= 0.5;\n   float r = length(st);\n   float a = atan(st.y, st.x);\n   float pi = 2.*3.1416;\n   a = mod(a,pi/nSides);\n   a = abs(a-pi/nSides/2.);\n   return r*vec2(cos(a), sin(a));"
            },
            "id": "hydra.kaleid",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "nSides"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "kaleid",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "nSides",
                    "type": "float",
                    "ref": "arg",
                    "value": "nSides"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateKaleid",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "nSides",
                        "default": 4
                    }
                ],
                "glsl": "   vec2 st = _st - 0.5;\n   float r = length(st);\n   float a = atan(st.y, st.x);\n   float pi = 2.*3.1416;\n   a = mod(a,pi/nSides);\n   a = abs(a-pi/nSides/2.);\n   return (_c0.r+r)*vec2(cos(a), sin(a));"
            },
            "id": "hydra.modulateKaleid",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "nSides"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateKaleid",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "nSides",
                    "type": "float",
                    "ref": "arg",
                    "value": "nSides"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "scroll",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scrollX",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "scrollY",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "speedX",
                        "default": 0
                    },
                    {
                        "type": "float",
                        "name": "speedY",
                        "default": 0
                    }
                ],
                "glsl": "\n   _st.x += scrollX + time*speedX;\n   _st.y += scrollY + time*speedY;\n   return fract(_st);"
            },
            "id": "hydra.scroll",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scrollX"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "scrollY"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "speedX"
                },
                {
                    "as": "arg3",
                    "to": "args",
                    "from": "speedY"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "scroll",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scrollX",
                    "type": "float",
                    "ref": "arg",
                    "value": "scrollX"
                },
                {
                    "id": "scrollY",
                    "type": "float",
                    "ref": "arg",
                    "value": "scrollY"
                },
                {
                    "id": "speedX",
                    "type": "float",
                    "ref": "arg",
                    "value": "speedX"
                },
                {
                    "id": "speedY",
                    "type": "float",
                    "ref": "arg",
                    "value": "speedY"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "scrollX",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scrollX",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "speed",
                        "default": 0
                    }
                ],
                "glsl": "   _st.x += scrollX + time*speed;\n   return fract(_st);"
            },
            "id": "hydra.scrollX",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scrollX"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "speed"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "scrollX",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scrollX",
                    "type": "float",
                    "ref": "arg",
                    "value": "scrollX"
                },
                {
                    "id": "speed",
                    "type": "float",
                    "ref": "arg",
                    "value": "speed"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateScrollX",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scrollX",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "speed",
                        "default": 0
                    }
                ],
                "glsl": "   _st.x += _c0.r*scrollX + time*speed;\n   return fract(_st);"
            },
            "id": "hydra.modulateScrollX",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "scrollX"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "speed"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateScrollX",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "scrollX",
                    "type": "float",
                    "ref": "arg",
                    "value": "scrollX"
                },
                {
                    "id": "speed",
                    "type": "float",
                    "ref": "arg",
                    "value": "speed"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "scrollY",
                "type": "coord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scrollY",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "speed",
                        "default": 0
                    }
                ],
                "glsl": "   _st.y += scrollY + time*speed;\n   return fract(_st);"
            },
            "id": "hydra.scrollY",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scrollY"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "speed"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "scrollY",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scrollY",
                    "type": "float",
                    "ref": "arg",
                    "value": "scrollY"
                },
                {
                    "id": "speed",
                    "type": "float",
                    "ref": "arg",
                    "value": "speed"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateScrollY",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scrollY",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "speed",
                        "default": 0
                    }
                ],
                "glsl": "   _st.y += _c0.r*scrollY + time*speed;\n   return fract(_st);"
            },
            "id": "hydra.modulateScrollY",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "scrollY"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "speed"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateScrollY",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "scrollY",
                    "type": "float",
                    "ref": "arg",
                    "value": "scrollY"
                },
                {
                    "id": "speed",
                    "type": "float",
                    "ref": "arg",
                    "value": "speed"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "add",
                "type": "combine",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 1
                    }
                ],
                "glsl": "   return (_c0+_c1)*amount + _c0*(1.0-amount);"
            },
            "id": "hydra.add",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "add",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "sub",
                "type": "combine",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 1
                    }
                ],
                "glsl": "   return (_c0-_c1)*amount + _c0*(1.0-amount);"
            },
            "id": "hydra.sub",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "sub",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "layer",
                "type": "combine",
                "inputs": [],
                "glsl": "   return vec4(mix(_c0.rgb, _c1.rgb, _c1.a), clamp(_c0.a + _c1.a, 0.0, 1.0));"
            },
            "id": "hydra.layer",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "layer",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "blend",
                "type": "combine",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 0.5
                    }
                ],
                "glsl": "   return _c0*(1.0-amount)+_c1*amount;"
            },
            "id": "hydra.blend",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "blend",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "mult",
                "type": "combine",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 1
                    }
                ],
                "glsl": "   return _c0*(1.0-amount)+(_c0*_c1)*amount;"
            },
            "id": "hydra.mult",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "mult",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "diff",
                "type": "combine",
                "inputs": [],
                "glsl": "   return vec4(abs(_c0.rgb-_c1.rgb), max(_c0.a, _c1.a));"
            },
            "id": "hydra.diff",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "diff",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulate",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 0.1
                    }
                ],
                "glsl": "   //  return fract(st+(_c0.xy-0.5)*amount);\n   return _st + _c0.xy*amount;"
            },
            "id": "hydra.modulate",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulate",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateScale",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "multiple",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 1
                    }
                ],
                "glsl": "   vec2 xy = _st - vec2(0.5);\n   xy*=(1.0/vec2(offset + multiple*_c0.r, offset + multiple*_c0.g));\n   xy+=vec2(0.5);\n   return xy;"
            },
            "id": "hydra.modulateScale",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "multiple"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateScale",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "multiple",
                    "type": "float",
                    "ref": "arg",
                    "value": "multiple"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulatePixelate",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "multiple",
                        "default": 10
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 3
                    }
                ],
                "glsl": "   vec2 xy = vec2(offset + _c0.x*multiple, offset + _c0.y*multiple);\n   return (floor(_st * xy) + 0.5)/xy;"
            },
            "id": "hydra.modulatePixelate",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "multiple"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulatePixelate",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "multiple",
                    "type": "float",
                    "ref": "arg",
                    "value": "multiple"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateRotate",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "multiple",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0
                    }
                ],
                "glsl": "   vec2 xy = _st - vec2(0.5);\n   float angle = offset + _c0.x * multiple;\n   xy = mat2(cos(angle),-sin(angle), sin(angle),cos(angle))*xy;\n   xy += 0.5;\n   return xy;"
            },
            "id": "hydra.modulateRotate",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "multiple"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateRotate",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "multiple",
                    "type": "float",
                    "ref": "arg",
                    "value": "multiple"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "modulateHue",
                "type": "combineCoord",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 1
                    }
                ],
                "glsl": "   return _st + (vec2(_c0.g - _c0.r, _c0.b - _c0.g) * amount * 1.0/resolution);"
            },
            "id": "hydra.modulateHue",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "modulateHue",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "invert",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 1
                    }
                ],
                "glsl": "   return vec4((1.0-_c0.rgb)*amount + _c0.rgb*(1.0-amount), _c0.a);"
            },
            "id": "hydra.invert",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "invert",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "contrast",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 1.6
                    }
                ],
                "glsl": "   vec4 c = (_c0-vec4(0.5))*vec4(amount) + vec4(0.5);\n   return vec4(c.rgb, _c0.a);"
            },
            "id": "hydra.contrast",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "contrast",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "brightness",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 0.4
                    }
                ],
                "glsl": "   return vec4(_c0.rgb + vec3(amount), _c0.a);"
            },
            "id": "hydra.brightness",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "brightness",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "mask",
                "type": "combine",
                "inputs": [],
                "glsl": "   float a = _luminance(_c1.rgb);\n  return vec4(_c0.rgb*a, a*_c0.a);"
            },
            "id": "hydra.mask",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "tex"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "mask",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "tex",
                    "value": "texture",
                    "ref": "arg"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "luma",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "threshold",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "tolerance",
                        "default": 0.1
                    }
                ],
                "glsl": "   float a = smoothstep(threshold-(tolerance+0.0000001), threshold+(tolerance+0.0000001), _luminance(_c0.rgb));\n   return vec4(_c0.rgb*a, a);"
            },
            "id": "hydra.luma",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "threshold"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "tolerance"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "luma",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "threshold",
                    "type": "float",
                    "ref": "arg",
                    "value": "threshold"
                },
                {
                    "id": "tolerance",
                    "type": "float",
                    "ref": "arg",
                    "value": "tolerance"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "thresh",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "threshold",
                        "default": 0.5
                    },
                    {
                        "type": "float",
                        "name": "tolerance",
                        "default": 0.04
                    }
                ],
                "glsl": "   return vec4(vec3(smoothstep(threshold-(tolerance+0.0000001), threshold+(tolerance+0.0000001), _luminance(_c0.rgb))), _c0.a);"
            },
            "id": "hydra.thresh",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "threshold"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "tolerance"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "thresh",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "threshold",
                    "type": "float",
                    "ref": "arg",
                    "value": "threshold"
                },
                {
                    "id": "tolerance",
                    "type": "float",
                    "ref": "arg",
                    "value": "tolerance"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "color",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "r",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "g",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "b",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "a",
                        "default": 1
                    }
                ],
                "glsl": "   vec4 c = vec4(r, g, b, a);\n   vec4 pos = step(0.0, c); // detect whether negative\n   // if > 0, return r * _c0\n   // if < 0 return (1.0-r) * _c0\n   return vec4(mix((1.0-_c0)*abs(c), c*_c0, pos));"
            },
            "id": "hydra.color",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "r"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "g"
                },
                {
                    "as": "arg2",
                    "to": "args",
                    "from": "b"
                },
                {
                    "as": "arg3",
                    "to": "args",
                    "from": "a"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "color",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "r",
                    "type": "float",
                    "ref": "arg",
                    "value": "r"
                },
                {
                    "id": "g",
                    "type": "float",
                    "ref": "arg",
                    "value": "g"
                },
                {
                    "id": "b",
                    "type": "float",
                    "ref": "arg",
                    "value": "b"
                },
                {
                    "id": "a",
                    "type": "float",
                    "ref": "arg",
                    "value": "a"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "saturate",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 2
                    }
                ],
                "glsl": "   const vec3 W = vec3(0.2125, 0.7154, 0.0721);\n   vec3 intensity = vec3(dot(_c0.rgb, W));\n   return vec4(mix(intensity, _c0.rgb, amount), _c0.a);"
            },
            "id": "hydra.saturate",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "saturate",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "hue",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "hue",
                        "default": 0.4
                    }
                ],
                "glsl": "   vec3 c = _rgbToHsv(_c0.rgb);\n   c.r += hue;\n   //  c.r = fract(c.r);\n   return vec4(_hsvToRgb(c), _c0.a);"
            },
            "id": "hydra.hue",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "hue"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "hue",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "hue",
                    "type": "float",
                    "ref": "arg",
                    "value": "hue"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "colorama",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "amount",
                        "default": 0.005
                    }
                ],
                "glsl": "   vec3 c = _rgbToHsv(_c0.rgb);\n   c += vec3(amount);\n   c = _hsvToRgb(c);\n   c = fract(c);\n   return vec4(c, _c0.a);"
            },
            "id": "hydra.colorama",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "amount"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "colorama",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "amount",
                    "type": "float",
                    "ref": "arg",
                    "value": "amount"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "prev",
                "type": "src",
                "inputs": [],
                "glsl": "   return texture2D(prevBuffer, fract(_st));"
            },
            "id": "hydra.prev",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "prev",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "sum",
                "type": "color",
                "inputs": [
                    {
                        "type": "vec4",
                        "name": "scale",
                        "default": 1
                    }
                ],
                "glsl": "   vec4 v = _c0 * s;\n   return v.r + v.g + v.b + v.a;\n   }\n   float sum(vec2 _st, vec4 s) { // vec4 is not a typo, because argument type is not overloaded\n   vec2 v = _st.xy * s.xy;\n   return v.x + v.y;"
            },
            "id": "hydra.sum",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scale"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "sum",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scale",
                    "type": "vec4",
                    "ref": "arg",
                    "value": "scale"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "r",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scale",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0
                    }
                ],
                "glsl": "   return vec4(_c0.r * scale + offset);"
            },
            "id": "hydra.r",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scale"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "r",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scale",
                    "type": "float",
                    "ref": "arg",
                    "value": "scale"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "g",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scale",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0
                    }
                ],
                "glsl": "   return vec4(_c0.g * scale + offset);"
            },
            "id": "hydra.g",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scale"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "g",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scale",
                    "type": "float",
                    "ref": "arg",
                    "value": "scale"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "b",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scale",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0
                    }
                ],
                "glsl": "   return vec4(_c0.b * scale + offset);"
            },
            "id": "hydra.b",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scale"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "b",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scale",
                    "type": "float",
                    "ref": "arg",
                    "value": "scale"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "out": "out",
            "element": {
                "name": "a",
                "type": "color",
                "inputs": [
                    {
                        "type": "float",
                        "name": "scale",
                        "default": 1
                    },
                    {
                        "type": "float",
                        "name": "offset",
                        "default": 0
                    }
                ],
                "glsl": "   return vec4(_c0.a * scale + offset);"
            },
            "id": "hydra.a",
            "edges": [
                {
                    "as": "self",
                    "to": "out",
                    "from": "self"
                },
                {
                    "as": "fn",
                    "from": "fn_name",
                    "to": "out"
                },
                {
                    "as": "args",
                    "to": "out",
                    "from": "args"
                },
                {
                    "as": "arg0",
                    "to": "args",
                    "from": "scale"
                },
                {
                    "as": "arg1",
                    "to": "args",
                    "from": "offset"
                }
            ],
            "nodes": [
                {
                    "id": "self",
                    "value": "self",
                    "ref": "arg"
                },
                {
                    "id": "out",
                    "ref": "call"
                },
                {
                    "value": "a",
                    "id": "fn_name"
                },
                {
                    "ref": "array",
                    "id": "args"
                },
                {
                    "id": "scale",
                    "type": "float",
                    "ref": "arg",
                    "value": "scale"
                },
                {
                    "id": "offset",
                    "type": "float",
                    "ref": "arg",
                    "value": "offset"
                }
            ]
        },
        {
            "id": "ud6tgbm",
            "script": "return window['Hydra'];"
        },
        {
            "id": "irp54sa",
            "ref": "switch"
        },
        {
            "name": "setup",
            "id": "m9zoa11_1_1/m9zoa11"
        },
        {
            "id": "m9zoa11_1_1/8b6j8c5",
            "name": "setup_hydra_nodes",
            "out": "wtsyyp8",
            "nodes": [
                {
                    "id": "wtsyyp8",
                    "ref": "cache",
                    "name": "setup_hydra_nodes"
                },
                {
                    "id": "pp0gnk0_1/pp0gnk0",
                    "ref": "default"
                },
                {
                    "id": "pp0gnk0_1/log_state",
                    "ref": "import_json"
                },
                {
                    "id": "pp0gnk0_1/yjh6efu",
                    "ref": "arg",
                    "value": "hydra_json"
                },
                {
                    "id": "pp0gnk0_1/state_path",
                    "value": "hydra"
                },
                {
                    "id": "pp0gnk0_1/adbjxzt",
                    "value": "json/bindings/hydra.json"
                }
            ],
            "edges": [
                {
                    "as": "value",
                    "from": "pp0gnk0_1/pp0gnk0",
                    "to": "wtsyyp8"
                },
                {
                    "as": "otherwise",
                    "from": "pp0gnk0_1/log_state",
                    "to": "pp0gnk0_1/pp0gnk0"
                },
                {
                    "from": "pp0gnk0_1/yjh6efu",
                    "to": "pp0gnk0_1/pp0gnk0",
                    "as": "value"
                },
                {
                    "from": "pp0gnk0_1/state_path",
                    "to": "pp0gnk0_1/log_state",
                    "as": "name"
                },
                {
                    "from": "pp0gnk0_1/adbjxzt",
                    "to": "pp0gnk0_1/log_state",
                    "as": "url"
                }
            ]
        },
        {
            "id": "7zi9fri",
            "value": "hydra"
        },
        {
            "id": "v6ckye7",
            "ref": "event_subscriber"
        },
        {
            "id": "run_path",
            "out": "out",
            "nodes": [
                {
                    "id": "path",
                    "ref": "arg",
                    "value": "path"
                },
                {
                    "id": "args",
                    "ref": "arg",
                    "value": "_args",
                    "type": "internal"
                },
                {
                    "id": "runnable",
                    "script": "const parentest = _lib.no.runtime.get_parentest(_graph); return {fn: _lib.no.runtime.get_path(parentest, path), graph: parentest, args}"
                },
                {
                    "id": "out",
                    "ref": "run"
                }
            ],
            "edges": [
                {
                    "from": "path",
                    "to": "runnable",
                    "as": "path"
                },
                {
                    "from": "args",
                    "to": "runnable",
                    "as": "args"
                },
                {
                    "from": "runnable",
                    "to": "out",
                    "as": "runnable"
                }
            ]
        },
        {
            "id": "opkd26n",
            "in": "5v1037j",
            "out": "opkd26n",
            "nodes": [
                {
                    "id": "opkd26n",
                    "ref": "return"
                },
                {
                    "id": "5v1037j"
                },
                {
                    "id": "p50buuv",
                    "ref": "if"
                },
                {
                    "id": "hyy6h2f",
                    "ref": "cache"
                },
                {
                    "id": "3v78ntc",
                    "ref": "arg",
                    "value": "hydra"
                },
                {
                    "id": "m9zoa11_1_1/m9zoa11_1_1/dfea8ub",
                    "ref": "event_publisher"
                },
                {
                    "id": "m9zoa11_1_1/m9zoa11_1_1/wfp0a7n",
                    "value": "hydra_synth"
                },
                {
                    "id": "m9zoa11_1_1/m9zoa11_1_1/2tl2o9m_1/3s24md4_1/h8ol1dr_1/sspqiz6",
                    "script": "return hydra.synth;"
                },
                {
                    "id": "m9zoa11_1_1/m9zoa11_1_1/f58trpg",
                    "value": "hydra",
                    "ref": "arg"
                }
            ],
            "edges": [
                {
                    "as": "args",
                    "from": "5v1037j",
                    "to": "opkd26n"
                },
                {
                    "as": "hydra_synth",
                    "from": "p50buuv",
                    "to": "opkd26n"
                },
                {
                    "as": "true",
                    "from": "hyy6h2f",
                    "to": "p50buuv"
                },
                {
                    "as": "pred",
                    "from": "3v78ntc",
                    "to": "p50buuv"
                },
                {
                    "as": "value",
                    "from": "m9zoa11_1_1/m9zoa11_1_1/dfea8ub",
                    "to": "hyy6h2f"
                },
                {
                    "from": "m9zoa11_1_1/m9zoa11_1_1/wfp0a7n",
                    "to": "m9zoa11_1_1/m9zoa11_1_1/dfea8ub",
                    "as": "name"
                },
                {
                    "as": "value",
                    "from": "m9zoa11_1_1/m9zoa11_1_1/2tl2o9m_1/3s24md4_1/h8ol1dr_1/sspqiz6",
                    "to": "m9zoa11_1_1/m9zoa11_1_1/dfea8ub"
                },
                {
                    "as": "hydra",
                    "from": "m9zoa11_1_1/m9zoa11_1_1/f58trpg",
                    "to": "m9zoa11_1_1/m9zoa11_1_1/2tl2o9m_1/3s24md4_1/h8ol1dr_1/sspqiz6"
                }
            ]
        },
        {
            "id": "rzayzlk",
            "ref": "event_subscriber"
        },
        {
            "id": "64gdkiu",
            "value": "hydra_synth"
        },
        {
            "id": "skx28w9_1/skx28w9",
            "ref": "html_element",
            "name": "html_display"
        },
        {
            "id": "skx28w9_1/io46ihf",
            "ref": "array"
        },
        {
            "id": "skx28w9_1/1woqlx1_1",
            "out": "1woqlx1",
            "nodes": [
                {
                    "id": "1woqlx1",
                    "ref": "css_styles"
                },
                {
                    "id": "qpxgfep"
                },
                {
                    "id": "jaza4js"
                },
                {
                    "id": "wov8ooz"
                },
                {
                    "id": "9im5px1",
                    "value": "-1"
                },
                {
                    "id": "v0c8v8d",
                    "value": "fixed"
                },
                {
                    "id": "sko6igt",
                    "value": "0"
                },
                {
                    "id": "y4xxejs",
                    "value": "0"
                },
                {
                    "id": "554zy8d",
                    "value": "100vw"
                },
                {
                    "id": "9qreb1j",
                    "value": "100vh"
                },
                {
                    "id": "e8kup1p",
                    "value": "#0000"
                }
            ],
            "edges": [
                {
                    "from": "qpxgfep",
                    "to": "1woqlx1",
                    "as": "css_object"
                },
                {
                    "from": "jaza4js",
                    "to": "qpxgfep",
                    "as": "#hydra-canvas"
                },
                {
                    "from": "wov8ooz",
                    "to": "qpxgfep",
                    "as": "#node-editor"
                },
                {
                    "from": "9im5px1",
                    "to": "jaza4js",
                    "as": "z-index"
                },
                {
                    "from": "v0c8v8d",
                    "to": "jaza4js",
                    "as": "position"
                },
                {
                    "from": "sko6igt",
                    "to": "jaza4js",
                    "as": "top"
                },
                {
                    "from": "y4xxejs",
                    "to": "jaza4js",
                    "as": "left"
                },
                {
                    "from": "554zy8d",
                    "to": "jaza4js",
                    "as": "width"
                },
                {
                    "from": "9qreb1j",
                    "to": "jaza4js",
                    "as": "height"
                },
                {
                    "from": "e8kup1p",
                    "to": "wov8ooz",
                    "as": "background-color"
                }
            ]
        },
        {
            "id": "skx28w9_1/t0q5chs_1",
            "value": "canvas",
            "out": "t0q5chs",
            "nodes": [
                {
                    "id": "t0q5chs",
                    "ref": "html_element",
                    "value": "canvas"
                },
                {
                    "id": "24swt5h",
                    "value": "canvas"
                },
                {
                    "id": "v2vgmxr"
                },
                {
                    "id": "xzeqq2r",
                    "value": "hydra-canvas"
                }
            ],
            "edges": [
                {
                    "from": "24swt5h",
                    "to": "t0q5chs",
                    "as": "dom_type"
                },
                {
                    "from": "v2vgmxr",
                    "to": "t0q5chs",
                    "as": "props"
                },
                {
                    "from": "xzeqq2r",
                    "to": "v2vgmxr",
                    "as": "id"
                }
            ]
        },
        {
            "id": "skx28w9_1/xipu8s7_1_0",
            "out": "xipu8s7",
            "nodes": [
                {
                    "id": "xipu8s7",
                    "ref": "html_element"
                },
                {
                    "id": "dar63tx",
                    "value": "script"
                },
                {
                    "id": "1cazg8t"
                },
                {
                    "id": "flqalfh",
                    "value": "https://unpkg.com/hydra-synth"
                },
                {
                    "id": "1dv5smq",
                    "ref": "runnable"
                },
                {
                    "id": "sxcqz1j/460m7iu",
                    "ref": "cache"
                },
                {
                    "id": "sxcqz1j/hdb2ynd",
                    "ref": "event_publisher"
                },
                {
                    "id": "sxcqz1j/jkh9lze",
                    "value": "hydra"
                },
                {
                    "id": "sxcqz1j/k63st1m/f5ovpz6",
                    "script": "return new Hydra({makeGlobal: false, canvas: document.getElementById(\"hydra-canvas\")});"
                }
            ],
            "edges": [
                {
                    "from": "dar63tx",
                    "to": "xipu8s7",
                    "as": "dom_type"
                },
                {
                    "from": "1cazg8t",
                    "to": "xipu8s7",
                    "as": "props"
                },
                {
                    "from": "flqalfh",
                    "to": "1cazg8t",
                    "as": "src"
                },
                {
                    "from": "1dv5smq",
                    "to": "1cazg8t",
                    "as": "onload"
                },
                {
                    "from": "sxcqz1j/460m7iu",
                    "to": "1dv5smq",
                    "as": "fn"
                },
                {
                    "as": "value",
                    "from": "sxcqz1j/hdb2ynd",
                    "to": "sxcqz1j/460m7iu"
                },
                {
                    "from": "sxcqz1j/jkh9lze",
                    "to": "sxcqz1j/hdb2ynd",
                    "as": "name"
                },
                {
                    "as": "value",
                    "from": "sxcqz1j/k63st1m/f5ovpz6",
                    "to": "sxcqz1j/hdb2ynd"
                }
            ]
        },
        {
            "id": "ghiv2mr/ghiv2mr",
            "ref": "return",
            "name": "hydra_script"
        },
        {
            "id": "ghiv2mr/a90f8u3"
        },
        {
            "id": "ghiv2mr/tdt1ije",
            "ref": "if"
        },
        {
            "id": "ghiv2mr/8oa4eyq",
            "ref": "arg",
            "value": "hydra_synth"
        },
        {
            "id": "ghiv2mr/6sdl4fy/m9zoa11_1_1/888ciyv/hdrk08g",
            "ref": "hydra.out"
        },
        {
            "id": "ghiv2mr/6sdl4fy/m9zoa11_1_1/888ciyv/1nx75fs",
            "ref": "hydra.osc"
        },
        {
            "id": "ghiv2mr/6sdl4fy/m9zoa11_1_1/888ciyv/aj0fpb1",
            "value": "100"
        },
        {
            "id": "ghiv2mr/6sdl4fy/m9zoa11_1_1/888ciyv/2l9m0l1",
            "value": "hydra_synth",
            "ref": "arg"
        },
        {
            "id": "4yi185y",
            "out": "4yi185y",
            "nodes": [
                {
                    "id": "4yi185y",
                    "ref": "default"
                },
                {
                    "id": "gk8ut5r",
                    "ref": "event_subscriber"
                },
                {
                    "id": "w848c5b",
                    "value": "ctrl_enter"
                },
                {
                    "id": "bekxn9l/1vlypn7",
                    "value": "keydown"
                }
            ],
            "edges": [
                {
                    "from": "gk8ut5r",
                    "to": "4yi185y",
                    "as": "value"
                },
                {
                    "from": "w848c5b",
                    "to": "4yi185y",
                    "as": "otherwise"
                },
                {
                    "as": "name",
                    "from": "bekxn9l/1vlypn7",
                    "to": "gk8ut5r"
                }
            ]
        },
        {
            "id": "utility"
        },
        {
            "id": "flow"
        },
        {
            "id": "html"
        },
        {
            "id": "object"
        },
        {
            "id": "custom"
        },
        {
            "id": "state"
        },
        {
            "id": "JSON"
        },
        {
            "id": "log",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "value",
                    "ref": "arg",
                    "value": "value"
                },
                {
                    "id": "tag",
                    "ref": "arg",
                    "value": "tag"
                },
                {
                    "id": "out",
                    "args": [],
                    "script": "console.log(tag ?? _graph.name ?? _graph.id); console.log(value); return value"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "input",
                    "type": "ref"
                },
                {
                    "from": "tag",
                    "to": "out",
                    "as": "tag"
                },
                {
                    "from": "value",
                    "to": "out",
                    "as": "value"
                }
            ]
        },
        {
            "id": "fetch",
            "name": "fetch",
            "extern": "utility.fetch"
        },
        {
            "id": "call",
            "name": "call",
            "extern": "utility.call"
        },
        {
            "id": "stringify",
            "name": "stringify",
            "extern": "JSON.stringify"
        },
        {
            "id": "parse",
            "name": "parse",
            "extern": "JSON.parse"
        },
        {
            "id": "add",
            "extern": "utility.add"
        },
        {
            "id": "mult",
            "extern": "utility.mult"
        },
        {
            "id": "divide",
            "extern": "utility.divide"
        },
        {
            "id": "negate",
            "extern": "utility.negate"
        },
        {
            "id": "ancestors",
            "out": "out",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "graph",
                    "ref": "arg",
                    "value": "graph"
                },
                {
                    "id": "node",
                    "ref": "arg",
                    "value": "node"
                },
                {
                    "id": "out",
                    "script": "const parents = (id) => (graph ?? _graph).edges.filter(e => e.to === id).flatMap(e => parents(e.from)).concat([id]); return parents(node ?? graph.out ?? 'out')"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "_",
                    "type": "ref"
                },
                {
                    "from": "graph",
                    "to": "out",
                    "as": "graph"
                },
                {
                    "from": "node",
                    "to": "out",
                    "as": "node"
                }
            ]
        },
        {
            "id": "append",
            "type": "(array: A[], item: A) => A[]",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "array",
                    "ref": "arg",
                    "value": "array"
                },
                {
                    "id": "item",
                    "ref": "arg",
                    "value": "item"
                },
                {
                    "id": "out",
                    "script": "return array.concat(Array.isArray(item) ? item : [item])"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "_",
                    "type": "ref"
                },
                {
                    "from": "array",
                    "to": "out",
                    "as": "array"
                },
                {
                    "from": "item",
                    "to": "out",
                    "as": "item"
                }
            ]
        },
        {
            "id": "filter",
            "name": "filter",
            "in": "74n1jfm",
            "out": "lahq5z4",
            "description": "Filters an array using `fn: (element) => boolean`",
            "nodes": [
                {
                    "id": "lahq5z4",
                    "args": [],
                    "name": "filter/out",
                    "script": "const filter_fn = _lib.no.executeGraphNode({graph: fn.graph ?? _graph, lib: _lib})(typeof fn === 'string' ? fn : fn.fn); return arr.filter(element => filter_fn(Object.assign(fn.args ?? {}, {element})))"
                },
                {
                    "id": "x2sz5kb",
                    "args": [],
                    "ref": "arg",
                    "value": "arr"
                },
                {
                    "id": "fn",
                    "ref": "arg",
                    "value": "fn"
                },
                {
                    "id": "74n1jfm",
                    "args": [],
                    "name": "filter/in"
                }
            ],
            "edges": [
                {
                    "from": "x2sz5kb",
                    "to": "lahq5z4",
                    "as": "arr"
                },
                {
                    "from": "fn",
                    "to": "lahq5z4",
                    "as": "fn"
                },
                {
                    "from": "74n1jfm",
                    "to": "lahq5z4",
                    "as": "_",
                    "type": "ref"
                }
            ]
        },
        {
            "id": "default",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "value",
                    "ref": "arg",
                    "value": "value"
                },
                {
                    "id": "otherwise",
                    "ref": "arg",
                    "value": "otherwise"
                },
                {
                    "id": "data"
                },
                {
                    "id": "out",
                    "script": "return value ?? data['otherwise']"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "_args",
                    "type": "ref"
                },
                {
                    "from": "value",
                    "to": "out",
                    "as": "value"
                },
                {
                    "from": "otherwise",
                    "to": "data",
                    "as": "otherwise"
                },
                {
                    "from": "data",
                    "to": "out",
                    "as": "data"
                }
            ]
        },
        {
            "id": "switch",
            "args": [
                "data",
                "input"
            ],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "args",
                    "ref": "arg",
                    "value": "_args"
                },
                {
                    "id": "out",
                    "ref": "get"
                },
                {
                    "id": "input",
                    "ref": "arg",
                    "value": "input"
                },
                {
                    "id": "otherwise",
                    "ref": "arg",
                    "value": "otherwise"
                },
                {
                    "id": "string_input",
                    "script": "return new String(input).toString()"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "_",
                    "type": "ref"
                },
                {
                    "from": "args",
                    "to": "out",
                    "as": "target"
                },
                {
                    "from": "input",
                    "to": "string_input",
                    "as": "input"
                },
                {
                    "from": "string_input",
                    "to": "out",
                    "as": "path"
                },
                {
                    "from": "otherwise",
                    "to": "out",
                    "as": "otherwise"
                }
            ]
        },
        {
            "id": "if",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "pred",
                    "ref": "arg",
                    "value": "pred"
                },
                {
                    "id": "true",
                    "ref": "arg",
                    "value": "true"
                },
                {
                    "id": "false",
                    "ref": "arg",
                    "value": "false"
                },
                {
                    "id": "data"
                },
                {
                    "id": "out",
                    "script": "return !!pred ? data.true_val : data.false_val"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "_",
                    "type": "ref"
                },
                {
                    "from": "true",
                    "to": "data",
                    "as": "true_val"
                },
                {
                    "from": "false",
                    "to": "data",
                    "as": "false_val"
                },
                {
                    "from": "data",
                    "to": "out",
                    "as": "data"
                },
                {
                    "from": "pred",
                    "to": "out",
                    "as": "pred"
                }
            ]
        },
        {
            "id": "return",
            "out": "out",
            "nodes": [
                {
                    "id": "fn_args",
                    "ref": "arg",
                    "value": "_args"
                },
                {
                    "id": "args",
                    "ref": "arg",
                    "value": "args"
                },
                {
                    "id": "fn_el_from",
                    "ref": "arg",
                    "value": "element.from"
                },
                {
                    "id": "fn_el_as",
                    "ref": "arg",
                    "value": "element.as"
                },
                {
                    "id": "fn",
                    "script": "return {fn, graph: _lib.no.runtime.get_parent(_graph), args}"
                },
                {
                    "id": "fn_run",
                    "ref": "run"
                },
                {
                    "id": "result_entry",
                    "ref": "array"
                },
                {
                    "id": "fn_runnable",
                    "ref": "runnable"
                },
                {
                    "id": "edges",
                    "script": "return _lib.no.runtime.get_edges_in(_lib.no.runtime.get_parent(_graph), _graph.node_id).filter(e => e.as !== 'args');"
                },
                {
                    "id": "entries",
                    "ref": "map"
                },
                {
                    "id": "out",
                    "script": "return Object.fromEntries(entries)"
                }
            ],
            "edges": [
                {
                    "from": "fn_args",
                    "to": "fn",
                    "as": "args"
                },
                {
                    "from": "fn_el_from",
                    "to": "fn",
                    "as": "fn"
                },
                {
                    "from": "fn",
                    "to": "fn_run",
                    "as": "runnable"
                },
                {
                    "from": "fn_run",
                    "to": "result_entry",
                    "as": "a1"
                },
                {
                    "from": "fn_el_as",
                    "to": "result_entry",
                    "as": "a0"
                },
                {
                    "from": "result_entry",
                    "to": "fn_runnable",
                    "as": "fn"
                },
                {
                    "from": "result",
                    "to": "fn_runnable",
                    "as": "fn"
                },
                {
                    "from": "fn_runnable",
                    "to": "entries",
                    "as": "fn"
                },
                {
                    "from": "edges",
                    "to": "entries",
                    "as": "array"
                },
                {
                    "from": "args",
                    "to": "entries",
                    "as": "args"
                },
                {
                    "from": "entries",
                    "to": "out",
                    "as": "entries"
                }
            ]
        },
        {
            "id": "runnable",
            "out": "out",
            "nodes": [
                {
                    "id": "fn",
                    "ref": "arg",
                    "value": "fn"
                },
                {
                    "id": "value_args",
                    "ref": "arg",
                    "value": "args"
                },
                {
                    "id": "context_args",
                    "ref": "arg",
                    "value": "_args"
                },
                {
                    "id": "fn_path",
                    "value": "fn"
                },
                {
                    "id": "args_path",
                    "value": "args"
                },
                {
                    "id": "prune_vals",
                    "value": {
                        "args": false
                    }
                },
                {
                    "id": "delete_fn",
                    "ref": "delete"
                },
                {
                    "id": "delete_args",
                    "ref": "delete"
                },
                {
                    "id": "args",
                    "ref": "merge_objects"
                },
                {
                    "id": "out",
                    "script": "const parent_graph = _lib.no.runtime.get_parent(_graph); const input = _lib.no.runtime.get_edges_in(parent_graph, _graph.node_id).find(i => i.as === 'fn'); return input ? {fn: input.from, graph: parent_graph.id, args: args ?? {}} : false"
                }
            ],
            "edges": [
                {
                    "from": "context_args",
                    "to": "delete_fn",
                    "as": "target"
                },
                {
                    "from": "fn_path",
                    "to": "delete_fn",
                    "as": "path"
                },
                {
                    "from": "delete_fn",
                    "to": "delete_args",
                    "as": "target"
                },
                {
                    "from": "args_path",
                    "to": "delete_args",
                    "as": "path"
                },
                {
                    "from": "delete_args",
                    "to": "args",
                    "as": "o0"
                },
                {
                    "from": "prune_vals",
                    "to": "args",
                    "as": "o1"
                },
                {
                    "from": "value_args",
                    "to": "args",
                    "as": "o2"
                },
                {
                    "from": "args",
                    "to": "out",
                    "as": "args",
                    "type": "resolve"
                },
                {
                    "from": "fn",
                    "to": "out",
                    "as": "fn",
                    "type": "ref"
                }
            ]
        },
        {
            "id": "execute_graph",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "args",
                    "ref": "arg",
                    "value": "_args"
                },
                {
                    "id": "fn",
                    "ref": "arg",
                    "value": "fn"
                },
                {
                    "id": "fn_graph",
                    "ref": "arg",
                    "value": "fn_graph"
                },
                {
                    "id": "out",
                    "script": "const res_graph = fn_graph ?? _graph; return (...inner_args) => {return _lib.no.executeGraphNode({graph: {...res_graph, nodes: [...res_graph.nodes], edges: [...res_graph.edges]}, lib: _lib})(fn)(Object.keys(args).length > 0 ? Object.assign(args, inner_args.length === 1 ? inner_args[0] : inner_args) : inner_args.length === 1 ? inner_args[0] : inner_args);}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "_",
                    "type": "ref"
                },
                {
                    "from": "args",
                    "to": "out",
                    "as": "args"
                },
                {
                    "from": "fn",
                    "to": "out",
                    "as": "fn"
                },
                {
                    "from": "fn_graph",
                    "to": "out",
                    "as": "fn_graph"
                }
            ]
        },
        {
            "id": "apply",
            "script": "return _lib.no.executeGraphNode({graph: fn.graph ?? _graph, lib: _lib})(fn.fn ?? fn)(args);"
        },
        {
            "id": "partial",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "input_value",
                    "ref": "arg",
                    "value": "_args"
                },
                {
                    "id": "fn",
                    "ref": "arg",
                    "value": "fn"
                },
                {
                    "id": "args",
                    "ref": "arg",
                    "value": "args"
                },
                {
                    "id": "out",
                    "script": "return _lib.no.executeGraphNode({graph: _graph, lib: _lib})(fn)(Object.assign({}, _args, args))"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "args",
                    "type": "ref"
                },
                {
                    "from": "fn",
                    "to": "out",
                    "as": "fn"
                },
                {
                    "from": "args",
                    "to": "out",
                    "as": "args"
                },
                {
                    "from": "input_value",
                    "to": "out",
                    "as": "_args"
                }
            ]
        },
        {
            "id": "array",
            "name": "array",
            "extern": "utility.new_array"
        },
        {
            "id": "merge_objects",
            "extern": "utility.merge_objects"
        },
        {
            "id": "get",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "target",
                    "ref": "arg",
                    "value": "target"
                },
                {
                    "id": "path",
                    "ref": "arg",
                    "value": "path"
                },
                {
                    "id": "otherwise",
                    "ref": "arg",
                    "value": "otherwise"
                },
                {
                    "id": "out",
                    "extern": "just.get"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "input"
                },
                {
                    "from": "otherwise",
                    "to": "out",
                    "as": "def"
                },
                {
                    "from": "path",
                    "to": "out",
                    "as": "path"
                },
                {
                    "from": "target",
                    "to": "out",
                    "as": "target"
                }
            ]
        },
        {
            "id": "arg",
            "extern": "utility.arg"
        },
        {
            "id": "set",
            "type": "(target: any, value: any, path: string) => any",
            "script": "const keys = path.split('.'); const check = (o, v, k) => k.length === 1 ? {...o, [k[0]]: v, _needsresolve: true} : o.hasOwnProperty(k[0]) ? {...o, [k[0]]: check(o[k[0]], v, k.slice(1)), _needsresolve: true} : o; return check(target, value, keys)"
        },
        {
            "id": "delete",
            "out": "out",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "target",
                    "ref": "arg",
                    "value": "target"
                },
                {
                    "id": "path",
                    "ref": "arg",
                    "value": "path"
                },
                {
                    "id": "out",
                    "script": "const new_val = Object.assign({}, target); delete new_val[path]; return new_val"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "args"
                },
                {
                    "from": "target",
                    "to": "out",
                    "as": "target"
                },
                {
                    "from": "path",
                    "to": "out",
                    "as": "path"
                }
            ]
        },
        {
            "id": "cache",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "value",
                    "ref": "arg",
                    "value": "value"
                },
                {
                    "id": "recache",
                    "ref": "arg",
                    "value": "recache"
                },
                {
                    "id": "cached",
                    "ref": "arg",
                    "value": "cached",
                    "type": "internal"
                },
                {
                    "id": "cache",
                    "script": "_lib.no.runtime.update_graph(_graph, {cached: value}); return value;"
                },
                {
                    "id": "cached_value",
                    "ref": "default"
                },
                {
                    "id": "out",
                    "ref": "if"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "_"
                },
                {
                    "from": "value",
                    "to": "cache",
                    "as": "value"
                },
                {
                    "from": "cache",
                    "to": "cached_value",
                    "as": "otherwise"
                },
                {
                    "from": "cached",
                    "to": "cached_value",
                    "as": "value"
                },
                {
                    "from": "cached_value",
                    "to": "out",
                    "as": "false"
                },
                {
                    "from": "cache",
                    "to": "out",
                    "as": "true"
                },
                {
                    "from": "recache",
                    "to": "out",
                    "as": "pred"
                }
            ]
        },
        {
            "id": "isunchanged",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "value",
                    "ref": "arg",
                    "value": "value"
                },
                {
                    "id": "fn",
                    "ref": "arg",
                    "value": "fn"
                },
                {
                    "id": "cached",
                    "ref": "arg",
                    "value": "cached",
                    "type": "internal"
                },
                {
                    "id": "eq_default",
                    "ref": "eq"
                },
                {
                    "id": "eq_runnable",
                    "ref": "runnable"
                },
                {
                    "id": "fn_runnable",
                    "ref": "default"
                },
                {
                    "id": "eq_fn_runnable",
                    "script": "return {...fn, args: {...(fn.args ?? {}), a, b}}"
                },
                {
                    "id": "eq_fn",
                    "ref": "run"
                },
                {
                    "id": "cache",
                    "script": "_lib.no.runtime.update_graph(_graph, {cached: value}); return eq;"
                },
                {
                    "id": "out",
                    "ref": "if"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "_"
                },
                {
                    "from": "eq_default",
                    "to": "eq_runnable",
                    "as": "fn"
                },
                {
                    "from": "eq_runnable",
                    "to": "fn_runnable",
                    "as": "otherwise"
                },
                {
                    "from": "fn",
                    "to": "fn_runnable",
                    "as": "value"
                },
                {
                    "from": "fn_runnable",
                    "to": "eq_fn_runnable",
                    "as": "fn"
                },
                {
                    "from": "value",
                    "to": "eq_fn_runnable",
                    "as": "a"
                },
                {
                    "from": "cached",
                    "to": "eq_fn_runnable",
                    "as": "b"
                },
                {
                    "from": "eq_fn_runnable",
                    "to": "eq_fn",
                    "as": "runnable"
                },
                {
                    "from": "eq_fn",
                    "to": "out",
                    "as": "pred"
                },
                {
                    "from": "eq_fn",
                    "to": "out",
                    "as": "true"
                },
                {
                    "from": "value",
                    "to": "cache",
                    "as": "value"
                },
                {
                    "from": "eq_fn",
                    "to": "cache",
                    "as": "eq"
                },
                {
                    "from": "cache",
                    "to": "out",
                    "as": "false"
                }
            ]
        },
        {
            "id": "set_arg",
            "nodes": [
                {
                    "id": "name",
                    "ref": "arg",
                    "value": "name"
                },
                {
                    "id": "value",
                    "ref": "arg",
                    "value": "value"
                },
                {
                    "id": "env",
                    "ref": "arg",
                    "value": "_args",
                    "type": "internal"
                },
                {
                    "id": "prev_value",
                    "ref": "get"
                },
                {
                    "id": "out",
                    "script": "if(!_lib.utility.compare(env[name]._value, value)){ _lib.no.runtime.update_graph(_lib.no.runtime.get_parentest(_graph), {[name]: value});} return value;"
                }
            ],
            "edges": [
                {
                    "from": "name",
                    "to": "out",
                    "as": "name"
                },
                {
                    "from": "value",
                    "to": "out",
                    "as": "value"
                },
                {
                    "from": "env",
                    "to": "out",
                    "as": "env"
                }
            ]
        },
        {
            "id": "event_publisher",
            "out": "update",
            "nodes": [
                {
                    "id": "name",
                    "ref": "arg",
                    "value": "name"
                },
                {
                    "id": "value",
                    "ref": "arg",
                    "value": "value"
                },
                {
                    "id": "update",
                    "extern": "no.runtime.publish"
                }
            ],
            "edges": [
                {
                    "from": "name",
                    "to": "update",
                    "as": "event"
                },
                {
                    "from": "value",
                    "to": "update",
                    "as": "data"
                }
            ]
        },
        {
            "id": "event_publisher_onchange",
            "out": "out",
            "nodes": [
                {
                    "id": "value",
                    "ref": "arg",
                    "value": "value"
                },
                {
                    "id": "value_eq_a",
                    "ref": "arg",
                    "value": "a"
                },
                {
                    "id": "value_eq_b",
                    "ref": "arg",
                    "value": "b"
                },
                {
                    "id": "value_eq_fn",
                    "script": "return _lib.utility.compare(a, b)"
                },
                {
                    "id": "value_eq",
                    "ref": "runnable"
                },
                {
                    "id": "value_unchanged",
                    "ref": "isunchanged"
                },
                {
                    "id": "publisher",
                    "ref": "event_publisher"
                },
                {
                    "id": "out",
                    "ref": "if"
                }
            ],
            "edges": [
                {
                    "from": "value",
                    "to": "value_eq",
                    "as": "value"
                },
                {
                    "from": "value_eq_a",
                    "to": "value_eq_fn",
                    "as": "a"
                },
                {
                    "from": "value_eq_b",
                    "to": "value_eq_fn",
                    "as": "b"
                },
                {
                    "from": "value_eq_fn",
                    "to": "value_eq",
                    "as": "fn"
                },
                {
                    "from": "value_eq",
                    "to": "value_unchanged",
                    "as": "fn"
                },
                {
                    "from": "value_unchanged",
                    "to": "out",
                    "as": "pred"
                },
                {
                    "from": "publisher",
                    "to": "out",
                    "as": "false"
                },
                {
                    "from": "value",
                    "to": "out",
                    "as": "true"
                }
            ]
        },
        {
            "id": "input_value",
            "out": "out",
            "nodes": [
                {
                    "id": "value",
                    "ref": "arg",
                    "value": "value"
                },
                {
                    "id": "out",
                    "script": "const parent = _lib.no.runtime.get_parent(_graph); const graph_node = _lib.no.runtime.get_node(parent, _graph.node_id); if(!_lib.utility.compare(_lib.no.runtime.get_node(parent, _graph.node_id).value, value)) { _lib.no.runtime.add_node(parent, {...graph_node, id: _graph.node_id, value}); } return value"
                }
            ],
            "edges": [
                {
                    "from": "value",
                    "to": "out",
                    "as": "value",
                    "type": "resolve"
                }
            ]
        },
        {
            "id": "event_subscriber",
            "out": "out",
            "nodes": [
                {
                    "id": "name",
                    "ref": "arg",
                    "value": "name"
                },
                {
                    "id": "onevent",
                    "ref": "arg",
                    "value": "onevent"
                },
                {
                    "id": "data",
                    "ref": "arg",
                    "value": "data",
                    "type": "internal"
                },
                {
                    "id": "add_listener",
                    "script": "_lib.no.runtime.add_listener(event, _graph.id, (data) => (_lib.no.runtime.update_args(_graph, {data})), false);",
                    "_script": "const parent = _lib.no.runtime.get_parent(_graph); _lib.no.runtime.add_listener(event, _graph.id, (graph, data) => {if(onevent) { _lib.no.runGraph(onevent.graph, onevent.fn, {...onevent.args, data})}}, true)"
                },
                {
                    "id": "out",
                    "ref": "default"
                }
            ],
            "edges": [
                {
                    "from": "name",
                    "to": "add_listener",
                    "as": "event"
                },
                {
                    "from": "onevent",
                    "to": "add_listener",
                    "as": "onevent"
                },
                {
                    "from": "add_listener",
                    "to": "out",
                    "as": "otherwise"
                },
                {
                    "from": "data",
                    "to": "out",
                    "as": "value"
                }
            ]
        },
        {
            "id": "events_broadcast_channel",
            "out": "out",
            "nodes": [
                {
                    "id": "arg_onmessage",
                    "ref": "arg",
                    "value": "onmessage"
                },
                {
                    "id": "message_data",
                    "ref": "arg",
                    "value": "message.data.data"
                },
                {
                    "id": "message_name",
                    "ref": "arg",
                    "value": "message.data.name"
                },
                {
                    "id": "publish_event",
                    "ref": "event_publisher"
                },
                {
                    "id": "publish_event_runnable",
                    "ref": "runnable"
                },
                {
                    "id": "onmessageseq",
                    "ref": "sequence"
                },
                {
                    "id": "out",
                    "script": "const bc = new BroadcastChannel('events'); bc.onmessage = e => { _lib.no.runGraph(onmessage.graph, onmessage.fn, {message: e}, _lib); }; return bc;"
                }
            ],
            "edges": [
                {
                    "from": "message_data",
                    "to": "publish_event",
                    "as": "value"
                },
                {
                    "from": "message_name",
                    "to": "publish_event",
                    "as": "name"
                },
                {
                    "from": "publish_event",
                    "to": "publish_event_runnable",
                    "as": "fn"
                },
                {
                    "from": "publish_event_runnable",
                    "to": "onmessageseq",
                    "as": "arg0"
                },
                {
                    "from": "arg_onmessage",
                    "to": "onmessageseq",
                    "as": "arg1"
                },
                {
                    "from": "onmessageseq",
                    "to": "out",
                    "as": "onmessage"
                }
            ]
        },
        {
            "id": "run",
            "out": "out",
            "nodes": [
                {
                    "id": "runnable",
                    "ref": "arg",
                    "value": "runnable"
                },
                {
                    "id": "out",
                    "script": "return _lib.no.runGraph(runnable.graph, runnable.fn, runnable.args, _lib)"
                }
            ],
            "edges": [
                {
                    "from": "runnable",
                    "to": "out",
                    "as": "runnable"
                }
            ]
        },
        {
            "id": "map",
            "name": "map",
            "in": "m3b5wg3",
            "out": "tgurdpo",
            "nodes": [
                {
                    "id": "tgurdpo",
                    "ref": "call",
                    "name": "out"
                },
                {
                    "id": "m3b5wg3",
                    "name": "in"
                },
                {
                    "id": "rielyq8",
                    "value": "map",
                    "name": "rielyq8"
                },
                {
                    "ref": "arg",
                    "id": "1rre4bx",
                    "value": "array",
                    "name": "1rre4bx"
                },
                {
                    "ref": "arg",
                    "id": "6g75abk",
                    "value": "fn",
                    "name": "6g75abk"
                },
                {
                    "id": "w0zzawl",
                    "ref": "array",
                    "name": "w0zzawl"
                },
                {
                    "id": "args",
                    "ref": "arg",
                    "value": "args"
                },
                {
                    "id": "pdljod1",
                    "name": "pdljod1",
                    "script": "return (element, index, array) => _lib.no.runGraph(fn?.graph ?? _graph, fn?.fn ?? fn, Object.assign({}, fn.args, args, {element, index, array}), _lib);"
                },
                {
                    "id": "2lvs5dj",
                    "script": "return _graph",
                    "name": "2lvs5dj"
                }
            ],
            "edges": [
                {
                    "from": "m3b5wg3",
                    "to": "tgurdpo",
                    "as": "args",
                    "type": "ref"
                },
                {
                    "from": "rielyq8",
                    "to": "tgurdpo",
                    "as": "fn"
                },
                {
                    "from": "1rre4bx",
                    "to": "tgurdpo",
                    "as": "self"
                },
                {
                    "from": "1rre4bx",
                    "to": "pdljod1",
                    "as": "arr"
                },
                {
                    "from": "w0zzawl",
                    "to": "tgurdpo",
                    "as": "args",
                    "type": "resolve"
                },
                {
                    "from": "pdljod1",
                    "to": "w0zzawl",
                    "as": "a0",
                    "type": "resolve"
                },
                {
                    "from": "2lvs5dj",
                    "to": "pdljod1",
                    "as": "graph"
                },
                {
                    "from": "args",
                    "to": "pdljod1",
                    "as": "args"
                },
                {
                    "from": "6g75abk",
                    "to": "pdljod1",
                    "as": "fn"
                }
            ]
        },
        {
            "id": "sequence",
            "name": "sequence",
            "out": "out",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "args",
                    "ref": "arg",
                    "value": "_args"
                },
                {
                    "id": "runnable_args",
                    "ref": "arg",
                    "value": "_args"
                },
                {
                    "id": "value_args",
                    "ref": "arg",
                    "value": "args"
                },
                {
                    "id": "context_args",
                    "ref": "arg",
                    "value": "_args"
                },
                {
                    "id": "merged_args",
                    "ref": "merge_objects"
                },
                {
                    "id": "args_path",
                    "value": "args"
                },
                {
                    "id": "seq_runnable_args",
                    "ref": "delete"
                },
                {
                    "name": "in",
                    "id": "in"
                },
                {
                    "id": "runnables_promise",
                    "script": "return Promise.all(promises);"
                },
                {
                    "id": "map_runnables",
                    "ref": "map"
                },
                {
                    "id": "runnables",
                    "script": "const runnables = Object.entries(inputs).filter(e => e[0] !== 'args').map(e => [e[0], e[1] && e[1]._Proxy ? e[1]._value : e[1]]).filter(r => r[1] && (!r[1]._Proxy || r[1]._value) && r[1].hasOwnProperty('fn') && r[1].hasOwnProperty('graph')); const filtered_args = Object.fromEntries(Object.entries(args).filter(a => !runnables.find(r => r[0] === a[0]))); return runnables.map(r => r[1]).map(r => ({...r, args: {...r.args, ...filtered_args}}))"
                },
                {
                    "id": "element",
                    "ref": "arg",
                    "value": "element",
                    "type": "internal"
                },
                {
                    "id": "map_fn",
                    "script": "return new Promise((resolve, reject) => resolve(_lib.no.runGraph(runnable.graph, runnable.fn, runnable.args, _lib)));"
                },
                {
                    "id": "map_fn_runnable",
                    "ref": "runnable"
                },
                {
                    "name": "seq_runnable",
                    "id": "out",
                    "ref": "runnable"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "runnables",
                    "as": "inputs"
                },
                {
                    "from": "args",
                    "to": "runnables",
                    "as": "args"
                },
                {
                    "from": "element",
                    "to": "map_fn",
                    "as": "runnable"
                },
                {
                    "from": "map_fn",
                    "to": "map_fn_runnable",
                    "as": "fn"
                },
                {
                    "from": "runnable_args",
                    "to": "map_runnables",
                    "as": "args"
                },
                {
                    "from": "runnables",
                    "to": "map_runnables",
                    "as": "array"
                },
                {
                    "from": "map_fn_runnable",
                    "to": "map_runnables",
                    "as": "fn"
                },
                {
                    "from": "map_runnables",
                    "to": "runnables_promise",
                    "as": "promises"
                },
                {
                    "from": "runnables_promise",
                    "to": "out",
                    "as": "fn"
                },
                {
                    "from": "context_args",
                    "to": "merged_args",
                    "as": "a0"
                },
                {
                    "from": "value_args",
                    "to": "merged_args",
                    "as": "a1"
                },
                {
                    "from": "merged_args",
                    "to": "seq_runnable_args",
                    "as": "target"
                },
                {
                    "from": "args_path",
                    "to": "seq_runnable_args",
                    "as": "path"
                },
                {
                    "from": "seq_runnable_args",
                    "to": "out",
                    "as": "args"
                }
            ]
        },
        {
            "id": "import_json",
            "name": "import_json",
            "in": "gsiimdp",
            "out": "lapeojg",
            "nodes": [
                {
                    "id": "lapeojg",
                    "script": "const new_nodes = import_graph.nodes.map(n => ({...n, id: name + '.' + n.id}));\n\nconst new_graph = {\n..._graph,\nnodes: [...(new Map(_graph.nodes.concat(new_nodes).map(n => [n.id, n])).values())]\n}\n\n_lib.no.runtime.update_graph(new_graph); return name;",
                    "name": "out"
                },
                {
                    "id": "gsiimdp",
                    "name": "in"
                },
                {
                    "id": "3zfjt1h",
                    "ref": "call"
                },
                {
                    "id": "05eag47",
                    "ref": "arg",
                    "value": "name"
                },
                {
                    "id": "2vtokcl",
                    "script": "return fetch(url);"
                },
                {
                    "id": "i9x02is",
                    "value": "json"
                },
                {
                    "id": "irr99xz",
                    "ref": "arg",
                    "value": "url"
                }
            ],
            "edges": [
                {
                    "from": "gsiimdp",
                    "to": "lapeojg",
                    "as": "arg0"
                },
                {
                    "as": "import_graph",
                    "from": "3zfjt1h",
                    "to": "lapeojg"
                },
                {
                    "from": "05eag47",
                    "to": "lapeojg",
                    "as": "name"
                },
                {
                    "as": "self",
                    "from": "2vtokcl",
                    "to": "3zfjt1h"
                },
                {
                    "from": "i9x02is",
                    "to": "3zfjt1h",
                    "as": "fn"
                },
                {
                    "from": "irr99xz",
                    "to": "2vtokcl",
                    "as": "url"
                }
            ]
        },
        {
            "id": "object_entries",
            "name": "object_entries",
            "in": "tkd4tqn",
            "out": "j8c79uf",
            "nodes": [
                {
                    "name": "out",
                    "id": "j8c79uf",
                    "ref": "filter"
                },
                {
                    "id": "tkd4tqn",
                    "name": "in"
                },
                {
                    "id": "hfexsuu",
                    "script": "return !key?.startsWith('_');"
                },
                {
                    "id": "runnable",
                    "ref": "runnable"
                },
                {
                    "id": "bgi2g37",
                    "script": "return Object.entries(obj)"
                },
                {
                    "id": "7gqcw0o",
                    "ref": "arg",
                    "value": "0.0"
                },
                {
                    "id": "kpakw50",
                    "ref": "arg",
                    "value": "object"
                }
            ],
            "edges": [
                {
                    "from": "tkd4tqn",
                    "to": "j8c79uf",
                    "as": "arr"
                },
                {
                    "from": "hfexsuu",
                    "to": "runnable",
                    "as": "fn"
                },
                {
                    "from": "runnable",
                    "to": "j8c79uf",
                    "as": "fn"
                },
                {
                    "from": "bgi2g37",
                    "to": "j8c79uf",
                    "as": "arr"
                },
                {
                    "from": "7gqcw0o",
                    "to": "hfexsuu",
                    "as": "key"
                },
                {
                    "from": "kpakw50",
                    "to": "bgi2g37",
                    "as": "obj"
                }
            ]
        },
        {
            "id": "css_anim",
            "name": "css_anim",
            "in": "cawqofn",
            "out": "spy9h48",
            "nodes": [
                {
                    "name": "out",
                    "id": "spy9h48",
                    "script": "return Object.fromEntries((Array.isArray(arr[0]) ? arr[0] : arr).map((v, i, a) => [Math.floor((i / a.length)*100) + \"%\", v]))"
                },
                {
                    "id": "cawqofn",
                    "ref": "array",
                    "name": "in"
                }
            ],
            "edges": [
                {
                    "as": "arr",
                    "from": "cawqofn",
                    "to": "spy9h48",
                    "type": "resolve"
                }
            ]
        },
        {
            "id": "css_styles",
            "name": "css_styles",
            "in": "xw3pmx7",
            "out": "5yxmxua",
            "nodes": [
                {
                    "id": "5yxmxua",
                    "ref": "html_element",
                    "name": "out"
                },
                {
                    "id": "vgv61zj",
                    "ref": "html_text"
                },
                {
                    "id": "jstjx7g"
                },
                {
                    "id": "h40e3j9",
                    "value": "style"
                },
                {
                    "id": "xw3pmx7",
                    "name": "in"
                },
                {
                    "id": "jlgp7uy",
                    "ref": "call",
                    "name": "named_obj/out"
                },
                {
                    "id": "o1j78dd",
                    "value": "result-view"
                },
                {
                    "id": "ij4z84e",
                    "ref": "map"
                },
                {
                    "id": "q3pwj9j",
                    "value": "join"
                },
                {
                    "id": "d6h3gdw",
                    "ref": "array"
                },
                {
                    "id": "j8c79uf",
                    "name": "object_entries",
                    "ref": "object_entries"
                },
                {
                    "id": "n9g4wyq",
                    "ref": "runnable"
                },
                {
                    "id": "z63iaay",
                    "script": "return \"\\n\";"
                },
                {
                    "id": "vwsgweb",
                    "ref": "default"
                },
                {
                    "id": "aelf1a7",
                    "script": "return key + '{' + value + '}'",
                    "name": "out"
                },
                {
                    "id": "mkwx4yx"
                },
                {
                    "id": "fzr4mkv",
                    "ref": "arg",
                    "value": "css_object"
                },
                {
                    "id": "5eqf77t",
                    "value": "element.0",
                    "ref": "arg"
                },
                {
                    "id": "5pwetw5",
                    "ref": "if"
                },
                {
                    "id": "o5ojdyc",
                    "script": "return key.startsWith(\"@keyframes\")"
                },
                {
                    "id": "1hpnid4",
                    "ref": "call"
                },
                {
                    "id": "slj7ynn/jlgp7uy",
                    "ref": "call",
                    "name": "named_obj/out"
                },
                {
                    "id": "ft1oksl",
                    "ref": "arg",
                    "value": "element.0"
                },
                {
                    "id": "bbbp82v",
                    "ref": "map"
                },
                {
                    "id": "cp66ig5",
                    "value": "join"
                },
                {
                    "id": "uwq9u81",
                    "ref": "array"
                },
                {
                    "id": "slj7ynn/ij4z84e",
                    "ref": "map"
                },
                {
                    "id": "slj7ynn/q3pwj9j",
                    "value": "join"
                },
                {
                    "id": "slj7ynn/d6h3gdw",
                    "ref": "array"
                },
                {
                    "id": "i1ifamx",
                    "ref": "object_entries"
                },
                {
                    "id": "druspar",
                    "ref": "runnable"
                },
                {
                    "id": "gth1wc2",
                    "script": "return \"\\n\";"
                },
                {
                    "id": "slj7ynn/j8c79uf",
                    "name": "object_entries",
                    "ref": "object_entries"
                },
                {
                    "id": "slj7ynn/n9g4wyq",
                    "ref": "runnable"
                },
                {
                    "id": "slj7ynn/z63iaay",
                    "script": "return \"\\n\";"
                },
                {
                    "id": "y25dg2n",
                    "value": "element.1",
                    "ref": "arg"
                },
                {
                    "id": "0d4yh8u",
                    "script": "return key + ': ' + value + \";\";"
                },
                {
                    "id": "slj7ynn/vwsgweb",
                    "ref": "default"
                },
                {
                    "id": "slj7ynn/aelf1a7",
                    "script": "return key + '{' + value + '}'",
                    "name": "out"
                },
                {
                    "id": "h13a9fd",
                    "ref": "arg",
                    "value": "element.0"
                },
                {
                    "id": "h7me3v8",
                    "ref": "arg",
                    "value": "element.1"
                },
                {
                    "id": "slj7ynn/mkwx4yx"
                },
                {
                    "id": "slj7ynn/fzr4mkv",
                    "ref": "arg",
                    "value": "element.1"
                },
                {
                    "id": "slj7ynn/5eqf77t",
                    "value": "element.0",
                    "ref": "arg"
                },
                {
                    "id": "slj7ynn/1hpnid4",
                    "ref": "call"
                },
                {
                    "id": "slj7ynn/bbbp82v",
                    "ref": "map"
                },
                {
                    "id": "slj7ynn/cp66ig5",
                    "value": "join"
                },
                {
                    "id": "slj7ynn/uwq9u81",
                    "ref": "array"
                },
                {
                    "id": "slj7ynn/i1ifamx",
                    "ref": "object_entries"
                },
                {
                    "id": "slj7ynn/druspar",
                    "ref": "runnable"
                },
                {
                    "id": "slj7ynn/gth1wc2",
                    "script": "return \"\\n\";"
                },
                {
                    "id": "slj7ynn/y25dg2n",
                    "value": "element.1",
                    "ref": "arg"
                },
                {
                    "id": "slj7ynn/0d4yh8u",
                    "script": "return key + ': ' + value + \";\";"
                },
                {
                    "id": "slj7ynn/h13a9fd",
                    "ref": "arg",
                    "value": "element.0"
                },
                {
                    "id": "slj7ynn/h7me3v8",
                    "ref": "arg",
                    "value": "element.1"
                }
            ],
            "edges": [
                {
                    "from": "vgv61zj",
                    "to": "5yxmxua",
                    "as": "children"
                },
                {
                    "from": "jstjx7g",
                    "to": "5yxmxua",
                    "as": "props"
                },
                {
                    "from": "h40e3j9",
                    "to": "5yxmxua",
                    "as": "dom_type"
                },
                {
                    "from": "xw3pmx7",
                    "to": "5yxmxua",
                    "as": "arg3"
                },
                {
                    "from": "jlgp7uy",
                    "to": "vgv61zj",
                    "as": "text"
                },
                {
                    "from": "o1j78dd",
                    "to": "jstjx7g",
                    "as": "key"
                },
                {
                    "from": "ij4z84e",
                    "to": "jlgp7uy",
                    "as": "self"
                },
                {
                    "from": "q3pwj9j",
                    "to": "jlgp7uy",
                    "as": "fn"
                },
                {
                    "from": "d6h3gdw",
                    "to": "jlgp7uy",
                    "as": "args"
                },
                {
                    "from": "j8c79uf",
                    "to": "ij4z84e",
                    "as": "array"
                },
                {
                    "as": "fn",
                    "from": "n9g4wyq",
                    "to": "ij4z84e"
                },
                {
                    "from": "z63iaay",
                    "to": "d6h3gdw",
                    "as": "arg0"
                },
                {
                    "from": "vwsgweb",
                    "to": "j8c79uf",
                    "as": "object"
                },
                {
                    "as": "fn",
                    "from": "aelf1a7",
                    "to": "n9g4wyq"
                },
                {
                    "from": "mkwx4yx",
                    "to": "vwsgweb",
                    "as": "otherwise"
                },
                {
                    "from": "fzr4mkv",
                    "to": "vwsgweb",
                    "as": "value"
                },
                {
                    "from": "5eqf77t",
                    "to": "aelf1a7",
                    "as": "key"
                },
                {
                    "from": "5pwetw5",
                    "to": "aelf1a7",
                    "as": "value"
                },
                {
                    "from": "o5ojdyc",
                    "to": "5pwetw5",
                    "as": "pred"
                },
                {
                    "as": "false",
                    "from": "1hpnid4",
                    "to": "5pwetw5"
                },
                {
                    "from": "slj7ynn/jlgp7uy",
                    "to": "5pwetw5",
                    "as": "true"
                },
                {
                    "as": "key",
                    "from": "ft1oksl",
                    "to": "o5ojdyc"
                },
                {
                    "from": "bbbp82v",
                    "to": "1hpnid4",
                    "as": "self"
                },
                {
                    "from": "cp66ig5",
                    "to": "1hpnid4",
                    "as": "fn"
                },
                {
                    "from": "uwq9u81",
                    "to": "1hpnid4",
                    "as": "args"
                },
                {
                    "from": "slj7ynn/ij4z84e",
                    "to": "slj7ynn/jlgp7uy",
                    "as": "self"
                },
                {
                    "from": "slj7ynn/q3pwj9j",
                    "to": "slj7ynn/jlgp7uy",
                    "as": "fn"
                },
                {
                    "from": "slj7ynn/d6h3gdw",
                    "to": "slj7ynn/jlgp7uy",
                    "as": "args"
                },
                {
                    "from": "i1ifamx",
                    "to": "bbbp82v",
                    "as": "array"
                },
                {
                    "as": "fn",
                    "from": "druspar",
                    "to": "bbbp82v"
                },
                {
                    "from": "gth1wc2",
                    "to": "uwq9u81",
                    "as": "arg0"
                },
                {
                    "from": "slj7ynn/j8c79uf",
                    "to": "slj7ynn/ij4z84e",
                    "as": "array"
                },
                {
                    "as": "fn",
                    "from": "slj7ynn/n9g4wyq",
                    "to": "slj7ynn/ij4z84e"
                },
                {
                    "from": "slj7ynn/z63iaay",
                    "to": "slj7ynn/d6h3gdw",
                    "as": "arg0"
                },
                {
                    "from": "y25dg2n",
                    "to": "i1ifamx",
                    "as": "object"
                },
                {
                    "as": "fn",
                    "from": "0d4yh8u",
                    "to": "druspar"
                },
                {
                    "from": "slj7ynn/vwsgweb",
                    "to": "slj7ynn/j8c79uf",
                    "as": "object"
                },
                {
                    "as": "fn",
                    "from": "slj7ynn/aelf1a7",
                    "to": "slj7ynn/n9g4wyq"
                },
                {
                    "from": "h13a9fd",
                    "to": "0d4yh8u",
                    "as": "key"
                },
                {
                    "from": "h7me3v8",
                    "to": "0d4yh8u",
                    "as": "value"
                },
                {
                    "from": "slj7ynn/mkwx4yx",
                    "to": "slj7ynn/vwsgweb",
                    "as": "otherwise"
                },
                {
                    "from": "slj7ynn/fzr4mkv",
                    "to": "slj7ynn/vwsgweb",
                    "as": "value"
                },
                {
                    "from": "slj7ynn/5eqf77t",
                    "to": "slj7ynn/aelf1a7",
                    "as": "key"
                },
                {
                    "as": "value",
                    "from": "slj7ynn/1hpnid4",
                    "to": "slj7ynn/aelf1a7"
                },
                {
                    "from": "slj7ynn/bbbp82v",
                    "to": "slj7ynn/1hpnid4",
                    "as": "self"
                },
                {
                    "from": "slj7ynn/cp66ig5",
                    "to": "slj7ynn/1hpnid4",
                    "as": "fn"
                },
                {
                    "from": "slj7ynn/uwq9u81",
                    "to": "slj7ynn/1hpnid4",
                    "as": "args"
                },
                {
                    "from": "slj7ynn/i1ifamx",
                    "to": "slj7ynn/bbbp82v",
                    "as": "array"
                },
                {
                    "as": "fn",
                    "from": "slj7ynn/druspar",
                    "to": "slj7ynn/bbbp82v"
                },
                {
                    "from": "slj7ynn/gth1wc2",
                    "to": "slj7ynn/uwq9u81",
                    "as": "arg0"
                },
                {
                    "from": "slj7ynn/y25dg2n",
                    "to": "slj7ynn/i1ifamx",
                    "as": "object"
                },
                {
                    "as": "fn",
                    "from": "slj7ynn/0d4yh8u",
                    "to": "slj7ynn/druspar"
                },
                {
                    "from": "slj7ynn/h13a9fd",
                    "to": "slj7ynn/0d4yh8u",
                    "as": "key"
                },
                {
                    "from": "slj7ynn/h7me3v8",
                    "to": "slj7ynn/0d4yh8u",
                    "as": "value"
                }
            ]
        },
        {
            "edges": [
                {
                    "from": "gvkhkfw",
                    "to": "nn4twx9",
                    "as": "children"
                },
                {
                    "from": "7rhq0q5",
                    "to": "nn4twx9",
                    "as": "_"
                },
                {
                    "from": "4972gx3",
                    "to": "gvkhkfw",
                    "as": "arg1"
                },
                {
                    "from": "1ldhfah",
                    "to": "gvkhkfw",
                    "as": "arg0"
                },
                {
                    "from": "ee5i5r2",
                    "to": "4972gx3",
                    "as": "dom_type"
                },
                {
                    "from": "ro8n2gc",
                    "to": "4972gx3",
                    "as": "props"
                },
                {
                    "from": "wet0jdv",
                    "to": "1ldhfah",
                    "as": "children"
                },
                {
                    "from": "gcuxiw9",
                    "to": "1ldhfah",
                    "as": "props"
                },
                {
                    "from": "875c1wk",
                    "to": "1ldhfah",
                    "as": "dom_type"
                },
                {
                    "from": "t6q6rvf",
                    "to": "ro8n2gc",
                    "as": "arg0"
                },
                {
                    "from": "rjwtb3c",
                    "to": "ro8n2gc",
                    "as": "props"
                },
                {
                    "from": "utkc9o6",
                    "to": "wet0jdv",
                    "as": "arg0"
                },
                {
                    "from": "jxl9r29",
                    "to": "gcuxiw9",
                    "as": "for"
                },
                {
                    "from": "2zxw9oo",
                    "to": "t6q6rvf",
                    "as": "onkeydown"
                },
                {
                    "from": "i7y9dyy",
                    "to": "t6q6rvf",
                    "as": "onchange"
                },
                {
                    "from": "vks4vul",
                    "to": "rjwtb3c",
                    "as": "value"
                },
                {
                    "from": "ddfgy2s",
                    "to": "rjwtb3c",
                    "as": "otherwise"
                },
                {
                    "from": "trd8ptp",
                    "to": "utkc9o6",
                    "as": "text"
                },
                {
                    "from": "zfrrk0z",
                    "to": "jxl9r29",
                    "as": "value"
                },
                {
                    "to": "2zxw9oo",
                    "from": "qseh2tb",
                    "as": "fn",
                    "type": "ref"
                },
                {
                    "from": "b0j8nyq",
                    "to": "i7y9dyy",
                    "as": "dispatch"
                },
                {
                    "from": "eotod0l",
                    "to": "i7y9dyy",
                    "as": "seq"
                },
                {
                    "from": "qxwvdfe",
                    "to": "i7y9dyy",
                    "as": "value"
                },
                {
                    "from": "0dnqo5l",
                    "to": "i7y9dyy",
                    "as": "onchange_fn"
                },
                {
                    "from": "1wps21n",
                    "to": "qseh2tb",
                    "as": "a1"
                },
                {
                    "from": "y5q7mbn",
                    "to": "qseh2tb",
                    "as": "a0"
                },
                {
                    "from": "qjc0zt6",
                    "to": "eotod0l",
                    "as": "arg"
                },
                {
                    "from": "widk6u6",
                    "to": "qjc0zt6",
                    "as": "fn"
                },
                {
                    "from": "506ntvb",
                    "to": "qjc0zt6",
                    "as": "value"
                },
                {
                    "from": "4ck1vaf",
                    "to": "widk6u6",
                    "as": "fn"
                }
            ],
            "nodes": [
                {
                    "id": "nn4twx9",
                    "ref": "html_element",
                    "inputs": [
                        {
                            "from": "bw4iez5/gvkhkfw",
                            "to": "bw4iez5/nn4twx9",
                            "as": "children"
                        },
                        {
                            "from": "bw4iez5/7rhq0q5",
                            "to": "bw4iez5/nn4twx9",
                            "as": "props"
                        }
                    ],
                    "name": "out"
                },
                {
                    "id": "gvkhkfw",
                    "ref": "array"
                },
                {
                    "id": "7rhq0q5",
                    "name": "in"
                },
                {
                    "id": "1ldhfah",
                    "ref": "html_element",
                    "name": "label"
                },
                {
                    "id": "4972gx3",
                    "ref": "html_element"
                },
                {
                    "id": "wet0jdv",
                    "ref": "array"
                },
                {
                    "id": "gcuxiw9"
                },
                {
                    "id": "875c1wk",
                    "value": "label"
                },
                {
                    "id": "ee5i5r2",
                    "value": "input"
                },
                {
                    "id": "ro8n2gc",
                    "ref": "merge_objects"
                },
                {
                    "id": "n1qcxu2",
                    "value": "true"
                },
                {
                    "id": "utkc9o6",
                    "ref": "html_text"
                },
                {
                    "id": "jxl9r29",
                    "script": "return \"input-\" + name;"
                },
                {
                    "id": "t6q6rvf"
                },
                {
                    "id": "rjwtb3c",
                    "ref": "default"
                },
                {
                    "id": "varubwp"
                },
                {
                    "id": "trd8ptp",
                    "ref": "arg",
                    "value": "name"
                },
                {
                    "id": "zfrrk0z",
                    "ref": "arg",
                    "value": "name"
                },
                {
                    "id": "2zxw9oo",
                    "ref": "execute_graph",
                    "name": "stop_propagation"
                },
                {
                    "id": "sjw3rie",
                    "ref": "default"
                },
                {
                    "id": "vks4vul",
                    "ref": "arg",
                    "value": "props"
                },
                {
                    "id": "ddfgy2s"
                },
                {
                    "id": "671rzr9",
                    "ref": "arg",
                    "value": "name"
                },
                {
                    "id": "ccir2fl",
                    "ref": "arg",
                    "value": "name"
                },
                {
                    "id": "qseh2tb",
                    "ref": "array"
                },
                {
                    "id": "i7y9dyy",
                    "ref": "runnable"
                },
                {
                    "id": "fihihz0",
                    "ref": "arg",
                    "value": "oninput"
                },
                {
                    "id": "1wps21n",
                    "name": "stop propagation effect",
                    "out": "hj2cig0",
                    "nodes": [
                        {
                            "id": "hj2cig0",
                            "ref": "array",
                            "name": "stop propagation effect"
                        },
                        {
                            "id": "1pvaim9",
                            "ref": "execute_graph"
                        },
                        {
                            "id": "0o86xp3",
                            "ref": "arg",
                            "value": "1"
                        },
                        {
                            "id": "d60jwms",
                            "script": "payload.stopPropagation();"
                        },
                        {
                            "id": "xgbubrq",
                            "ref": "arg",
                            "value": "1"
                        }
                    ],
                    "edges": [
                        {
                            "from": "1pvaim9",
                            "to": "hj2cig0",
                            "as": "a0"
                        },
                        {
                            "from": "0o86xp3",
                            "to": "hj2cig0",
                            "as": "a1"
                        },
                        {
                            "from": "d60jwms",
                            "to": "1pvaim9",
                            "as": "fn",
                            "type": "ref"
                        },
                        {
                            "from": "xgbubrq",
                            "to": "d60jwms",
                            "as": "payload"
                        }
                    ]
                },
                {
                    "id": "y5q7mbn",
                    "ref": "arg",
                    "value": "0"
                },
                {
                    "id": "y9bkhqc"
                },
                {
                    "id": "6m6m1hq_1/ocuonub/qjc0zt6",
                    "ref": "event_publisher"
                },
                {
                    "id": "nb2sswc",
                    "ref": "arg",
                    "value": "name"
                },
                {
                    "id": "6m6m1hq_1/ocuonub/506ntvb",
                    "value": "payload.event.target.value",
                    "ref": "arg"
                },
                {
                    "id": "6m6m1hq_1/ocuonub/4ck1vaf",
                    "ref": "arg",
                    "value": "payload.name"
                }
            ],
            "out": "nn4twx9",
            "in": "7rhq0q5",
            "name": "input",
            "id": "input"
        },
        {
            "id": "html_text",
            "description": "Some HTML plaintext. Usually used as a child of html_element.",
            "out": "out",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "text",
                    "ref": "arg",
                    "value": "text"
                },
                {
                    "id": "text_value",
                    "value": "text_value"
                },
                {
                    "id": "out"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "_",
                    "type": "ref"
                },
                {
                    "from": "text_value",
                    "to": "out",
                    "as": "dom_type"
                },
                {
                    "from": "text",
                    "to": "out",
                    "as": "text"
                }
            ]
        },
        {
            "id": "html_element",
            "description": "An HTML Element. `children` is an array of html_element or html_text, `props` are the attributes for the html element as an object.",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "children",
                    "ref": "arg",
                    "value": "children"
                },
                {
                    "id": "props",
                    "ref": "arg",
                    "value": "props"
                },
                {
                    "id": "dom_type",
                    "ref": "arg",
                    "value": "dom_type"
                },
                {
                    "id": "memo",
                    "ref": "arg",
                    "value": "memo"
                },
                {
                    "id": "div",
                    "value": "div"
                },
                {
                    "id": "fill_children",
                    "script": "return children === undefined ? [] : children.length !== undefined ? children.map(c => _lib.no.resolve(c)).filter(c => !!c).map(c => c.el ?? c) : [children.el ?? children]"
                },
                {
                    "id": "fill_props",
                    "script": "return props ?? {}"
                },
                {
                    "id": "dom_type_def",
                    "ref": "default"
                },
                {
                    "id": "out",
                    "script": "if(!(typeof dom_type === 'string' && Array.isArray(children))){ throw new Error('invalid element');} children.filter(c => c).forEach(c => {if(typeof c.dom_type !== 'string'){throw new Error ('invalid child element');}}); return {el: {dom_type, props, children, memo}}"
                }
            ],
            "edges": [
                {
                    "from": "children",
                    "to": "fill_children",
                    "as": "children"
                },
                {
                    "from": "props",
                    "to": "fill_props",
                    "as": "props",
                    "type": "resolve"
                },
                {
                    "from": "memo",
                    "to": "out",
                    "as": "memo"
                },
                {
                    "from": "fill_children",
                    "to": "out",
                    "as": "children"
                },
                {
                    "from": "fill_props",
                    "to": "out",
                    "as": "props"
                },
                {
                    "from": "dom_type",
                    "to": "dom_type_def",
                    "as": "value"
                },
                {
                    "from": "div",
                    "to": "dom_type_def",
                    "as": "otherwise"
                },
                {
                    "from": "dom_type_def",
                    "to": "out",
                    "as": "dom_type"
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "args",
                    "type": "ref"
                }
            ]
        },
        {
            "id": "eq",
            "script": "return a === b;"
        }
    ],
    "edges": [
        {
            "from": "ud6tgbm",
            "to": "3s24md4_1/in",
            "as": "Hydra"
        },
        {
            "from": "skx28w9_1/skx28w9",
            "to": "main/out",
            "as": "display"
        },
        {
            "from": "m9zoa11_1_1/m9zoa11",
            "to": "main/out",
            "as": "setup"
        },
        {
            "as": "arg1",
            "from": "irp54sa",
            "to": "main/out"
        },
        {
            "from": "7zi9fri",
            "to": "v6ckye7",
            "as": "name"
        },
        {
            "as": "hydra_synth",
            "from": "opkd26n",
            "to": "m9zoa11_1_1/m9zoa11"
        },
        {
            "as": "hydra",
            "from": "v6ckye7",
            "to": "opkd26n"
        },
        {
            "as": "ctrl_enter",
            "from": "ghiv2mr/ghiv2mr",
            "to": "irp54sa"
        },
        {
            "from": "64gdkiu",
            "to": "rzayzlk",
            "as": "name"
        },
        {
            "from": "rzayzlk",
            "to": "ghiv2mr/a90f8u3",
            "as": "hydra_synth"
        },
        {
            "from": "skx28w9_1/io46ihf",
            "to": "skx28w9_1/skx28w9",
            "as": "children"
        },
        {
            "from": "skx28w9_1/1woqlx1_1",
            "to": "skx28w9_1/io46ihf",
            "as": "arg1_css"
        },
        {
            "from": "skx28w9_1/t0q5chs_1",
            "to": "skx28w9_1/io46ihf",
            "as": "arg0_canvas"
        },
        {
            "from": "skx28w9_1/xipu8s7_1_0",
            "to": "skx28w9_1/io46ihf",
            "as": "arg2_hydra"
        },
        {
            "from": "m9zoa11_1_1/8b6j8c5",
            "to": "m9zoa11_1_1/m9zoa11",
            "as": "hydra_nodes"
        },
        {
            "from": "ghiv2mr/a90f8u3",
            "to": "ghiv2mr/ghiv2mr",
            "as": "args"
        },
        {
            "as": "arg0",
            "from": "ghiv2mr/tdt1ije",
            "to": "ghiv2mr/ghiv2mr"
        },
        {
            "from": "ghiv2mr/8oa4eyq",
            "to": "ghiv2mr/tdt1ije",
            "as": "pred"
        },
        {
            "as": "true",
            "from": "ghiv2mr/6sdl4fy/m9zoa11_1_1/888ciyv/hdrk08g",
            "to": "ghiv2mr/tdt1ije"
        },
        {
            "as": "self",
            "from": "ghiv2mr/6sdl4fy/m9zoa11_1_1/888ciyv/1nx75fs",
            "to": "ghiv2mr/6sdl4fy/m9zoa11_1_1/888ciyv/hdrk08g"
        },
        {
            "from": "ghiv2mr/6sdl4fy/m9zoa11_1_1/888ciyv/aj0fpb1",
            "to": "ghiv2mr/6sdl4fy/m9zoa11_1_1/888ciyv/1nx75fs",
            "as": "frequency"
        },
        {
            "from": "ghiv2mr/6sdl4fy/m9zoa11_1_1/888ciyv/2l9m0l1",
            "to": "ghiv2mr/6sdl4fy/m9zoa11_1_1/888ciyv/1nx75fs",
            "as": "self"
        },
        {
            "as": "input",
            "from": "4yi185y",
            "to": "irp54sa"
        },
        {
            "from": "get",
            "to": "object"
        },
        {
            "from": "set",
            "to": "object"
        },
        {
            "from": "delete",
            "to": "object"
        },
        {
            "from": "switch",
            "to": "flow"
        },
        {
            "from": "if",
            "to": "flow"
        },
        {
            "from": "html_element",
            "to": "html"
        },
        {
            "from": "input",
            "to": "html"
        },
        {
            "from": "css_styles",
            "to": "html"
        },
        {
            "from": "log",
            "to": "utility"
        },
        {
            "from": "execute_graph",
            "to": "utility"
        },
        {
            "from": "arg",
            "to": "utility"
        },
        {
            "from": "partial",
            "to": "utility"
        },
        {
            "from": "apply",
            "to": "utility"
        },
        {
            "from": "fetch",
            "to": "utility"
        },
        {
            "from": "merge_objects",
            "to": "utility"
        },
        {
            "from": "sequence",
            "to": "utility"
        },
        {
            "from": "runnable",
            "to": "utility"
        },
        {
            "from": "object_entries",
            "to": "utility"
        },
        {
            "from": "add",
            "to": "math"
        },
        {
            "from": "divide",
            "to": "math"
        },
        {
            "from": "negate",
            "to": "math"
        },
        {
            "from": "mult",
            "to": "math"
        },
        {
            "from": "stringify",
            "to": "JSON"
        }
    ]
}