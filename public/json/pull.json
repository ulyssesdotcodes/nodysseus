{
  "id": "nodysseus_hyperapp",
  "out": "out",
  "nodes": [
    { "id": "in" },
    { "id": "arrays" },
    { "id": "utility" },
    { "id": "flow" },
    { "id": "html" },
    { "id": "object" },
    { "id": "custom" },
    { "id": "state" },
    { "id": "JSON" },
    {
      "edges": [
        { "from": "in", "to": "out", "as": "input" },
        { "from": "value", "to": "out", "as": "value" }
      ],
      "nodes": [
        { "id": "in" },
        { "id": "value", "ref": "arg", "value": "value" },
        {
          "id": "out",
          "args": [],
          "script": "console.log(_node.name ?? _node.id); console.log(value); return value"
        }
      ],
      "args": ["value"],
      "id": "log"
    },
    { "extern": "utility.fetch", "name": "fetch", "id": "fetch" },
    { "extern": "utility.call", "name": "call", "id": "call" },
    { "extern": "JSON.stringify", "name": "stringify", "id": "stringify" },
    { "extern": "JSON.parse", "name": "parse", "id": "parse" },
    { "extern": "utility.add", "id": "add" },
    { "extern": "utility.mult", "id": "mult" },
    { "extern": "utility.divide", "id": "divide" },
    { "extern": "utility.negate", "id": "negate" },
    {
      "edges": [
        {
          "from": "old_nodes",
          "to": "graph_topology_change",
          "as": "old_nodes"
        },
        {
          "from": "new_nodes",
          "to": "graph_topology_change",
          "as": "new_nodes"
        },
        {
          "from": "new_links",
          "to": "graph_topology_change",
          "as": "new_links"
        },
        {
          "from": "old_links",
          "to": "graph_topology_change",
          "as": "old_links"
        },
        { "from": "new_nodes", "to": "calculate_levels", "as": "nodes" },
        { "from": "new_links", "to": "calculate_levels", "as": "links" },
        { "from": "selected", "to": "calculate_levels", "as": "selected" },
        {
          "from": "display_graph",
          "to": "calculate_levels",
          "as": "display_graph"
        },
        { "from": "calculate_levels", "to": "with_levels", "as": "levels" },
        { "from": "state", "to": "with_levels", "as": "state" },
        { "from": "graph_topology_change", "to": "if_levels", "as": "pred" },
        { "from": "with_levels", "to": "if_levels", "as": "true" },
        { "from": "state", "to": "if_levels", "as": "false" },
        { "from": "new_nodes", "to": "action", "as": "new_nodes" },
        { "from": "new_links", "to": "action", "as": "new_links" },
        { "from": "if_levels", "to": "action", "as": "state" },
        {
          "from": "panzoom_selected_effector",
          "to": "action",
          "as": "panzoom_selected_effect"
        }
      ],
      "nodes": [
        { "id": "state", "ref": "arg", "value": 0 },
        { "id": "old_nodes", "ref": "arg", "value": "0.nodes" },
        { "id": "old_links", "ref": "arg", "value": "0.links" },
        { "id": "new_nodes", "ref": "arg", "value": "1.nodes" },
        { "id": "new_links", "ref": "arg", "value": "1.links" },
        { "id": "selected", "ref": "arg", "value": "0.selected" },
        { "id": "display_graph", "ref": "arg", "value": "0.display_graph" },
        {
          "id": "calculate_levels",
          "script": "return _lib.scripts.calculateLevels(nodes, links, display_graph, selected)"
        },
        { "id": "with_levels", "script": "return {...state, levels}" },
        { "id": "graph_topology_change", "script": "return true" },
        { "id": "if_levels", "ref": "if" },
        {
          "id": "panzoom_selected_effector",
          "ref": "arg",
          "value": "0.panzoom_selected_effect"
        },
        {
          "id": "action",
          "script": "return [{...state, nodes: new_nodes, links: new_links, randid: Math.random().toString(36).substring(2, 9)}, panzoom_selected_effect && false && [panzoom_selected_effect, {...state, selected: state.selected[0], nodes: new_nodes, links: new_links}], [state.update_hyperapp]]"
        }
      ],
      "out": "action",
      "id": "sim_to_hyperapp_action"
    },
    {
      "edges": [
        { "from": "view", "to": "out", "as": "view" },
        { "from": "html_id", "to": "out", "as": "html_id" },
        { "from": "display_graph", "to": "out", "as": "display_graph" },
        { "from": "static", "to": "out", "as": "static" },
        { "from": "update_sim", "to": "out", "as": "update_sim" },
        { "from": "update_hyperapp", "to": "out", "as": "update_hyperapp" },
        {
          "from": "sim_to_hyperapp_action",
          "to": "out",
          "as": "sim_to_hyperapp_action"
        },
        { "from": "onkey_fn", "to": "out", "as": "onkey_fn" },
        {
          "from": "render_graph_effect",
          "to": "out",
          "as": "render_graph_effect"
        },
        { "from": "init", "to": "out", "as": "init" }
      ],
      "nodes": [
        { "id": "init", "ref": "arg", "value": "init" },
        { "id": "view", "ref": "arg", "value": "view" },
        { "id": "html_id", "ref": "arg", "value": "html_id" },
        { "id": "static", "ref": "arg", "value": "static" },
        { "id": "display_graph", "ref": "arg", "value": "display_graph" },
        { "id": "update_hyperapp", "ref": "arg", "value": "update_hyperapp" },
        { "id": "update_sim", "ref": "arg", "value": "update_sim" },
        {
          "id": "sim_to_hyperapp_action",
          "ref": "arg",
          "value": "sim_to_hyperapp_action"
        },
        {
          "id": "render_graph_effect",
          "ref": "arg",
          "value": "render_graph_effect"
        },
        { "id": "onkey_fn", "ref": "arg", "value": "onkey_fn" },
        {
          "id": "out",
          "script": "return {dispatch: _lib.ha.app({dispatch: _lib.ha.middleware, init: () => [init, static && [update_sim, {...init, action: sim_to_hyperapp_action}], [update_hyperapp], [() => _lib.no.runtime.add_graph(init.display_graph)]], view: s => {if(s instanceof Map){ throw new Error('stop') } return view(s).el}, node: document.getElementById(html_id), subscriptions: s => [!static && [_lib.scripts.d3subscription, {action: sim_to_hyperapp_action, update: update_sim}], !static && [_lib.scripts.graph_subscription, {graph: s.display_graph}], !static && !init.norun._value && [_lib.scripts.result_subscription, {graph: s.display_graph}], !s.popover_graph && [_lib.scripts.keydownSubscription, {action: onkey_fn}], _lib.scripts.listen('resize', (s, _) => [{...s, dimensions: {x: document.getElementById(html_id).clientWidth, y: document.getElementById(html_id).clientHeight}}, [update_sim, s]]), !!document.getElementById( `${html_id}-editor-panzoom`) && [_lib.pz.panzoom, {id: `${html_id}-editor-panzoom`, action: (s, p) => [{...s, show_all: p.event !== 'effect_transform', svg_offset: p.transform}]}]]})}"
        }
      ],
      "id": "hyperapp_app"
    },
    {
      "edges": [
        { "from": "in", "to": "out", "as": "_", "type": "ref" },
        { "from": "array", "to": "out", "as": "array" },
        { "from": "item", "to": "out", "as": "item" }
      ],
      "nodes": [
        { "id": "in" },
        { "id": "array", "ref": "arg", "value": "array" },
        { "id": "item", "ref": "arg", "value": "item" },
        {
          "id": "out",
          "script": "return array.concat(Array.isArray(item) ? item : [item])"
        }
      ],
      "type": "(array: A[], item: A) => A[]",
      "id": "append"
    },
    {
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "array", "to": "out", "as": "array" },
        { "from": "items", "to": "out", "as": "items" }
      ],
      "nodes": [
        { "id": "in" },
        { "id": "array", "ref": "arg", "value": "array" },
        { "id": "items", "ref": "arg", "value": "items" },
        {
          "id": "out",
          "args": ["item", "array"],
          "script": "return (array ?? []).concat(items ?? [])"
        }
      ],
      "type": "(array: A[], items: A[]) => A[]",
      "id": "concat"
    },
    {
      "edges": [
        { "from": "x2sz5kb", "to": "lahq5z4", "as": "arr" },
        { "from": "74n1jfm", "to": "lahq5z4", "as": "input" },
        { "from": "fn", "to": "lahq5z4", "as": "fn" }
      ],
      "nodes": [
        {
          "id": "lahq5z4",
          "args": [],
          "name": "filter/out",
          "script": "const filter_fn = _lib.no.executeGraphNode({graph: _graph, lib: _lib})(typeof fn === 'string' ? fn : fn.fn); return arr.filter(element => filter_fn(Object.assign(fn.args ?? {}, {element})))"
        },
        { "id": "x2sz5kb", "args": [], "ref": "arg", "value": "arr" },
        { "id": "fn", "ref": "arg", "value": "fn" },
        { "id": "74n1jfm", "args": [], "name": "filter/in" }
      ],
      "description": "Filters an array using `fn: (element) => boolean`",
      "out": "lahq5z4",
      "in": "74n1jfm",
      "name": "filter",
      "id": "filter"
    },
    {
      "edges": [
        { "from": "pfoypo5", "to": "lahq5z4", "as": "key" },
        { "from": "zinx621", "to": "lahq5z4", "as": "value" },
        { "from": "x2sz5kb", "to": "lahq5z4", "as": "arr" },
        { "from": "74n1jfm", "to": "lahq5z4", "as": "input" }
      ],
      "nodes": [
        {
          "id": "lahq5z4",
          "args": [],
          "name": "filter/out",
          "script": "return arr.filter(v => v[key] === value)"
        },
        { "id": "pfoypo5", "args": [], "ref": "arg", "value": "key" },
        { "id": "zinx621", "args": [], "ref": "arg", "value": "value" },
        { "id": "x2sz5kb", "args": [], "ref": "arg", "value": "arr" },
        { "id": "74n1jfm", "args": [], "name": "filter/in" }
      ],
      "out": "lahq5z4",
      "in": "74n1jfm",
      "name": "filter_eq",
      "id": "filter_eq"
    },
    {
      "edges": [
        { "from": "in", "to": "out", "as": "_args", "type": "ref" },
        { "from": "value", "to": "out", "as": "value" },
        { "from": "otherwise", "to": "data", "as": "otherwise" },
        { "from": "data", "to": "out", "as": "data" }
      ],
      "nodes": [
        { "id": "in" },
        { "id": "value", "ref": "arg", "value": "value" },
        { "id": "otherwise", "ref": "arg", "value": "otherwise" },
        { "id": "data" },
        { "id": "out", "script": "return value ?? data['otherwise']" }
      ],
      "id": "default"
    },
    {
      "edges": [
        { "from": "in", "to": "out", "as": "data" },
        { "from": "input", "to": "out", "as": "input" },
        { "from": "otherwise", "to": "out", "as": "otherwise" }
      ],
      "nodes": [
        { "id": "in" },
        {
          "id": "out",
          "args": ["data", "input"],
          "script": "return data[input] ?? otherwise;"
        },
        { "id": "input", "ref": "arg", "value": "input" },
        { "id": "otherwise", "ref": "arg", "value": "otherwise" }
      ],
      "args": ["data", "input"],
      "id": "switch"
    },
    {
      "edges": [
        { "from": "in", "to": "out", "as": "data" },
        { "from": "true", "to": "data", "as": "true_val" },
        { "from": "false", "to": "data", "as": "false_val" },
        { "from": "data", "to": "out", "as": "data" },
        { "from": "pred", "to": "out", "as": "pred" }
      ],
      "nodes": [
        { "id": "in" },
        { "id": "pred", "ref": "arg", "value": "pred" },
        { "id": "true", "ref": "arg", "value": "true" },
        { "id": "false", "ref": "arg", "value": "false" },
        { "id": "data" },
        {
          "id": "out",
          "script": "return !!pred ? data.true_val : data.false_val"
        }
      ],
      "id": "if"
    },
    {
      "script": "const nid = typeof node_id === 'string' ? node_id : node_id[0]; return nodes.find(n => n.id === nid || n.node_id === nid)",
      "id": "find_node"
    },
    {
      "edges": [
        { "from": "dom_type", "to": "out", "as": "dom_type" },
        { "from": "text", "to": "text_el", "as": "text" },
        { "from": "text_el", "to": "children", "as": "text" },
        { "from": "props", "to": "out", "as": "props" },
        { "from": "children", "to": "out", "as": "children" }
      ],
      "nodes": [
        { "id": "dom_type", "value": "text" },
        { "id": "text", "ref": "arg", "value": "text" },
        { "id": "props", "ref": "arg", "value": "props" },
        { "id": "text_el", "ref": "html_text" },
        { "id": "children", "script": "return [text]" },
        { "id": "out", "ref": "html_element" }
      ],
      "out": "out",
      "id": "svg_text"
    },
    {
      "edges": [
        { "from": "context_args", "to": "delete_fn", "as": "target" },
        { "from": "fn_path", "to": "delete_fn", "as": "path" },
        { "from": "delete_fn", "to": "delete_args", "as": "target" },
        { "from": "args_path", "to": "delete_args", "as": "path" },
        { "from": "delete_args", "to": "args", "as": "o0" },
        { "from": "prune_vals", "to": "args", "as": "o1" },
        { "from": "value_args", "to": "args", "as": "o2" },
        { "from": "args", "to": "out", "as": "args", "type": "resolve" },
        { "from": "fn", "to": "out", "as": "fn", "type": "ref" }
      ],
      "nodes": [
        { "id": "fn", "ref": "arg", "value": "fn" },
        { "id": "value_args", "ref": "arg", "value": "args" },
        { "id": "context_args", "ref": "arg", "value": "_args" },
        { "id": "fn_path", "value": "fn" },
        { "id": "args_path", "value": "args" },
        { "id": "prune_vals", "value": { "args": false } },
        { "id": "delete_fn", "ref": "delete" },
        { "id": "delete_args", "ref": "delete" },
        { "id": "args", "ref": "merge_objects" },
        {
          "id": "out",
          "script": "const parent_id = _node.id.substring(0, _node.id.lastIndexOf('/')); const input = _lib.no.runtime.get_edges_in(_graph, parent_id).find(i => i.as === 'fn'); return input ? {fn: input.from, graph: _graph, args: args ?? {}} : false"
        }
      ],
      "out": "out",
      "id": "runnable"
    },
    {
      "edges": [
        { "from": "fn", "to": "run", "as": "runnable" },
        { "from": "fn", "to": "out", "as": "fn" },
        { "from": "run", "to": "_out", "as": "res" },
        { "from": "dispatch", "to": "out", "as": "dispatch" },
        { "from": "args", "to": "out", "as": "args" }
      ],
      "nodes": [
        {
          "id": "dispatch",
          "ref": "arg",
          "value": "dispatch",
          "type": "internal"
        },
        { "id": "fn", "ref": "arg", "value": "fn" },
        { "id": "run", "ref": "run" },
        { "id": "args", "ref": "arg", "value": "_args" },
        {
          "id": "out",
          "script": "dispatch({...fn, args: {...args, ...fn.args}})"
        }
      ],
      "id": "dispatch_runnable"
    },
    {
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "fn", "to": "out", "as": "fn" },
        { "from": "fn_graph", "to": "out", "as": "fn_graph" }
      ],
      "nodes": [
        { "id": "in" },
        { "id": "fn", "ref": "arg", "value": "fn" },
        { "id": "fn_graph", "ref": "arg", "value": "fn_graph" },
        {
          "id": "out",
          "script": "const res_graph = fn_graph ?? _graph; return (...inner_args) => {return _lib.no.executeGraphNode({graph: {...res_graph, nodes: [...res_graph.nodes], edges: [...res_graph.edges]}, lib: _lib})(fn)(Object.keys(args).length > 0 ? Object.assign(args, inner_args.length === 1 ? inner_args[0] : inner_args) : inner_args.length === 1 ? inner_args[0] : inner_args);}"
        }
      ],
      "id": "execute_graph"
    },
    {
      "script": "return _lib.no.executeGraphNode({graph: fn.graph ?? _graph, lib: _lib})(fn.fn ?? fn)(args);",
      "id": "apply"
    },
    {
      "script": "return _lib.no.executeGraphNode({graph, lib: _lib})(fn)(args);",
      "id": "apply_graph"
    },
    {
      "edges": [
        { "from": "in", "to": "out", "as": "args", "type": "ref" },
        { "from": "fn", "to": "out", "as": "fn" },
        { "from": "args", "to": "out", "as": "args" },
        { "from": "input_value", "to": "out", "as": "_args" }
      ],
      "nodes": [
        { "id": "in" },
        { "id": "input_value", "ref": "arg", "value": "_args" },
        { "id": "fn", "ref": "arg", "value": "fn" },
        { "id": "args", "ref": "arg", "value": "args" },
        {
          "id": "out",
          "script": "return _lib.no.executeGraphNode({graph: _graph, lib: _lib})(fn)(Object.assign({}, _args, args))"
        }
      ],
      "id": "partial"
    },
    {
      "script": "return _lib.no.executeGraphNode({graph, lib: _lib})(fn)(Object.assign({}, _args, args))",
      "id": "partial_graph"
    },
    {
      "edges": [
        { "from": "in", "to": "keys" },
        { "from": "keys", "to": "collate", "as": "input" },
        { "from": "in", "to": "collate" },
        { "from": "collate", "to": "out", "as": "data" }
      ],
      "nodes": [
        { "id": "in" },
        { "id": "keys", "args": ["data"], "script": "return [...data.keys()]" },
        { "id": "collate" },
        { "id": "out", "args": ["data"], "script": "return data" }
      ],
      "args": ["data"],
      "id": "resolve"
    },
    { "extern": "utility.new_array", "name": "array", "id": "array" },
    {
      "edges": [
        { "from": "in", "to": "out", "as": "arg0" },
        { "from": "payload", "to": "out", "as": "payload" },
        { "from": "fn", "to": "out", "as": "fn" }
      ],
      "nodes": [
        { "id": "in" },
        { "id": "fn", "ref": "arg", "value": "fn" },
        { "id": "payload", "ref": "arg", "value": "payload" },
        {
          "id": "out",
          "args": ["fn"],
          "script": "return (_, payload) => fn(payload)"
        }
      ],
      "args": ["fn"],
      "id": "wrap_effect_fn"
    },
    { "extern": "utility.merge_objects", "id": "merge_objects" },
    {
      "edges": [
        { "from": "in", "to": "out", "as": "input" },
        { "from": "def", "to": "out", "as": "def" },
        { "from": "path", "to": "out", "as": "path" },
        { "from": "target", "to": "out", "as": "target" }
      ],
      "nodes": [
        { "id": "in" },
        { "id": "target", "ref": "arg", "value": "target" },
        { "id": "path", "ref": "arg", "value": "path" },
        { "id": "def", "ref": "arg", "value": "def" },
        { "id": "out", "extern": "just.get" }
      ],
      "args": ["target", "path"],
      "id": "get"
    },
    { "extern": "utility.arg", "id": "arg" },
    {
      "script": "return _lib.just.set(target, path, value)",
      "args": ["target", "path", "value"],
      "id": "set-mutable"
    },
    {
      "script": "const keys = path.split('.'); const check = (o, v, k) => k.length === 1 ? {...o, [k[0]]: v, _needsresolve: true} : o.hasOwnProperty(k[0]) ? {...o, [k[0]]: check(o[k[0]], v, k.slice(1)), _needsresolve: true} : o; return check(target, value, keys)",
      "type": "(target: any, value: any, path: string) => any",
      "id": "set"
    },
    {
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "target", "to": "out", "as": "target" },
        { "from": "path", "to": "out", "as": "path" }
      ],
      "nodes": [
        { "id": "in" },
        { "id": "target", "ref": "arg", "value": "target" },
        { "id": "path", "ref": "arg", "value": "path" },
        {
          "id": "out",
          "script": "const new_val = Object.assign({}, target); delete new_val[path]; return new_val"
        }
      ],
      "out": "out",
      "id": "delete"
    },
    {
      "edges": [
        { "from": "name", "to": "update", "as": "event" },
        { "from": "value", "to": "update", "as": "data" }
      ],
      "nodes": [
        { "id": "name", "ref": "arg", "value": "name" },
        { "id": "value", "ref": "arg", "value": "value" },
        { "id": "update", "extern": "no.runtime.publish" }
      ],
      "out": "update",
      "id": "event_publisher"
    },
    {
      "edges": [{ "from": "value", "to": "out", "as": "value" }],
      "nodes": [
        { "id": "value", "ref": "arg", "value": "value" },
        {
          "id": "out",
          "script": "const parent = _lib.no.runtime.get_node(_graph, _node.id.substring(0, _node.id.lastIndexOf('/'))); if(parent.value !== value) { _lib.no.runtime.add_node(_graph, {...parent , value}); } return value"
        }
      ],
      "out": "out",
      "id": "input_value"
    },
    {
      "edges": [
        { "from": "name", "to": "add_listener", "as": "event" },
        { "from": "add_listener", "to": "out", "as": "listener" }
      ],
      "nodes": [
        { "id": "name", "ref": "arg", "value": "name" },
        {
          "id": "add_listener",
          "script": "const parent = _lib.no.runtime.get_node(_graph, _node.id.substring(0, _node.id.lastIndexOf('/'))); _lib.no.runtime.add_listener(_graph, event, parent.id, (graph, ev) => _lib.no.runtime.add_node(_graph, {...parent , value: ev}), true)"
        },
        {
          "id": "out",
          "script": "return _lib.no.runtime.get_node(_graph, _node.id.substring(0, _node.id.lastIndexOf('/'))).value;"
        }
      ],
      "out": "out",
      "id": "event_subscriber"
    },
    {
      "edges": [
        { "from": "6uzm3ifn3", "to": "vnw7d8iaw", "as": "input" },
        { "from": "p229wzcj5", "to": "vnw7d8iaw", "as": "fuse" },
        { "from": "idjoql4db", "to": "p229wzcj5", "as": "graph" },
        { "from": "wfld638dn", "to": "idjoql4db", "as": "edges" },
        { "from": "ungdjbio6", "to": "idjoql4db", "as": "nodes" },
        { "from": "mh8lknkfv", "to": "wfld638dn", "as": "remaining_edges" },
        { "from": "h8bhlzbph", "to": "wfld638dn", "as": "new_id" },
        { "from": "1m739wxv9", "to": "wfld638dn", "as": "chosen_edge" },
        { "from": "h8bhlzbph", "to": "ungdjbio6", "as": "new_id" },
        { "from": "1m739wxv9", "to": "ungdjbio6", "as": "chosen_edge" },
        { "from": "nznzj5bfn", "to": "vnw7d8iaw", "as": "graph" },
        { "from": "nznzj5bfn", "to": "6uzm3ifn3", "as": "graph" },
        { "from": "nznzj5bfn", "to": "ungdjbio6", "as": "graph" },
        { "from": "nznzj5bfn", "to": "mh8lknkfv", "as": "graph" },
        { "from": "1m739wxv9", "to": "h8bhlzbph", "as": "chosen_edge" },
        { "from": "nznzj5bfn", "to": "1m739wxv9", "as": "graph" },
        { "from": "g8mx5sn1u", "to": "nznzj5bfn", "as": "target" },
        { "from": "tta1nggm4", "to": "nznzj5bfn", "as": "path" }
      ],
      "nodes": [
        {
          "id": "vnw7d8iaw",
          "name": "fuse vertices",
          "ref": "switch",
          "args": ["fuse", "graph"]
        },
        {
          "id": "6uzm3ifn3",
          "args": ["graph"],
          "script": "return graph.edges.length > 0 ? \"fuse\" : \"graph\""
        },
        { "id": "p229wzcj5", "ref": "fuse vertices" },
        { "id": "idjoql4db" },
        {
          "id": "wfld638dn",
          "args": ["remaining_edges"],
          "script": "return [remaining_edges.map(e => ({...e, to: e.to === chosen_edge.to || e.to === chosen_edge.from ? new_id : e.to, from: e.from === chosen_edge.from || e.from === chosen_edge.to ? new_id : e.from}))]"
        },
        {
          "id": "ungdjbio6",
          "args": ["graph", "chosen_edge"],
          "script": "const remaining = graph.nodes\n.filter(n => n.id !== chosen_edge.to && n.id !== chosen_edge.from);\n\nconst from = [...(graph.nodes\n.find(n => n.id === chosen_edge.to).nodes ?? [chosen_edge.to])]\n\nconst to = [...(graph.nodes.find(n => n.id === chosen_edge.from).nodes ?? [chosen_edge.from])];\n\nreturn [remaining\n.concat([{\nid: new_id, \nnodes: [...(new Set(from.concat(to))).keys()],\n}])\n\n];"
        },
        {
          "id": "mh8lknkfv",
          "args": ["graph"],
          "script": "return [graph.edges.slice(1)]"
        },
        {
          "id": "h8bhlzbph",
          "args": ["chosen_edge"],
          "script": "return chosen_edge.to + \"_\" + chosen_edge.from;",
          "name": "new_id"
        },
        {
          "id": "1m739wxv9",
          "args": ["graph"],
          "script": "return graph.edges[0]",
          "name": "edge"
        },
        { "id": "nznzj5bfn", "name": "get graph", "ref": "get" },
        { "id": "g8mx5sn1u", "name": "fuse vertices/in" },
        { "id": "tta1nggm4", "value": "graph" }
      ],
      "args": ["graph"],
      "out": "vnw7d8iaw",
      "in": "g8mx5sn1u",
      "name": "fuse vertices",
      "id": "fuse vertices"
    },
    {
      "edges": [
        { "from": "r5lka2sj5", "to": "ay4hfrqw1", "as": "input" },
        { "from": "7elx5ekij", "to": "ay4hfrqw1", "as": "remove" },
        { "from": "cz08pewa3", "to": "7elx5ekij", "as": "graph" },
        { "from": "7n24u6kpt", "to": "cz08pewa3", "as": "nodes" },
        { "from": "cuiccwvbv", "to": "cz08pewa3", "as": "edges" },
        { "from": "lgzenfpvl", "to": "r5lka2sj5", "as": "pendants" },
        { "from": "lgzenfpvl", "to": "cz08pewa3", "as": "pendants" },
        { "from": "7g81ijcqb", "to": "7n24u6kpt", "as": "nodes" },
        { "from": "lgzenfpvl", "to": "7n24u6kpt", "as": "pendant_edges" },
        { "from": "zkg9zpu3e", "to": "7n24u6kpt", "as": "edges" },
        { "from": "lgzenfpvl", "to": "cuiccwvbv", "as": "pendant_edges" },
        { "from": "zkg9zpu3e", "to": "cuiccwvbv", "as": "edges" },
        { "from": "zkg9zpu3e", "to": "lgzenfpvl", "as": "edges" },
        { "from": "7g81ijcqb", "to": "lgzenfpvl", "as": "nodes" },
        { "from": "bp1cy89hk", "to": "ay4hfrqw1", "as": "graph" },
        { "from": "bp1cy89hk", "to": "cz08pewa3" },
        { "from": "bp1cy89hk", "to": "7g81ijcqb", "as": "target" },
        { "from": "bp1cy89hk", "to": "zkg9zpu3e", "as": "target" },
        { "from": "jhykipayt", "to": "bp1cy89hk", "as": "target" },
        { "from": "iqkdwjpuz", "to": "bp1cy89hk", "as": "path" }
      ],
      "nodes": [
        {
          "id": "ay4hfrqw1",
          "args": [],
          "name": "remove pendant",
          "ref": "switch"
        },
        {
          "id": "r5lka2sj5",
          "args": [],
          "script": "return pendants.length > 0 ? [\"remove\"] : [\"graph\"]"
        },
        { "id": "7elx5ekij", "args": [], "ref": "remove pendant" },
        { "id": "cz08pewa3", "args": [] },
        {
          "id": "7n24u6kpt",
          "args": ["nodes"],
          "script": "return [nodes.filter(n => !pendant_edges.includes(n.id))]",
          "name": "filter out pendants"
        },
        {
          "id": "cuiccwvbv",
          "args": [],
          "script": "return [edges.filter(e => !pendant_edges.includes(e.to) && !pendant_edges.includes(e.from))]",
          "name": "filter penant"
        },
        {
          "id": "lgzenfpvl",
          "args": [],
          "script": "let accfrom = edges.flatMap(e => [e.from]).reduce((acc, v) => { acc[v] = (acc[v] ?? 0) + 1; return acc}, {});\nlet accto = edges.flatMap(e => [e.to]).reduce((acc, v) => { acc[v] = (acc[v] ?? 0) + 1; return acc}, {});\n\nreturn nodes.map(n => n.id).filter(n => (!isNaN(accfrom[n]) && accfrom[n] <= 1) && !accto[n] );",
          "name": "pendant edges"
        },
        {
          "id": "7g81ijcqb",
          "name": "nodes",
          "in": "in",
          "out": "7g81ijcqb",
          "nodes": [
            { "id": "7g81ijcqb", "args": [], "ref": "get", "name": "nodes" },
            { "id": "2yshp7jvu", "args": [], "value": "nodes" },
            { "id": "in" }
          ],
          "edges": [
            { "from": "2yshp7jvu", "to": "7g81ijcqb", "as": "path" },
            { "from": "in", "to": "7g81ijcqb" }
          ]
        },
        {
          "id": "zkg9zpu3e",
          "name": "edges",
          "in": "in",
          "out": "zkg9zpu3e",
          "nodes": [
            { "id": "zkg9zpu3e", "args": [], "ref": "get", "name": "edges" },
            { "id": "g18jj6zvq", "args": [], "value": "edges" },
            { "id": "in" }
          ],
          "edges": [
            { "from": "g18jj6zvq", "to": "zkg9zpu3e", "as": "path" },
            { "from": "in", "to": "zkg9zpu3e" }
          ]
        },
        { "id": "bp1cy89hk", "args": [], "ref": "get", "name": "graph" },
        { "id": "jhykipayt", "args": [], "name": "remove pendant/in" },
        { "id": "iqkdwjpuz", "args": [], "value": "graph" }
      ],
      "out": "ay4hfrqw1",
      "in": "jhykipayt",
      "name": "remove pendant",
      "id": "remove pendant"
    },
    { "script": "return {fn, graph: _graph}", "id": "hyperapp_action" },
    {
      "script": "return {fn, graph: _graph, stateonly: true}",
      "id": "hyperapp_state_action"
    },
    {
      "script": "const action = typeof fn === 'string' ? {fn, graph: _graph} : (typeof fn === 'function' || (typeof fn === 'object' && fn.hasOwnProperty('fn'))) ? fn : undefined; return (dispatch, payload) => dispatch(action, payload)",
      "description": "Creates an effect that dispatches the passed-in fn",
      "id": "hyperapp_action_effect"
    },
    {
      "script": "const action = typeof fn === 'string' ? {fn, graph: _graph} : (typeof fn === 'function' || (typeof fn === 'object' && fn.hasOwnProperty('fn'))) ? fn : undefined; return (dispatch, payload) => requestAnimationFrame(() => dispatch(action, payload))",
      "description": "Creates an effect that dispatches the passed-in fn",
      "id": "hyperapp_action_effect_debounced"
    },
    {
      "edges": [
        { "from": "args", "to": "out", "as": "args", "type": "resolve" },
        { "from": "runnable", "to": "out", "as": "runnable" }
      ],
      "nodes": [
        { "id": "runnable", "ref": "arg", "value": "runnable" },
        { "id": "args", "ref": "arg", "value": "_args" },
        {
          "id": "out",
          "script": "return _lib.no.runGraph(runnable.graph, runnable.fn, Object.assign({}, args, {runnable: undefined}, runnable.args))"
        }
      ],
      "out": "out",
      "id": "run"
    },
    {
      "edges": [
        { "from": "args", "to": "out", "as": "args", "type": "resolve" },
        { "from": "runnable", "to": "out", "as": "runnable" }
      ],
      "nodes": [
        { "id": "runnable", "ref": "arg", "value": "runnable" },
        { "id": "args", "ref": "arg", "value": "_args" },
        {
          "id": "out",
          "script": "return (fnargs) => _lib.no.runGraph(runnable.graph, runnable.fn, Object.assign({}, args, {runnable: undefined}, runnable.args, typeof fnargs === 'object' ? fnargs : {}))"
        }
      ],
      "out": "out",
      "id": "create_fn"
    },
    {
      "edges": [{ "from": "fn", "to": "out", "as": "fn" }],
      "nodes": [
        { "id": "fn", "ref": "arg", "value": "fn" },
        {
          "id": "out",
          "script": "return (dispatch, payload) => {const wrapped_dispatch = (a, p) => Promise.resolve(p).then(resp => Promise.resolve(a).then(aresp => [aresp, resp])).then(([a, p]) => dispatch(a, p)).catch(e => dispatch(s => [{...s, error: e}])); wrapped_dispatch(state => {Promise.resolve(state).then(s => _lib.no.runGraph(fn.graph, fn.fn, {state: s, ...payload, ...fn.args, dispatch: wrapped_dispatch})); return state.error ? {...state, error: false} : state;})}"
        }
      ],
      "out": "out",
      "id": "runnable_hyperapp_effect"
    },
    {
      "edges": [
        { "from": "state", "to": "result", "as": "state" },
        { "from": "payload", "to": "result", "as": "payload" },
        { "from": "dispatch", "to": "result", "as": "dispatch" },
        { "from": "display_graph", "to": "result", "as": "fn_graph" },
        { "from": "result", "to": "_out", "as": "fn", "type": "ref" },
        { "from": "result", "to": "_run_result", "as": "fn" },
        {
          "from": "display_graph",
          "to": "display_graph_runnable",
          "as": "display_graph"
        },
        {
          "from": "dispatch",
          "to": "display_graph_runnable",
          "as": "dispatch"
        },
        { "from": "payload", "to": "display_graph_runnable", "as": "payload" },
        { "from": "state", "to": "display_graph_runnable", "as": "state" },
        {
          "from": "display_graph_runnable",
          "to": "result_runnable",
          "as": "runnable"
        },
        { "from": "dispatch", "to": "result_runnable", "as": "dispatch" },
        { "from": "result_runnable", "to": "result_wrapper", "as": "fn" },
        { "from": "result_runnable", "to": "run_result", "as": "fn" },
        { "from": "display_graph_runnable", "to": "out", "as": "runnable" }
      ],
      "nodes": [
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "display_graph", "ref": "arg", "value": "state.display_graph" },
        { "id": "payload", "ref": "arg", "value": "payload" },
        { "id": "dispatch", "ref": "arg", "value": "dispatch" },
        {
          "id": "display_graph_runnable",
          "script": "return {fn: 'main/out', graph: {...display_graph, nodes: [...display_graph.nodes], edges: [...display_graph.edges]}, args: {state, graph: state.display_graph, payload: {event: payload}}}"
        },
        {
          "id": "result_runnable",
          "script": "try { const res = _lib.no.runGraph(runnable); dispatch(s => s.error ? {...s, error: false} : s); return res; } catch(e) { dispatch(s => ({...s, error: e}));}"
        },
        { "id": "run_result", "ref": "runnable_hyperapp_effect" },
        {
          "id": "out",
          "script": "return (dispatch, payload) => {try { const res = _lib.no.runGraph(runnable); Promise.resolve(res).then(r => dispatch(s => r.display ? {...s, result_display: r.display, error: false} : s.error ? {...s, error: false} : s)); } catch(e) { dispatch(s => ({...s, error: e}));}}"
        },
        {
          "id": "_out",
          "script": "return (dispatch, payload) => {const wrapped_dispatch = (a, p) => Promise.resolve(p).then(resp => Promise.resolve(a).then(aresp => [aresp, resp])).then(([a, p]) => dispatch(a, p)).catch(e => dispatch(s => [{...s, error: e}])); wrapped_dispatch(state => {new Promise((resolve, reject) => resolve(_lib.no.runGraph({...runnable, args: {...runnable.args, dispatch: wrapped_dispatch}}))).then(res => _lib.no.runGraph(res)).catch(e => dispatch(s => [{...s, error: e}])); return state.error ? {...state, error: false} : state;})}"
        }
      ],
      "out": "out",
      "id": "run_display_graph_effect"
    },
    {
      "edges": [
        { "from": "update_arg", "to": "update", "as": "update" },
        { "from": "state", "to": "set_levels", "as": "state" },
        { "from": "in", "to": "levels_inputs" },
        { "from": "in", "to": "graph" },
        { "from": "display_graph", "to": "reduce_graph", "as": "graph" },
        { "from": "payload", "to": "run", "as": "payload" },
        { "from": "display_graph", "to": "run", "as": "display_graph" },
        { "from": "html_id", "to": "run", "as": "html_id" },
        { "from": "nodes", "to": "calculate_levels", "as": "nodes" },
        { "from": "links", "to": "calculate_levels", "as": "links" },
        { "from": "selected", "to": "calculate_levels", "as": "selected" },
        {
          "from": "display_graph",
          "to": "calculate_levels",
          "as": "display_graph"
        },
        { "from": "calculate_levels", "to": "levels", "as": "levels" },
        { "from": "levels", "to": "set_levels", "as": "levels" },
        { "from": "set_levels", "to": "new_state", "as": "state" },
        { "from": "levels_inputs", "to": "levels", "as": "input" },
        { "from": "graph_sim", "to": "new_state", "as": "graph_sim" },
        { "from": "error_nodes", "to": "run", "as": "error_nodes" },
        { "from": "state_result", "to": "run", "as": "prev_result" },
        { "from": "run", "to": "result", "as": "run" },
        { "from": "norun", "to": "out", "as": "norun" },
        { "from": "show_result", "to": "out", "as": "show_result" },
        { "from": "run", "to": "run_wrapper", "as": "run" },
        { "from": "run_wrapper", "to": "out", "as": "run" },
        { "from": "readonly", "to": "out", "as": "readonly" },
        { "from": "selected", "to": "update", "as": "selected" },
        { "from": "display_graph", "to": "update", "as": "display_graph" },
        { "from": "update", "to": "out", "as": "update" },
        { "from": "readonly", "to": "should_show_args", "as": "input" },
        { "from": "show_args_effector", "to": "show_args_effect", "as": "a0" },
        { "from": "show_args_effect", "to": "should_show_args", "as": "false" },
        { "from": "should_show_args", "to": "new_effects", "as": "a0" },
        { "from": "new_effects", "to": "effects", "as": "array" },
        { "from": "in_effects", "to": "effects", "as": "items" },
        { "from": "payload", "to": "out", "as": "payload" },
        { "from": "html_id", "to": "out", "as": "html_id" },
        { "from": "display_graph", "to": "out", "as": "display_graph" },
        { "from": "effects", "to": "out", "as": "effects", "type": "resolve" },
        {
          "from": "dispatch_custom_event_effect",
          "to": "out",
          "as": "dispatch_custom_event_effect"
        },
        { "from": "update_sim_effect", "to": "out", "as": "update_sim_effect" },
        { "from": "new_state", "to": "out", "as": "state" }
      ],
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "payload", "ref": "arg", "value": "payload" },
        {
          "id": "update_sim_effect",
          "ref": "arg",
          "value": "state.update_sim_effect"
        },
        { "id": "show_result", "ref": "arg", "value": "state.show_result" },
        { "id": "state_result", "ref": "arg", "value": "state.result" },
        { "id": "error_nodes", "ref": "arg", "value": "state.error_nodes" },
        { "id": "update_arg", "ref": "arg", "value": "state.update" },
        { "id": "nodes", "ref": "arg", "value": "state.nodes" },
        { "id": "links", "ref": "arg", "value": "state.links" },
        { "id": "selected", "ref": "arg", "value": "state.selected" },
        { "id": "readonly", "ref": "arg", "value": "state.readonly" },
        { "id": "html_id", "ref": "arg", "value": "state.html_id" },
        { "id": "norun", "ref": "arg", "value": "state.norun" },
        { "id": "show_args_effector", "ref": "show_args_effect" },
        { "id": "show_args_effect", "ref": "array" },
        { "id": "should_show_args", "ref": "switch" },
        {
          "id": "dispatch_custom_event_effect",
          "ref": "dispatch_custom_event_effect"
        },
        { "id": "in_effects", "ref": "arg", "value": "effects" },
        { "id": "new_effects", "ref": "array" },
        { "id": "effects", "ref": "concat" },
        { "id": "display_graph", "ref": "arg", "value": "state.display_graph" },
        {
          "id": "calculate_levels",
          "script": "return _lib.scripts.calculateLevels(nodes, links, display_graph, selected)"
        },
        { "id": "reduce_graph", "ref": "fuse vertices" },
        { "id": "levels", "ref": "switch", "args": ["levels"] },
        {
          "id": "levels_inputs",
          "args": ["selected"],
          "script": "return ['levels']"
        },
        {
          "id": "set_levels",
          "args": ["state", "levels"],
          "script": "return {...state, levels: levels ?? state.levels}"
        },
        { "id": "graph_sim", "script": "return undefined;" },
        {
          "id": "new_state",
          "script": "return Object.assign({}, state, {nodes: graph_sim?.nodes ?? state.nodes, links: graph_sim?.links ?? state.links, levels: graph_sim?.levels ?? state.levels});"
        },
        {
          "id": "update",
          "script": "return update || !!display_graph || !!selected"
        },
        { "id": "run", "ref": "run_display_graph_effect" },
        { "id": "run_wrapper" },
        {
          "id": "out",
          "script": "return {state, effects: [!readonly && (!!update || !!update_graph_sim) && [update_sim_effect, state], !readonly && [dispatch_custom_event_effect, {html_id, event: 'updategraph', detail: {graph: state.display_graph}}], ...(effects?.filter(e => e?.[0]) ?? [])]}"
        }
      ],
      "out": "out",
      "in": "in",
      "id": "update_graph_display"
    },
    {
      "edges": [
        { "from": "m3b5wg3", "to": "tgurdpo", "as": "args", "type": "ref" },
        { "from": "rielyq8", "to": "tgurdpo", "as": "fn" },
        { "from": "1rre4bx", "to": "tgurdpo", "as": "self" },
        { "from": "w0zzawl", "to": "tgurdpo", "as": "args", "type": "resolve" },
        { "from": "pdljod1", "to": "w0zzawl", "as": "a0" },
        { "from": "2lvs5dj", "to": "pdljod1", "as": "graph" },
        { "from": "args", "to": "pdljod1", "as": "args" },
        { "from": "6g75abk", "to": "pdljod1", "as": "fn" }
      ],
      "nodes": [
        { "id": "tgurdpo", "ref": "call", "name": "out" },
        { "id": "m3b5wg3", "name": "in" },
        { "id": "rielyq8", "value": "reduce", "name": "rielyq8" },
        { "ref": "arg", "id": "1rre4bx", "value": "array", "name": "1rre4bx" },
        { "ref": "arg", "id": "6g75abk", "value": "fn", "name": "6g75abk" },
        { "id": "w0zzawl", "ref": "array", "name": "w0zzawl" },
        { "id": "args", "ref": "arg", "value": "_args" },
        {
          "id": "pdljod1",
          "name": "pdljod1",
          "script": "return (previous, current, index, array) => _lib.no.runGraph(fn?.graph ?? _graph, fn?.fn ?? fn, Object.assign({}, args, {previous, current, index, array}));"
        },
        { "id": "2lvs5dj", "script": "return _graph", "name": "2lvs5dj" }
      ],
      "out": "tgurdpo",
      "in": "m3b5wg3",
      "name": "reduce",
      "id": "reduce"
    },
    {
      "edges": [
        { "from": "m3b5wg3", "to": "tgurdpo", "as": "args", "type": "ref" },
        { "from": "rielyq8", "to": "tgurdpo", "as": "fn" },
        { "from": "1rre4bx", "to": "tgurdpo", "as": "self" },
        { "from": "w0zzawl", "to": "tgurdpo", "as": "args", "type": "resolve" },
        { "from": "pdljod1", "to": "w0zzawl", "as": "a0" },
        { "from": "2lvs5dj", "to": "pdljod1", "as": "graph" },
        { "from": "args", "to": "pdljod1", "as": "args" },
        { "from": "6g75abk", "to": "pdljod1", "as": "fn" }
      ],
      "nodes": [
        { "id": "tgurdpo", "ref": "call", "name": "out" },
        { "id": "m3b5wg3", "name": "in" },
        { "id": "rielyq8", "value": "map", "name": "rielyq8" },
        { "ref": "arg", "id": "1rre4bx", "value": "array", "name": "1rre4bx" },
        { "ref": "arg", "id": "6g75abk", "value": "fn", "name": "6g75abk" },
        { "id": "w0zzawl", "ref": "array", "name": "w0zzawl" },
        { "id": "args", "ref": "arg", "value": "args" },
        {
          "id": "pdljod1",
          "name": "pdljod1",
          "script": "return (element, index, array) => _lib.no.runGraph(fn?.graph ?? _graph, fn?.fn ?? fn, Object.assign({}, fn.args, args, {element, index, array}));"
        },
        { "id": "2lvs5dj", "script": "return _graph", "name": "2lvs5dj" }
      ],
      "out": "tgurdpo",
      "in": "m3b5wg3",
      "name": "map",
      "id": "map"
    },
    {
      "edges": [
        { "from": "lvzwtzi", "to": "nn4twx9", "as": "children" },
        { "from": "t6q6rvf", "to": "nn4twx9", "as": "props" },
        { "from": "tchu5kq", "to": "nn4twx9", "as": "dom_type" },
        { "from": "583nwco", "to": "nn4twx9", "as": "arg3" },
        { "from": "itrzmbe", "to": "nn4twx9", "as": "arg4" },
        { "to": "lvzwtzi", "from": "vmehp75/h4hkmke", "as": "arg1" },
        { "from": "punpbfw", "to": "t6q6rvf", "as": "onclick" },
        { "from": "2aqvso8", "to": "vmehp75/h4hkmke", "as": "text" },
        { "from": "teuf938", "to": "punpbfw", "as": "value" },
        { "from": "1067z1h", "to": "punpbfw", "as": "fn", "type": "ref" },
        { "from": "b8q8y2q", "to": "1067z1h", "as": "arg1" },
        { "from": "pprukwn", "to": "1067z1h", "as": "arg0" },
        { "from": "zu0hb6e", "to": "b8q8y2q", "as": "update_hyperapp" },
        { "from": "eo8hxkq", "to": "pprukwn", "as": "value" },
        { "from": "s6847dx", "to": "pprukwn", "as": "target" },
        { "from": "5g3gdi1", "to": "pprukwn", "as": "path" },
        { "from": "flcuh31", "to": "eo8hxkq", "as": "toggle" },
        { "from": "0eoq13n", "to": "5g3gdi1", "as": "value" },
        { "from": "ysqu0jj", "to": "flcuh31", "as": "target" },
        { "from": "8ji5lb6", "to": "flcuh31", "as": "path" }
      ],
      "nodes": [
        {
          "id": "nn4twx9",
          "ref": "html_element",
          "inputs": [
            { "from": "lvzwtzi", "to": "nn4twx9", "as": "children" },
            { "from": "t6q6rvf", "to": "nn4twx9", "as": "props" },
            { "from": "tchu5kq", "to": "nn4twx9", "as": "dom_type" }
          ],
          "name": "out"
        },
        { "id": "lvzwtzi", "ref": "array" },
        { "id": "t6q6rvf" },
        { "id": "tchu5kq", "value": "button" },
        { "id": "583nwco", "name": "in" },
        { "id": "itrzmbe", "name": "in" },
        { "id": "vmehp75/h4hkmke", "ref": "html_text", "name": "button_text" },
        { "id": "punpbfw", "ref": "execute_graph", "name": "onclick_fn" },
        { "id": "2aqvso8", "ref": "arg", "value": "value" },
        { "id": "teuf938", "ref": "arg", "value": "value" },
        { "id": "1067z1h", "ref": "array" },
        { "id": "b8q8y2q", "ref": "array" },
        { "id": "pprukwn", "ref": "set" },
        { "id": "zu0hb6e", "ref": "arg", "value": "0.update_hyperapp" },
        { "id": "eo8hxkq", "script": "return !toggle;" },
        { "id": "s6847dx", "ref": "arg", "value": "0" },
        { "id": "5g3gdi1", "script": "return 'result.' + value;" },
        { "id": "flcuh31", "ref": "get" },
        { "id": "0eoq13n", "ref": "arg", "value": "value" },
        { "id": "ysqu0jj", "ref": "arg", "value": "0.result" },
        { "id": "8ji5lb6", "ref": "arg", "value": "value" }
      ],
      "out": "nn4twx9",
      "in": "itrzmbe",
      "name": "toggle",
      "id": "toggle"
    },
    {
      "edges": [
        { "from": "in", "to": "runnables", "as": "inputs" },
        { "from": "args", "to": "runnables", "as": "args" },
        { "from": "element", "to": "map_fn", "as": "runnable" },
        { "from": "map_fn", "to": "map_fn_runnable", "as": "fn" },
        { "from": "runnable_args", "to": "map_runnables", "as": "args" },
        { "from": "runnables", "to": "map_runnables", "as": "array" },
        { "from": "map_fn_runnable", "to": "map_runnables", "as": "fn" },
        {
          "from": "map_runnables",
          "to": "runnables_promise",
          "as": "promises"
        },
        { "from": "runnables_promise", "to": "out", "as": "fn" },
        { "from": "context_args", "to": "merged_args", "as": "a0" },
        { "from": "value_args", "to": "merged_args", "as": "a1" },
        { "from": "merged_args", "to": "seq_runnable_args", "as": "target" },
        { "from": "args_path", "to": "seq_runnable_args", "as": "path" },
        { "from": "seq_runnable_args", "to": "out", "as": "args" }
      ],
      "nodes": [
        { "id": "in" },
        { "id": "args", "ref": "arg", "value": "_args" },
        { "id": "runnable_args", "ref": "arg", "value": "_args" },
        { "id": "value_args", "ref": "arg", "value": "args" },
        { "id": "context_args", "ref": "arg", "value": "_args" },
        { "id": "merged_args", "ref": "merge_objects" },
        { "id": "args_path", "value": "args" },
        { "id": "seq_runnable_args", "ref": "delete" },
        { "name": "in", "id": "in" },
        {
          "id": "runnables_promise",
          "script": "return Promise.all(promises);"
        },
        { "id": "map_runnables", "ref": "map" },
        {
          "id": "runnables",
          "script": "const runnables = Object.entries(inputs).filter(e => e[0] !== 'args').map(e => [e[0], e[1] && e[1]._Proxy ? e[1]._value : e[1]]).filter(r => r[1] && r[1].hasOwnProperty('fn') && r[1].hasOwnProperty('graph')); const filtered_args = Object.fromEntries(Object.entries(args).filter(a => !runnables.find(r => r[0] === a[0]))); return runnables.map(r => r[1]).map(r => ({...r, args: {...r.args, ...filtered_args}}))"
        },
        {
          "id": "element",
          "ref": "arg",
          "value": "element",
          "type": "internal"
        },
        {
          "id": "map_fn",
          "script": "return new Promise((resolve, reject) => resolve(_lib.no.runGraph(runnable.graph, runnable.fn, runnable.args)));"
        },
        { "id": "map_fn_runnable", "ref": "runnable" },
        { "name": "seq_runnable", "id": "out", "ref": "runnable" }
      ],
      "out": "out",
      "name": "sequence",
      "id": "sequence"
    },
    {
      "edges": [
        { "from": "lx2r71d", "to": "06osgt6", "as": "fn" },
        { "from": "j5hwdot", "to": "06osgt6", "as": "_" },
        { "from": "upzmz7i", "to": "06osgt6", "as": "value" },
        { "from": "hfgitu2", "to": "lx2r71d", "as": "fn" },
        { "from": "i68oe5k", "to": "lx2r71d", "as": "args" },
        { "from": "qomntld", "to": "upzmz7i", "as": "name" },
        { "from": "hgo86cn", "to": "hfgitu2", "as": "runnable" },
        { "from": "7m3jfmy", "to": "i68oe5k", "as": "name" },
        { "from": "z9zvilt", "to": "i68oe5k", "as": "url" },
        { "from": "f89a5u2", "to": "hgo86cn", "as": "args" },
        { "from": "1v653xe", "to": "hgo86cn", "as": "fn" },
        { "from": "my879k4", "to": "f89a5u2", "as": "imported_graph" },
        { "from": "gfpdf11", "to": "f89a5u2", "as": "name" },
        { "from": "23kbk1n", "to": "1v653xe", "as": "target" },
        { "from": "71ppowa", "to": "1v653xe", "as": "path" },
        { "from": "mzijca2", "to": "my879k4", "as": "self" },
        { "from": "vdfrqzc", "to": "my879k4", "as": "fn" },
        { "from": "83xy8y2", "to": "23kbk1n", "as": "runnable" },
        { "from": "5hat6g2", "to": "mzijca2", "as": "url" },
        { "from": "olx0rqo", "to": "83xy8y2", "as": "arg0" },
        { "from": "9swjqs2", "to": "83xy8y2", "as": "arg1" },
        { "from": "cbahtxj", "to": "83xy8y2", "as": "args" },
        { "from": "jpuj66z", "to": "olx0rqo", "as": "fn" },
        { "from": "rfmgm5u", "to": "9swjqs2", "as": "fn" },
        { "from": "jrt3ao3", "to": "cbahtxj", "as": "name" },
        { "from": "830e6rx", "to": "cbahtxj", "as": "imported_graph" },
        { "from": "4qd7fl3", "to": "jpuj66z", "as": "fn" },
        { "from": "sae69iz", "to": "4qd7fl3", "as": "args" },
        { "from": "j6g4jd4", "to": "4qd7fl3", "as": "fn" },
        { "from": "um99k99", "to": "sae69iz", "as": "imported_graph" },
        { "from": "z2ccs2u", "to": "sae69iz", "as": "name" },
        { "from": "xl0tqsd", "to": "j6g4jd4", "as": "state" },
        { "from": "sajmrbs", "to": "xl0tqsd", "as": "path" },
        { "from": "i50d0rl", "to": "xl0tqsd", "as": "value" },
        { "from": "59iaxzp", "to": "xl0tqsd", "as": "target" },
        { "from": "pfe7svb", "to": "i50d0rl", "as": "target" },
        { "from": "dsqrh2d", "to": "i50d0rl", "as": "path" },
        { "from": "9zfxac6", "to": "i50d0rl", "as": "value" },
        { "from": "2zvxan2", "to": "9zfxac6", "as": "item" },
        { "from": "hrzgjqm", "to": "9zfxac6", "as": "array" },
        { "from": "a8x8a5c", "to": "2zvxan2", "as": "array" },
        { "from": "d4yl375", "to": "2zvxan2", "as": "fn" },
        { "from": "2f1lyvz", "to": "hrzgjqm", "as": "nodes" },
        { "from": "oco33oy", "to": "hrzgjqm", "as": "imported_id" },
        { "from": "55qulh4", "to": "d4yl375", "as": "fn" },
        { "from": "4az2m7o", "to": "d4yl375", "as": "args" },
        { "from": "ugtx81k", "to": "55qulh4", "as": "target" },
        { "from": "2eq7kuu", "to": "55qulh4", "as": "path" },
        { "from": "2tekj7w", "to": "55qulh4", "as": "value" },
        { "from": "2xt8tpx", "to": "4az2m7o", "as": "imported_id" },
        { "from": "og27c4d", "to": "2tekj7w", "as": "imported_id" },
        { "from": "aodmtk1", "to": "2tekj7w", "as": "node_id" }
      ],
      "nodes": [
        { "id": "lx2r71d", "ref": "runnable" },
        { "id": "j5hwdot", "name": "in" },
        { "id": "upzmz7i", "script": "return 'imports.' + name" },
        { "id": "hfgitu2", "ref": "run" },
        { "id": "i68oe5k" },
        { "id": "qomntld", "ref": "arg", "value": "name" },
        { "id": "hgo86cn", "ref": "runnable" },
        { "id": "7m3jfmy", "ref": "arg", "value": "name" },
        { "id": "z9zvilt", "ref": "arg", "value": "url" },
        { "id": "f89a5u2" },
        { "id": "1v653xe", "ref": "get" },
        { "id": "my879k4", "ref": "call" },
        { "id": "gfpdf11", "ref": "arg", "value": "name" },
        { "id": "23kbk1n", "ref": "run" },
        { "id": "71ppowa", "script": "return \"1\";" },
        { "id": "mzijca2", "ref": "fetch" },
        { "id": "vdfrqzc", "value": "json" },
        { "id": "83xy8y2", "ref": "sequence" },
        { "id": "5hat6g2", "ref": "arg", "value": "url" },
        { "id": "olx0rqo", "ref": "runnable" },
        { "id": "9swjqs2", "ref": "runnable" },
        { "id": "cbahtxj" },
        { "id": "jpuj66z", "ref": "dispatch_runnable" },
        {
          "id": "rfmgm5u",
          "ref": "arg",
          "value": "imported_graph",
          "type": "internal"
        },
        { "id": "jrt3ao3", "ref": "arg", "value": "name", "type": "internal" },
        {
          "id": "830e6rx",
          "ref": "arg",
          "value": "imported_graph",
          "type": "internal"
        },
        { "id": "4qd7fl3", "ref": "runnable" },
        { "id": "sae69iz" },
        { "id": "j6g4jd4" },
        {
          "id": "um99k99",
          "ref": "arg",
          "value": "imported_graph",
          "type": "internal"
        },
        { "id": "z2ccs2u", "ref": "arg", "value": "name" },
        { "id": "xl0tqsd", "ref": "set" },
        { "id": "sajmrbs", "value": "display_graph" },
        { "id": "i50d0rl", "ref": "set" },
        { "id": "59iaxzp", "ref": "arg", "value": "state", "type": "internal" },
        {
          "id": "pfe7svb",
          "ref": "arg",
          "value": "state.display_graph",
          "type": "internal"
        },
        { "id": "dsqrh2d", "value": "nodes" },
        { "id": "9zfxac6", "ref": "append" },
        { "id": "2zvxan2", "ref": "map" },
        {
          "id": "hrzgjqm",
          "script": "return nodes.filter(n => !n.id.startsWith(imported_id)).concat([{id: imported_id}]);"
        },
        {
          "id": "a8x8a5c",
          "ref": "arg",
          "value": "payload.imported_graph.nodes",
          "type": "internal"
        },
        { "id": "d4yl375", "ref": "runnable" },
        {
          "id": "2f1lyvz",
          "ref": "arg",
          "value": "state.display_graph.nodes",
          "type": "internal"
        },
        {
          "id": "oco33oy",
          "ref": "arg",
          "value": "payload.name",
          "type": "internal"
        },
        { "id": "55qulh4", "ref": "set" },
        { "id": "4az2m7o" },
        {
          "id": "ugtx81k",
          "ref": "arg",
          "value": "element",
          "type": "internal"
        },
        { "id": "2eq7kuu", "value": "id" },
        { "id": "2tekj7w", "script": "return imported_id + '.' + node_id;" },
        {
          "id": "2xt8tpx",
          "ref": "arg",
          "value": "payload.name",
          "type": "internal"
        },
        {
          "id": "og27c4d",
          "ref": "arg",
          "value": "imported_id",
          "type": "internal"
        },
        {
          "id": "aodmtk1",
          "ref": "arg",
          "value": "element.id",
          "type": "internal"
        }
      ],
      "out": "06osgt6",
      "in": "j5hwdot",
      "name": "import_json",
      "id": "import_json"
    },
    {
      "edges": [
        { "from": "usd4433", "to": "pd64cr8", "as": "otherwise" },
        { "from": "0tsqw11", "to": "pd64cr8", "as": "_" },
        { "from": "6rdgk5r", "to": "pd64cr8", "as": "value" },
        { "from": "4g0xgt3", "to": "usd4433", "as": "value" },
        { "from": "itmdest", "to": "usd4433", "as": "fn" },
        { "from": "s5ns82c", "to": "6rdgk5r", "as": "target" },
        { "from": "eb0nj9q", "to": "6rdgk5r", "as": "path" }
      ],
      "nodes": [
        { "name": "out", "id": "pd64cr8", "ref": "default" },
        {
          "id": "usd4433",
          "name": "modify_state_runnable",
          "ref": "modify_state_runnable"
        },
        { "id": "0tsqw11", "name": "in" },
        { "id": "6rdgk5r", "ref": "get" },
        { "id": "4g0xgt3", "value": "value", "ref": "arg" },
        { "id": "itmdest", "value": "fn", "ref": "arg" },
        { "id": "s5ns82c", "ref": "arg", "value": "state" },
        { "id": "eb0nj9q", "ref": "arg", "value": "value" }
      ],
      "out": "pd64cr8",
      "in": "0tsqw11",
      "name": "initial_state_runnable",
      "id": "initial_state_runnable"
    },
    {
      "edges": [
        { "from": "17hgmhe", "to": "4k16rxs", "as": "fn" },
        { "from": "0tke7mk", "to": "4k16rxs", "as": "arg0" },
        { "from": "qsm5fqf", "to": "4k16rxs", "as": "args" },
        { "from": "6i1lek8", "to": "17hgmhe", "as": "fn" },
        { "from": "ecixhbu", "to": "qsm5fqf", "as": "value" },
        { "from": "3d6xwzp", "to": "qsm5fqf", "as": "fn" },
        { "from": "ysv47a4", "to": "qsm5fqf", "as": "state" },
        { "from": "yl8sikb", "to": "6i1lek8", "as": "fn" },
        { "from": "4hrg1ky", "to": "6i1lek8", "as": "args" },
        { "from": "ywscm67", "to": "yl8sikb", "as": "state" },
        { "from": "hsgqfec", "to": "4hrg1ky", "as": "value" },
        { "from": "a5z6wdp", "to": "4hrg1ky", "as": "state_value" },
        { "from": "vjtdfop", "to": "ywscm67", "as": "path" },
        { "from": "hej7g0o", "to": "ywscm67", "as": "value" },
        { "from": "bohly2o", "to": "ywscm67", "as": "target" },
        { "from": "y65mfa8", "to": "a5z6wdp", "as": "runnable" },
        { "from": "tmsibf6", "to": "y65mfa8", "as": "value" },
        { "from": "dkoqs5x", "to": "y65mfa8", "as": "path" },
        { "from": "zmexk3x", "to": "y65mfa8", "as": "target" },
        { "from": "nl97w9x", "to": "tmsibf6", "as": "arg0" },
        { "from": "oz8h5rr", "to": "tmsibf6", "as": "arg1" },
        { "from": "5g3mq34", "to": "nl97w9x", "as": "dispatch" },
        { "from": "jdxnymc", "to": "nl97w9x", "as": "payload" },
        { "from": "69fs5ao", "to": "nl97w9x", "as": "state_value" },
        { "from": "lsjg9ew", "to": "nl97w9x", "as": "state" },
        { "from": "vc4ejyt", "to": "69fs5ao", "as": "target" },
        { "from": "n3riawv", "to": "69fs5ao", "as": "path" }
      ],
      "nodes": [
        { "id": "4k16rxs", "ref": "runnable", "name": "out" },
        { "id": "17hgmhe", "ref": "dispatch_runnable" },
        { "id": "0tke7mk", "name": "in" },
        { "id": "qsm5fqf" },
        { "id": "6i1lek8", "ref": "runnable" },
        { "id": "ecixhbu", "ref": "arg", "value": "value" },
        { "id": "3d6xwzp", "ref": "arg", "value": "fn" },
        { "id": "ysv47a4", "ref": "arg", "value": "state" },
        { "id": "yl8sikb" },
        { "id": "4hrg1ky" },
        { "id": "ywscm67", "ref": "set" },
        { "id": "hsgqfec", "ref": "arg", "value": "value" },
        { "id": "a5z6wdp", "ref": "run" },
        { "id": "vjtdfop", "ref": "arg", "value": "payload.value" },
        { "id": "hej7g0o", "ref": "arg", "value": "payload.state_value" },
        { "id": "bohly2o", "ref": "arg", "value": "state" },
        { "id": "y65mfa8", "ref": "set" },
        { "id": "tmsibf6", "ref": "merge_objects" },
        { "id": "dkoqs5x", "value": "args" },
        { "id": "zmexk3x", "ref": "arg", "value": "fn" },
        { "id": "nl97w9x" },
        { "id": "oz8h5rr", "ref": "arg", "value": "fn.args" },
        { "id": "5g3mq34", "ref": "arg", "value": "dispatch" },
        { "id": "jdxnymc", "ref": "arg", "value": "payload" },
        { "id": "69fs5ao", "ref": "get" },
        { "id": "lsjg9ew", "ref": "arg", "value": "state" },
        { "id": "vc4ejyt", "ref": "arg", "value": "state" },
        { "id": "n3riawv", "ref": "arg", "value": "value" }
      ],
      "out": "4k16rxs",
      "in": "0tke7mk",
      "name": "modify_state_runnable",
      "id": "modify_state_runnable"
    },
    {
      "edges": [
        { "from": "tkd4tqn", "to": "j8c79uf", "as": "arr" },
        { "from": "hfexsuu", "to": "j8c79uf", "as": "fn", "type": "ref" },
        { "from": "bgi2g37", "to": "j8c79uf", "as": "arr" },
        { "from": "7gqcw0o", "to": "hfexsuu", "as": "key" },
        { "from": "kpakw50", "to": "bgi2g37", "as": "obj" }
      ],
      "nodes": [
        { "name": "out", "id": "j8c79uf", "ref": "filter" },
        { "id": "tkd4tqn", "name": "in" },
        { "id": "hfexsuu", "script": "return !key?.startsWith('_');" },
        { "id": "bgi2g37", "script": "return Object.entries(obj)" },
        { "id": "7gqcw0o", "ref": "arg", "value": "0.0" },
        { "id": "kpakw50", "ref": "arg", "value": "object" }
      ],
      "out": "j8c79uf",
      "in": "tkd4tqn",
      "name": "object_entries",
      "id": "object_entries"
    },
    {
      "edges": [
        { "as": "arr", "from": "cawqofn", "to": "spy9h48", "type": "resolve" }
      ],
      "nodes": [
        {
          "name": "out",
          "id": "spy9h48",
          "script": "return Object.fromEntries((Array.isArray(arr[0]) ? arr[0] : arr).map((v, i, a) => [Math.floor((i / a.length)*100) + \"%\", v]))"
        },
        { "id": "cawqofn", "ref": "array", "name": "in" }
      ],
      "out": "spy9h48",
      "in": "cawqofn",
      "name": "css_anim",
      "id": "css_anim"
    },
    {
      "edges": [
        { "from": "vgv61zj", "to": "5yxmxua", "as": "children" },
        { "from": "jstjx7g", "to": "5yxmxua", "as": "props" },
        { "from": "h40e3j9", "to": "5yxmxua", "as": "dom_type" },
        { "from": "xw3pmx7", "to": "5yxmxua", "as": "arg3" },
        { "from": "jlgp7uy", "to": "vgv61zj", "as": "text" },
        { "from": "o1j78dd", "to": "jstjx7g", "as": "key" },
        { "from": "ij4z84e", "to": "jlgp7uy", "as": "self" },
        { "from": "q3pwj9j", "to": "jlgp7uy", "as": "fn" },
        { "from": "d6h3gdw", "to": "jlgp7uy", "as": "args" },
        { "from": "j8c79uf", "to": "ij4z84e", "as": "array" },
        { "as": "fn", "from": "n9g4wyq", "to": "ij4z84e" },
        { "from": "z63iaay", "to": "d6h3gdw", "as": "arg0" },
        { "from": "vwsgweb", "to": "j8c79uf", "as": "object" },
        { "as": "fn", "from": "aelf1a7", "to": "n9g4wyq" },
        { "from": "mkwx4yx", "to": "vwsgweb", "as": "otherwise" },
        { "from": "fzr4mkv", "to": "vwsgweb", "as": "value" },
        { "from": "5eqf77t", "to": "aelf1a7", "as": "key" },
        { "from": "5pwetw5", "to": "aelf1a7", "as": "value" },
        { "from": "o5ojdyc", "to": "5pwetw5", "as": "pred" },
        { "as": "false", "from": "1hpnid4", "to": "5pwetw5" },
        { "from": "slj7ynn/jlgp7uy", "to": "5pwetw5", "as": "true" },
        { "as": "key", "from": "ft1oksl", "to": "o5ojdyc" },
        { "from": "bbbp82v", "to": "1hpnid4", "as": "self" },
        { "from": "cp66ig5", "to": "1hpnid4", "as": "fn" },
        { "from": "uwq9u81", "to": "1hpnid4", "as": "args" },
        { "from": "slj7ynn/ij4z84e", "to": "slj7ynn/jlgp7uy", "as": "self" },
        { "from": "slj7ynn/q3pwj9j", "to": "slj7ynn/jlgp7uy", "as": "fn" },
        { "from": "slj7ynn/d6h3gdw", "to": "slj7ynn/jlgp7uy", "as": "args" },
        { "from": "i1ifamx", "to": "bbbp82v", "as": "array" },
        { "as": "fn", "from": "druspar", "to": "bbbp82v" },
        { "from": "gth1wc2", "to": "uwq9u81", "as": "arg0" },
        { "from": "slj7ynn/j8c79uf", "to": "slj7ynn/ij4z84e", "as": "array" },
        { "as": "fn", "from": "slj7ynn/n9g4wyq", "to": "slj7ynn/ij4z84e" },
        { "from": "slj7ynn/z63iaay", "to": "slj7ynn/d6h3gdw", "as": "arg0" },
        { "from": "y25dg2n", "to": "i1ifamx", "as": "object" },
        { "as": "fn", "from": "0d4yh8u", "to": "druspar" },
        { "from": "slj7ynn/vwsgweb", "to": "slj7ynn/j8c79uf", "as": "object" },
        { "as": "fn", "from": "slj7ynn/aelf1a7", "to": "slj7ynn/n9g4wyq" },
        { "from": "h13a9fd", "to": "0d4yh8u", "as": "key" },
        { "from": "h7me3v8", "to": "0d4yh8u", "as": "value" },
        {
          "from": "slj7ynn/mkwx4yx",
          "to": "slj7ynn/vwsgweb",
          "as": "otherwise"
        },
        { "from": "slj7ynn/fzr4mkv", "to": "slj7ynn/vwsgweb", "as": "value" },
        { "from": "slj7ynn/5eqf77t", "to": "slj7ynn/aelf1a7", "as": "key" },
        { "as": "value", "from": "slj7ynn/1hpnid4", "to": "slj7ynn/aelf1a7" },
        { "from": "slj7ynn/bbbp82v", "to": "slj7ynn/1hpnid4", "as": "self" },
        { "from": "slj7ynn/cp66ig5", "to": "slj7ynn/1hpnid4", "as": "fn" },
        { "from": "slj7ynn/uwq9u81", "to": "slj7ynn/1hpnid4", "as": "args" },
        { "from": "slj7ynn/i1ifamx", "to": "slj7ynn/bbbp82v", "as": "array" },
        { "as": "fn", "from": "slj7ynn/druspar", "to": "slj7ynn/bbbp82v" },
        { "from": "slj7ynn/gth1wc2", "to": "slj7ynn/uwq9u81", "as": "arg0" },
        { "from": "slj7ynn/y25dg2n", "to": "slj7ynn/i1ifamx", "as": "object" },
        { "as": "fn", "from": "slj7ynn/0d4yh8u", "to": "slj7ynn/druspar" },
        { "from": "slj7ynn/h13a9fd", "to": "slj7ynn/0d4yh8u", "as": "key" },
        { "from": "slj7ynn/h7me3v8", "to": "slj7ynn/0d4yh8u", "as": "value" }
      ],
      "nodes": [
        { "id": "5yxmxua", "ref": "html_element", "name": "out" },
        { "id": "vgv61zj", "ref": "html_text" },
        { "id": "jstjx7g" },
        { "id": "h40e3j9", "value": "style" },
        { "id": "xw3pmx7", "name": "in" },
        { "id": "jlgp7uy", "ref": "call", "name": "named_obj/out" },
        { "id": "o1j78dd", "value": "result-view" },
        { "id": "ij4z84e", "ref": "map" },
        { "id": "q3pwj9j", "value": "join" },
        { "id": "d6h3gdw", "ref": "array" },
        { "id": "j8c79uf", "name": "object_entries", "ref": "object_entries" },
        { "id": "n9g4wyq", "ref": "runnable" },
        { "id": "z63iaay", "script": "return \"\\n\";" },
        { "id": "vwsgweb", "ref": "default" },
        {
          "id": "aelf1a7",
          "script": "return key + '{' + value + '}'",
          "name": "out"
        },
        { "id": "mkwx4yx" },
        { "id": "fzr4mkv", "ref": "arg", "value": "css_object" },
        { "id": "5eqf77t", "value": "element.0", "ref": "arg" },
        { "id": "5pwetw5", "ref": "if" },
        { "id": "o5ojdyc", "script": "return key.startsWith(\"@keyframes\")" },
        { "id": "1hpnid4", "ref": "call" },
        { "id": "slj7ynn/jlgp7uy", "ref": "call", "name": "named_obj/out" },
        { "id": "ft1oksl", "ref": "arg", "value": "element.0" },
        { "id": "bbbp82v", "ref": "map" },
        { "id": "cp66ig5", "value": "join" },
        { "id": "uwq9u81", "ref": "array" },
        { "id": "slj7ynn/ij4z84e", "ref": "map" },
        { "id": "slj7ynn/q3pwj9j", "value": "join" },
        { "id": "slj7ynn/d6h3gdw", "ref": "array" },
        { "id": "i1ifamx", "ref": "object_entries" },
        { "id": "druspar", "ref": "runnable" },
        { "id": "gth1wc2", "script": "return \"\\n\";" },
        {
          "id": "slj7ynn/j8c79uf",
          "name": "object_entries",
          "ref": "object_entries"
        },
        { "id": "slj7ynn/n9g4wyq", "ref": "runnable" },
        { "id": "slj7ynn/z63iaay", "script": "return \"\\n\";" },
        { "id": "y25dg2n", "value": "element.1", "ref": "arg" },
        { "id": "0d4yh8u", "script": "return key + ': ' + value + \";\";" },
        { "id": "slj7ynn/vwsgweb", "ref": "default" },
        {
          "id": "slj7ynn/aelf1a7",
          "script": "return key + '{' + value + '}'",
          "name": "out"
        },
        { "id": "h13a9fd", "ref": "arg", "value": "element.0" },
        { "id": "h7me3v8", "ref": "arg", "value": "element.1" },
        { "id": "slj7ynn/mkwx4yx" },
        { "id": "slj7ynn/fzr4mkv", "ref": "arg", "value": "element.1" },
        { "id": "slj7ynn/5eqf77t", "value": "element.0", "ref": "arg" },
        { "id": "slj7ynn/1hpnid4", "ref": "call" },
        { "id": "slj7ynn/bbbp82v", "ref": "map" },
        { "id": "slj7ynn/cp66ig5", "value": "join" },
        { "id": "slj7ynn/uwq9u81", "ref": "array" },
        { "id": "slj7ynn/i1ifamx", "ref": "object_entries" },
        { "id": "slj7ynn/druspar", "ref": "runnable" },
        { "id": "slj7ynn/gth1wc2", "script": "return \"\\n\";" },
        { "id": "slj7ynn/y25dg2n", "value": "element.1", "ref": "arg" },
        {
          "id": "slj7ynn/0d4yh8u",
          "script": "return key + ': ' + value + \";\";"
        },
        { "id": "slj7ynn/h13a9fd", "ref": "arg", "value": "element.0" },
        { "id": "slj7ynn/h7me3v8", "ref": "arg", "value": "element.1" }
      ],
      "out": "5yxmxua",
      "in": "xw3pmx7",
      "name": "css_styles",
      "id": "css_styles"
    },
    {
      "edges": [
        { "from": "da71z9c/2435ihf/jd1mc84", "to": "a59hci8", "as": "arg0" },
        { "to": "a59hci8", "from": "fkp4pck/wb73q0h", "as": "arg1" },
        {
          "from": "da71z9c/2435ihf/jd1mc84/a59hci8/da71z9c/2435ihf/y4qbl8k",
          "to": "da71z9c/2435ihf/jd1mc84",
          "as": "value"
        },
        {
          "from": "da71z9c/2435ihf/jd1mc84/a59hci8/da71z9c/2435ihf/lol0vdh",
          "to": "da71z9c/2435ihf/jd1mc84",
          "as": "fn"
        },
        {
          "from": "da71z9c/2435ihf/jd1mc84/a59hci8/da71z9c/2435ihf/w8vpdfx",
          "to": "da71z9c/2435ihf/jd1mc84/a59hci8/da71z9c/2435ihf/lol0vdh",
          "as": "fn"
        },
        {
          "from": "da71z9c/2435ihf/jd1mc84/a59hci8/da71z9c/2435ihf/vofecaa",
          "to": "da71z9c/2435ihf/jd1mc84/a59hci8/da71z9c/2435ihf/w8vpdfx",
          "as": "props"
        },
        {
          "from": "da71z9c/2435ihf/jd1mc84/a59hci8/da71z9c/2435ihf/j8qudts",
          "to": "da71z9c/2435ihf/jd1mc84/a59hci8/da71z9c/2435ihf/w8vpdfx",
          "as": "children"
        },
        {
          "from": "da71z9c/2435ihf/jd1mc84/a59hci8/da71z9c/2435ihf/iead5y3",
          "to": "da71z9c/2435ihf/jd1mc84/a59hci8/da71z9c/2435ihf/w8vpdfx",
          "as": "dom_type"
        }
      ],
      "nodes": [
        { "name": "out", "id": "a59hci8", "ref": "sequence" },
        {
          "id": "da71z9c/2435ihf/jd1mc84",
          "name": "modify_state_runnable",
          "ref": "modify_state_runnable"
        },
        { "id": "fkp4pck/wb73q0h", "name": "in" },
        {
          "id": "da71z9c/2435ihf/jd1mc84/a59hci8/da71z9c/2435ihf/y4qbl8k",
          "value": "result_display"
        },
        {
          "id": "da71z9c/2435ihf/jd1mc84/a59hci8/da71z9c/2435ihf/lol0vdh",
          "ref": "runnable"
        },
        {
          "id": "da71z9c/2435ihf/jd1mc84/a59hci8/da71z9c/2435ihf/w8vpdfx",
          "ref": "html_element"
        },
        {
          "id": "da71z9c/2435ihf/jd1mc84/a59hci8/da71z9c/2435ihf/vofecaa",
          "ref": "arg",
          "value": "props"
        },
        {
          "id": "da71z9c/2435ihf/jd1mc84/a59hci8/da71z9c/2435ihf/j8qudts",
          "ref": "arg",
          "value": "children"
        },
        {
          "id": "da71z9c/2435ihf/jd1mc84/a59hci8/da71z9c/2435ihf/iead5y3",
          "ref": "arg",
          "value": "dom_type"
        }
      ],
      "out": "a59hci8",
      "in": "fkp4pck/wb73q0h",
      "description": "Use like an html_element to add html to the page.",
      "name": "set_display",
      "id": "set_display"
    },
    {
      "edges": [
        { "from": "gvkhkfw", "to": "nn4twx9", "as": "children" },
        { "from": "7rhq0q5", "to": "nn4twx9", "as": "_" },
        { "from": "4972gx3", "to": "gvkhkfw", "as": "arg1" },
        { "from": "1ldhfah", "to": "gvkhkfw", "as": "arg0" },
        { "from": "ee5i5r2", "to": "4972gx3", "as": "dom_type" },
        { "from": "ro8n2gc", "to": "4972gx3", "as": "props" },
        { "from": "wet0jdv", "to": "1ldhfah", "as": "children" },
        { "from": "gcuxiw9", "to": "1ldhfah", "as": "props" },
        { "from": "875c1wk", "to": "1ldhfah", "as": "dom_type" },
        { "from": "t6q6rvf", "to": "ro8n2gc", "as": "arg0" },
        { "from": "rjwtb3c", "to": "ro8n2gc", "as": "props" },
        { "from": "utkc9o6", "to": "wet0jdv", "as": "arg0" },
        { "from": "jxl9r29", "to": "gcuxiw9", "as": "for" },
        { "from": "2zxw9oo", "to": "t6q6rvf", "as": "onkeydown" },
        { "from": "i7y9dyy", "to": "t6q6rvf", "as": "onchange" },
        { "from": "vks4vul", "to": "rjwtb3c", "as": "value" },
        { "from": "ddfgy2s", "to": "rjwtb3c", "as": "otherwise" },
        { "from": "trd8ptp", "to": "utkc9o6", "as": "text" },
        { "from": "zfrrk0z", "to": "jxl9r29", "as": "value" },
        { "to": "2zxw9oo", "from": "qseh2tb", "as": "fn", "type": "ref" },
        { "from": "b0j8nyq", "to": "i7y9dyy", "as": "dispatch" },
        { "from": "eotod0l", "to": "i7y9dyy", "as": "seq" },
        { "from": "qxwvdfe", "to": "i7y9dyy", "as": "value" },
        { "from": "0dnqo5l", "to": "i7y9dyy", "as": "onchange_fn" },
        { "from": "1wps21n", "to": "qseh2tb", "as": "a1" },
        { "from": "y5q7mbn", "to": "qseh2tb", "as": "a0" },
        { "from": "qjc0zt6", "to": "eotod0l", "as": "arg" },
        { "from": "widk6u6", "to": "qjc0zt6", "as": "fn" },
        { "from": "506ntvb", "to": "qjc0zt6", "as": "value" },
        { "from": "4ck1vaf", "to": "widk6u6", "as": "fn" }
      ],
      "nodes": [
        { "id": "nn4twx9",
          "ref": "html_element",
          "name": "out"
        },
        { "id": "gvkhkfw", "ref": "array" },
        { "id": "7rhq0q5", "name": "in" },
        { "id": "4972gx3", "ref": "html_element" },
        { "id": "1ldhfah", "ref": "html_element", "name": "label" },
        { "id": "ee5i5r2", "value": "input" },
        { "id": "ro8n2gc", "ref": "merge_objects" },
        { "id": "wet0jdv", "ref": "array" },
        { "id": "gcuxiw9" },
        { "id": "875c1wk", "value": "label" },
        { "id": "t6q6rvf" },
        { "id": "rjwtb3c", "ref": "default" },
        { "id": "utkc9o6", "ref": "html_text" },
        { "id": "jxl9r29", "script": "return \"input-\" + value;" },
        { "id": "2zxw9oo", "ref": "execute_graph", "name": "stop_propagation" },
        {
          "id": "i7y9dyy",
          "script": "return (state, payload) => [{...state, [value]: payload.target.value}, onchange_fn && [_ => dispatch(onchange_fn)]]"
        },
        { "id": "vks4vul", "ref": "arg", "value": "props" },
        { "id": "ddfgy2s" },
        { "id": "trd8ptp", "ref": "arg", "value": "value" },
        { "id": "zfrrk0z", "ref": "arg", "value": "value" },
        { "id": "qseh2tb", "ref": "array" },
        { "id": "b0j8nyq", "ref": "arg", "value": "dispatch" },
        { "id": "eotod0l", "ref": "sequence" },
        { "id": "qxwvdfe", "ref": "arg", "value": "value" },
        { "id": "0dnqo5l", "ref": "arg", "value": "onchange_fn" },
        {
          "id": "1wps21n",
          "name": "stop propagation effect",
          "out": "hj2cig0",
          "nodes": [
            {
              "id": "hj2cig0",
              "ref": "array",
              "name": "stop propagation effect"
            },
            { "id": "1pvaim9", "ref": "execute_graph" },
            { "id": "0o86xp3", "ref": "arg", "value": "1" },
            { "id": "d60jwms", "script": "payload.stopPropagation();" },
            { "id": "xgbubrq", "ref": "arg", "value": "1" }
          ],
          "edges": [
            { "from": "1pvaim9", "to": "hj2cig0", "as": "a0" },
            { "from": "0o86xp3", "to": "hj2cig0", "as": "a1" },
            { "from": "d60jwms", "to": "1pvaim9", "as": "fn", "type": "ref" },
            { "from": "xgbubrq", "to": "d60jwms", "as": "payload" }
          ]
        },
        { "id": "y5q7mbn", "ref": "arg", "value": "0" },
        { "id": "qjc0zt6", "ref": "modify_state_runnable" },
        { "id": "widk6u6", "ref": "runnable" },
        { "id": "506ntvb", "ref": "arg", "value": "value" },
        { "id": "4ck1vaf", "ref": "arg", "value": "payload.target.value" }
      ],
      "out": "nn4twx9",
      "in": "7rhq0q5",
      "name": "input",
      "id": "input"
    },
    {
      "edges": [
        { "from": "in", "to": "out", "as": "_", "type": "ref" },
        { "from": "text_value", "to": "out", "as": "dom_type" },
        { "from": "text", "to": "out", "as": "text" }
      ],
      "nodes": [
        { "id": "in" },
        { "id": "text", "ref": "arg", "value": "text" },
        { "id": "text_value", "value": "text_value" },
        { "id": "out" }
      ],
      "out": "out",
      "description": "Some HTML plaintext. Usually used as a child of html_element.",
      "id": "html_text"
    },
    {
      "edges": [
        { "from": "children", "to": "fill_children", "as": "children" },
        {
          "from": "props",
          "to": "fill_props",
          "as": "props",
          "type": "resolve"
        },
        {
          "from": "fill_children",
          "to": "out",
          "as": "children",
          "type": "resolve"
        },
        { "from": "fill_props", "to": "out", "as": "props" },
        { "from": "dom_type", "to": "dom_type_def", "as": "value" },
        { "from": "div", "to": "dom_type_def", "as": "otherwise" },
        { "from": "dom_type_def", "to": "out", "as": "dom_type" },
        { "from": "in", "to": "out", "as": "args", "type": "ref" }
      ],
      "nodes": [
        { "id": "in" },
        { "id": "children", "ref": "arg", "value": "children" },
        { "id": "props", "ref": "arg", "value": "props" },
        { "id": "dom_type", "ref": "arg", "value": "dom_type" },
        { "id": "div", "value": "div" },
        {
          "id": "fill_children",
          "script": "return children === undefined ? [] : children.length !== undefined ? children.filter(c => !!c).map(c => c.el ?? c) : [children.el ?? children]"
        },
        { "id": "fill_props", "script": "return props ?? {}" },
        { "id": "dom_type_def", "ref": "default" },
        {
          "id": "out",
          "script": "if(!(typeof dom_type === 'string' && Array.isArray(children))){ throw new Error('invalid element');} children.filter(c => c).forEach(c => {if(typeof c.dom_type !== 'string'){throw new Error ('invalid child element');}}); return {el: {dom_type, props, children}}"
        }
      ],
      "description": "An HTML Element. `children` is an array of html_element or html_text, `props` are the attributes for the html element as an object.",
      "id": "html_element"
    },
    {
      "edges": [
        { "from": "2lr3ihi", "to": "c2sko9c", "as": "dom_type" },
        { "from": "props", "to": "defined_props", "as": "true" },
        { "from": "props", "to": "defined_props", "as": "pred" },
        { "from": "empty_obj", "to": "defined_props", "as": "false" },
        { "from": "defined_props", "to": "a0jb5es", "as": "target" },
        { "from": "name_path", "to": "a0jb5es", "as": "path" },
        { "from": "a0jb5es", "to": "c2sko9c", "as": "props" },
        {
          "from": "s5x2r1f",
          "to": "a0jb5es",
          "as": "value"
        }
      ],
      "nodes": [
        {
          "id": "c2sko9c",
          "ref": "html_element",
          "name": "ionicon"
        },
        {
          "id": "2lr3ihi",
          "value": "ion-icon"
        },
        {
          "id": "empty_obj",
          "value": {}
        },
        {
          "id": "props",
          "ref": "arg",
          "value": "props"
        },
        {
          "id": "defined_props",
          "ref": "if"
        },
        {
          "id": "name_path",
          "value": "name"
        },
        {
          "id": "a0jb5es",
          "ref": "set"
        },
        {
          "id": "s5x2r1f",
          "ref": "arg",
          "value": "icon"
        }
      ],
      "out": "c2sko9c",
      "name": "icon",
      "id": "icon"
    },
    {
      "edges": [
        {
          "from": "add_props",
          "to": "add",
          "as": "props"
        },
        {
          "from": "circle_props",
          "to": "circle",
          "as": "props"
        },
        {
          "from": "add",
          "to": "children",
          "as": "a1"
        },
        {
          "from": "circle",
          "to": "children",
          "as": "a0"
        },
        {
          "from": "path",
          "to": "add",
          "as": "dom_type"
        },
        {
          "from": "path",
          "to": "circle",
          "as": "dom_type"
        },
        {
          "from": "svg",
          "to": "out",
          "as": "dom_type"
        },
        {
          "from": "children",
          "to": "out",
          "as": "children"
        },
        {
          "from": "in_props",
          "to": "props",
          "as": "o1"
        },
        {
          "from": "viewbox_props",
          "to": "props",
          "as": "o2"
        },
        {
          "from": "props",
          "to": "out",
          "as": "props"
        }
      ],
      "nodes": [
        {
          "id": "in_props",
          "ref": "arg",
          "value": "props"
        },
        {
          "id": "viewbox_props",
          "value": {
            "viewBox": "0 0 512 512"
          }
        },
        {
          "id": "props",
          "ref": "merge_objects"
        },
        {
          "id": "svg",
          "value": "svg"
        },
        {
          "id": "path",
          "value": "path"
        },
        {
          "id": "add_props",
          "value": {
            "d": "M256 176v160M336 256H176",
            "class": "add"
          }
        },
        {
          "id": "add",
          "ref": "html_element"
        },
        {
          "id": "circle_props",
          "value": {
            "d": "M448 256c0-106-86-192-192-192S64 150 64 256s86 192 192 192 192-86 192-192z",
            "class": "circle"
          }
        },
        {
          "id": "circle",
          "ref": "html_element"
        },
        {
          "id": "children",
          "ref": "array"
        },
        {
          "id": "out",
          "ref": "html_element"
        }
      ],
      "out": "out",
      "id": "add_circle_icon"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "_",
          "type": "ref"
        },
        {
          "from": "dom_type",
          "to": "out_input",
          "as": "dom_type"
        },
        {
          "from": "dom_type",
          "to": "out_h",
          "as": "dom_type"
        },
        {
          "from": "children",
          "to": "mapped_children",
          "as": "children"
        },
        {
          "from": "mapped_children",
          "to": "out_h",
          "as": "children"
        },
        {
          "from": "props",
          "to": "out_h",
          "as": "props"
        },
        {
          "from": "graph",
          "to": "mapped_children",
          "as": "graph"
        },
        {
          "from": "text",
          "to": "out_text",
          "as": "text",
          "type": "resolve"
        },
        {
          "from": "out_text",
          "to": "out_el",
          "as": "h_text"
        },
        {
          "from": "out_h",
          "to": "out_el",
          "as": "h"
        },
        {
          "from": "out_input",
          "to": "out_el",
          "as": "input"
        },
        {
          "from": "out_el",
          "to": "out",
          "as": "el",
          "type": "resolve"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "dom_type",
          "ref": "arg",
          "value": "dom_type"
        },
        {
          "id": "props",
          "ref": "arg",
          "value": "props"
        },
        {
          "id": "children",
          "ref": "arg",
          "value": "children"
        },
        {
          "id": "graph",
          "ref": "arg",
          "value": "graph"
        },
        {
          "id": "text",
          "ref": "arg",
          "value": "text"
        },
        {
          "id": "mapped_children",
          "script": "let run_graph = {...graph, in: 'run_h/in', out: 'run_h'}; const fn = _lib.no.executeGraphValue({graph: run_graph, lib: _lib}); const cs = []; children?.forEach(c => { if(!!c){const cfn = fn({...c, graph: run_graph}); if(!!cfn){cs.push(cfn.el ?? cfn)}}}); return cs;"
        },
        {
          "id": "out_h",
          "extern": "ha.h"
        },
        {
          "id": "out_text",
          "extern": "ha.text"
        },
        {
          "id": "out_input",
          "args": ["dom_type"],
          "script": "return dom_type === 'text_value' ? 'h_text' : 'h'"
        },
        {
          "id": "out_el",
          "ref": "switch"
        },
        {
          "id": "out"
        }
      ],
      "out": "out",
      "in": "in",
      "id": "run_h"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args",
          "type": "ref"
        },
        {
          "from": "node_id",
          "to": "selected_node",
          "as": "selected"
        },
        {
          "from": "display_graph",
          "to": "selected_node",
          "as": "display_graph"
        },
        {
          "from": "display_graph",
          "to": "has_nodes",
          "as": "display_graph"
        },
        {
          "from": "node_id",
          "to": "has_nodes",
          "as": "node_id"
        },
        {
          "from": "display_graph",
          "to": "contract",
          "as": "display_graph"
        },
        {
          "from": "node_id",
          "to": "contract",
          "as": "node_id"
        },
        {
          "from": "node_id",
          "to": "expand",
          "as": "node_id"
        },
        {
          "from": "display_graph",
          "to": "expand",
          "as": "display_graph"
        },
        {
          "from": "has_nodes",
          "to": "is_contractable",
          "as": "has_nodes"
        },
        {
          "from": "selected_node",
          "to": "get_name",
          "as": "node"
        },
        {
          "from": "selected_node",
          "to": "expandable_id",
          "as": "node"
        },
        {
          "from": "display_graph_out",
          "to": "expandable_id",
          "as": "out"
        },
        {
          "from": "selected_node",
          "to": "contract",
          "as": "node"
        },
        {
          "from": "get_name",
          "to": "contract",
          "as": "node_name"
        },
        {
          "from": "contractable_id",
          "to": "contract",
          "as": "name"
        },
        {
          "from": "get_name",
          "to": "is_contractable",
          "as": "name"
        },
        {
          "from": "node_id",
          "to": "contractable_id",
          "as": "node_id"
        },
        {
          "from": "get_name",
          "to": "contractable_id",
          "as": "name"
        },
        {
          "from": "contractable_id",
          "to": "selected",
          "as": "contract"
        },
        {
          "from": "expandable_id",
          "to": "selected",
          "as": "expand"
        },
        {
          "from": "has_nodes",
          "to": "expand_contract_result_inputs",
          "as": "expandable"
        },
        {
          "from": "is_contractable",
          "to": "expand_contract_result_inputs",
          "as": "contractable"
        },
        {
          "from": "expand_contract_result_inputs",
          "to": "selected",
          "as": "input"
        },
        {
          "from": "expand_contract_result_inputs",
          "to": "expand_contract_result",
          "as": "input"
        },
        {
          "from": "selected",
          "to": "expand_contract_result",
          "as": "selected"
        },
        {
          "from": "expand",
          "to": "expand_contract_result",
          "as": "expand"
        },
        {
          "from": "contract",
          "to": "expand_contract_result",
          "as": "contract"
        },
        {
          "from": "expand_contract_result",
          "to": "out",
          "as": "value"
        },
        {
          "from": "in",
          "to": "out",
          "as": "otherwise"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "node_id",
          "ref": "arg",
          "value": "node_id"
        },
        {
          "id": "display_graph",
          "ref": "arg",
          "value": "display_graph"
        },
        {
          "id": "display_graph_out",
          "ref": "arg",
          "value": "display_graph_out"
        },
        {
          "id": "selected_node",
          "script": "return display_graph.nodes.find(n => n.id === selected)"
        },
        {
          "id": "expand_contract_result_inputs",
          "script": "return expandable ? 'expand' : contractable ? 'contract' : undefined"
        },
        {
          "id": "selected",
          "script": "return [contract] ?? [expand]"
        },
        {
          "id": "expand_contract_result",
          "ref": "switch"
        },
        {
          "id": "get_name",
          "script": "return node.name"
        },
        {
          "id": "expandable_id",
          "script": "return node.id ? node.id + '/' + out : undefined"
        },
        {
          "id": "contractable_id",
          "script": "node_id = name ?? node_id; return !node_id ? undefined : node_id.endsWith('/out') ? node_id.substring(0, node_id.lastIndexOf('/')) : node_id.lastIndexOf('/') >= 0 ? node_id.substring(0, node_id.lastIndexOf('/')) : node_id"
        },
        {
          "id": "expand",
          "script": "return display_graph && node_id ? _lib.scripts.expand_node({display_graph, node_id}) : []"
        },
        {
          "id": "contract",
          "script": "return display_graph && node_id ? _lib.scripts.contract_node({display_graph, node_id, name, node_name}) : []"
        },
        {
          "id": "has_nodes",
          "script": "return !!display_graph.nodes.find(n => n.id === node_id).nodes"
        },
        {
          "id": "is_contractable",
          "script": "return !has_nodes"
        },
        {
          "id": "out",
          "ref": "default"
        }
      ],
      "id": "expand_contract"
    },
    {
      "edges": [
        {
          "from": "osgrk7ddu",
          "to": "tsxlng4gd",
          "as": "children"
        },
        {
          "from": "hghirvcml",
          "to": "tsxlng4gd",
          "as": "dom_type"
        },
        {
          "from": "ha6b5qttf",
          "to": "osgrk7ddu",
          "as": "text"
        },
        {
          "from": "6pqqchhnk",
          "to": "ha6b5qttf",
          "as": "data"
        }
      ],
      "nodes": [
        {
          "id": "tsxlng4gd",
          "ref": "html_element",
          "name": "default_node_display"
        },
        {
          "id": "osgrk7ddu",
          "args": [],
          "ref": "html_text"
        },
        {
          "id": "hghirvcml",
          "args": [],
          "value": "pre"
        },
        {
          "id": "ha6b5qttf",
          "args": ["data"],
          "script": "return JSON.stringify({node: data.node, result: data.result}, null, 2)"
        },
        {
          "id": "6pqqchhnk",
          "name": "default_node_display/in"
        }
      ],
      "out": "tsxlng4gd",
      "in": "6pqqchhnk",
      "name": "default_node_display",
      "id": "default_node_display"
    },
    {
      "edges": [
        {
          "from": "ml655hs73",
          "to": "out",
          "as": "dom_type"
        },
        {
          "from": "thsez3hy1",
          "to": "out",
          "as": "children"
        },
        {
          "from": "stringify",
          "to": "thsez3hy1",
          "as": "text"
        },
        {
          "from": "in",
          "to": "stringify",
          "as": "data"
        },
        {
          "from": "in",
          "to": "stringify",
          "as": "data"
        }
      ],
      "nodes": [
        {
          "id": "out",
          "ref": "html_element",
          "name": "graph_display"
        },
        {
          "id": "ml655hs73",
          "args": [],
          "value": "pre"
        },
        {
          "id": "thsez3hy1",
          "args": [],
          "ref": "html_text"
        },
        {
          "id": "stringify",
          "args": ["data"],
          "script": "return JSON.stringify({...data.node, nodes: data.node.nodes.length, edges:data.node.edges.length, result: data.result}, null, 2)"
        },
        {
          "id": "in"
        }
      ],
      "out": "out",
      "in": "in",
      "name": "graph_display",
      "id": "graph_display"
    },
    {
      "edges": [
        {
          "from": "hghirvcml",
          "to": "tsxlng4gd",
          "as": "dom_type"
        },
        {
          "from": "cd571vftv",
          "to": "tsxlng4gd",
          "as": "props"
        },
        {
          "from": "h5xzkeoql",
          "to": "cd571vftv"
        },
        {
          "from": "ltncqmqe9",
          "to": "cd571vftv",
          "as": "value"
        },
        {
          "from": "9kkegcpi2",
          "to": "cd571vftv",
          "as": "oninput"
        },
        {
          "from": "e96vv0gpq",
          "to": "ltncqmqe9",
          "as": "path"
        },
        {
          "from": "tw41k3wzg",
          "to": "9kkegcpi2",
          "as": "graph"
        },
        {
          "from": "u9feks2l9",
          "to": "9kkegcpi2",
          "as": "fn",
          "type": "ref"
        },
        {
          "from": "6pqqchhnk",
          "to": "ltncqmqe9",
          "as": "target"
        },
        {
          "from": "6pqqchhnk",
          "to": "tw41k3wzg",
          "as": "target"
        },
        {
          "from": "yxaspmy5c",
          "to": "tw41k3wzg",
          "as": "path"
        },
        {
          "from": "rhzddw3c6",
          "to": "u9feks2l9",
          "as": "node"
        },
        {
          "from": "8jmaa71ct",
          "to": "u9feks2l9",
          "as": "update_graph_display"
        },
        {
          "from": "w5lqhh9qr",
          "to": "rhzddw3c6",
          "as": "path"
        },
        {
          "from": "es0e6as0j",
          "to": "rhzddw3c6",
          "as": "value"
        },
        {
          "from": "vnta2m4py",
          "to": "8jmaa71ct",
          "as": "arg0"
        },
        {
          "from": "es0e6as0j",
          "to": "8jmaa71ct",
          "as": "arg1"
        },
        {
          "from": "gh99zvhy2",
          "to": "es0e6as0j",
          "as": "path"
        },
        {
          "from": "88f3s3qrq",
          "to": "vnta2m4py",
          "as": "path"
        },
        {
          "from": "fxbdw1jrr",
          "to": "rhzddw3c6",
          "as": "target"
        },
        {
          "from": "fxbdw1jrr",
          "to": "vnta2m4py",
          "as": "target"
        },
        {
          "from": "mbbx3d26q",
          "to": "pkih97fsa",
          "as": "target"
        },
        {
          "from": "mbbx3d26q",
          "to": "9kkegcpi2",
          "as": "in_node",
          "type": "ref"
        },
        {
          "from": "mbbx3d26q",
          "to": "es0e6as0j",
          "as": "target"
        },
        {
          "from": "pkih97fsa",
          "to": "u9feks2l9"
        },
        {
          "from": "pkih97fsa",
          "to": "fxbdw1jrr"
        },
        {
          "from": "vbwsmt7jt",
          "to": "pkih97fsa",
          "as": "path"
        }
      ],
      "nodes": [
        {
          "id": "tsxlng4gd",
          "args": [],
          "ref": "html_element",
          "name": "number_display"
        },
        {
          "id": "hghirvcml",
          "args": [],
          "value": "input"
        },
        {
          "id": "cd571vftv"
        },
        {
          "id": "h5xzkeoql",
          "args": [],
          "value": {
            "ref": "number"
          }
        },
        {
          "id": "ltncqmqe9",
          "args": [],
          "ref": "get"
        },
        {
          "id": "9kkegcpi2",
          "args": [],
          "ref": "execute_graph"
        },
        {
          "id": "e96vv0gpq",
          "args": [],
          "value": "node.value"
        },
        {
          "id": "tw41k3wzg",
          "args": [],
          "ref": "get"
        },
        {
          "id": "u9feks2l9",
          "args": [],
          "ref": "update_graph_display"
        },
        {
          "id": "6pqqchhnk",
          "args": [],
          "name": "number_display/in"
        },
        {
          "id": "yxaspmy5c",
          "args": [],
          "value": "graph"
        },
        {
          "id": "rhzddw3c6",
          "args": [],
          "ref": "set"
        },
        {
          "id": "8jmaa71ct",
          "args": [],
          "script": "return arg0 !== arg1;"
        },
        {
          "id": "w5lqhh9qr",
          "args": [],
          "value": "value"
        },
        {
          "id": "es0e6as0j",
          "args": [],
          "ref": "get",
          "name": "get target value"
        },
        {
          "id": "vnta2m4py",
          "args": [],
          "ref": "get"
        },
        {
          "id": "gh99zvhy2",
          "args": [],
          "value": "1.target.valueAsNumber",
          "name": "target valueasnum"
        },
        {
          "id": "88f3s3qrq",
          "args": [],
          "value": "value"
        },
        {
          "id": "fxbdw1jrr",
          "args": [],
          "ref": "selected_node"
        },
        {
          "id": "pkih97fsa",
          "args": [],
          "ref": "get",
          "name": "state"
        },
        {
          "id": "mbbx3d26q",
          "args": []
        },
        {
          "id": "vbwsmt7jt",
          "args": [],
          "value": 0
        }
      ],
      "out": "tsxlng4gd",
      "in": "6pqqchhnk",
      "name": "number_display",
      "id": "number_display"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "stringify",
          "as": "data"
        },
        {
          "from": "stringify",
          "to": "text",
          "as": "text"
        },
        {
          "from": "text",
          "to": "out",
          "as": "children",
          "type": "resolve"
        },
        {
          "from": "out_dom_type",
          "to": "out",
          "as": "dom_type"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "stringify",
          "args": ["data"],
          "script": "const e = data.error; return JSON.stringify({error: e instanceof AggregateError ? e.errors.map(e => e.toString()).join(\" \") : e.toString(), data}, null, 2)"
        },
        {
          "id": "text",
          "ref": "html_text"
        },
        {
          "id": "out_dom_type",
          "value": "pre"
        },
        {
          "id": "out",
          "ref": "html_element"
        }
      ],
      "out": "out",
      "in": "in",
      "id": "default_error_display"
    },
    {
      "script": "return !target",
      "args": ["target"],
      "id": "not"
    },
    {
      "value": "data",
      "id": "data"
    },
    {
      "value": "graph",
      "id": "graph"
    },
    {
      "value": "display_graph",
      "id": "display_graph"
    },
    {
      "value": "nodes",
      "id": "nodes"
    },
    {
      "value": "readonly",
      "ref": "arg",
      "id": "readonly"
    },
    {
      "value": "norun",
      "ref": "arg",
      "id": "norun"
    },
    {
      "value": "hash",
      "ref": "arg",
      "id": "hash"
    },
    {
      "value": "static",
      "ref": "arg",
      "id": "static"
    },
    {
      "value": "hide_types",
      "ref": "arg",
      "id": "hide_types"
    },
    {
      "value": [["graph", "nodes"]],
      "id": "graph_nodes"
    },
    {
      "value": {
        "nodes": [],
        "links": [],
        "editing": false,
        "search": false,
        "show_all": false,
        "show_result": false,
        "node_el_width": 256,
        "args_display": false,
        "imports": {},
        "history": [],
        "redo_history": []
      },
      "id": "initial_state"
    },
    {
      "value": "dimensions",
      "ref": "arg",
      "id": "dimensions"
    },
    {
      "script": "return new Map()",
      "id": "error_nodes"
    },
    {
      "id": "hyperapp_init_state"
    },
    {
      "script": "return _lib.scripts.calculateLevels([], [], display_graph, selected)",
      "id": "calculate_levels"
    },
    {
      "value": "graph",
      "ref": "arg",
      "id": "get_graph"
    },
    {
      "value": "display_graph",
      "ref": "arg",
      "id": "get_display_graph"
    },
    {
      "value": "display_graph.out",
      "ref": "arg",
      "id": "display_graph_out"
    },
    {
      "ref": "array",
      "id": "init_selected"
    },
    {
      "ref": "execute_graph",
      "id": "hyperapp_view"
    },
    {
      "ref": "update_graph_display",
      "id": "update_hyperapp"
    },
    {
      "ref": "hyperapp_action",
      "id": "update_hyperapp_action"
    },
    {
      "ref": "hyperapp_action_effect",
      "id": "update_hyperapp_effect"
    },
    {
      "value": "html_id",
      "ref": "arg",
      "id": "html_id"
    },
    {
      "value": "examples",
      "ref": "arg",
      "id": "examples"
    },
    {
      "ref": "hyperapp_app",
      "id": "initialize_hyperapp_app"
    },
    {
      "id": "out"
    },
    {
      "value": "nodes",
      "ref": "arg",
      "id": "nodes"
    },
    {
      "value": "links",
      "ref": "arg",
      "id": "links"
    },
    {
      "_script": "return _lib.scripts.graphToSimulationNodes({display_graph, nodes, links, selected, levels})",
      "ref": "graph_to_sim_fn",
      "args": ["nodes", "links", "display_graph", "selected", "levels"],
      "id": "graph_to_simulation"
    },
    {
      "ref": "sim_to_hyperapp_action",
      "id": "sim_to_hyperapp"
    },
    {
      "ref": "execute_graph",
      "id": "sim_to_hyperapp_fn"
    },
    {
      "ref": "execute_graph",
      "id": "graph_to_sim_action"
    },
    {
      "id": "update_nodes_in"
    },
    {
      "ref": "hyperapp_action",
      "id": "onkey_fn"
    },
    {
      "script": "return a === b;",
      "id": "eq"
    },
    {
      "script": "return a !== b;",
      "id": "neq"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "new_state",
          "as": "args"
        },
        {
          "from": "state",
          "to": "clear_popover",
          "as": "target"
        },
        {
          "from": "state",
          "to": "clear_popover_hyperapp_effect",
          "as": "state"
        },
        {
          "from": "popover_path",
          "to": "clear_popover",
          "as": "path"
        },
        {
          "from": "false",
          "to": "clear_popover",
          "as": "value"
        },
        {
          "from": "clear_popover",
          "to": "new_state",
          "as": "state"
        },
        {
          "from": "popover_dispatch",
          "to": "clear_popover_hyperapp_effect",
          "as": "popover_dispatch"
        },
        {
          "from": "clear_popover_hyperapp_effect",
          "to": "new_state",
          "as": "effects"
        },
        {
          "from": "new_state",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "popover_path",
          "value": "popover_graph"
        },
        {
          "id": "false",
          "value": false
        },
        {
          "id": "clear_popover",
          "ref": "set"
        },
        {
          "id": "new_state"
        },
        {
          "id": "popover_dispatch",
          "ref": "arg",
          "value": "state.popover_dispatch"
        },
        {
          "id": "clear_popover_hyperapp_effect",
          "script": "return [[(dispatch, payload) => { payload.dispatch(s => undefined); dispatch(s => ({...s, popover_dispatch: undefined}))}, {dispatch: popover_dispatch}]]"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "out": "out",
      "id": "clear_popover_graph"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "state",
          "to": "set_popover_graph",
          "as": "target"
        },
        {
          "from": "popover_graph_value",
          "to": "set_popover_graph",
          "as": "value"
        },
        {
          "from": "popover_graph_path",
          "to": "set_popover_graph",
          "as": "path"
        },
        {
          "from": "set_popover_graph",
          "to": "new_state",
          "as": "state"
        },
        {
          "from": "popover_graph_value",
          "to": "render_popover_graph_effect_payload",
          "as": "display_graph"
        },
        {
          "from": "graph",
          "to": "render_popover_graph_effect_payload",
          "as": "graph"
        },
        {
          "from": "html_id",
          "to": "render_popover_graph_effect_payload",
          "as": "html_id"
        },
        {
          "from": "dimensions",
          "to": "render_popover_graph_effect_payload",
          "as": "dimensions"
        },
        {
          "from": "popover_dispatch",
          "to": "render_popover_graph_effect_payload",
          "as": "popover_dispatch"
        },
        {
          "from": "render_popover_graph_effect_payload",
          "to": "render_popover_graph_effect",
          "as": "arg1"
        },
        {
          "from": "render_popover_graph_effector",
          "to": "render_popover_graph_effect",
          "as": "arg0"
        },
        {
          "from": "render_popover_graph_effect",
          "to": "effects",
          "as": "arg0"
        },
        {
          "from": "effects",
          "to": "new_state",
          "as": "effects"
        },
        {
          "from": "new_state",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "popover_graph_path",
          "value": "popover_graph"
        },
        {
          "id": "graph",
          "ref": "arg",
          "value": "state.graph"
        },
        {
          "id": "html_id",
          "ref": "arg",
          "value": "state.html_id"
        },
        {
          "id": "dimensions",
          "ref": "arg",
          "value": "state.dimensions"
        },
        {
          "id": "popover_dispatch",
          "ref": "arg",
          "value": "state.popover_dispatch"
        },
        {
          "id": "set_popover_graph",
          "ref": "set"
        },
        {
          "id": "popover_graph_value",
          "ref": "arg",
          "value": "payload.popover_graph"
        },
        {
          "id": "render_popover_graph_effector",
          "ref": "render_popover_graph_effect"
        },
        {
          "id": "render_popover_graph_effect_payload"
        },
        {
          "id": "render_popover_graph_effect",
          "ref": "array"
        },
        {
          "id": "effects",
          "ref": "array"
        },
        {
          "id": "new_state"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "out": "out",
      "id": "show_popover_graph"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "state",
          "to": "set_display_graph",
          "as": "target"
        },
        {
          "from": "node_id",
          "to": "expand_contract",
          "as": "node_id"
        },
        {
          "from": "display_graph",
          "to": "expand_contract",
          "as": "display_graph"
        },
        {
          "from": "expand_contract",
          "to": "expand_contract_display_graph",
          "as": "target"
        },
        {
          "from": "display_graph_path",
          "to": "expand_contract_display_graph",
          "as": "path"
        },
        {
          "from": "expand_contract",
          "to": "expand_contract_selected",
          "as": "target"
        },
        {
          "from": "selected_path",
          "to": "expand_contract_selected",
          "as": "path"
        },
        {
          "from": "expand_contract_selected",
          "to": "set_selected",
          "as": "value"
        },
        {
          "from": "selected_path",
          "to": "set_selected",
          "as": "path"
        },
        {
          "from": "state",
          "to": "set_selected",
          "as": "target"
        },
        {
          "from": "update_sim_effector",
          "to": "update_sim_effect",
          "as": "a0"
        },
        {
          "from": "set_selected",
          "to": "update_sim_effect",
          "as": "a1"
        },
        {
          "from": "update_sim_effect",
          "to": "effects",
          "as": "a1"
        },
        {
          "from": "expand_contract_display_graph",
          "to": "update_display_graph",
          "as": "display_graph"
        },
        {
          "from": "update_display_graph",
          "to": "effects",
          "as": "a0"
        },
        {
          "from": "set_selected",
          "to": "return_value",
          "as": "state"
        },
        {
          "from": "effects",
          "to": "return_value",
          "as": "effects"
        },
        {
          "from": "return_value",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "display_graph_path",
          "value": "display_graph"
        },
        {
          "id": "selected_path",
          "value": "selected"
        },
        {
          "id": "node_id",
          "ref": "arg",
          "value": "payload.id"
        },
        {
          "id": "display_graph",
          "ref": "arg",
          "value": "state.display_graph"
        },
        {
          "id": "expand_contract",
          "ref": "expand_contract"
        },
        {
          "id": "expand_contract_display_graph",
          "ref": "get"
        },
        {
          "id": "expand_contract_selected",
          "ref": "get"
        },
        {
          "id": "set_display_graph",
          "ref": "set"
        },
        {
          "id": "set_selected",
          "ref": "set"
        },
        {
          "id": "update_sim_effector",
          "ref": "arg",
          "value": "state.update_sim_effect"
        },
        {
          "id": "update_sim_effect",
          "ref": "array"
        },
        {
          "id": "update_display_graph",
          "script": "return [() => _lib.no.runtime.update_graph(display_graph)]"
        },
        {
          "id": "effects",
          "ref": "array"
        },
        {
          "id": "return_value"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "out": "out",
      "id": "expand_contract_effect"
    },
    {
      "edges": [
        {
          "from": "state",
          "to": "set_edges",
          "as": "target"
        },
        {
          "from": "node_id",
          "to": "new_nodes",
          "as": "node_id"
        },
        {
          "from": "nodes",
          "to": "new_nodes",
          "as": "nodes"
        },
        {
          "from": "node_id",
          "to": "node",
          "as": "node_id"
        },
        {
          "from": "nodes",
          "to": "node",
          "as": "nodes"
        },
        {
          "from": "new_nodes",
          "to": "set_nodes",
          "as": "value"
        },
        {
          "from": "nodes_path",
          "to": "set_nodes",
          "as": "path"
        },
        {
          "from": "state",
          "to": "set_selected",
          "as": "target"
        },
        {
          "from": "edges",
          "to": "new_edges",
          "as": "edges"
        },
        {
          "from": "node_id",
          "to": "new_edges",
          "as": "node_id"
        },
        {
          "from": "parent_edge",
          "to": "new_edges",
          "as": "parent_edge"
        },
        {
          "from": "edge",
          "to": "new_edges",
          "as": "edge"
        },
        {
          "from": "new_edges",
          "to": "set_edges",
          "as": "value"
        },
        {
          "from": "edges_path",
          "to": "set_edges",
          "as": "path"
        },
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "set_edges",
          "to": "set_nodes",
          "as": "target"
        },
        {
          "from": "edges",
          "to": "new_selected",
          "as": "edges"
        },
        {
          "from": "node_id",
          "to": "new_selected",
          "as": "node_id"
        },
        {
          "from": "display_graph_out",
          "to": "new_selected",
          "as": "out"
        },
        {
          "from": "new_selected",
          "to": "set_selected",
          "as": "value"
        },
        {
          "from": "selected_path",
          "to": "set_selected",
          "as": "path"
        },
        {
          "from": "set_selected",
          "to": "set_history",
          "as": "target"
        },
        {
          "from": "payload",
          "to": "history_item",
          "as": "payload"
        },
        {
          "from": "node",
          "to": "history_item",
          "as": "node"
        },
        {
          "from": "edges",
          "to": "replaced_edges",
          "as": "edges"
        },
        {
          "from": "node_id",
          "to": "replaced_edges",
          "as": "node_id"
        },
        {
          "from": "replaced_edges",
          "to": "history_item",
          "as": "edges"
        },
        {
          "from": "node_id",
          "to": "parent_edge",
          "as": "node_id"
        },
        {
          "from": "edges",
          "to": "parent_edge",
          "as": "edges"
        },
        {
          "from": "parent_edge",
          "to": "history_item",
          "as": "parent_edge"
        },
        {
          "from": "history",
          "to": "new_history",
          "as": "array"
        },
        {
          "from": "history_item",
          "to": "new_history",
          "as": "item"
        },
        {
          "from": "new_history",
          "to": "set_history",
          "as": "value"
        },
        {
          "from": "history_path",
          "to": "set_history",
          "as": "path"
        },
        {
          "from": "set_history",
          "to": "out",
          "as": "state"
        },
        {
          "from": "set_history",
          "to": "effects",
          "as": "new_state"
        },
        {
          "from": "update_sim_effect",
          "to": "effects",
          "as": "update_sim_effect"
        },
        {
          "from": "node_id",
          "to": "effects",
          "as": "id"
        },
        {
          "from": "display_graph",
          "to": "effects",
          "as": "display_graph"
        },
        {
          "from": "effects",
          "to": "out",
          "as": "effects"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "nodes",
          "ref": "arg",
          "value": "state.display_graph.nodes"
        },
        {
          "id": "edges",
          "ref": "arg",
          "value": "state.display_graph.edges"
        },
        {
          "id": "update_sim_effect",
          "ref": "arg",
          "value": "state.update_sim_effect"
        },
        {
          "id": "display_graph_out",
          "ref": "arg",
          "value": "state.display_graph.out"
        },
        {
          "id": "display_graph",
          "ref": "arg",
          "value": "state.display_graph"
        },
        {
          "id": "history",
          "ref": "arg",
          "value": "state.history"
        },
        {
          "id": "edges_path",
          "value": "display_graph.edges"
        },
        {
          "id": "nodes_path",
          "value": "display_graph.nodes"
        },
        {
          "id": "selected_path",
          "value": "selected"
        },
        {
          "id": "history_path",
          "value": "history"
        },
        {
          "id": "payload",
          "ref": "arg",
          "value": "payload"
        },
        {
          "id": "node_id",
          "ref": "arg",
          "value": "payload.id"
        },
        {
          "id": "edge",
          "ref": "arg",
          "value": "edge"
        },
        {
          "id": "node",
          "ref": "find_node"
        },
        {
          "id": "new_nodes",
          "script": "return nodes.filter(n => n.id !== node_id)"
        },
        {
          "id": "parent_edge",
          "script": "return edges.find(e => e.from === node_id)"
        },
        {
          "id": "replaced_edges",
          "script": "return edges.filter(e => e.to === node_id)"
        },
        {
          "id": "new_edges",
          "script": "return edges.filter(e => e !== parent_edge).map(e => e.to === node_id ? {...e, ...parent_edge, from: e.from} : e)"
        },
        {
          "id": "new_selected",
          "script": "return [edges.find(e => e.from === node_id)?.to ?? out]"
        },
        {
          "id": "history_item",
          "script": "return {action: 'delete_node', node, edges, parent_edge, runnable: {fn: 'delete_node_action', graph: _graph, args: payload}}"
        },
        {
          "id": "new_history",
          "ref": "append"
        },
        {
          "id": "set_selected",
          "ref": "set"
        },
        {
          "id": "set_nodes",
          "ref": "set"
        },
        {
          "id": "set_edges",
          "ref": "set"
        },
        {
          "id": "set_history",
          "ref": "set"
        },
        {
          "id": "out"
        },
        {
          "id": "effects",
          "script": "return [[() => _lib.no.runtime.delete_node(display_graph, id)], [update_sim_effect, new_state.state]]"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "out": "out",
      "id": "delete_node_action"
    },
    {
      "edges": [
        {
          "from": "delete_node",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "delete_node",
          "ref": "delete_node_action"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "out": "out",
      "id": "delete_node"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "edges",
          "to": "new_edges",
          "as": "array"
        },
        {
          "from": "edges",
          "to": "siblings",
          "as": "edges"
        },
        {
          "from": "payload_edge",
          "to": "siblings",
          "as": "new_edge"
        },
        {
          "from": "payload_edge",
          "to": "new_edge",
          "as": "payload_edge"
        },
        {
          "from": "siblings",
          "to": "new_edge",
          "as": "siblings"
        },
        {
          "from": "nodes",
          "to": "child_node",
          "as": "nodes"
        },
        {
          "from": "payload_edge",
          "to": "child_node",
          "as": "edge"
        },
        {
          "from": "nodes",
          "to": "node_args",
          "as": "nodes"
        },
        {
          "from": "child_node",
          "to": "node_args",
          "as": "node"
        },
        {
          "from": "siblings",
          "to": "next_arg",
          "as": "siblings"
        },
        {
          "from": "node_args",
          "to": "next_arg",
          "as": "args"
        },
        {
          "from": "next_arg",
          "to": "new_edge",
          "as": "next_arg"
        },
        {
          "from": "siblings",
          "to": "new_edge",
          "as": "sibling_count"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "payload_edge",
          "ref": "arg",
          "value": "edge"
        },
        {
          "id": "nodes",
          "ref": "arg",
          "value": "graph.nodes"
        },
        {
          "id": "edges",
          "ref": "arg",
          "value": "graph.edges"
        },
        {
          "id": "new_edge",
          "script": "return {...payload_edge, as: payload_edge.as ?? next_arg ??  (`arg${(siblings.map(s => s.as).filter(a => a.startsWith('arg')).sort().map(s => parseInt(s.substring(3))).filter(i => !isNaN(i)).reverse()[0] ?? -1) + 1}`)}"
        },
        {
          "id": "child_node",
          "script": "return nodes.find(n => n.id === edge.to)"
        },
        {
          "id": "siblings",
          "script": "return edges.filter(e => e.to === new_edge.to)"
        },
        {
          "id": "node_args",
          "ref": "node_args"
        },
        {
          "id": "next_arg",
          "script": "return args?.filter(a => !(a === '_node_inputs' || a === '_lib' || a === '_node' || a === '_args') && !siblings.find(e => e.as === a))[0]"
        }
      ],
      "out": "new_edge",
      "id": "next_edge"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "_"
        },
        {
          "from": "display_graph",
          "to": "next_edge",
          "as": "graph"
        },
        {
          "from": "next_edge",
          "to": "new_edges",
          "as": "item"
        },
        {
          "from": "state",
          "to": "set_new_edges",
          "as": "target"
        },
        {
          "from": "edges_path",
          "to": "set_new_edges",
          "as": "path"
        },
        {
          "from": "new_edges",
          "to": "set_new_edges",
          "as": "value"
        },
        {
          "from": "update_sim_effect",
          "to": "effects",
          "as": "update_sim_effect"
        },
        {
          "from": "set_new_edges",
          "to": "effects",
          "as": "new_state"
        },
        {
          "from": "set_new_edges",
          "to": "new_state",
          "as": "state"
        },
        {
          "from": "effects",
          "to": "new_state",
          "as": "effects"
        },
        {
          "from": "new_state",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "display_graph",
          "ref": "arg",
          "value": "state.display_graph"
        },
        {
          "id": "next_edge",
          "ref": "next_edge"
        },
        {
          "id": "edges_path",
          "value": "display_graph.edges"
        },
        {
          "id": "new_edges",
          "ref": "append"
        },
        {
          "id": "set_new_edges",
          "ref": "set"
        },
        {
          "id": "effects",
          "script": "return [[update_sim_effect, new_state]]"
        },
        {
          "id": "new_state"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "out": "out",
      "id": "add_edge"
    },
    {
      "script": "return (dispatch, payload) => { const graph_list = JSON.parse(localStorage.getItem('graph_list'))?.filter(l => l !== payload.display_graph.id) ?? []; graph_list.unshift(payload.display_graph.id); localStorage.setItem('graph_list', JSON.stringify(graph_list)); const graphstr = JSON.stringify({...payload.display_graph, node_map: undefined, in_edge_map: undefined}); localStorage.setItem(payload.display_graph.id, graphstr); window.location.hash = '#' + payload.display_graph.id; }",
      "id": "save_effect"
    },
    {
      "script": "return (dispatch, payload) => { const str = `data:text/json;charset=utf-8,${encodeURIComponent(payload.data)}`; const a = document.createElement('a'); a.setAttribute('href', str); a.setAttribute('download', payload.id + '.' + payload.ext); a.click(); a.remove();}",
      "id": "export_effect"
    },
    {
      "script": "return (dispatch, payload)",
      "id": "graph_list_effect"
    },
    {
      "script": "return (dispatch, payload) => { localStorage.removeItem('display_graph'); window.location.reload(); }",
      "id": "new_graph_effect"
    },
    {
      "script": "return (dispatch, payload) => requestAnimationFrame(() => document.querySelector(payload.selector)?.focus())",
      "id": "focus_effect"
    },
    {
      "script": "return (dispatch, payload) => requestAnimationFrame(() => document.querySelector(payload.selector)?.blur())",
      "id": "blur_effect"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args",
          "type": "ref"
        },
        {
          "from": "state",
          "to": "set_display_graph",
          "as": "target"
        },
        {
          "from": "display_graph_path",
          "to": "set_display_graph",
          "as": "path"
        },
        {
          "from": "new_graph",
          "to": "set_display_graph",
          "as": "value"
        },
        {
          "from": "new_graph",
          "to": "update_graph",
          "as": "graph"
        },
        {
          "from": "new_graph",
          "to": "update_location",
          "as": "graph"
        },
        {
          "from": "set_display_graph",
          "to": "result",
          "as": "state"
        },
        {
          "from": "update_sim_effector",
          "to": "update_sim_effect",
          "as": "a0"
        },
        {
          "from": "update_sim_effect",
          "to": "effects",
          "as": "a0"
        },
        {
          "from": "update_graph",
          "to": "effects",
          "as": "a1"
        },
        {
          "from": "update_location",
          "to": "effects",
          "as": "a2"
        },
        {
          "from": "effects",
          "to": "result",
          "as": "effects"
        },
        {
          "from": "result",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "new_graph",
          "ref": "arg",
          "value": "payload.graph"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "update_sim_effector",
          "ref": "arg",
          "value": "state.update_sim_effect"
        },
        {
          "id": "update_graph",
          "script": "return [() => _lib.no.runtime.update_graph(graph)]"
        },
        {
          "id": "update_location",
          "script": "return [() => window.location.hash = '#' + graph.id]"
        },
        {
          "id": "display_graph_path",
          "value": "display_graph"
        },
        {
          "id": "set_display_graph",
          "ref": "set"
        },
        {
          "id": "update_sim_effect",
          "ref": "array"
        },
        {
          "id": "effects",
          "ref": "array"
        },
        {
          "id": "result"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "id": "open_graph_effect"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args",
          "type": "ref"
        },
        {
          "from": "new_graph_id",
          "to": "new_graph",
          "as": "id"
        },
        {
          "from": "new_graph",
          "to": "open_graph_payload",
          "as": "graph"
        },
        {
          "from": "open_graph_effector",
          "to": "open_graph_effect",
          "as": "a0"
        },
        {
          "from": "open_graph_payload",
          "to": "open_graph_effect",
          "as": "a1"
        },
        {
          "from": "open_graph_effect",
          "to": "effects",
          "as": "a0"
        },
        {
          "from": "state",
          "to": "result",
          "as": "state"
        },
        {
          "from": "effects",
          "to": "result",
          "as": "effects"
        },
        {
          "from": "result",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "new_graph_id",
          "ref": "arg",
          "value": "payload.id"
        },
        {
          "id": "new_graph",
          "script": "return JSON.parse(localStorage.getItem(id))"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "open_graph_effector",
          "ref": "open_graph_effect"
        },
        {
          "id": "open_graph_payload"
        },
        {
          "id": "open_graph_effect",
          "ref": "array"
        },
        {
          "id": "effects",
          "ref": "array"
        },
        {
          "id": "result"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "id": "open_saved_graph_effect"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "nodes",
          "to": "replace_node",
          "as": "nodes"
        },
        {
          "from": "nodes",
          "to": "prev_node",
          "as": "nodes"
        },
        {
          "from": "edges",
          "to": "replace_edges",
          "as": "edges"
        },
        {
          "from": "node_properties",
          "to": "replace_edges",
          "as": "update"
        },
        {
          "from": "node_id",
          "to": "prev_node",
          "as": "node_id"
        },
        {
          "from": "node_properties",
          "to": "new_node",
          "as": "o1"
        },
        {
          "from": "prev_node",
          "to": "new_node",
          "as": "o0"
        },
        {
          "from": "new_node",
          "to": "replace_node",
          "as": "new_node"
        },
        {
          "from": "state",
          "to": "set_display_graph_nodes",
          "as": "target"
        },
        {
          "from": "display_graph_nodes_path",
          "to": "set_display_graph_nodes",
          "as": "path"
        },
        {
          "from": "replace_node",
          "to": "new_display_graph_values",
          "as": "nodes"
        },
        {
          "from": "nodes",
          "to": "node_args",
          "as": "nodes"
        },
        {
          "from": "new_node",
          "to": "node_args",
          "as": "node"
        },
        {
          "from": "new_node",
          "to": "arg_value",
          "as": "node"
        },
        {
          "from": "node_id",
          "to": "arg_value",
          "as": "node_id"
        },
        {
          "from": "prev_node",
          "to": "replace_edges",
          "as": "prev_node"
        },
        {
          "from": "arg_value",
          "to": "replace_edges",
          "as": "arg_value"
        },
        {
          "from": "node_args",
          "to": "replace_edges",
          "as": "node_args"
        },
        {
          "from": "node_id",
          "to": "replace_edges",
          "as": "node_id"
        },
        {
          "from": "replace_edges",
          "to": "new_display_graph_values",
          "as": "edges"
        },
        {
          "from": "new_display_graph_values",
          "to": "new_display_graph",
          "as": "o1"
        },
        {
          "from": "display_graph",
          "to": "new_display_graph",
          "as": "o0"
        },
        {
          "from": "display_graph_edges_path",
          "to": "set_display_graph_edges",
          "as": "path"
        },
        {
          "from": "state",
          "to": "set_history",
          "as": "target"
        },
        {
          "from": "payload",
          "to": "history_item",
          "as": "payload"
        },
        {
          "from": "edges",
          "to": "history_item",
          "as": "edges"
        },
        {
          "from": "node_properties",
          "to": "history_item",
          "as": "update"
        },
        {
          "from": "prev_node",
          "to": "history_item",
          "as": "node"
        },
        {
          "from": "history_path",
          "to": "set_history",
          "as": "path"
        },
        {
          "from": "history",
          "to": "new_history",
          "as": "array"
        },
        {
          "from": "history_item",
          "to": "new_history",
          "as": "item"
        },
        {
          "from": "new_history",
          "to": "set_history",
          "as": "value"
        },
        {
          "from": "set_history",
          "to": "out",
          "as": "state"
        },
        {
          "from": "update_hyperapp",
          "to": "update_hyperapp_effect",
          "as": "a0"
        },
        {
          "from": "update_hyperapp_effect",
          "to": "effects",
          "as": "a1"
        },
        {
          "from": "new_display_graph",
          "to": "add_node_effect",
          "as": "display_graph"
        },
        {
          "from": "add_node_effect",
          "to": "effects",
          "as": "a0"
        },
        {
          "from": "effects",
          "to": "out",
          "as": "effects"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "nodes",
          "ref": "arg",
          "value": "state.display_graph.nodes"
        },
        {
          "id": "edges",
          "ref": "arg",
          "value": "state.display_graph.edges"
        },
        {
          "id": "history",
          "ref": "arg",
          "value": "state.history"
        },
        {
          "id": "display_graph",
          "ref": "arg",
          "value": "state.display_graph"
        },
        {
          "id": "update_hyperapp",
          "ref": "arg",
          "value": "state.update_hyperapp"
        },
        {
          "id": "update_hyperapp_effect",
          "ref": "array"
        },
        {
          "id": "new_display_graph_values"
        },
        {
          "id": "new_display_graph",
          "ref": "merge_objects"
        },
        {
          "id": "payload",
          "ref": "arg",
          "value": "payload"
        },
        {
          "id": "node_id",
          "ref": "arg",
          "value": "payload.id"
        },
        {
          "id": "node_properties",
          "ref": "arg",
          "value": "payload.properties"
        },
        {
          "id": "prev_node",
          "ref": "find_node"
        },
        {
          "id": "new_node",
          "ref": "merge_objects"
        },
        {
          "id": "replace_node",
          "script": "return nodes.map(n => n.id === new_node.id ? new_node : n)"
        },
        {
          "id": "node_args",
          "ref": "node_args"
        },
        {
          "id": "arg_value",
          "script": "return node.ref === 'arg' ? node.value.substring(node.value.lastIndexOf('.') + 1) : undefined"
        },
        {
          "id": "replace_edges",
          "script": "const parents = edges.filter(e => e.to === node_id).map(e => e.as); const needed_args = !update.hasOwnProperty('ref') ? [] : node_args.filter(a => !parents.includes(a) && a !== '_node_inputs' && a !== '_graph' && a !== '_lib' && a !== '_args'); return edges.map(e => e.from === node_id && arg_value && (e.as.startsWith('arg') || e.as === prev_node?.value) ? {...e, as: arg_value} : e.to === node_id && !node_args.includes(e.as) && needed_args?.length > 0 ? {...e, as: needed_args.shift()} : e)"
        },
        {
          "id": "history_item",
          "script": "return {action: 'update_node', node, update, parent_edge: edges.find(e => e.from === node.id), child_edges: edges.filter(e => e.to === node.id), runnable: {fn: 'update_node_fn', graph: _graph, args: payload}}"
        },
        {
          "id": "new_history",
          "ref": "append"
        },
        {
          "id": "display_graph_nodes_path",
          "value": "display_graph.nodes"
        },
        {
          "id": "history_path",
          "value": "history"
        },
        {
          "id": "set_history",
          "ref": "set"
        },
        {
          "id": "add_node_effect",
          "script": "return [() => _lib.no.runtime.update_graph(display_graph)]"
        },
        {
          "id": "effects",
          "ref": "array"
        },
        {
          "id": "out"
        }
      ],
      "out": "out",
      "id": "update_node_fn"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "update_node_fn",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "update_node_fn",
          "ref": "update_node_fn"
        },
        {
          "id": "out",
          "ref": "hyperapp_action"
        }
      ],
      "out": "out",
      "id": "update_node_action"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "update_node_fn",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "update_node_fn",
          "ref": "update_node_fn"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "out": "out",
      "id": "update_node"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "edges",
          "to": "replace_edge",
          "as": "edges"
        },
        {
          "from": "edge",
          "to": "replace_edge",
          "as": "edge"
        },
        {
          "from": "properties",
          "to": "replace_edge",
          "as": "update"
        },
        {
          "from": "state",
          "to": "set_display_graph_edges",
          "as": "target"
        },
        {
          "from": "display_graph_edges_path",
          "to": "set_display_graph_edges",
          "as": "path"
        },
        {
          "from": "replace_edge",
          "to": "set_display_graph_edges",
          "as": "value"
        },
        {
          "from": "edge",
          "to": "prev_edge",
          "as": "edge"
        },
        {
          "from": "edges",
          "to": "prev_edge",
          "as": "edges"
        },
        {
          "from": "prev_edge",
          "to": "history_item",
          "as": "edge"
        },
        {
          "from": "properties",
          "to": "history_item",
          "as": "update"
        },
        {
          "from": "payload",
          "to": "history_item",
          "as": "payload"
        },
        {
          "from": "history_item",
          "to": "new_history",
          "as": "item"
        },
        {
          "from": "history",
          "to": "new_history",
          "as": "array"
        },
        {
          "from": "state",
          "to": "set_history",
          "as": "target"
        },
        {
          "from": "history_path",
          "to": "set_history",
          "as": "path"
        },
        {
          "from": "new_history",
          "to": "set_history",
          "as": "value"
        },
        {
          "from": "set_history",
          "to": "out",
          "as": "state"
        },
        {
          "from": "update_hyperapp",
          "to": "update_hyperapp_effect",
          "as": "a0"
        },
        {
          "from": "prev_edge",
          "to": "new_edge",
          "as": "o0"
        },
        {
          "from": "properties",
          "to": "new_edge",
          "as": "o1"
        },
        {
          "from": "new_edge",
          "to": "edit_edge_effect",
          "as": "edge"
        },
        {
          "from": "display_graph",
          "to": "edit_edge_effect",
          "as": "display_graph"
        },
        {
          "from": "update_hyperapp_effect",
          "to": "effects",
          "as": "a0"
        },
        {
          "from": "edit_edge_effect",
          "to": "effects",
          "as": "a1"
        },
        {
          "from": "effects",
          "to": "out",
          "as": "effects"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "edges",
          "ref": "arg",
          "value": "state.display_graph.edges"
        },
        {
          "id": "history",
          "ref": "arg",
          "value": "state.history"
        },
        {
          "id": "display_graph",
          "ref": "arg",
          "value": "state.display_graph"
        },
        {
          "id": "display_graph_edges_path",
          "value": "display_graph.edges"
        },
        {
          "id": "payload",
          "ref": "arg",
          "value": "payload"
        },
        {
          "id": "edge",
          "ref": "arg",
          "value": "payload.id"
        },
        {
          "id": "properties",
          "ref": "arg",
          "value": "payload.properties"
        },
        {
          "id": "history_path",
          "value": "history"
        },
        {
          "id": "display_graph_edges_path",
          "value": "display_graph.edges"
        },
        {
          "id": "prev_edge",
          "script": "return edges.find(e => e.to === edge.to && e.from === edge.from)"
        },
        {
          "id": "new_edge",
          "ref": "merge_objects"
        },
        {
          "id": "replace_edge",
          "script": "return edges.map(e => e.from === edge.from && e.to === edge.to ? Object.assign({}, e, Object.fromEntries(Object.entries(update).map(e => [e[0], e[1] === '' ? undefined : e[1]]))) : e)"
        },
        {
          "id": "history_item",
          "script": "return {action: 'update_edge', edge, update, runnable: {fn: 'update_edge_fn', graph: _graph, args: payload}}"
        },
        {
          "id": "new_history",
          "ref": "append"
        },
        {
          "id": "set_history",
          "ref": "set"
        },
        {
          "id": "set_display_graph_edges",
          "ref": "set"
        },
        {
          "id": "update_hyperapp",
          "ref": "arg",
          "value": "state.update_hyperapp"
        },
        {
          "id": "update_hyperapp_effect",
          "ref": "array"
        },
        {
          "id": "edit_edge_effect",
          "script": "return [() => _lib.no.runtime.edit_edge(display_graph, edge)]"
        },
        {
          "id": "effects",
          "ref": "array"
        },
        {
          "id": "out"
        }
      ],
      "out": "out",
      "id": "update_edge_fn"
    },
    {
      "edges": [
        {
          "from": "update_edge_fn",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "update_edge_fn",
          "ref": "update_edge_fn"
        },
        {
          "id": "out",
          "ref": "hyperapp_action"
        }
      ],
      "id": "update_edge_action"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "update_edge_action",
          "to": "out",
          "as": "fn"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "update_edge_action",
          "ref": "update_edge_fn"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "out": "out",
      "id": "update_edge"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "state",
          "to": "set_clipboard",
          "as": "target"
        },
        {
          "from": "clipboard_path",
          "to": "set_clipboard",
          "as": "path"
        },
        {
          "from": "node_id",
          "to": "node",
          "as": "node_id"
        },
        {
          "from": "nodes",
          "to": "node",
          "as": "nodes"
        },
        {
          "from": "node",
          "to": "set_clipboard",
          "as": "value"
        },
        {
          "from": "set_clipboard",
          "to": "result",
          "as": "state"
        },
        {
          "from": "result",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "nodes",
          "ref": "arg",
          "value": "state.display_graph.nodes"
        },
        {
          "id": "clipboard_path",
          "value": "clipboard"
        },
        {
          "id": "node_id",
          "ref": "arg",
          "value": "payload.id"
        },
        {
          "id": "node",
          "ref": "find_node"
        },
        {
          "id": "set_clipboard",
          "ref": "set"
        },
        {
          "id": "result"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "out": "out",
      "id": "copy_effect"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "state",
          "to": "set_display_graph_id",
          "as": "target"
        },
        {
          "from": "id_path",
          "to": "set_display_graph_id",
          "as": "path"
        },
        {
          "from": "id",
          "to": "set_display_graph_id",
          "as": "value"
        },
        {
          "from": "set_display_graph_id",
          "to": "result",
          "as": "state"
        },
        {
          "from": "effects",
          "to": "result",
          "as": "effects"
        },
        {
          "from": "result",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "id_path",
          "value": "display_graph.id"
        },
        {
          "id": "id",
          "ref": "arg",
          "value": "payload.properties.id"
        },
        {
          "id": "set_display_graph_id",
          "ref": "set"
        },
        {
          "id": "effects",
          "ref": "array"
        },
        {
          "id": "result"
        },
        {
          "id": "out",
          "ref": "hyperapp_action"
        }
      ],
      "out": "out",
      "id": "change_display_graph_id"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "state",
          "to": "delete_clipboard",
          "as": "target"
        },
        {
          "from": "id_path",
          "to": "new_node",
          "as": "path"
        },
        {
          "from": "randid",
          "to": "new_node",
          "as": "value"
        },
        {
          "from": "node",
          "to": "new_node",
          "as": "target"
        },
        {
          "from": "new_node",
          "to": "add_node_payload",
          "as": "node"
        },
        {
          "from": "select",
          "to": "add_node_payload",
          "as": "select"
        },
        {
          "from": "selected",
          "to": "add_node_payload",
          "as": "child"
        },
        {
          "from": "clipboard_path",
          "to": "delete_clipboard",
          "as": "path"
        },
        {
          "from": "delete_clipboard",
          "to": "result",
          "as": "state"
        },
        {
          "from": "add_node_effector",
          "to": "add_node_effect",
          "as": "a0"
        },
        {
          "from": "add_node_payload",
          "to": "add_node_effect",
          "as": "a1"
        },
        {
          "from": "add_node_effect",
          "to": "effects",
          "as": "a0"
        },
        {
          "from": "update_hyperapp",
          "to": "update_hyperapp_effect",
          "as": "a0"
        },
        {
          "from": "update_hyperapp_effect",
          "to": "effects",
          "as": "a2"
        },
        {
          "from": "effects",
          "to": "result",
          "as": "effects"
        },
        {
          "from": "result",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "randid",
          "ref": "arg",
          "value": "payload.randid"
        },
        {
          "id": "selected",
          "ref": "arg",
          "value": "payload.node_id"
        },
        {
          "id": "node",
          "ref": "arg",
          "value": "state.clipboard"
        },
        {
          "id": "id_path",
          "value": "id"
        },
        {
          "id": "clipboard_path",
          "value": "clipboard"
        },
        {
          "id": "delete_clipboard",
          "ref": "delete"
        },
        {
          "id": "add_node_effector",
          "ref": "add_node"
        },
        {
          "id": "new_node",
          "ref": "set"
        },
        {
          "id": "select",
          "value": "true"
        },
        {
          "id": "add_node_payload"
        },
        {
          "id": "add_node_effect",
          "ref": "array"
        },
        {
          "id": "update_hyperapp",
          "ref": "arg",
          "value": "state.update_hyperapp"
        },
        {
          "id": "update_hyperapp_effect",
          "ref": "array"
        },
        {
          "id": "effects",
          "ref": "array"
        },
        {
          "id": "result"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "out": "out",
      "id": "paste_node_effect"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "editing_path",
          "to": "set_editing",
          "as": "path"
        },
        {
          "from": "property",
          "to": "set_editing",
          "as": "value"
        },
        {
          "from": "state",
          "to": "set_editing",
          "as": "target"
        },
        {
          "from": "display_graph",
          "to": "selected_node",
          "as": "display_graph"
        },
        {
          "from": "property",
          "to": "current_node_value",
          "as": "path"
        },
        {
          "from": "selected_node",
          "to": "current_node_value",
          "as": "target"
        },
        {
          "from": "set_editing",
          "to": "set_edit_value",
          "as": "target"
        },
        {
          "from": "edit_value_path",
          "to": "set_edit_value",
          "as": "path"
        },
        {
          "from": "current_value",
          "to": "set_edit_value",
          "as": "value"
        },
        {
          "from": "set_edit_value",
          "to": "set_edit_onconfirm",
          "as": "target"
        },
        {
          "from": "edit_onconfirm_path",
          "to": "set_edit_onconfirm",
          "as": "path"
        },
        {
          "from": "oneditconfirm",
          "to": "set_edit_onconfirm",
          "as": "value"
        },
        {
          "from": "set_edit_onconfirm",
          "to": "set_edit_onmore",
          "as": "target"
        },
        {
          "from": "edit_onmore_path",
          "to": "set_edit_onmore",
          "as": "path"
        },
        {
          "from": "oneditmore",
          "to": "set_edit_onmore",
          "as": "value"
        },
        {
          "from": "set_edit_onmore",
          "to": "set_edit_id",
          "as": "target"
        },
        {
          "from": "edit_id_path",
          "to": "set_edit_id",
          "as": "path"
        },
        {
          "from": "id",
          "to": "set_edit_id",
          "as": "value"
        },
        {
          "from": "node_el_width",
          "to": "arg_position_offset",
          "as": "node_el_width"
        },
        {
          "from": "arg_position",
          "to": "arg_position_offset",
          "as": "position"
        },
        {
          "from": "arg_position_offset",
          "to": "position",
          "as": "value"
        },
        {
          "from": "dimensions",
          "to": "default_position",
          "as": "dimensions"
        },
        {
          "from": "default_position",
          "to": "position",
          "as": "otherwise"
        },
        {
          "from": "position",
          "to": "set_edit_position",
          "as": "value"
        },
        {
          "from": "edit_position_path",
          "to": "set_edit_position",
          "as": "path"
        },
        {
          "from": "set_edit_id",
          "to": "set_edit_position",
          "as": "target"
        },
        {
          "from": "focus_effector",
          "to": "focus_effect",
          "as": "a0"
        },
        {
          "from": "html_id",
          "to": "focus_props",
          "as": "html_id"
        },
        {
          "from": "property",
          "to": "focus_props",
          "as": "editing"
        },
        {
          "from": "focus_props",
          "to": "focus_effect",
          "as": "a1"
        },
        {
          "from": "focus_effect",
          "to": "effects",
          "as": "a0"
        },
        {
          "from": "set_edit_position",
          "to": "result",
          "as": "state"
        },
        {
          "from": "effects",
          "to": "result",
          "as": "effects"
        },
        {
          "from": "result",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "display_graph",
          "ref": "arg",
          "value": "state.display_graph"
        },
        {
          "id": "dimensions",
          "ref": "arg",
          "value": "state.dimensions"
        },
        {
          "id": "html_id",
          "ref": "arg",
          "value": "state.html_id"
        },
        {
          "id": "node_el_width",
          "ref": "arg",
          "value": "state.node_el_width"
        },
        {
          "id": "oneditconfirm",
          "ref": "arg",
          "value": "payload.oneditconfirm"
        },
        {
          "id": "oneditmore",
          "ref": "arg",
          "value": "payload.oneditmore"
        },
        {
          "id": "id",
          "ref": "arg",
          "value": "payload.id"
        },
        {
          "id": "current_value",
          "ref": "arg",
          "value": "payload.value"
        },
        {
          "id": "property",
          "ref": "arg",
          "value": "payload.property"
        },
        {
          "id": "arg_position",
          "ref": "arg",
          "value": "payload.position"
        },
        {
          "id": "editing_path",
          "value": "editing"
        },
        {
          "id": "edit_value_path",
          "value": "edit_value"
        },
        {
          "id": "edit_id_path",
          "value": "edit_id"
        },
        {
          "id": "edit_onconfirm_path",
          "value": "oneditconfirm"
        },
        {
          "id": "edit_onmore_path",
          "value": "oneditmore"
        },
        {
          "id": "edit_position_path",
          "value": "edit_position"
        },
        {
          "id": "default_position",
          "script": "return {x: dimensions.x * 0.5, y: dimensions.y * 0.5}"
        },
        {
          "id": "arg_position_offset",
          "script": "return position && {x: position.x + node_el_width * 0.25, y: position.y + 32}"
        },
        {
          "id": "position",
          "ref": "default"
        },
        {
          "id": "set_editing",
          "ref": "set"
        },
        {
          "id": "set_edit_value",
          "ref": "set"
        },
        {
          "id": "set_edit_onconfirm",
          "ref": "set"
        },
        {
          "id": "set_edit_onmore",
          "ref": "set"
        },
        {
          "id": "set_edit_id",
          "ref": "set"
        },
        {
          "id": "set_edit_position",
          "ref": "set"
        },
        {
          "id": "focus_props",
          "script": "return {'selector': `#${html_id}-edit-value .${editing}`, focus: true}"
        },
        {
          "id": "focus_effector",
          "ref": "focus_effect"
        },
        {
          "id": "focus_effect",
          "ref": "array"
        },
        {
          "id": "effects",
          "ref": "array"
        },
        {
          "id": "result"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "id": "show_edit_text"
    },
    {
      "edges": [
        {
          "from": "ref_path",
          "to": "ref",
          "as": "path"
        },
        {
          "from": "ref",
          "to": "source_node",
          "as": "pred"
        },
        {
          "from": "ref_node",
          "to": "source_node",
          "as": "true"
        },
        {
          "from": "node",
          "to": "source_node",
          "as": "false"
        },
        {
          "from": "node",
          "to": "ref",
          "as": "target"
        },
        {
          "from": "node",
          "to": "ref_node",
          "as": "node"
        },
        {
          "from": "nodes",
          "to": "ref_node",
          "as": "nodes"
        },
        {
          "from": "ref",
          "to": "ref_node",
          "as": "selected"
        },
        {
          "from": "source_node",
          "to": "node_nodes",
          "as": "target"
        },
        {
          "from": "nodes_path",
          "to": "node_nodes",
          "as": "path"
        },
        {
          "from": "node_nodes",
          "to": "node_arg_nodes",
          "as": "nodes"
        },
        {
          "from": "node_arg_nodes",
          "to": "nested_node_args",
          "as": "nodes"
        },
        {
          "from": "nested_node_args",
          "to": "node_args",
          "as": "nested"
        },
        {
          "from": "source_node",
          "to": "extern_node_args",
          "as": "node"
        },
        {
          "from": "extern_node_args",
          "to": "node_args",
          "as": "extern"
        },
        {
          "from": "nodes",
          "to": "node_args_input",
          "as": "nodes"
        },
        {
          "from": "source_node",
          "to": "node_args_input",
          "as": "node"
        },
        {
          "from": "node",
          "to": "node_args_input",
          "as": "ng"
        },
        {
          "from": "node_args_input",
          "to": "node_args",
          "as": "input"
        },
        {
          "from": "empty",
          "to": "out",
          "as": "otherwise"
        },
        {
          "from": "node_args",
          "to": "out",
          "as": "value"
        }
      ],
      "nodes": [
        {
          "id": "node",
          "ref": "arg",
          "value": "node"
        },
        {
          "id": "nodes",
          "ref": "arg",
          "value": "nodes"
        },
        {
          "id": "ref_path",
          "value": "ref"
        },
        {
          "id": "ref",
          "ref": "get"
        },
        {
          "id": "ref_node",
          "script": "return nodes.find(n => n.id === selected)"
        },
        {
          "id": "source_node",
          "ref": "if"
        },
        {
          "id": "nodes_path",
          "value": "nodes"
        },
        {
          "id": "node_nodes",
          "ref": "get"
        },
        {
          "id": "node_arg_nodes",
          "script": "return nodes?.filter(n => n.ref ==='arg' && n.type !== 'internal')"
        },
        {
          "id": "nested_node_args",
          "script": "return [...(new Set(nodes.map(n => n.value).filter(a => !a.includes('.'))))]"
        },
        {
          "id": "extern_node_args",
          "script": "return _lib.just.get.fn(_lib, node.extern).args"
        },
        {
          "id": "node_args_input",
          "script": "return node.id === 'arg' ? undefined : node.extern ? 'extern' : node.nodes ?  'nested' : 'none'"
        },
        {
          "id": "node_args",
          "ref": "switch"
        },
        {
          "id": "empty",
          "value": []
        },
        {
          "id": "out",
          "ref": "default"
        }
      ],
      "out": "out",
      "id": "node_args"
    },
    {
      "edges": [
        {
          "from": "node_id",
          "to": "node",
          "as": "node_id"
        },
        {
          "from": "nodes",
          "to": "node",
          "as": "nodes"
        },
        {
          "from": "ref_path",
          "to": "ref",
          "as": "path"
        },
        {
          "from": "ref",
          "to": "source_node",
          "as": "pred"
        },
        {
          "from": "ref_node",
          "to": "source_node",
          "as": "true"
        },
        {
          "from": "node",
          "to": "source_node",
          "as": "false"
        },
        {
          "from": "node",
          "to": "ref",
          "as": "target"
        },
        {
          "from": "node",
          "to": "ref_node",
          "as": "node"
        },
        {
          "from": "nodes",
          "to": "ref_node",
          "as": "nodes"
        },
        {
          "from": "ref",
          "to": "ref_node",
          "as": "selected"
        },
        {
          "from": "source_node",
          "to": "node_description",
          "as": "target"
        },
        {
          "from": "description_path",
          "to": "node_description",
          "as": "path"
        },
        {
          "from": "node_description",
          "to": "out",
          "as": "value"
        },
        {
          "from": "empty_text",
          "to": "out",
          "as": "otherwise"
        }
      ],
      "nodes": [
        {
          "id": "node_id",
          "ref": "arg",
          "value": "node_id"
        },
        {
          "id": "nodes",
          "ref": "arg",
          "value": "nodes"
        },
        {
          "id": "node",
          "script": "return nodes.find(n => n.id === node_id)"
        },
        {
          "id": "ref_path",
          "value": "ref"
        },
        {
          "id": "ref",
          "ref": "get"
        },
        {
          "id": "ref_node",
          "script": "return nodes.find(n => n.id === selected)"
        },
        {
          "id": "source_node",
          "ref": "if"
        },
        {
          "id": "description_path",
          "value": "description"
        },
        {
          "id": "node_description",
          "ref": "get"
        },
        {
          "id": "empty_text",
          "value": ""
        },
        {
          "id": "out",
          "ref": "default"
        }
      ],
      "out": "out",
      "id": "node_description"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args",
          "type": "ref"
        },
        {
          "from": "display_graph_nodes",
          "to": "selected_node",
          "as": "nodes"
        },
        {
          "from": "selected",
          "to": "selected_node",
          "as": "selected"
        },
        {
          "from": "display_graph_nodes",
          "to": "node_args_arr",
          "as": "nodes"
        },
        {
          "from": "selected_node",
          "to": "node_args_arr",
          "as": "node"
        },
        {
          "from": "node_args_text",
          "to": "args_h_text",
          "as": "text"
        },
        {
          "from": "args_h_text",
          "to": "args_h_text_array",
          "as": "a0"
        },
        {
          "from": "node_args_arr",
          "to": "node_args_count",
          "as": "target"
        },
        {
          "from": "length_path",
          "to": "node_args_count",
          "as": "path"
        },
        {
          "from": "selected",
          "to": "selected_inputs",
          "as": "selected"
        },
        {
          "from": "display_graph_edges",
          "to": "selected_inputs",
          "as": "edges"
        },
        {
          "from": "selected_inputs",
          "to": "arg_el_runnable_args",
          "as": "inputs"
        },
        {
          "from": "arg_el_runnable_args",
          "to": "arg_el_runnable",
          "as": "args"
        },
        {
          "from": "arg_el",
          "to": "arg_el_runnable",
          "as": "fn"
        },
        {
          "from": "arg_el_runnable",
          "to": "args_links",
          "as": "fn",
          "type": "resolve"
        },
        {
          "from": "selected_inputs",
          "to": "create_input",
          "as": "siblings"
        },
        {
          "from": "create_input",
          "to": "clickable_args",
          "as": "item"
        },
        {
          "from": "node_args_arr",
          "to": "clickable_args",
          "as": "array"
        },
        {
          "from": "clickable_args",
          "to": "args_links",
          "as": "array"
        },
        {
          "from": "args_links",
          "to": "args_h_children",
          "as": "item"
        },
        {
          "from": "args_h_text_array",
          "to": "args_h_children",
          "as": "array"
        },
        {
          "from": "args_h_children",
          "to": "args_h",
          "as": "children"
        },
        {
          "from": "args_h_props",
          "to": "args_h",
          "as": "props"
        },
        {
          "from": "args_h",
          "to": "args_h_out",
          "as": "value"
        },
        {
          "from": "selected",
          "to": "node_description",
          "as": "node_id"
        },
        {
          "from": "display_graph_nodes",
          "to": "node_description",
          "as": "nodes"
        },
        {
          "from": "node_description",
          "to": "description_h_text",
          "as": "text"
        },
        {
          "from": "description_h_text",
          "to": "description_h",
          "as": "children"
        },
        {
          "from": "description_h",
          "to": "description_h_out",
          "as": "true"
        },
        {
          "from": "node_description",
          "to": "description_h_out",
          "as": "pred"
        },
        {
          "from": "nodes",
          "to": "selected_el_node",
          "as": "nodes"
        },
        {
          "from": "selected",
          "to": "selected_el_node",
          "as": "selected"
        },
        {
          "from": "selected_el_node",
          "to": "x",
          "as": "target"
        },
        {
          "from": "x_path",
          "to": "x",
          "as": "path"
        },
        {
          "from": "selected_el_node",
          "to": "y",
          "as": "target"
        },
        {
          "from": "y_path",
          "to": "y",
          "as": "path"
        },
        {
          "from": "dimensions",
          "to": "info_h_props",
          "as": "dimensions"
        },
        {
          "from": "x",
          "to": "info_h_props",
          "as": "x"
        },
        {
          "from": "y",
          "to": "info_h_props",
          "as": "y"
        },
        {
          "from": "svg_offset",
          "to": "info_h_props",
          "as": "svg_offset"
        },
        {
          "from": "info_h_props",
          "to": "info_h",
          "as": "props"
        },
        {
          "from": "args_h_out",
          "to": "info_h_children",
          "as": "a0"
        },
        {
          "from": "description_h_out",
          "to": "info_h_children",
          "as": "a1"
        },
        {
          "from": "info_h_children",
          "to": "info_h",
          "as": "children"
        },
        {
          "from": "info_h",
          "to": "info_out",
          "as": "true"
        },
        {
          "from": "node_args_count",
          "to": "info_pred",
          "as": "args_count"
        },
        {
          "from": "node_description",
          "to": "info_pred",
          "as": "description"
        },
        {
          "from": "info_pred",
          "to": "info_out",
          "as": "pred"
        },
        {
          "from": "state",
          "to": "set_info_display",
          "as": "target"
        },
        {
          "from": "info_display_path",
          "to": "set_info_display",
          "as": "path"
        },
        {
          "from": "info_out",
          "to": "set_info_display",
          "as": "value"
        },
        {
          "from": "set_info_display",
          "to": "result",
          "as": "state"
        },
        {
          "from": "result",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "display_graph_nodes",
          "ref": "arg",
          "value": "state.display_graph.nodes"
        },
        {
          "id": "display_graph_edges",
          "ref": "arg",
          "value": "state.display_graph.edges"
        },
        {
          "id": "nodes",
          "ref": "arg",
          "value": "state.nodes"
        },
        {
          "id": "selected",
          "ref": "arg",
          "value": "state.selected.0"
        },
        {
          "id": "dimensions",
          "ref": "arg",
          "value": "state.dimensions"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "svg_offset",
          "ref": "arg",
          "value": "state.svg_offset"
        },
        {
          "id": "x_path",
          "value": "x"
        },
        {
          "id": "y_path",
          "value": "y"
        },
        {
          "id": "length_path",
          "value": "length"
        },
        {
          "id": "node_args_arr",
          "ref": "node_args"
        },
        {
          "id": "create_input",
          "script": "return `arg${(siblings.map(s => s.as).filter(a => a.startsWith('arg')).sort().map(s => parseInt(s.substring(3))).filter(i => !isNaN(i)).reverse()[0] ?? -1) + 1}`"
        },
        {
          "id": "clickable_args",
          "ref": "append"
        },
        {
          "id": "node_args_text",
          "value": "inputs: "
        },
        {
          "id": "node_args_count",
          "ref": "get"
        },
        {
          "id": "node_description",
          "ref": "node_description"
        },
        {
          "id": "info_display_path",
          "value": "args_display"
        },
        {
          "id": "selected_node",
          "script": "return nodes.find(n => n.id === selected)"
        },
        {
          "id": "selected_inputs",
          "script": "return edges.filter(e => e.to === selected)"
        },
        {
          "id": "selected_el_node",
          "script": "return nodes.find(n => n.node_id === selected)"
        },
        {
          "id": "x",
          "ref": "get"
        },
        {
          "id": "y",
          "ref": "get"
        },
        {
          "id": "arg_el",
          "out": "out",
          "nodes": [
            {
              "id": "in"
            },
            {
              "id": "selected",
              "ref": "arg",
              "value": "state.selected.0"
            },
            {
              "id": "randid",
              "ref": "arg",
              "value": "state.randid"
            },
            {
              "id": "child_as",
              "ref": "arg",
              "value": "payload.text"
            },
            {
              "id": "text",
              "ref": "arg",
              "value": "element"
            },
            {
              "id": "inputs",
              "ref": "arg",
              "value": "inputs"
            },
            {
              "id": "add_node",
              "ref": "add_node_action"
            },
            {
              "id": "add_node_action",
              "ref": "runnable"
            },
            {
              "id": "new_node"
            },
            {
              "id": "payload"
            },
            {
              "id": "create_node"
            },
            {
              "id": "clickable_action_args"
            },
            {
              "id": "clickable_action",
              "ref": "runnable"
            },
            {
              "id": "action",
              "ref": "if"
            },
            {
              "id": "text_html",
              "ref": "html_text"
            },
            {
              "id": "clickable",
              "script": "return !(text === '_args' || text === '_node_inputs' || text === '_node' || text === '_graph') && !inputs.find(e => e.as === text)"
            },
            {
              "id": "class"
            },
            {
              "id": "props"
            },
            {
              "id": "dom_type",
              "value": "span"
            },
            {
              "id": "out",
              "ref": "html_element"
            }
          ],
          "edges": [
            {
              "from": "in",
              "to": "out",
              "as": "_"
            },
            {
              "from": "selected",
              "to": "payload",
              "as": "child"
            },
            {
              "from": "randid",
              "to": "new_node",
              "as": "id"
            },
            {
              "from": "new_node",
              "to": "payload",
              "as": "node"
            },
            {
              "from": "child_as",
              "to": "payload",
              "as": "child_as"
            },
            {
              "from": "add_node",
              "to": "add_node_action",
              "as": "fn"
            },
            {
              "from": "add_node_action",
              "to": "create_node",
              "as": "action"
            },
            {
              "from": "payload",
              "to": "create_node",
              "as": "payload"
            },
            {
              "from": "text",
              "to": "clickable_action_args",
              "as": "text"
            },
            {
              "from": "clickable_action_args",
              "to": "clickable_action",
              "as": "args"
            },
            {
              "from": "create_node",
              "to": "clickable_action",
              "as": "fn"
            },
            {
              "from": "clickable",
              "to": "action",
              "as": "pred"
            },
            {
              "from": "clickable_action",
              "to": "action",
              "as": "true"
            },
            {
              "from": "action",
              "to": "props",
              "as": "onclick"
            },
            {
              "from": "inputs",
              "to": "clickable",
              "as": "inputs"
            },
            {
              "from": "text",
              "to": "clickable",
              "as": "text"
            },
            {
              "from": "clickable",
              "to": "class",
              "as": "clickable"
            },
            {
              "from": "class",
              "to": "props",
              "as": "class"
            },
            {
              "from": "props",
              "to": "out",
              "as": "props"
            },
            {
              "from": "text",
              "to": "text_html",
              "as": "text"
            },
            {
              "from": "text_html",
              "to": "out",
              "as": "children"
            },
            {
              "from": "dom_type",
              "to": "out",
              "as": "dom_type"
            }
          ]
        },
        {
          "id": "arg_el_runnable_args"
        },
        {
          "id": "arg_el_runnable",
          "ref": "runnable"
        },
        {
          "id": "args_links",
          "ref": "map"
        },
        {
          "id": "args_h_text",
          "ref": "html_text"
        },
        {
          "id": "args_h_text_array",
          "ref": "array"
        },
        {
          "id": "args_h_children",
          "ref": "append"
        },
        {
          "id": "args_h",
          "ref": "html_element"
        },
        {
          "id": "args_h_props",
          "value": {
            "class": "args"
          }
        },
        {
          "id": "args_h_out",
          "ref": "default"
        },
        {
          "id": "description_h_text",
          "ref": "html_text"
        },
        {
          "id": "description_h",
          "ref": "html_element"
        },
        {
          "id": "description_h_out",
          "ref": "if"
        },
        {
          "id": "info_h_children",
          "ref": "array"
        },
        {
          "id": "info_h_props",
          "script": "return {class: {'node-info': true}, style: {left: `${Math.min(x * (svg_offset?.scale ?? 1) + (svg_offset?.x ?? 0) - 64, dimensions.x - 256)}px`, top: `${y * (svg_offset?.scale ?? 1) + (svg_offset?.y ?? 0) + 32}px`}}"
        },
        {
          "id": "info_h",
          "ref": "html_element"
        },
        {
          "id": "info_pred",
          "script": "return true"
        },
        {
          "id": "info_out",
          "ref": "if"
        },
        {
          "id": "set_info_display",
          "ref": "set"
        },
        {
          "id": "result"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect_debounced"
        }
      ],
      "id": "show_args_effect"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "editing_path",
          "to": "set_editing",
          "as": "path"
        },
        {
          "from": "false",
          "to": "set_editing",
          "as": "value"
        },
        {
          "from": "state",
          "to": "set_editing",
          "as": "target"
        },
        {
          "from": "empty_string",
          "to": "set_edit_value",
          "as": "value"
        },
        {
          "from": "set_editing",
          "to": "set_edit_value",
          "as": "target"
        },
        {
          "from": "edit_value_path",
          "to": "set_edit_value",
          "as": "path"
        },
        {
          "from": "empty",
          "to": "new_node_props",
          "as": "target"
        },
        {
          "from": "property",
          "to": "new_node_props",
          "as": "path"
        },
        {
          "from": "payload_value_raw",
          "to": "payload_value",
          "as": "value"
        },
        {
          "from": "payload_value",
          "to": "new_node_props",
          "as": "value"
        },
        {
          "from": "set_edit_value",
          "to": "set_edit_id",
          "as": "target"
        },
        {
          "from": "edit_id_path",
          "to": "set_edit_id",
          "as": "path"
        },
        {
          "from": "set_edit_id",
          "to": "result",
          "as": "state"
        },
        {
          "from": "new_node_props",
          "to": "change_effect_payload",
          "as": "properties"
        },
        {
          "from": "id",
          "to": "change_effect_payload",
          "as": "id"
        },
        {
          "from": "on_change",
          "to": "change_effector",
          "as": "fn"
        },
        {
          "from": "change_effector",
          "to": "change_effect",
          "as": "a0"
        },
        {
          "from": "change_effect_payload",
          "to": "change_effect",
          "as": "a1"
        },
        {
          "from": "change_effect",
          "to": "effects",
          "as": "a0"
        },
        {
          "from": "html_id",
          "to": "blur_payload",
          "as": "html_id"
        },
        {
          "from": "blur_payload",
          "to": "blur_effect",
          "as": "a1"
        },
        {
          "from": "blur_effector",
          "to": "blur_effect",
          "as": "a0"
        },
        {
          "from": "blur_effect",
          "to": "effects",
          "as": "a1"
        },
        {
          "from": "effects",
          "to": "result",
          "as": "effects"
        },
        {
          "from": "state",
          "to": "noop",
          "as": "state"
        },
        {
          "from": "noop",
          "to": "out_result",
          "as": "false"
        },
        {
          "from": "result",
          "to": "out_result",
          "as": "true"
        },
        {
          "from": "property",
          "to": "out_result",
          "as": "pred"
        },
        {
          "from": "result",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "property",
          "ref": "arg",
          "value": "state.editing"
        },
        {
          "id": "payload_value_raw",
          "ref": "arg",
          "value": "state.edit_value"
        },
        {
          "id": "payload_value",
          "script": "return value === '' ? undefined : value"
        },
        {
          "id": "id",
          "ref": "arg",
          "value": "state.edit_id"
        },
        {
          "id": "edit_id_path",
          "ref": "arg",
          "value": "edit_id"
        },
        {
          "id": "on_change",
          "ref": "arg",
          "value": "state.oneditconfirm"
        },
        {
          "id": "html_id",
          "ref": "arg",
          "value": "state.html_id"
        },
        {
          "id": "false",
          "value": false
        },
        {
          "id": "empty_string",
          "value": ""
        },
        {
          "id": "editing_path",
          "value": "editing"
        },
        {
          "id": "edit_value_path",
          "value": "edit_value"
        },
        {
          "id": "set_editing",
          "ref": "set"
        },
        {
          "id": "set_edit_value",
          "ref": "set"
        },
        {
          "id": "set_edit_id",
          "ref": "delete"
        },
        {
          "id": "change_effector",
          "ref": "hyperapp_action_effect"
        },
        {
          "id": "change_effect_payload"
        },
        {
          "id": "change_effect",
          "ref": "array"
        },
        {
          "id": "blur_payload",
          "script": "return {selector: `#${html_id}-edit-value textarea`}"
        },
        {
          "id": "blur_effector",
          "ref": "blur_effect"
        },
        {
          "id": "blur_effect",
          "ref": "array"
        },
        {
          "id": "empty",
          "value": {}
        },
        {
          "id": "new_node_props",
          "ref": "set"
        },
        {
          "id": "effects",
          "ref": "array"
        },
        {
          "id": "result"
        },
        {
          "id": "noop"
        },
        {
          "id": "out_result",
          "ref": "if"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "id": "confirm_edit_text"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "nodes",
          "to": "valid_nodes",
          "as": "nodes"
        },
        {
          "from": "edges",
          "to": "popover_graph_edges",
          "as": "edges"
        },
        {
          "from": "levels",
          "to": "valid_nodes",
          "as": "levels"
        },
        {
          "from": "levels",
          "to": "popover_graph_edges",
          "as": "levels"
        },
        {
          "from": "node_id",
          "to": "popover_graph_nodes",
          "as": "node_id"
        },
        {
          "from": "clear_popover",
          "to": "popover_graph_nodes",
          "as": "clear_popover"
        },
        {
          "from": "update_node",
          "to": "popover_graph_nodes",
          "as": "update_node"
        },
        {
          "from": "valid_nodes",
          "to": "popover_graph_nodes",
          "as": "nodes"
        },
        {
          "from": "popover_graph_nodes",
          "to": "popover_graph_value",
          "as": "nodes"
        },
        {
          "from": "valid_nodes",
          "to": "popover_graph_edges",
          "as": "nodes"
        },
        {
          "from": "popover_graph_edges",
          "to": "popover_graph_value",
          "as": "edges"
        },
        {
          "from": "popover_graph_out",
          "to": "popover_graph_value",
          "as": "out"
        },
        {
          "from": "popover_graph_value",
          "to": "set_popover_graph",
          "as": "value"
        },
        {
          "from": "set_popover_graph_path",
          "to": "set_popover_graph",
          "as": "path"
        },
        {
          "from": "state",
          "to": "set_popover_graph",
          "as": "target"
        },
        {
          "from": "show_popover_graph",
          "to": "show_popover_graph_effect",
          "as": "a0"
        },
        {
          "from": "popover_graph_value",
          "to": "show_popover_graph_payload",
          "as": "popover_graph"
        },
        {
          "from": "show_popover_graph_payload",
          "to": "show_popover_graph_effect",
          "as": "a1"
        },
        {
          "from": "show_popover_graph_effect",
          "to": "effects",
          "as": "a0"
        },
        {
          "from": "effects",
          "to": "result",
          "as": "effects"
        },
        {
          "from": "state",
          "to": "result",
          "as": "state"
        },
        {
          "from": "result",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "nodes",
          "ref": "arg",
          "value": "state.display_graph.nodes"
        },
        {
          "id": "edges",
          "ref": "arg",
          "value": "state.display_graph.edges"
        },
        {
          "id": "levels",
          "ref": "arg",
          "value": "state.levels"
        },
        {
          "id": "node_id",
          "ref": "arg",
          "value": "payload.id"
        },
        {
          "id": "set_popover_graph_path",
          "value": "popover_graph"
        },
        {
          "id": "update_node",
          "ref": "update_node"
        },
        {
          "id": "clear_popover",
          "ref": "clear_popover_graph"
        },
        {
          "id": "valid_nodes",
          "script": "return nodes.filter(n => !n.ref && !levels.level_by_node.has(n.id))"
        },
        {
          "id": "popover_graph_nodes",
          "script": "return nodes.map(n => ({id: `reference-popover${n.id}`, name: n.name ?? n.id, value: n.hasOwnProperty('script') || n.hasOwnProperty('nodes') || n.hasOwnProperty('extern') ? [[update_node, {id: node_id, properties: {ref: n.id}}], [clear_popover]] : []})).concat([{id: 'out', name: 'reference nodes', value: [[clear_popover]]}])"
        },
        {
          "id": "popover_graph_edges",
          "script": "return edges.filter(e => !!nodes.find(n => e.to === n.id)).map(e => ({from: `reference-popover${e.from}`, to:  `reference-popover${e.to}`})).concat(nodes.filter(n => edges.filter(e => e.from === n.id).length === 0).map(n => ({from: `reference-popover${n.id}`, to: 'out'})))"
        },
        {
          "id": "popover_graph_out",
          "value": "out"
        },
        {
          "id": "popover_graph_value"
        },
        {
          "id": "show_popover_graph_payload"
        },
        {
          "id": "show_popover_graph",
          "ref": "show_popover_graph"
        },
        {
          "id": "show_popover_graph_effect",
          "ref": "array"
        },
        {
          "id": "set_popover_graph",
          "ref": "set"
        },
        {
          "id": "effects",
          "ref": "array"
        },
        {
          "id": "result"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "out": "out",
      "id": "open_reference_popover"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args",
          "type": "ref"
        },
        {
          "from": "state",
          "to": "set_selected",
          "as": "target"
        },
        {
          "from": "id",
          "to": "selected_array",
          "as": "value"
        },
        {
          "from": "selected_array",
          "to": "set_selected",
          "as": "value"
        },
        {
          "from": "selected_path",
          "to": "set_selected",
          "as": "path"
        },
        {
          "from": "set_selected",
          "to": "set_display_graph",
          "as": "target"
        },
        {
          "from": "add_in_edge",
          "to": "set_display_graph",
          "as": "value"
        },
        {
          "from": "display_graph_path",
          "to": "set_display_graph",
          "as": "path"
        },
        {
          "from": "set_display_graph",
          "to": "result",
          "as": "state"
        },
        {
          "from": "id",
          "to": "new_node",
          "as": "id"
        },
        {
          "from": "name",
          "to": "new_node",
          "as": "name"
        },
        {
          "from": "edge_to",
          "to": "add_node_payload",
          "as": "child"
        },
        {
          "from": "edge_as",
          "to": "add_node_payload",
          "as": "child_as"
        },
        {
          "from": "new_node",
          "to": "add_node_payload",
          "as": "node"
        },
        {
          "from": "display_graph",
          "to": "remove_edge",
          "as": "graph"
        },
        {
          "from": "edge",
          "to": "remove_edge",
          "as": "edge"
        },
        {
          "from": "remove_edge",
          "to": "add_node",
          "as": "graph"
        },
        {
          "from": "new_node",
          "to": "add_node",
          "as": "node"
        },
        {
          "from": "edge",
          "to": "new_out_edge",
          "as": "target"
        },
        {
          "from": "from_path",
          "to": "new_out_edge",
          "as": "path"
        },
        {
          "from": "id",
          "to": "new_out_edge",
          "as": "value"
        },
        {
          "from": "add_node",
          "to": "add_out_edge",
          "as": "graph"
        },
        {
          "from": "new_out_edge",
          "to": "add_out_edge",
          "as": "edge"
        },
        {
          "from": "add_out_edge",
          "to": "next_edge",
          "as": "graph"
        },
        {
          "from": "id",
          "to": "new_in_edge",
          "as": "to"
        },
        {
          "from": "edge_from",
          "to": "new_in_edge",
          "as": "from"
        },
        {
          "from": "arg0",
          "to": "new_in_edge",
          "as": "as"
        },
        {
          "from": "add_out_edge",
          "to": "add_in_edge",
          "as": "graph"
        },
        {
          "from": "new_in_edge",
          "to": "add_in_edge",
          "as": "edge"
        },
        {
          "from": "add_in_edge",
          "to": "update_graph_effect",
          "as": "display_graph"
        },
        {
          "from": "update_graph_effect",
          "to": "effects",
          "as": "a1"
        },
        {
          "from": "effects",
          "to": "result",
          "as": "effects"
        },
        {
          "from": "result",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "display_graph",
          "ref": "arg",
          "value": "state.display_graph"
        },
        {
          "id": "edge",
          "ref": "arg",
          "value": "payload.edge"
        },
        {
          "id": "edge_to",
          "ref": "arg",
          "value": "payload.edge.to"
        },
        {
          "id": "edge_as",
          "ref": "arg",
          "value": "payload.edge.as"
        },
        {
          "id": "edge_from",
          "ref": "arg",
          "value": "payload.edge.from"
        },
        {
          "id": "id",
          "ref": "arg",
          "value": "payload.node.id"
        },
        {
          "id": "name",
          "ref": "arg",
          "value": "payload.node.name"
        },
        {
          "id": "display_graph_path",
          "value": "display_graph"
        },
        {
          "id": "from_path",
          "value": "from"
        },
        {
          "id": "selected_path",
          "value": "selected"
        },
        {
          "id": "arg0",
          "value": "arg0"
        },
        {
          "id": "new_in_edge"
        },
        {
          "id": "new_out_edge",
          "ref": "set"
        },
        {
          "id": "new_node"
        },
        {
          "id": "next_edge",
          "ref": "next_edge"
        },
        {
          "id": "remove_edge",
          "ref": "remove_edge"
        },
        {
          "id": "add_node",
          "ref": "create_or_update_node"
        },
        {
          "id": "add_out_edge",
          "ref": "create_or_update_edge"
        },
        {
          "id": "add_in_edge",
          "ref": "create_or_update_edge"
        },
        {
          "id": "add_node_payload"
        },
        {
          "id": "selected_array",
          "ref": "array"
        },
        {
          "id": "set_selected",
          "ref": "set"
        },
        {
          "id": "set_display_graph",
          "ref": "set"
        },
        {
          "id": "update_graph_effect",
          "script": "return [() => _lib.no.runtime.update_graph(display_graph)]"
        },
        {
          "id": "effects",
          "ref": "array"
        },
        {
          "id": "result"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "out": "out",
      "id": "insert_node"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args",
          "type": "ref"
        },
        {
          "from": "id",
          "to": "new_nodes",
          "as": "id"
        },
        {
          "from": "id",
          "to": "node",
          "as": "id"
        },
        {
          "from": "nodes",
          "to": "node",
          "as": "nodes"
        },
        {
          "from": "node",
          "to": "ref",
          "as": "node"
        },
        {
          "from": "ref",
          "to": "new_nodes",
          "as": "ref"
        },
        {
          "from": "nodes",
          "to": "new_nodes",
          "as": "nodes"
        },
        {
          "from": "nodes_path",
          "to": "set_nodes",
          "as": "path"
        },
        {
          "from": "new_nodes",
          "to": "set_nodes",
          "as": "value"
        },
        {
          "from": "state",
          "to": "set_nodes",
          "as": "target"
        },
        {
          "from": "ref",
          "to": "new_edges",
          "as": "ref"
        },
        {
          "from": "edges",
          "to": "new_edges",
          "as": "edges"
        },
        {
          "from": "new_edges",
          "to": "set_edges",
          "as": "value"
        },
        {
          "from": "edges_path",
          "to": "set_edges",
          "as": "path"
        },
        {
          "from": "set_nodes",
          "to": "set_edges",
          "as": "target"
        },
        {
          "from": "set_edges",
          "to": "result",
          "as": "state"
        },
        {
          "from": "result",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "id",
          "ref": "arg",
          "value": "payload.id"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "nodes",
          "ref": "arg",
          "value": "state.display_graph.nodes"
        },
        {
          "id": "edges",
          "ref": "arg",
          "value": "state.display_graph.edges"
        },
        {
          "id": "nodes_path",
          "value": "display_graph.nodes"
        },
        {
          "id": "edges_path",
          "value": "display_graph.edges"
        },
        {
          "id": "node",
          "script": "return nodes.find(n => n.id === id)"
        },
        {
          "id": "ref",
          "script": "return node.name ?? (node.id + 'reference')"
        },
        {
          "id": "new_nodes",
          "script": "return nodes.filter(n => n.id !== ref).flatMap(n => n.id === id ? [{id: n.id, name: n.name, ref}, {...n, id: ref, name: n.name ?? ref}] : n)"
        },
        {
          "id": "set_nodes",
          "ref": "set"
        },
        {
          "id": "new_edges",
          "script": "return edges.concat([{from: ref, to: 'custom'}])"
        },
        {
          "id": "set_edges",
          "ref": "set"
        },
        {
          "id": "result"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "out": "out",
      "id": "create_reference_effect"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "_",
          "type": "ref"
        },
        {
          "from": "state",
          "to": "last_change_action",
          "as": "state"
        },
        {
          "from": "redo_history",
          "to": "last_change",
          "as": "redo_history"
        },
        {
          "from": "last_change",
          "to": "last_change_action",
          "as": "last_change"
        },
        {
          "from": "last_change_action",
          "to": "redo",
          "as": "runnable"
        },
        {
          "from": "state_path",
          "to": "redo_state",
          "as": "path"
        },
        {
          "from": "redo",
          "to": "redo_state",
          "as": "target"
        },
        {
          "from": "redo_state",
          "to": "new_state",
          "as": "a0"
        },
        {
          "from": "redo_history",
          "to": "new_redo_history",
          "as": "redo_history"
        },
        {
          "from": "new_redo_history",
          "to": "history_obj",
          "as": "redo_history"
        },
        {
          "from": "history_obj",
          "to": "new_state",
          "as": "a1"
        },
        {
          "from": "new_state",
          "to": "result",
          "as": "true"
        },
        {
          "from": "state",
          "to": "result",
          "as": "false"
        },
        {
          "from": "last_change",
          "to": "result",
          "as": "pred"
        },
        {
          "from": "result",
          "to": "out",
          "as": "state"
        },
        {
          "from": "update",
          "to": "update_effect",
          "as": "a0"
        },
        {
          "from": "update_effect",
          "to": "onchange_effects",
          "as": "update"
        },
        {
          "from": "effects_path",
          "to": "redo_effects",
          "as": "path"
        },
        {
          "from": "redo",
          "to": "onchange_effects",
          "as": "redo"
        },
        {
          "from": "onchange_effects",
          "to": "effects",
          "as": "true"
        },
        {
          "from": "noop_effects",
          "to": "effects",
          "as": "false"
        },
        {
          "from": "last_change",
          "to": "effects",
          "as": "pred"
        },
        {
          "from": "effects",
          "to": "out",
          "as": "effects"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "redo_history",
          "ref": "arg",
          "value": "state.redo_history"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "update",
          "ref": "arg",
          "value": "state.update_sim_effect"
        },
        {
          "id": "state_path",
          "value": "state"
        },
        {
          "id": "effects_path",
          "value": "effects"
        },
        {
          "id": "new_redo_history",
          "script": "return redo_history.slice(0, -1)"
        },
        {
          "id": "last_change",
          "script": "return redo_history[redo_history.length - 1]"
        },
        {
          "id": "last_change_action",
          "script": "return {...last_change.runnable, args: {payload: last_change.runnable.args, state}}"
        },
        {
          "id": "redo",
          "ref": "run"
        },
        {
          "id": "redo_state",
          "ref": "get"
        },
        {
          "id": "history_obj"
        },
        {
          "id": "new_state",
          "ref": "merge_objects"
        },
        {
          "id": "result",
          "ref": "if"
        },
        {
          "id": "update_effect",
          "ref": "array"
        },
        {
          "id": "onchange_effects",
          "script": "return (redo.effects ?? []).concat([update])"
        },
        {
          "id": "noop_effects",
          "ref": "array"
        },
        {
          "id": "effects",
          "ref": "if"
        },
        {
          "id": "out"
        }
      ],
      "out": "out",
      "id": "redo_action"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "_",
          "type": "ref"
        },
        {
          "from": "history",
          "to": "last_change",
          "as": "history"
        },
        {
          "from": "state",
          "to": "undo_add_node",
          "as": "state"
        },
        {
          "from": "last_change",
          "to": "undo_add_node",
          "as": "change"
        },
        {
          "from": "undo_add_node",
          "to": "action_state",
          "as": "add_node"
        },
        {
          "from": "state",
          "to": "undo_delete_node",
          "as": "state"
        },
        {
          "from": "last_change",
          "to": "undo_delete_node",
          "as": "change"
        },
        {
          "from": "undo_delete_node",
          "to": "action_state",
          "as": "delete_node"
        },
        {
          "from": "state",
          "to": "undo_update_node",
          "as": "state"
        },
        {
          "from": "last_change",
          "to": "undo_update_node",
          "as": "change"
        },
        {
          "from": "undo_update_node",
          "to": "action_state",
          "as": "update_node"
        },
        {
          "from": "state",
          "to": "undo_update_edge",
          "as": "state"
        },
        {
          "from": "last_change",
          "to": "undo_update_edge",
          "as": "change"
        },
        {
          "from": "undo_update_edge",
          "to": "action_state",
          "as": "update_edge"
        },
        {
          "from": "last_change",
          "to": "last_change_action",
          "as": "change"
        },
        {
          "from": "last_change_action",
          "to": "action_state",
          "as": "input"
        },
        {
          "from": "action_state",
          "to": "new_state",
          "as": "a0"
        },
        {
          "from": "history",
          "to": "new_history",
          "as": "history"
        },
        {
          "from": "new_history",
          "to": "history_obj",
          "as": "history"
        },
        {
          "from": "redo_history",
          "to": "new_redo_history",
          "as": "array"
        },
        {
          "from": "last_change",
          "to": "new_redo_history",
          "as": "item"
        },
        {
          "from": "new_redo_history",
          "to": "history_obj",
          "as": "redo_history"
        },
        {
          "from": "history_obj",
          "to": "new_state",
          "as": "a1"
        },
        {
          "from": "last_change_action",
          "to": "action",
          "as": "pred"
        },
        {
          "from": "new_state",
          "to": "action",
          "as": "true"
        },
        {
          "from": "state",
          "to": "action",
          "as": "false"
        },
        {
          "from": "action",
          "to": "out",
          "as": "state"
        },
        {
          "from": "update",
          "to": "update_effect",
          "as": "a0"
        },
        {
          "from": "update_effect",
          "to": "onchange_effects",
          "as": "a0"
        },
        {
          "from": "last_change_action",
          "to": "effects",
          "as": "pred"
        },
        {
          "from": "onchange_effects",
          "to": "effects",
          "as": "true"
        },
        {
          "from": "effects",
          "to": "out",
          "as": "effects"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "history",
          "ref": "arg",
          "value": "state.history"
        },
        {
          "id": "redo_history",
          "ref": "arg",
          "value": "state.redo_history"
        },
        {
          "id": "update",
          "ref": "arg",
          "value": "state.update_sim_effect"
        },
        {
          "id": "last_change",
          "script": "return history[history.length - 1]"
        },
        {
          "id": "new_history",
          "script": "return history.slice(0, -1)"
        },
        {
          "id": "new_redo_history",
          "ref": "append"
        },
        {
          "id": "last_change_action",
          "script": "return change?.action"
        },
        {
          "id": "undo_add_node",
          "script": "return {...state, selected: [change.child], display_graph: {...state.display_graph, nodes: state.display_graph.nodes.filter(n => n.id !== change.node.id), edges: state.display_graph.edges.filter(e => e.from !== change.node.id)}}"
        },
        {
          "id": "undo_delete_node",
          "script": "return {...state, selected: [change.node.id], display_graph: {...state.display_graph, nodes: state.display_graph.nodes.concat([change.node]), edges: state.display_graph.edges.filter(e => !change.edges.find(c => c.from === e.from)).concat(change.edges).concat([change.parent_edge])}}"
        },
        {
          "id": "undo_update_node",
          "script": "return {...state, selected: [change.node.id], display_graph: {...state.display_graph, nodes: state.display_graph.nodes.filter(n => n.id !== change.node.id).concat([change.node]), edges: state.display_graph.edges.filter(e => !((change.parent_edge.to === e.to && change.parent_edge.from === e.from) || change.child_edges.find(c => c.from === e.from))).concat(change.child_edges).concat([change.parent_edge])}}"
        },
        {
          "id": "undo_update_edge",
          "script": "return {...state, display_graph: {...state.display_graph, edges: state.display_graph.edges.filter(e => !(e.to === change.edge.to && e.from === change.edge.from)).concat([change.edge])}}"
        },
        {
          "id": "history_obj"
        },
        {
          "id": "action_state",
          "ref": "switch"
        },
        {
          "id": "new_state",
          "ref": "merge_objects"
        },
        {
          "id": "update_effect",
          "ref": "array"
        },
        {
          "id": "onchange_effects",
          "ref": "array"
        },
        {
          "id": "effects",
          "ref": "if"
        },
        {
          "id": "action",
          "ref": "if"
        },
        {
          "id": "out"
        }
      ],
      "out": "out",
      "id": "undo_action"
    },
    {
      "edges": [
        {
          "from": "id",
          "to": "old_node",
          "as": "node_id"
        },
        {
          "from": "nodes",
          "to": "old_node",
          "as": "nodes"
        },
        {
          "from": "old_node",
          "to": "node",
          "as": "o0"
        },
        {
          "from": "arg_node",
          "to": "node",
          "as": "o1"
        },
        {
          "from": "node",
          "to": "new_nodes",
          "as": "item",
          "type": "resolve"
        },
        {
          "from": "id",
          "to": "filtered_nodes",
          "as": "node_id"
        },
        {
          "from": "nodes",
          "to": "filtered_nodes",
          "as": "nodes"
        },
        {
          "from": "filtered_nodes",
          "to": "new_nodes",
          "as": "array"
        },
        {
          "from": "new_nodes",
          "to": "new_graph",
          "as": "value"
        },
        {
          "from": "nodes_path",
          "to": "new_graph",
          "as": "path"
        },
        {
          "from": "graph",
          "to": "new_graph",
          "as": "target"
        }
      ],
      "nodes": [
        {
          "id": "id",
          "ref": "arg",
          "value": "node.id"
        },
        {
          "id": "arg_node",
          "ref": "arg",
          "value": "node"
        },
        {
          "id": "graph",
          "ref": "arg",
          "value": "graph"
        },
        {
          "id": "nodes",
          "ref": "arg",
          "value": "graph.nodes"
        },
        {
          "id": "old_node",
          "ref": "find_node"
        },
        {
          "id": "node",
          "ref": "merge_objects"
        },
        {
          "id": "nodes_path",
          "value": "nodes"
        },
        {
          "id": "filtered_nodes",
          "script": "return nodes.filter(n => n.id !== node_id)"
        },
        {
          "id": "new_nodes",
          "ref": "append"
        },
        {
          "id": "new_graph",
          "ref": "set"
        }
      ],
      "out": "new_graph",
      "id": "create_or_update_node"
    },
    {
      "edges": [
        {
          "from": "arg_edge",
          "to": "old_edge",
          "as": "edge"
        },
        {
          "from": "edges",
          "to": "old_edge",
          "as": "edges"
        },
        {
          "from": "old_edge",
          "to": "new_edge",
          "as": "o0"
        },
        {
          "from": "arg_edge",
          "to": "new_edge",
          "as": "o1"
        },
        {
          "from": "new_edge",
          "to": "new_edges",
          "as": "item",
          "type": "resolve"
        },
        {
          "from": "arg_edge",
          "to": "filtered_edges",
          "as": "edge"
        },
        {
          "from": "edges",
          "to": "filtered_edges",
          "as": "edges"
        },
        {
          "from": "filtered_edges",
          "to": "new_edges",
          "as": "array"
        },
        {
          "from": "new_edges",
          "to": "new_graph",
          "as": "value"
        },
        {
          "from": "edges_path",
          "to": "new_graph",
          "as": "path"
        },
        {
          "from": "graph",
          "to": "new_graph",
          "as": "target"
        }
      ],
      "nodes": [
        {
          "id": "arg_edge",
          "ref": "arg",
          "value": "edge"
        },
        {
          "id": "graph",
          "ref": "arg",
          "value": "graph"
        },
        {
          "id": "edges",
          "ref": "arg",
          "value": "graph.edges"
        },
        {
          "id": "old_edge",
          "script": "return edges.find(e => e.to === edge.to && e.from === edge.from)"
        },
        {
          "id": "new_edge",
          "ref": "merge_objects"
        },
        {
          "id": "edges_path",
          "value": "edges"
        },
        {
          "id": "filtered_edges",
          "script": "return edges.filter(e => !(e.to === edge.to && e.from === edge.from))"
        },
        {
          "id": "new_edges",
          "ref": "append"
        },
        {
          "id": "new_graph",
          "ref": "set"
        }
      ],
      "out": "new_graph",
      "id": "create_or_update_edge"
    },
    {
      "edges": [
        {
          "from": "arg_edge",
          "to": "filtered_edges",
          "as": "edge"
        },
        {
          "from": "edges",
          "to": "filtered_edges",
          "as": "edges"
        },
        {
          "from": "filtered_edges",
          "to": "new_graph",
          "as": "value"
        },
        {
          "from": "edges_path",
          "to": "new_graph",
          "as": "path"
        },
        {
          "from": "graph",
          "to": "new_graph",
          "as": "target"
        }
      ],
      "nodes": [
        {
          "id": "arg_edge",
          "ref": "arg",
          "value": "edge"
        },
        {
          "id": "graph",
          "ref": "arg",
          "value": "graph"
        },
        {
          "id": "edges",
          "ref": "arg",
          "value": "graph.edges"
        },
        {
          "id": "edges_path",
          "value": "edges"
        },
        {
          "id": "filtered_edges",
          "script": "return edges.filter(e => !(e.to === edge.to && e.from === edge.from))"
        },
        {
          "id": "new_graph",
          "ref": "set"
        }
      ],
      "out": "new_graph",
      "id": "remove_edge"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "node",
          "to": "new_node"
        },
        {
          "from": "node",
          "to": "history_item",
          "as": "node"
        },
        {
          "from": "payload",
          "to": "history_item",
          "as": "payload"
        },
        {
          "from": "child",
          "to": "history_item",
          "as": "child"
        },
        {
          "from": "child_as",
          "to": "history_item",
          "as": "child_as"
        },
        {
          "from": "history_item",
          "to": "new_history",
          "as": "item"
        },
        {
          "from": "history",
          "to": "new_history",
          "as": "array"
        },
        {
          "from": "id",
          "to": "id_array",
          "as": "arg0"
        },
        {
          "from": "nodes",
          "to": "new_nodes",
          "as": "array"
        },
        {
          "from": "new_node",
          "to": "new_nodes",
          "as": "item"
        },
        {
          "from": "state",
          "to": "set_new_nodes",
          "as": "target"
        },
        {
          "from": "nodes_path",
          "to": "set_new_nodes",
          "as": "path"
        },
        {
          "from": "new_nodes",
          "to": "set_new_nodes",
          "as": "value"
        },
        {
          "from": "id",
          "to": "new_edge",
          "as": "id"
        },
        {
          "from": "child",
          "to": "new_edge",
          "as": "child"
        },
        {
          "from": "child_as",
          "to": "new_edge",
          "as": "child_as"
        },
        {
          "from": "display_graph",
          "to": "add_node",
          "as": "graph"
        },
        {
          "from": "new_node",
          "to": "add_node",
          "as": "node"
        },
        {
          "from": "add_node",
          "to": "add_edge",
          "as": "graph"
        },
        {
          "from": "add_node",
          "to": "next_edge",
          "as": "graph"
        },
        {
          "from": "new_edge",
          "to": "next_edge",
          "as": "edge"
        },
        {
          "from": "next_edge",
          "to": "add_edge",
          "as": "edge"
        },
        {
          "from": "add_edge",
          "to": "effects",
          "as": "display_graph"
        },
        {
          "from": "update_sim_effect",
          "to": "effects",
          "as": "update_sim_effect"
        },
        {
          "from": "state",
          "to": "set_display_graph",
          "as": "target"
        },
        {
          "from": "display_graph_path",
          "to": "set_display_graph",
          "as": "path"
        },
        {
          "from": "add_node",
          "to": "set_display_graph",
          "as": "value"
        },
        {
          "from": "set_display_graph",
          "to": "set_selected",
          "as": "target"
        },
        {
          "from": "selected_path",
          "to": "set_selected",
          "as": "path"
        },
        {
          "from": "set_selected",
          "to": "set_history",
          "as": "target"
        },
        {
          "from": "history_path",
          "to": "set_history",
          "as": "path"
        },
        {
          "from": "new_history",
          "to": "set_history",
          "as": "value"
        },
        {
          "from": "id_array",
          "to": "new_selected",
          "as": "true"
        },
        {
          "from": "selected",
          "to": "new_selected",
          "as": "false"
        },
        {
          "from": "select",
          "to": "new_selected",
          "as": "pred"
        },
        {
          "from": "new_selected",
          "to": "set_selected",
          "as": "value"
        },
        {
          "from": "set_selected",
          "to": "effects",
          "as": "new_state"
        },
        {
          "from": "set_history",
          "to": "out",
          "as": "state"
        },
        {
          "from": "effects",
          "to": "out",
          "as": "effects"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "id",
          "ref": "arg",
          "value": "payload.node.id"
        },
        {
          "id": "payload",
          "ref": "arg",
          "value": "payload"
        },
        {
          "id": "node",
          "ref": "arg",
          "value": "payload.node"
        },
        {
          "id": "select",
          "ref": "arg",
          "value": "payload.select"
        },
        {
          "id": "child",
          "ref": "arg",
          "value": "payload.child"
        },
        {
          "id": "child_as",
          "ref": "arg",
          "value": "payload.child_as"
        },
        {
          "id": "history",
          "ref": "arg",
          "value": "state.history"
        },
        {
          "id": "selected",
          "ref": "arg",
          "value": "state.selected"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "display_graph",
          "ref": "arg",
          "value": "state.display_graph"
        },
        {
          "id": "history_path",
          "value": "history"
        },
        {
          "id": "display_graph_path",
          "value": "display_graph"
        },
        {
          "id": "id_array",
          "ref": "array"
        },
        {
          "id": "update_sim_effect",
          "ref": "arg",
          "value": "state.update_sim_effect"
        },
        {
          "id": "nodes",
          "ref": "arg",
          "value": "state.display_graph.nodes"
        },
        {
          "id": "history_item",
          "script": "return {action: 'add_node', node, child, runnable: {fn: 'add_node_action', graph: _graph, args: payload}}"
        },
        {
          "id": "new_history",
          "ref": "append"
        },
        {
          "id": "new_edge",
          "script": "return {from: id, to: child, as: child_as}"
        },
        {
          "id": "next_edge",
          "ref": "next_edge"
        },
        {
          "id": "add_node",
          "ref": "create_or_update_node"
        },
        {
          "id": "add_edge",
          "ref": "create_or_update_edge"
        },
        {
          "id": "effects",
          "script": "return [[() => _lib.no.runtime.update_graph(display_graph)], [update_sim_effect]]"
        },
        {
          "id": "set_display_graph",
          "ref": "set"
        },
        {
          "id": "nodes_path",
          "value": "display_graph.nodes"
        },
        {
          "id": "selected_path",
          "value": "selected"
        },
        {
          "id": "new_node"
        },
        {
          "id": "new_nodes",
          "ref": "append"
        },
        {
          "id": "set_new_nodes",
          "ref": "set"
        },
        {
          "id": "new_selected",
          "ref": "if"
        },
        {
          "id": "set_selected",
          "ref": "set"
        },
        {
          "id": "set_history",
          "ref": "set"
        },
        {
          "id": "out"
        }
      ],
      "out": "out",
      "id": "add_node_action"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out"
        },
        {
          "from": "add_node_fn",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "add_node_fn",
          "ref": "add_node_action"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "out": "out",
      "id": "add_node"
    },
    {
      "edges": [
        {
          "from": "editing",
          "to": "out",
          "as": "editing"
        },
        {
          "from": "searching",
          "to": "out",
          "as": "searching"
        },
        {
          "from": "graph",
          "to": "out",
          "as": "graph"
        },
        {
          "from": "arrowdown",
          "to": "graph",
          "as": "arrowdown"
        },
        {
          "from": "arrowup",
          "to": "graph",
          "as": "arrowup"
        },
        {
          "from": "arrowleft",
          "to": "graph",
          "as": "arrowleft"
        },
        {
          "from": "arrowright",
          "to": "graph",
          "as": "arrowright"
        },
        {
          "from": "j",
          "to": "graph",
          "as": "j"
        },
        {
          "from": "k",
          "to": "graph",
          "as": "k"
        },
        {
          "from": "h",
          "to": "graph",
          "as": "h"
        },
        {
          "from": "l",
          "to": "graph",
          "as": "l"
        },
        {
          "from": "v",
          "to": "graph",
          "as": "v"
        },
        {
          "from": "n",
          "to": "graph",
          "as": "n"
        },
        {
          "from": "s",
          "to": "graph",
          "as": "s"
        },
        {
          "from": "r",
          "to": "graph",
          "as": "r"
        },
        {
          "from": "o",
          "to": "graph",
          "as": "o"
        },
        {
          "from": "y",
          "to": "graph",
          "as": "y"
        },
        {
          "from": "p",
          "to": "graph",
          "as": "p"
        },
        {
          "from": "x",
          "to": "graph",
          "as": "x"
        },
        {
          "from": "a",
          "to": "graph",
          "as": "a"
        },
        {
          "from": "f",
          "to": "graph",
          "as": "f"
        },
        {
          "from": "e",
          "to": "graph",
          "as": "e"
        },
        {
          "from": "questionmark",
          "to": "graph",
          "as": "shift_questionmark"
        },
        {
          "from": "enter",
          "to": "graph",
          "as": "enter"
        },
        {
          "from": "ctrl_c",
          "to": "graph",
          "as": "ctrl_c"
        },
        {
          "from": "ctrl_v",
          "to": "graph",
          "as": "ctrl_v"
        },
        {
          "from": "ctrl_s",
          "to": "graph",
          "as": "ctrl_s"
        },
        {
          "from": "ctrl_z",
          "to": "graph",
          "as": "ctrl_z"
        },
        {
          "from": "ctrl_y",
          "to": "graph",
          "as": "ctrl_y"
        },
        {
          "from": "shift_enter",
          "to": "graph",
          "as": "shift_enter"
        },
        {
          "from": "esc_search",
          "to": "searching",
          "as": "escape"
        }
      ],
      "nodes": [
        {
          "id": "editing"
        },
        {
          "id": "searching"
        },
        {
          "id": "graph"
        },
        {
          "id": "j",
          "value": "down"
        },
        {
          "id": "k",
          "value": "up"
        },
        {
          "value": "right",
          "id": "arrowright"
        },
        {
          "value": "left",
          "id": "arrowleft"
        },
        {
          "id": "arrowdown",
          "value": "down"
        },
        {
          "id": "arrowup",
          "value": "up"
        },
        {
          "value": "left",
          "id": "h"
        },
        {
          "value": "right",
          "id": "l"
        },
        {
          "value": "edit_value",
          "id": "v"
        },
        {
          "value": "edit_name",
          "id": "n"
        },
        {
          "value": "edit_ref",
          "id": "r"
        },
        {
          "value": "edit_script",
          "id": "s"
        },
        {
          "value": "edit_edge",
          "id": "e"
        },
        {
          "value": "copy",
          "id": "y"
        },
        {
          "value": "copy",
          "id": "ctrl_c"
        },
        {
          "value": "paste",
          "id": "p"
        },
        {
          "value": "paste",
          "id": "ctrl_v"
        },
        {
          "value": "add_node",
          "id": "o"
        },
        {
          "value": "add_arg_node",
          "id": "a"
        },
        {
          "value": "delete_node",
          "id": "x"
        },
        {
          "value": "expand_contract",
          "id": "shift_enter"
        },
        {
          "value": "save",
          "id": "ctrl_s"
        },
        {
          "value": "undo",
          "id": "ctrl_z"
        },
        {
          "value": "redo",
          "id": "ctrl_y"
        },
        {
          "value": "select",
          "id": "enter"
        },
        {
          "value": "show_keybindings",
          "id": "questionmark"
        },
        {
          "value": "find",
          "id": "f"
        },
        {
          "value": "cancel_search",
          "id": "esc_search"
        },
        {
          "id": "out"
        }
      ],
      "out": "out",
      "id": "keybindings"
    },
    {
      "edges": [
        {
          "from": "randid",
          "to": "add_node",
          "as": "randid"
        },
        {
          "from": "selected",
          "to": "add_node",
          "as": "selected"
        },
        {
          "from": "add_edge_effect",
          "to": "add_node",
          "as": "add_edge"
        },
        {
          "from": "add_node_effect",
          "to": "add_node",
          "as": "add_node"
        },
        {
          "from": "selected",
          "to": "copy",
          "as": "id"
        },
        {
          "from": "copy_effect",
          "to": "copy",
          "as": "copy_effect"
        },
        {
          "from": "selected",
          "to": "paste",
          "as": "id"
        },
        {
          "from": "randid",
          "to": "paste",
          "as": "randid"
        },
        {
          "from": "paste_effect",
          "to": "paste",
          "as": "paste_effect"
        },
        {
          "from": "selected",
          "to": "expand_contract",
          "as": "id"
        },
        {
          "from": "expand_contract_effect",
          "to": "expand_contract",
          "as": "expand_contract"
        },
        {
          "from": "randid",
          "to": "add_arg_node",
          "as": "randid"
        },
        {
          "from": "selected",
          "to": "add_arg_node",
          "as": "selected"
        },
        {
          "from": "add_edge_effect",
          "to": "add_arg_node",
          "as": "add_edge"
        },
        {
          "from": "add_node_effect",
          "to": "add_arg_node",
          "as": "add_node"
        },
        {
          "from": "show_edit_text",
          "to": "add_arg_node",
          "as": "show_edit_text"
        },
        {
          "from": "update_node",
          "to": "add_arg_node",
          "as": "update_node"
        },
        {
          "from": "edit_value",
          "to": "effects_map",
          "as": "edit_value"
        },
        {
          "from": "edit_name",
          "to": "effects_map",
          "as": "edit_name"
        },
        {
          "from": "edit_ref",
          "to": "effects_map",
          "as": "edit_ref"
        },
        {
          "from": "edit_script",
          "to": "effects_map",
          "as": "edit_script"
        },
        {
          "from": "edit_edge",
          "to": "effects_map",
          "as": "edit_edge"
        },
        {
          "from": "add_node",
          "to": "effects_map",
          "as": "add_node"
        },
        {
          "from": "add_arg_node",
          "to": "effects_map",
          "as": "add_arg_node"
        },
        {
          "from": "delete_node",
          "to": "effects_map",
          "as": "delete_node"
        },
        {
          "from": "copy",
          "to": "effects_map",
          "as": "copy"
        },
        {
          "from": "paste",
          "to": "effects_map",
          "as": "paste"
        },
        {
          "from": "expand_contract",
          "to": "effects_map",
          "as": "expand_contract"
        },
        {
          "from": "save",
          "to": "effects_map",
          "as": "save"
        },
        {
          "from": "cancel_search",
          "to": "effects_map",
          "as": "cancel_search"
        },
        {
          "from": "find",
          "to": "effects_map",
          "as": "find"
        },
        {
          "from": "select",
          "to": "effects_map",
          "as": "select"
        },
        {
          "from": "show_keybindings",
          "to": "effects_map",
          "as": "show_keybindings"
        },
        {
          "from": "undo",
          "to": "actions_map",
          "as": "undo"
        },
        {
          "from": "redo",
          "to": "actions_map",
          "as": "redo"
        },
        {
          "from": "down",
          "to": "actions_map",
          "as": "down"
        },
        {
          "from": "up",
          "to": "actions_map",
          "as": "up"
        },
        {
          "from": "left",
          "to": "actions_map",
          "as": "left"
        },
        {
          "from": "right",
          "to": "actions_map",
          "as": "right"
        },
        {
          "from": "editing",
          "to": "mode",
          "as": "editing"
        },
        {
          "from": "search",
          "to": "mode",
          "as": "search"
        },
        {
          "from": "keybindings",
          "to": "mode_keybindings",
          "as": "target"
        },
        {
          "from": "mode",
          "to": "mode_keybindings",
          "as": "path"
        },
        {
          "from": "mode_keybindings",
          "to": "key_action_effect",
          "as": "target"
        },
        {
          "from": "key_inputs",
          "to": "key_action_effect",
          "as": "path"
        },
        {
          "from": "key_action_effect",
          "to": "effects_map",
          "as": "input"
        },
        {
          "from": "effects_map",
          "to": "out_effects",
          "as": "effects"
        },
        {
          "from": "state",
          "to": "out_effects",
          "as": "state"
        },
        {
          "from": "out_effects",
          "to": "out_action_effect",
          "as": "otherwise"
        },
        {
          "from": "key_action_effect",
          "to": "actions_map",
          "as": "input"
        },
        {
          "from": "actions_map",
          "to": "out_action_effect",
          "as": "value"
        },
        {
          "from": "out_action_effect",
          "to": "out",
          "as": "true"
        },
        {
          "from": "state",
          "to": "default_out",
          "as": "state"
        },
        {
          "from": "actions_map",
          "to": "out_pred",
          "as": "action"
        },
        {
          "from": "effects_map",
          "to": "out_pred",
          "as": "effect"
        },
        {
          "from": "run_display_graph_effector",
          "to": "run_display_graph_effect",
          "as": "a0"
        },
        {
          "from": "key_event",
          "to": "run_display_graph_effect",
          "as": "a1"
        },
        {
          "from": "run_display_graph_effect",
          "to": "_default_fx",
          "as": "a0"
        },
        {
          "from": "update",
          "to": "update_effector",
          "as": "fn",
          "type": "ref"
        },
        {
          "from": "update_effector",
          "to": "update_effect",
          "as": "a0"
        },
        {
          "from": "key_event",
          "to": "update_effect",
          "as": "a1"
        },
        {
          "from": "update_effect",
          "to": "default_fx",
          "as": "a0"
        },
        {
          "from": "default_fx",
          "to": "default_out",
          "as": "effects"
        },
        {
          "from": "out_pred",
          "to": "out",
          "as": "pred"
        },
        {
          "from": "default_out",
          "to": "out",
          "as": "false"
        },
        {
          "from": "state",
          "to": "key_inputs",
          "as": "state"
        },
        {
          "from": "key_event",
          "to": "key",
          "as": "ev"
        },
        {
          "from": "state",
          "to": "key_inputs",
          "as": "state"
        },
        {
          "from": "key_event",
          "to": "key_inputs",
          "as": "ev"
        },
        {
          "from": "arg_display_graph_nodes",
          "to": "selected_node",
          "as": "nodes"
        },
        {
          "from": "selected",
          "to": "selected_node",
          "as": "node_id"
        },
        {
          "from": "nodes",
          "to": "el_node",
          "as": "nodes"
        },
        {
          "from": "selected",
          "to": "el_node",
          "as": "node_id"
        },
        {
          "from": "edges",
          "to": "edge_out",
          "as": "edges"
        },
        {
          "from": "selected",
          "to": "edge_out",
          "as": "node_id"
        },
        {
          "from": "key_event",
          "to": "run"
        },
        {
          "from": "key_inputs",
          "to": "graph_effects",
          "as": "input"
        },
        {
          "from": "key_inputs",
          "to": "editing_effects",
          "as": "input"
        },
        {
          "from": "state",
          "to": "calculate_levels",
          "as": "state"
        },
        {
          "from": "selected",
          "to": "calculate_levels",
          "as": "selected"
        },
        {
          "from": "display_graph",
          "to": "calculate_levels",
          "as": "display_graph"
        },
        {
          "from": "key_inputs",
          "to": "edit_value",
          "as": "input"
        },
        {
          "from": "key_inputs",
          "to": "display_graph",
          "as": "input"
        },
        {
          "from": "key_inputs",
          "to": "clipboard",
          "as": "input"
        },
        {
          "from": "key_inputs",
          "to": "show_all",
          "as": "input"
        },
        {
          "from": "key_inputs",
          "to": "show_result",
          "as": "input"
        },
        {
          "from": "arg_display_graph",
          "to": "save",
          "as": "display_graph"
        },
        {
          "from": "save_effect",
          "to": "save",
          "as": "save_effect"
        },
        {
          "from": "onselectnode_action",
          "to": "up",
          "as": "onselectnode"
        },
        {
          "from": "state",
          "to": "up",
          "as": "state"
        },
        {
          "from": "selected",
          "to": "up",
          "as": "selected"
        },
        {
          "from": "arg_display_graph",
          "to": "up",
          "as": "display_graph"
        },
        {
          "from": "key_event",
          "to": "up",
          "as": "event"
        },
        {
          "from": "stop_propagation",
          "to": "up",
          "as": "stop_propagation"
        },
        {
          "from": "key_event",
          "to": "down",
          "as": "event"
        },
        {
          "from": "stop_propagation",
          "to": "down",
          "as": "stop_propagation"
        },
        {
          "from": "onselectnode_action",
          "to": "down",
          "as": "onselectnode"
        },
        {
          "from": "state",
          "to": "down",
          "as": "state"
        },
        {
          "from": "selected",
          "to": "down",
          "as": "selected"
        },
        {
          "from": "arg_display_graph",
          "to": "down",
          "as": "display_graph"
        },
        {
          "from": "show_edit_text",
          "to": "edit_value",
          "as": "show_edit_text"
        },
        {
          "from": "update_node",
          "to": "edit_value",
          "as": "update_node"
        },
        {
          "from": "el_node",
          "to": "edit_value",
          "as": "node"
        },
        {
          "from": "selected_node",
          "to": "edit_value",
          "as": "selected_node"
        },
        {
          "from": "selected",
          "to": "edit_value",
          "as": "id"
        },
        {
          "from": "edit_value",
          "to": "graph_effects",
          "as": "edit_value"
        },
        {
          "from": "selected_node",
          "to": "edit_name",
          "as": "selected_node"
        },
        {
          "from": "show_edit_text",
          "to": "edit_name",
          "as": "show_edit_text"
        },
        {
          "from": "update_node",
          "to": "edit_name",
          "as": "update_node"
        },
        {
          "from": "el_node",
          "to": "edit_name",
          "as": "node"
        },
        {
          "from": "selected",
          "to": "edit_name",
          "as": "id"
        },
        {
          "from": "edit_name",
          "to": "graph_effects",
          "as": "edit_name"
        },
        {
          "from": "el_node",
          "to": "edit_ref",
          "as": "node"
        },
        {
          "from": "selected_node",
          "to": "edit_ref",
          "as": "selected_node"
        },
        {
          "from": "show_edit_text",
          "to": "edit_ref",
          "as": "show_edit_text"
        },
        {
          "from": "update_node",
          "to": "edit_ref",
          "as": "update_node"
        },
        {
          "from": "selected",
          "to": "edit_ref",
          "as": "id"
        },
        {
          "from": "el_node",
          "to": "edit_script",
          "as": "node"
        },
        {
          "from": "show_edit_text",
          "to": "edit_script",
          "as": "show_edit_text"
        },
        {
          "from": "update_node",
          "to": "edit_script",
          "as": "update_node"
        },
        {
          "from": "selected_node",
          "to": "edit_script",
          "as": "selected_node"
        },
        {
          "from": "selected",
          "to": "edit_script",
          "as": "id"
        },
        {
          "from": "el_node",
          "to": "edit_edge",
          "as": "node"
        },
        {
          "from": "edge_out",
          "to": "edit_edge",
          "as": "edge"
        },
        {
          "from": "show_edit_text",
          "to": "edit_edge",
          "as": "show_edit_text"
        },
        {
          "from": "update_edge",
          "to": "edit_edge",
          "as": "update_edge"
        },
        {
          "from": "el_node",
          "to": "edit_edge",
          "as": "node"
        },
        {
          "from": "edit_ref",
          "to": "graph_effects",
          "as": "edit_ref"
        },
        {
          "from": "show_edit_text",
          "to": "s",
          "as": "show_edit_text"
        },
        {
          "from": "update_node",
          "to": "s",
          "as": "update_node"
        },
        {
          "from": "el_node",
          "to": "s",
          "as": "node"
        },
        {
          "from": "selected_node",
          "to": "s",
          "as": "selected_node"
        },
        {
          "from": "s",
          "to": "graph_effects",
          "as": "s"
        },
        {
          "from": "selected",
          "to": "select",
          "as": "node_id"
        },
        {
          "from": "onselectnode_effect",
          "to": "select",
          "as": "onselectnode"
        },
        {
          "from": "key_event",
          "to": "select",
          "as": "event"
        },
        {
          "from": "key_event",
          "to": "t"
        },
        {
          "from": "state",
          "to": "t"
        },
        {
          "from": "key_event",
          "to": "shift_t"
        },
        {
          "from": "state",
          "to": "shift_t"
        },
        {
          "from": "html_id",
          "to": "s",
          "as": "html_id"
        },
        {
          "from": "html_id",
          "to": "f",
          "as": "html_id"
        },
        {
          "from": "focus_effect",
          "to": "f",
          "as": "focus_effect"
        },
        {
          "from": "html_id",
          "to": "a",
          "as": "html_id"
        },
        {
          "from": "html_id",
          "to": "t",
          "as": "html_id"
        },
        {
          "from": "html_id",
          "to": "set_selected",
          "as": "html_id"
        },
        {
          "from": "html_id",
          "to": "esc_search",
          "as": "html_id"
        },
        {
          "from": "key_event",
          "to": "s"
        },
        {
          "from": "state",
          "to": "s"
        },
        {
          "from": "state",
          "to": "p"
        },
        {
          "from": "state",
          "to": "q"
        },
        {
          "from": "key_event",
          "to": "n"
        },
        {
          "from": "state",
          "to": "n"
        },
        {
          "from": "key_event",
          "to": "a"
        },
        {
          "from": "state",
          "to": "a"
        },
        {
          "from": "selected",
          "to": "delete_node",
          "as": "selected"
        },
        {
          "from": "delete_node_effect",
          "to": "delete_node",
          "as": "delete_node"
        },
        {
          "from": "randid",
          "to": "o",
          "as": "randid"
        },
        {
          "from": "selected",
          "to": "o",
          "as": "selected"
        },
        {
          "from": "add_edge_effect",
          "to": "o",
          "as": "add_edge"
        },
        {
          "from": "state",
          "to": "i",
          "as": "state"
        },
        {
          "from": "state",
          "to": "e"
        },
        {
          "from": "selected_node",
          "to": "y",
          "as": "node"
        },
        {
          "from": "key_event",
          "to": "left",
          "as": "event"
        },
        {
          "from": "dimensions",
          "to": "left",
          "as": "dimensions"
        },
        {
          "from": "links",
          "to": "left",
          "as": "links"
        },
        {
          "from": "arg_levels",
          "to": "left",
          "as": "levels"
        },
        {
          "from": "selected",
          "to": "left",
          "as": "selected"
        },
        {
          "from": "arg_selected_edge",
          "to": "left",
          "as": "selected_edge"
        },
        {
          "from": "arg_display_graph",
          "to": "left",
          "as": "display_graph"
        },
        {
          "from": "nodes",
          "to": "left",
          "as": "nodes"
        },
        {
          "from": "onselectnode_action",
          "to": "left",
          "as": "onselectnode"
        },
        {
          "from": "state",
          "to": "left",
          "as": "state"
        },
        {
          "from": "static",
          "to": "left",
          "as": "static"
        },
        {
          "from": "stop_propagation",
          "to": "left",
          "as": "stop_propagation"
        },
        {
          "from": "static",
          "to": "right",
          "as": "static"
        },
        {
          "from": "stop_propagation",
          "to": "right",
          "as": "stop_propagation"
        },
        {
          "from": "key_event",
          "to": "right",
          "as": "event"
        },
        {
          "from": "dimensions",
          "to": "right",
          "as": "dimensions"
        },
        {
          "from": "nodes",
          "to": "right",
          "as": "nodes"
        },
        {
          "from": "links",
          "to": "right",
          "as": "links"
        },
        {
          "from": "arg_levels",
          "to": "right",
          "as": "levels"
        },
        {
          "from": "selected",
          "to": "right",
          "as": "selected"
        },
        {
          "from": "arg_selected_edge",
          "to": "right",
          "as": "selected_edge"
        },
        {
          "from": "arg_display_graph",
          "to": "right",
          "as": "display_graph"
        },
        {
          "from": "onselectnode_action",
          "to": "right",
          "as": "onselectnode"
        },
        {
          "from": "state",
          "to": "right",
          "as": "state"
        },
        {
          "from": "static",
          "to": "right_edge",
          "as": "static"
        },
        {
          "from": "dimensions",
          "to": "right_edge",
          "as": "dimensions"
        },
        {
          "from": "nodes",
          "to": "right_edge",
          "as": "nodes"
        },
        {
          "from": "links",
          "to": "right_edge",
          "as": "links"
        },
        {
          "from": "arg_levels",
          "to": "right_edge",
          "as": "levels"
        },
        {
          "from": "selected",
          "to": "right_edge",
          "as": "selected"
        },
        {
          "from": "arg_selected_edge",
          "to": "right_edge",
          "as": "selected_edge"
        },
        {
          "from": "arg_display_graph",
          "to": "right_edge",
          "as": "display_graph"
        },
        {
          "from": "right_edge",
          "to": "selected_edge",
          "as": "arrowright"
        },
        {
          "from": "right_edge",
          "to": "selected_edge",
          "as": "l"
        },
        {
          "from": "selected_edge",
          "to": "set_selected_edge",
          "as": "selected_edge"
        },
        {
          "from": "state",
          "to": "pending_edges",
          "as": "state"
        },
        {
          "from": "key_event",
          "to": "pending_edges"
        },
        {
          "from": "pending_edges",
          "to": "make_edge",
          "as": "pending_edges"
        },
        {
          "from": "pending_edges",
          "to": "set_pending_edges",
          "as": "pending_edges"
        },
        {
          "from": "state",
          "to": "make_edge",
          "as": "state"
        },
        {
          "from": "q",
          "to": "show_all",
          "as": "q"
        },
        {
          "from": "i",
          "to": "show_result",
          "as": "i"
        },
        {
          "from": "confirm_edit_text",
          "to": "esc_editing",
          "as": "confirm_edit_text"
        },
        {
          "from": "esc_editing",
          "to": "editing_effects",
          "as": "escape"
        },
        {
          "from": "clear_popover",
          "to": "show_keybindings",
          "as": "clear_popover"
        },
        {
          "from": "show_popover_effect",
          "to": "show_keybindings",
          "as": "show_popover_effect"
        },
        {
          "from": "keybindings_graph",
          "to": "show_keybindings",
          "as": "keybindings"
        },
        {
          "from": "html_id",
          "to": "cancel_search",
          "as": "html_id"
        },
        {
          "from": "search_effect",
          "to": "cancel_search",
          "as": "search"
        },
        {
          "from": "blur_effect",
          "to": "cancel_search",
          "as": "blur"
        },
        {
          "from": "html_id",
          "to": "find",
          "as": "html_id"
        },
        {
          "from": "focus_effect",
          "to": "find",
          "as": "focus"
        },
        {
          "from": "search_effect",
          "to": "find",
          "as": "search"
        }
      ],
      "nodes": [
        {
          "id": "key_event",
          "ref": "arg",
          "value": "payload"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "static",
          "ref": "arg",
          "value": "state.static"
        },
        {
          "id": "randid",
          "ref": "arg",
          "value": "state.randid"
        },
        {
          "id": "arg_levels",
          "ref": "arg",
          "value": "state.levels"
        },
        {
          "id": "dimensions",
          "ref": "arg",
          "value": "state.dimensions"
        },
        {
          "id": "html_id",
          "ref": "arg",
          "value": "state.html_id"
        },
        {
          "id": "arg_display_graph",
          "ref": "arg",
          "value": "state.display_graph"
        },
        {
          "id": "arg_display_graph_nodes",
          "ref": "arg",
          "value": "state.display_graph.nodes"
        },
        {
          "id": "nodes",
          "ref": "arg",
          "value": "state.nodes"
        },
        {
          "id": "edges",
          "ref": "arg",
          "value": "state.display_graph.edges"
        },
        {
          "id": "links",
          "ref": "arg",
          "value": "state.links"
        },
        {
          "id": "editing",
          "ref": "arg",
          "value": "state.editing"
        },
        {
          "id": "search",
          "ref": "arg",
          "value": "state.search"
        },
        {
          "id": "selected",
          "ref": "arg",
          "value": "state.selected.0"
        },
        {
          "id": "arg_selected_edge",
          "ref": "arg",
          "value": "state.selected_edge"
        },
        {
          "id": "add_node_effect",
          "ref": "add_node"
        },
        {
          "id": "add_edge_effect",
          "ref": "add_edge"
        },
        {
          "id": "delete_node_effect",
          "ref": "delete_node"
        },
        {
          "id": "save_effect",
          "ref": "save_effect"
        },
        {
          "id": "show_edit_text",
          "ref": "show_edit_text"
        },
        {
          "id": "update_node",
          "ref": "update_node_action"
        },
        {
          "id": "confirm_edit_text",
          "ref": "confirm_edit_text"
        },
        {
          "id": "onselectnode_effect",
          "ref": "onselectnode_effect"
        },
        {
          "id": "update_edge",
          "ref": "update_edge_action"
        },
        {
          "id": "onselectnode_action",
          "ref": "onselectnode_action"
        },
        {
          "id": "search_effect",
          "ref": "search_effect"
        },
        {
          "id": "focus_effect",
          "ref": "focus_effect"
        },
        {
          "id": "blur_effect",
          "ref": "blur_effect"
        },
        {
          "id": "stop_propagation",
          "ref": "stop_propagation_effect"
        },
        {
          "id": "copy_effect",
          "ref": "copy_effect"
        },
        {
          "id": "paste_effect",
          "ref": "paste_node_effect"
        },
        {
          "id": "clear_popover",
          "ref": "clear_popover_graph"
        },
        {
          "id": "expand_contract_effect",
          "ref": "expand_contract_effect"
        },
        {
          "id": "run_display_graph_effector",
          "ref": "run_display_graph_effect"
        },
        {
          "id": "run_display_graph_effect",
          "ref": "array"
        },
        {
          "id": "keybindings_graph",
          "script": "return _lib.no.runtime.get_node(_graph, 'keybindings')"
        },
        {
          "id": "show_popover_effect",
          "ref": "show_popover_graph"
        },
        {
          "id": "keybindings",
          "ref": "keybindings"
        },
        {
          "id": "mode",
          "script": "return editing !== false ? 'editing' : search !== false ? 'searching' : 'graph'"
        },
        {
          "id": "mode_keybindings",
          "ref": "get"
        },
        {
          "id": "key_action_effect",
          "ref": "get"
        },
        {
          "id": "effects_map",
          "ref": "switch"
        },
        {
          "id": "actions_map",
          "ref": "switch"
        },
        {
          "id": "key",
          "script": "return ev.key?.toLowerCase()"
        },
        {
          "id": "key_inputs",
          "script": "return (ev.ctrlKey ? 'ctrl_' : '') + (ev.shiftKey ? 'shift_' : '') + (ev.key === '?' ? 'questionmark' : ev.key.toLowerCase())"
        },
        {
          "id": "selected_node",
          "ref": "find_node"
        },
        {
          "id": "edge_out",
          "script": "return edges.find(e => e.from === node_id)"
        },
        {
          "id": "el_node",
          "script": "return nodes.find(n => n.node_id === node_id)"
        },
        {
          "id": "save",
          "script": "return [[save_effect, {display_graph}]]"
        },
        {
          "id": "undo",
          "ref": "undo_action"
        },
        {
          "id": "redo",
          "ref": "redo_action"
        },
        {
          "id": "down",
          "script": "const next_node_edge = display_graph.edges.find(e => e.from === selected); return next_node_edge ? {state: {...state, selected: [next_node_edge.to]}, effects: [[stop_propagation, event], [state.panzoom_selected_effect, {...state, selected: [next_node_edge.to]}], [state.update_hyperapp]]} : {state, effects: [[stop_propagation, event]]}"
        },
        {
          "id": "up",
          "script": "const next_edges = display_graph.edges.filter(e => e.to === selected); const next_node_edge = next_edges[Math.ceil(next_edges.length / 2) - 1]; return next_node_edge ? {state: {...state, selected: [next_node_edge.from]}, effects: [[stop_propagation, event], [state.panzoom_selected_effect, {...state, selected: [next_node_edge.from]}], [state.update_hyperapp]]} : {state, effects: [[stop_propagation, event]]}"
        },
        {
          "id": "left",
          "script": "const current_node = nodes.find(n => n.node_id === selected); const siblings = levels.siblings.get(selected); const next_node = static ? nodes.find(n => n.node_id === siblings[(siblings.findIndex(s => s === selected) - 1 + siblings.length) % siblings.length]): siblings.reduce((dist, sibling) => { const sibling_node = nodes.find(n => n.node_id === sibling); if(!sibling_node){ return dist } const xdist = Math.abs(sibling_node.x - current_node.x); dist = (sibling_node.x < current_node.x) && xdist < dist[0] ? [xdist, sibling_node] : dist; return dist }, [dimensions.x])[1]; return next_node ? {state: {...state, selected: [next_node.node_id]}, effects: [[stop_propagation, event], [state.panzoom_selected_effect, {...state, selected: next_node.node_id}], [state.update_hyperapp]]} : {state, effects: [[stop_propagation, event]]}"
        },
        {
          "id": "right",
          "script": "const current_node = nodes.find(n => n.node_id === selected); const siblings = levels.siblings.get(selected); const next_node = static ? nodes.find(n => n.node_id === siblings[(siblings.findIndex(s => s === selected) + 1) % siblings.length]) : siblings.reduce((dist, sibling) => { const sibling_node = nodes.find(n => n.node_id === sibling); if(!sibling_node){ return dist } const xdist = Math.abs(sibling_node.x - current_node.x); dist = sibling_node.x > current_node.x && xdist < dist[0] ? [xdist, sibling_node] : dist; return dist }, [dimensions.x])[1]; return next_node ? {state: {...state, selected: [next_node.node_id]}, effects: [[stop_propagation, event], [state.panzoom_selected_effect, {...state, selected: next_node.node_id}], [state.update_hyperapp]]} : {state, effects: [[stop_propagation, event]]}"
        },
        {
          "id": "right_edge",
          "script": "const link = links.find(l => l.source.node_child_id === selected_edge.from + '_' + selected_edge.to); return links.filter(l => l.target.node_id === link.target.node_id).reduce(([current, dist], l) => l.source.x > link.source.x && Math.abs(l.source.x - link.source.x) < dist ? [{from: l.source.node_id, to: l.target.node_id} , Math.abs(l.source.x - link.source.x)] : [current, dist], [{to: link.target.node_id, from: link.source.node_id}, 10000])[0]"
        },
        {
          "id": "edit_value",
          "script": "return [[show_edit_text, {id, property:'value', oneditconfirm: update_node, value: selected_node.value, position: {x: node.x, y: node.y}}]]"
        },
        {
          "id": "edit_name",
          "script": "return [[show_edit_text, {id, property:'name', oneditconfirm: update_node, value: selected_node.name, position: {x: node.x, y: node.y}}]]"
        },
        {
          "id": "edit_ref",
          "script": "return [[show_edit_text, {id, property: 'ref', oneditconfirm: update_node, value: selected_node.ref, position: {x: node.x, y: node.y}}]]"
        },
        {
          "id": "edit_script",
          "script": "return [[show_edit_text, {id, property:'script', oneditconfirm: update_node, value: selected_node.script, position: {x: node.x, y: node.y}}]]"
        },
        {
          "id": "edit_edge",
          "script": "return [[show_edit_text, {id: edge, property: 'as', oneditconfirm: update_edge, value: edge.as, position: {x: node.x, y: node.y}}]]"
        },
        {
          "id": "select",
          "script": "return [[onselectnode, {node_id, event}]]"
        },
        {
          "id": "add_node",
          "script": "return [[add_node, {node: {id: randid}, select: true, child: selected}]]"
        },
        {
          "id": "delete_node",
          "script": "return [[delete_node, {id: selected}]]"
        },
        {
          "id": "copy",
          "script": "return [[copy_effect, {id}]]"
        },
        {
          "id": "paste",
          "script": "return [[paste_effect, {node_id: id, randid}]]"
        },
        {
          "id": "expand_contract",
          "script": "return [[expand_contract, {id}]]"
        },
        {
          "id": "add_arg_node",
          "script": "return [[add_node, {node: {id: randid, ref: 'arg'}, select: true, child: selected}], [show_edit_text, {id: randid, property:'value', oneditconfirm: update_node, value: ''}]]"
        },
        {
          "id": "find",
          "args": [],
          "script": "return [[search, {search: ''}], [focus, {selector: `#${html_id}-search-input`}]]"
        },
        {
          "id": "cancel_search",
          "script": "return [[search, {search: false}], [blur, {selector: `#${html_id}-search-input`}]]"
        },
        {
          "id": "e",
          "script": "return selected_edge ? null : display_graph.edges.find(e => e.to === selected);"
        },
        {
          "id": "esc_editing",
          "script": "return [[confirm_edit_text]]"
        },
        {
          "id": "show_keybindings",
          "script": "return [[show_popover_effect, {popover_graph: {...keybindings, nodes: keybindings.nodes.map(n => n.id === 'out' ? {...n, name: 'keybindings', value: [[clear_popover]]} : n)}}]]"
        },
        {
          "id": "graph_effects",
          "ref": "switch"
        },
        {
          "id": "editing_effects",
          "ref": "switch"
        },
        {
          "id": "update",
          "ref": "update_graph_display"
        },
        {
          "id": "update_effector",
          "ref": "hyperapp_action_effect"
        },
        {
          "id": "update_effect",
          "ref": "array"
        },
        {
          "id": "default_fx",
          "ref": "array"
        },
        {
          "id": "default_out"
        },
        {
          "id": "out_effects"
        },
        {
          "id": "out_action_effect",
          "ref": "default"
        },
        {
          "id": "out_pred",
          "script": "return action || effect"
        },
        {
          "id": "out",
          "ref": "if"
        }
      ],
      "out": "out",
      "id": "onkey_fn_body"
    },
    {
      "value": "simulation",
      "ref": "arg",
      "id": "simulation"
    },
    {
      "value": "nodes",
      "ref": "arg",
      "id": "arg_nodes"
    },
    {
      "value": "links",
      "ref": "arg",
      "id": "arg_links"
    },
    {
      "value": "selected",
      "ref": "arg",
      "id": "arg_selected"
    },
    {
      "value": "levels",
      "ref": "arg",
      "id": "arg_levels"
    },
    {
      "script": "return (dispatch, payload) => payload ? !(payload.simulation || payload.static) ? undefined : _lib.scripts.updateSimulationNodes(dispatch, payload) : dispatch(state => [state, [() => !(state.simulation || state.static) ? undefined : _lib.scripts.updateSimulationNodes(dispatch, state)]])",
      "id": "update_sim_effect"
    },
    {
      "id": "update_sim_in"
    },
    {
      "ref": "execute_graph",
      "id": "update_sim_fn"
    },
    {
      "ref": "wrap_effect_fn",
      "id": "_update_sim_effect"
    },
    {
      "script": "return (_, payload) => {payload.stopPropagation(); payload.preventDefault();}",
      "id": "stop_propagation_effect"
    },
    {
      "script": "return (_, payload) => document.getElementById(`${payload.html_id}`)?.dispatchEvent(new CustomEvent(payload.event, {detail: payload.detail}))",
      "id": "dispatch_custom_event_effect"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args",
          "type": "ref"
        },
        {
          "from": "state",
          "to": "set_search",
          "as": "target"
        },
        {
          "from": "search_path",
          "to": "set_search",
          "as": "path"
        },
        {
          "from": "search",
          "to": "set_search",
          "as": "value"
        },
        {
          "from": "set_search",
          "to": "result",
          "as": "state"
        },
        {
          "from": "result",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "search",
          "ref": "arg",
          "value": "payload.search"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "search_path",
          "value": "search"
        },
        {
          "id": "set_search",
          "ref": "set"
        },
        {
          "id": "result"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "out": "out",
      "id": "search_effect"
    },
    {
      "edges": [
        {
          "from": "in_obj",
          "to": "map_obj",
          "as": "obj"
        },
        {
          "from": "in_obj",
          "to": "out_node_id",
          "as": "obj"
        },
        {
          "from": "name",
          "to": "out_node",
          "as": "name"
        },
        {
          "from": "map_obj",
          "to": "out"
        },
        {
          "from": "in",
          "to": "out",
          "as": "args",
          "type": "ref"
        },
        {
          "from": "out_node_id",
          "to": "out",
          "as": "out"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "in_obj",
          "ref": "arg",
          "value": "obj"
        },
        {
          "id": "name",
          "ref": "arg",
          "value": "name"
        },
        {
          "id": "map_obj",
          "script": "return _lib.no.objToGraph(obj)"
        },
        {
          "id": "out_node_id",
          "script": "return Object.keys(obj)[0]"
        },
        {
          "id": "out"
        }
      ],
      "out": "out",
      "id": "create_object_graph"
    },
    {
      "edges": [
        {
          "from": "clear_popover",
          "to": "out_node",
          "as": "clear_popover"
        },
        {
          "from": "name",
          "to": "out_node",
          "as": "name"
        },
        {
          "from": "out_node",
          "to": "nodes",
          "as": "item"
        },
        {
          "from": "in_nodes",
          "to": "nodes",
          "as": "array"
        },
        {
          "from": "in_nodes",
          "to": "edges",
          "as": "nodes"
        },
        {
          "from": "in",
          "to": "out",
          "as": "args",
          "type": "ref"
        },
        {
          "from": "nodes",
          "to": "out",
          "as": "nodes"
        },
        {
          "from": "edges",
          "to": "out",
          "as": "edges"
        },
        {
          "from": "out_node_id",
          "to": "out",
          "as": "out"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "in_nodes",
          "ref": "arg",
          "value": "nodes"
        },
        {
          "id": "name",
          "ref": "arg",
          "value": "name"
        },
        {
          "id": "clear_popover",
          "ref": "clear_popover_graph"
        },
        {
          "id": "out_node",
          "script": "return {'id': 'out', name, value: [[clear_popover]]}"
        },
        {
          "id": "out_node_id",
          "value": "out"
        },
        {
          "id": "edges",
          "script": "return nodes.map(n => ({from: n.id, to: 'out', _needsresolve: true}))"
        },
        {
          "id": "nodes",
          "ref": "append"
        },
        {
          "id": "out"
        }
      ],
      "out": "out",
      "id": "create_popover_graph"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "payload",
          "to": "stop_propagation_effect",
          "as": "a1"
        },
        {
          "from": "display_graph",
          "to": "save_payload",
          "as": "display_graph"
        },
        {
          "from": "clear_popover",
          "to": "clear_popover_effect",
          "as": "a0"
        },
        {
          "from": "clear_popover_effect",
          "to": "save_node_effects",
          "as": "a1"
        },
        {
          "from": "save_effector",
          "to": "save_effect",
          "as": "a0"
        },
        {
          "from": "save_payload",
          "to": "save_effect",
          "as": "a1"
        },
        {
          "from": "save_effect",
          "to": "save_node_effects",
          "as": "a0"
        },
        {
          "from": "save_effector",
          "to": "save_effect",
          "as": "a0"
        },
        {
          "from": "save_payload",
          "to": "save_effect",
          "as": "a1"
        },
        {
          "from": "save_effect",
          "to": "save_node_effects",
          "as": "a0"
        },
        {
          "from": "save_node_effects",
          "to": "popover_graph_obj",
          "as": "save"
        },
        {
          "from": "save_name",
          "to": "save_node",
          "as": "name"
        },
        {
          "from": "save_id",
          "to": "save_node",
          "as": "id"
        },
        {
          "from": "save_node",
          "to": "popover_graph_actions",
          "as": "a"
        },
        {
          "from": "clear_popover_effect",
          "to": "export_node_effects",
          "as": "a1"
        },
        {
          "from": "display_graph",
          "to": "export_json_data",
          "as": "display_graph"
        },
        {
          "from": "display_graph",
          "to": "export_js_data",
          "as": "display_graph"
        },
        {
          "from": "export_effector",
          "to": "export_json_effect",
          "as": "a0"
        },
        {
          "from": "export_effector",
          "to": "export_js_effect",
          "as": "a0"
        },
        {
          "from": "export_json_payload",
          "to": "export_json_effect",
          "as": "a1"
        },
        {
          "from": "export_js_payload",
          "to": "export_js_effect",
          "as": "a1"
        },
        {
          "from": "export_json_effect",
          "to": "export_json_node_effects",
          "as": "a0"
        },
        {
          "from": "export_js_effect",
          "to": "export_js_node_effects",
          "as": "a0"
        },
        {
          "from": "clear_popover_effect",
          "to": "export_json_node_effects",
          "as": "a1"
        },
        {
          "from": "clear_popover_effect",
          "to": "export_js_node_effects",
          "as": "a1"
        },
        {
          "from": "export_json_node_effects",
          "to": "export_json_node",
          "as": "_value"
        },
        {
          "from": "export_js_node_effects",
          "to": "export_js_node",
          "as": "_value"
        },
        {
          "from": "export_json_node",
          "to": "export_node",
          "as": "json"
        },
        {
          "from": "export_js_node",
          "to": "export_node",
          "as": "js"
        },
        {
          "from": "export_node",
          "to": "popover_graph_obj",
          "as": "export"
        },
        {
          "from": "export_json_data",
          "to": "export_json_payload",
          "as": "data"
        },
        {
          "from": "export_json_ext",
          "to": "export_json_payload",
          "as": "ext"
        },
        {
          "from": "name",
          "to": "export_json_payload",
          "as": "id"
        },
        {
          "from": "name",
          "to": "export_js_payload",
          "as": "id"
        },
        {
          "from": "export_js_data",
          "to": "export_js_payload",
          "as": "data"
        },
        {
          "from": "export_js_ext",
          "to": "export_js_payload",
          "as": "ext"
        },
        {
          "from": "export_node",
          "to": "popover_graph_actions",
          "as": "c"
        },
        {
          "from": "new_graph_effector",
          "to": "new_graph_effect",
          "as": "a0"
        },
        {
          "from": "new_graph_effect",
          "to": "new_graph_node_effects",
          "as": "a0"
        },
        {
          "from": "new_graph_node_effects",
          "to": "popover_graph_obj",
          "as": "new"
        },
        {
          "from": "new_graph_name",
          "to": "new_graph_node",
          "as": "name"
        },
        {
          "from": "new_graph_id",
          "to": "new_graph_node",
          "as": "id"
        },
        {
          "from": "new_graph_node",
          "to": "popover_graph_actions",
          "as": "b"
        },
        {
          "from": "change_display_graph_id_effector",
          "to": "change_display_graph_id_effect",
          "as": "a0"
        },
        {
          "from": "change_display_graph_id",
          "to": "show_edit_text_payload",
          "as": "oneditconfirm"
        },
        {
          "from": "display_graph_path",
          "to": "show_edit_text_payload",
          "as": "id"
        },
        {
          "from": "name",
          "to": "show_edit_text_payload",
          "as": "value"
        },
        {
          "from": "id_path",
          "to": "show_edit_text_payload",
          "as": "property"
        },
        {
          "from": "show_edit_text_effector",
          "to": "show_edit_text_effect",
          "as": "a0"
        },
        {
          "from": "show_edit_text_payload",
          "to": "show_edit_text_effect",
          "as": "a1"
        },
        {
          "from": "show_edit_text_effect",
          "to": "change_display_graph_id_node_value",
          "as": "a"
        },
        {
          "from": "clear_popover_effect",
          "to": "change_display_graph_id_node_value",
          "as": "b"
        },
        {
          "from": "change_display_graph_id_node_value",
          "to": "popover_graph_obj",
          "as": "change_name"
        },
        {
          "from": "change_display_graph_id_node_id",
          "to": "change_display_graph_id_node",
          "as": "id"
        },
        {
          "from": "change_display_graph_id_node_name",
          "to": "change_display_graph_id_node",
          "as": "name"
        },
        {
          "from": "change_display_graph_id_node",
          "to": "popover_graph_actions",
          "as": "d"
        },
        {
          "from": "clear_popover_effect",
          "to": "open_obj",
          "as": "clear_popover"
        },
        {
          "from": "open_graph",
          "to": "open_obj",
          "as": "open_graph"
        },
        {
          "from": "open_obj",
          "to": "popover_graph_obj",
          "as": "open"
        },
        {
          "from": "examples",
          "to": "examples_obj",
          "as": "examples"
        },
        {
          "from": "clear_popover_effect",
          "to": "examples_obj",
          "as": "clear_popover"
        },
        {
          "from": "open_example_graph",
          "to": "examples_obj",
          "as": "open_graph"
        },
        {
          "from": "examples_obj",
          "to": "popover_graph_obj",
          "as": "examples"
        },
        {
          "from": "clear_popover_effect",
          "to": "popover_graph_obj_actions",
          "as": "a0"
        },
        {
          "from": "popover_graph_obj_actions",
          "to": "popover_graph_obj",
          "as": "_value"
        },
        {
          "from": "name",
          "to": "popover_graph",
          "as": "name"
        },
        {
          "from": "empty",
          "to": "popover_graph_parent_obj",
          "as": "target"
        },
        {
          "from": "name",
          "to": "popover_graph_parent_obj",
          "as": "path"
        },
        {
          "from": "popover_graph_obj",
          "to": "popover_graph_parent_obj",
          "as": "value"
        },
        {
          "from": "popover_graph_parent_obj",
          "to": "popover_graph",
          "as": "obj",
          "type": "resolve"
        },
        {
          "from": "popover_graph",
          "to": "show_popover_payload",
          "as": "popover_graph"
        },
        {
          "from": "show_popover_effector",
          "to": "show_popover_effect",
          "as": "a0"
        },
        {
          "from": "show_popover_payload",
          "to": "show_popover_effect",
          "as": "a1"
        },
        {
          "from": "stop_propagation_effector",
          "to": "stop_propagation_effect",
          "as": "a0"
        },
        {
          "from": "payload",
          "to": "stop_propagation_effect",
          "as": "a1"
        },
        {
          "from": "stop_propagation_effect",
          "to": "edit_effects",
          "as": "a1"
        },
        {
          "from": "html_id",
          "to": "dispatch_on_graph_click_payload",
          "as": "html_id"
        },
        {
          "from": "event_name",
          "to": "dispatch_on_graph_click_payload",
          "as": "event"
        },
        {
          "from": "dispatch_on_graph_click_effector",
          "to": "dispatch_on_graph_click_effect",
          "as": "a0"
        },
        {
          "from": "dispatch_on_graph_click_payload",
          "to": "dispatch_on_graph_click_effect",
          "as": "a1"
        },
        {
          "from": "dispatch_on_graph_click_effect",
          "to": "readonly_effects",
          "as": "a0"
        },
        {
          "from": "show_popover_effect",
          "to": "edit_effects",
          "as": "a0"
        },
        {
          "from": "edit_effects",
          "to": "effects",
          "as": "false"
        },
        {
          "from": "readonly_effects",
          "to": "effects",
          "as": "true"
        },
        {
          "from": "readonly",
          "to": "effects",
          "as": "pred"
        },
        {
          "from": "effects",
          "to": "result",
          "as": "effects"
        },
        {
          "from": "state",
          "to": "result",
          "as": "state"
        },
        {
          "from": "result",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "payload",
          "ref": "arg",
          "value": "payload"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "name",
          "ref": "arg",
          "value": "state.display_graph.id"
        },
        {
          "id": "display_graph",
          "ref": "arg",
          "value": "state.display_graph"
        },
        {
          "id": "readonly",
          "ref": "arg",
          "value": "state.readonly"
        },
        {
          "id": "html_id",
          "ref": "arg",
          "value": "state.html_id"
        },
        {
          "id": "examples",
          "ref": "arg",
          "value": "state.examples"
        },
        {
          "id": "event_name",
          "value": "graphclick"
        },
        {
          "id": "id_path",
          "value": "id"
        },
        {
          "id": "clear_popover",
          "ref": "clear_popover_graph"
        },
        {
          "id": "clear_popover_effect",
          "ref": "array"
        },
        {
          "id": "save_effector",
          "ref": "save_effect"
        },
        {
          "id": "save_payload"
        },
        {
          "id": "save_effect",
          "ref": "array"
        },
        {
          "id": "save_node_effects",
          "ref": "array"
        },
        {
          "id": "save_name",
          "value": "save"
        },
        {
          "id": "save_id",
          "value": "save"
        },
        {
          "id": "save_node"
        },
        {
          "id": "export_effector",
          "ref": "export_effect"
        },
        {
          "id": "export_json_payload"
        },
        {
          "id": "export_json_ext",
          "value": "json"
        },
        {
          "id": "export_json_effect",
          "ref": "array"
        },
        {
          "id": "export_json_node_effects",
          "ref": "array"
        },
        {
          "id": "export_json_data",
          "script": "return JSON.stringify(display_graph)"
        },
        {
          "id": "export_js_payload"
        },
        {
          "id": "export_js_ext",
          "value": "js"
        },
        {
          "id": "export_js_effect",
          "ref": "array"
        },
        {
          "id": "export_js_node_effects",
          "ref": "array"
        },
        {
          "id": "export_js_data",
          "script": "return `let graph = ${JSON.stringify(display_graph)}; import('nodysseus.bundle.js').then(({runGraph}) => runGraph(graph, 'main/out', {}))`"
        },
        {
          "id": "export_json_node"
        },
        {
          "id": "export_js_node"
        },
        {
          "id": "export_node"
        },
        {
          "id": "new_graph_effector",
          "ref": "new_graph_effect"
        },
        {
          "id": "new_graph_effect",
          "ref": "array"
        },
        {
          "id": "new_graph_name",
          "value": "new_graph"
        },
        {
          "id": "new_graph_id",
          "value": "new_graph"
        },
        {
          "id": "new_graph_node_effects",
          "ref": "array"
        },
        {
          "id": "new_graph_node"
        },
        {
          "id": "popover_graph_actions",
          "ref": "array"
        },
        {
          "id": "empty",
          "value": {}
        },
        {
          "id": "popover_graph_obj_actions",
          "ref": "array"
        },
        {
          "id": "popover_graph_obj"
        },
        {
          "id": "popover_graph_parent_obj",
          "ref": "set"
        },
        {
          "id": "popover_graph",
          "ref": "create_object_graph"
        },
        {
          "id": "show_popover_effector",
          "ref": "show_popover_graph"
        },
        {
          "id": "show_popover_effect",
          "ref": "array"
        },
        {
          "id": "show_popover_payload"
        },
        {
          "id": "display_graph_path",
          "value": "display_graph"
        },
        {
          "id": "change_display_graph_id",
          "ref": "change_display_graph_id"
        },
        {
          "id": "change_display_graph_id_node_name",
          "value": "change id"
        },
        {
          "id": "change_display_graph_id_node_id",
          "value": "change_display_graph_id_node"
        },
        {
          "id": "change_display_graph_id_node_value",
          "ref": "array"
        },
        {
          "id": "change_display_graph_id_node"
        },
        {
          "id": "show_edit_text_effector",
          "ref": "show_edit_text"
        },
        {
          "id": "show_edit_text_payload"
        },
        {
          "id": "show_edit_text_effect",
          "ref": "array"
        },
        {
          "id": "open_graph",
          "ref": "open_saved_graph_effect"
        },
        {
          "id": "open_obj",
          "script": "return Object.fromEntries(JSON.parse(localStorage.getItem('graph_list') ?? '[]').map(g => [g, [clear_popover, [open_graph, {id: g}]]]))"
        },
        {
          "id": "open_example_graph",
          "ref": "open_graph_effect"
        },
        {
          "id": "examples_obj",
          "script": "return Object.fromEntries(examples.map(e => ['example-' + e.id, [clear_popover, [open_graph, {graph: e}]]]))"
        },
        {
          "id": "stop_propagation_effector",
          "ref": "stop_propagation_effect"
        },
        {
          "id": "stop_propagation_effect",
          "ref": "array"
        },
        {
          "id": "dispatch_on_graph_click_effector",
          "ref": "dispatch_custom_event_effect"
        },
        {
          "id": "dispatch_on_graph_click_payload"
        },
        {
          "id": "dispatch_on_graph_click_effect",
          "ref": "array"
        },
        {
          "id": "edit_effects",
          "ref": "array"
        },
        {
          "id": "readonly_effects",
          "ref": "array"
        },
        {
          "id": "effects",
          "ref": "if"
        },
        {
          "id": "result"
        },
        {
          "id": "out",
          "ref": "hyperapp_action"
        }
      ],
      "id": "graph_ui_action"
    },
    {
      "edges": [
        {
          "from": "false",
          "to": "search_payload",
          "as": "search"
        },
        {
          "from": "search_payload",
          "to": "clear_search",
          "as": "a1"
        },
        {
          "from": "search_effect",
          "to": "clear_search",
          "as": "a0"
        },
        {
          "from": "clear_search",
          "to": "effects",
          "as": "a0"
        },
        {
          "from": "effects",
          "to": "result",
          "as": "effects"
        },
        {
          "from": "state",
          "to": "result",
          "as": "state"
        },
        {
          "from": "result",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "false",
          "value": false
        },
        {
          "id": "search_payload"
        },
        {
          "id": "search_effect",
          "ref": "search_effect"
        },
        {
          "id": "clear_search",
          "ref": "array"
        },
        {
          "id": "effects",
          "ref": "array"
        },
        {
          "id": "result"
        },
        {
          "id": "out",
          "ref": "hyperapp_action"
        }
      ],
      "id": "onclick_graph_action"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "node_id",
          "to": "selected_inputs",
          "as": "node_id"
        },
        {
          "from": "node_id",
          "to": "get_selected_node",
          "as": "node_id"
        },
        {
          "from": "arg_display_graph",
          "to": "get_selected_node",
          "as": "display_graph"
        },
        {
          "from": "nodes",
          "to": "get_selected_node",
          "as": "nodes"
        },
        {
          "from": "get_selected_node",
          "to": "selected_inputs",
          "as": "node"
        },
        {
          "from": "event",
          "to": "selected_inputs",
          "as": "event"
        },
        {
          "from": "node_id",
          "to": "wrapped_node_id",
          "as": "value"
        },
        {
          "from": "wrapped_node_id",
          "to": "selected",
          "as": "node_id"
        },
        {
          "from": "state",
          "to": "set_selected",
          "as": "state"
        },
        {
          "from": "node_id",
          "to": "set_selected",
          "as": "node_id"
        },
        {
          "from": "html_id",
          "to": "set_selected",
          "as": "html_id"
        },
        {
          "from": "set_selected",
          "to": "set_display_graph",
          "as": "state"
        },
        {
          "from": "display_graph",
          "to": "set_display_graph",
          "as": "display_graph"
        },
        {
          "from": "get_selected_node",
          "to": "display_graph_inputs",
          "as": "node"
        },
        {
          "from": "state",
          "to": "display_graph_inputs"
        },
        {
          "from": "event",
          "to": "display_graph_inputs",
          "as": "event"
        },
        {
          "from": "display_graph_inputs",
          "to": "display_graph",
          "as": "input"
        },
        {
          "from": "state",
          "to": "expand_contract"
        },
        {
          "from": "node_id",
          "to": "expand_contract",
          "as": "node_id"
        },
        {
          "from": "event",
          "to": "out",
          "as": "payload"
        },
        {
          "from": "show_popover_effector",
          "to": "show_popover_effect",
          "as": "arg0"
        },
        {
          "from": "event",
          "to": "stop_propagation_effect",
          "as": "a1"
        },
        {
          "from": "stop_propagation_effector",
          "to": "stop_propagation_effect",
          "as": "a0"
        },
        {
          "from": "randid",
          "to": "popover_graph_obj",
          "as": "randid"
        },
        {
          "from": "display_graph_nodes",
          "to": "popover_graph_obj",
          "as": "nodes"
        },
        {
          "from": "get_selected_node",
          "to": "popover_graph_obj",
          "as": "selected"
        },
        {
          "from": "add_node_effect",
          "to": "popover_graph_obj",
          "as": "add_node"
        },
        {
          "from": "add_edge_effect",
          "to": "popover_graph_obj",
          "as": "add_edge"
        },
        {
          "from": "delete_node_effect",
          "to": "popover_graph_obj",
          "as": "delete_node"
        },
        {
          "from": "expand_contract_effect",
          "to": "popover_graph_obj",
          "as": "expand_contract"
        },
        {
          "from": "open_reference_popover",
          "to": "popover_graph_obj",
          "as": "open_reference_popover"
        },
        {
          "from": "show_edit_text",
          "to": "popover_graph_obj",
          "as": "show_edit_text"
        },
        {
          "from": "clear_popover",
          "to": "popover_graph_obj",
          "as": "clear_popover"
        },
        {
          "from": "update_node",
          "to": "popover_graph_obj",
          "as": "update_node"
        },
        {
          "from": "update_node_effect",
          "to": "popover_graph_obj",
          "as": "update_node_effect"
        },
        {
          "from": "copy_effect",
          "to": "popover_graph_obj",
          "as": "copy_effect"
        },
        {
          "from": "paste_node_effect",
          "to": "popover_graph_obj",
          "as": "paste_node_effect"
        },
        {
          "from": "create_reference_effect",
          "to": "popover_graph_obj",
          "as": "create_reference_effect"
        },
        {
          "from": "popover_graph_obj",
          "to": "popover_graph_value",
          "as": "obj"
        },
        {
          "from": "popover_graph_value",
          "to": "show_popover_payload",
          "as": "popover_graph"
        },
        {
          "from": "show_popover_payload",
          "to": "show_popover_effect",
          "as": "arg1"
        },
        {
          "from": "show_popover_effect",
          "to": "if_show_popover",
          "as": "true"
        },
        {
          "from": "false",
          "to": "if_show_popover",
          "as": "false"
        },
        {
          "from": "node_id",
          "to": "should_show_popover",
          "as": "node_id"
        },
        {
          "from": "readonly",
          "to": "should_show_popover",
          "as": "readonly"
        },
        {
          "from": "arg_selected",
          "to": "should_show_popover",
          "as": "selected"
        },
        {
          "from": "should_show_popover",
          "to": "if_show_popover",
          "as": "pred"
        },
        {
          "from": "arg_selected",
          "to": "dispatch_custom_event_effect",
          "as": "selected"
        },
        {
          "from": "html_id",
          "to": "dispatch_custom_event_effect",
          "as": "html_id"
        },
        {
          "from": "node_id",
          "to": "dispatch_custom_event_effect",
          "as": "node_id"
        },
        {
          "from": "if_show_popover",
          "to": "effects",
          "as": "a1"
        },
        {
          "from": "stop_propagation_effect",
          "to": "effects",
          "as": "a0"
        },
        {
          "from": "dispatch_custom_event_effect",
          "to": "effects",
          "as": "a2"
        },
        {
          "from": "node_id",
          "to": "panzoom_selected_payload",
          "as": "selected"
        },
        {
          "from": "html_id",
          "to": "panzoom_selected_payload",
          "as": "html_id"
        },
        {
          "from": "dimensions",
          "to": "panzoom_selected_payload",
          "as": "dimensions"
        },
        {
          "from": "node_el_width",
          "to": "panzoom_selected_payload",
          "as": "node_el_width"
        },
        {
          "from": "links",
          "to": "panzoom_selected_payload",
          "as": "links"
        },
        {
          "from": "nodes",
          "to": "panzoom_selected_payload",
          "as": "nodes"
        },
        {
          "from": "panzoom_selected_payload",
          "to": "panzoom_selected_effect",
          "as": "a1"
        },
        {
          "from": "panzoom_selected_effector",
          "to": "panzoom_selected_effect",
          "as": "a0"
        },
        {
          "from": "panzoom_selected_effect",
          "to": "effects",
          "as": "a3"
        },
        {
          "from": "search_effect",
          "to": "clear_search",
          "as": "a0"
        },
        {
          "from": "clear_search_payload",
          "to": "clear_search",
          "as": "a1"
        },
        {
          "from": "clear_search",
          "to": "effects",
          "as": "a4"
        },
        {
          "from": "effects",
          "to": "out",
          "as": "effects",
          "type": "resolve"
        },
        {
          "from": "set_selected",
          "to": "out",
          "as": "state"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "html_id",
          "ref": "arg",
          "value": "state.html_id"
        },
        {
          "id": "event",
          "ref": "arg",
          "value": "payload.event"
        },
        {
          "id": "node_id",
          "ref": "arg",
          "value": "payload.node_id"
        },
        {
          "id": "arg_selected",
          "ref": "arg",
          "value": "state.selected"
        },
        {
          "id": "readonly",
          "ref": "arg",
          "value": "state.readonly"
        },
        {
          "id": "arg_display_graph",
          "ref": "arg",
          "value": "state.display_graph"
        },
        {
          "id": "display_graph_nodes",
          "ref": "arg",
          "value": "state.display_graph.nodes"
        },
        {
          "id": "node_el_width",
          "ref": "arg",
          "value": "state.node_el_width"
        },
        {
          "id": "dimensions",
          "ref": "arg",
          "value": "state.dimensions"
        },
        {
          "id": "nodes",
          "ref": "arg",
          "value": "state.nodes"
        },
        {
          "id": "links",
          "ref": "arg",
          "value": "state.links"
        },
        {
          "id": "wrapped_node_id",
          "ref": "wrap_array"
        },
        {
          "id": "get_selected_node",
          "script": "return Object.assign({}, nodes.find(n => n.node_id === node_id), display_graph.nodes.find(n => n.id === node_id))"
        },
        {
          "id": "set_selected",
          "args": ["selected", "state"],
          "script": "return {...state, selected: [node_id]}"
        },
        {
          "id": "display_graph_inputs",
          "script": "return event.ty === 'down' && node.node_id === selected[0] ? 'expand_contract' : undefined"
        },
        {
          "id": "display_graph",
          "ref": "switch"
        },
        {
          "id": "set_display_graph",
          "args": ["display_graph", "state"],
          "script": "state.display_graph = display_graph ?? state.display_graph; return state"
        },
        {
          "id": "false",
          "value": false
        },
        {
          "id": "should_show_popover",
          "script": "return !readonly && node_id === selected[0]"
        },
        {
          "id": "randid",
          "ref": "arg",
          "value": "state.randid"
        },
        {
          "id": "add_node_effect",
          "ref": "add_node"
        },
        {
          "id": "add_edge_effect",
          "ref": "add_edge"
        },
        {
          "id": "paste_node_effect",
          "ref": "paste_node_effect"
        },
        {
          "id": "copy_effect",
          "ref": "copy_effect"
        },
        {
          "id": "delete_node_effect",
          "ref": "delete_node"
        },
        {
          "id": "expand_contract_effect",
          "ref": "expand_contract_effect"
        },
        {
          "id": "open_reference_popover",
          "ref": "open_reference_popover"
        },
        {
          "id": "show_edit_text",
          "ref": "show_edit_text"
        },
        {
          "id": "clear_popover",
          "ref": "clear_popover_graph"
        },
        {
          "id": "update_node",
          "ref": "update_node_action"
        },
        {
          "id": "update_node_effect",
          "ref": "update_node"
        },
        {
          "id": "create_reference_effect",
          "ref": "create_reference_effect"
        },
        {
          "id": "popover_graph_obj",
          "script": "return {[selected.node_id]: {_value: [[clear_popover]], inputs: {create_input: [[add_node, {node: {id: randid}, select: true, child: selected.node_id}], [clear_popover]], arg: [[add_node, {node: {id: randid, ref: 'arg'}, select: true, child: selected.node_id}], [show_edit_text, {id: randid, property:'value', oneditconfirm: update_node, value: ''}], [clear_popover]]}, structure: {delete: [[delete_node, {id: selected.node_id}], [clear_popover]], expand_contract: [[expand_contract, {id: selected.node_id}], [clear_popover]]}, change: {name: [[show_edit_text, {id: selected.node_id, property:'name', position: {x: selected.x, y: selected.y}, oneditconfirm: update_node, value: selected.name}], [clear_popover]], value: [[show_edit_text, {id: selected.node_id, property:'value', position: {x: selected.x, y: selected.y}, oneditconfirm: update_node, value: selected.value}], [clear_popover]], script: [[show_edit_text, {id: selected.node_id, property:'script', position: {x: selected.x, y: selected.y}, oneditconfirm: update_node, value: selected.script}], [clear_popover]]}, clipboard: {copy: [[copy_effect, {id: selected.node_id}], [clear_popover]], paste: [[paste_node_effect, {randid, node_id: selected.node_id}], [clear_popover]]}, reference: {create: [[create_reference_effect, {id: selected.node_id}], [clear_popover]], clear: [[update_node_effect, {id: selected.node_id, properties: {ref: undefined}}], [clear_popover]], copy: [[update_node_effect, {id: selected.node_id, properties: {...nodes.find(n => n.id === selected.ref), id: selected.node_id, ref: undefined}}], [clear_popover]], change: [[show_edit_text, {id: selected.node_id, property: 'ref', position: {x: selected.x, y: selected.y}, oneditconfirm: update_node, value: selected.ref}], [clear_popover]]}}}"
        },
        {
          "id": "popover_graph_value",
          "ref": "create_object_graph"
        },
        {
          "id": "dispatch_custom_event_effect",
          "script": "return [(_, payload) => document.getElementById(`${html_id}`).dispatchEvent(new CustomEvent(`selectnode`, {detail: {node: node_id}}))]"
        },
        {
          "id": "show_popover_payload"
        },
        {
          "id": "show_popover_effector",
          "ref": "show_popover_graph"
        },
        {
          "id": "show_popover_effect",
          "ref": "array"
        },
        {
          "id": "stop_propagation_effector",
          "ref": "stop_propagation_effect"
        },
        {
          "id": "stop_propagation_effect",
          "ref": "array"
        },
        {
          "id": "panzoom_selected_effector",
          "ref": "arg",
          "value": "state.panzoom_selected_effect"
        },
        {
          "id": "panzoom_selected_effect",
          "ref": "array"
        },
        {
          "id": "panzoom_selected_payload"
        },
        {
          "id": "clear_search_payload",
          "value": {
            "search": false
          }
        },
        {
          "id": "search_effect",
          "ref": "search_effect"
        },
        {
          "id": "clear_search",
          "ref": "array"
        },
        {
          "id": "if_show_popover",
          "ref": "if"
        },
        {
          "id": "effects",
          "ref": "array"
        },
        {
          "id": "out",
          "ref": "update_graph_display"
        }
      ],
      "id": "onselectnode"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "type": "ref",
          "as": "args"
        },
        {
          "from": "onselectnode",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "onselectnode",
          "ref": "onselectnode"
        },
        {
          "id": "out",
          "ref": "hyperapp_action_effect"
        }
      ],
      "id": "onselectnode_effect"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "type": "ref",
          "as": "args"
        },
        {
          "from": "onselectnode",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "onselectnode",
          "ref": "onselectnode"
        },
        {
          "id": "out",
          "ref": "hyperapp_action"
        }
      ],
      "id": "onselectnode_action"
    },
    {
      "edges": [
        {
          "from": "type_popover_actions",
          "to": "type_popover",
          "as": "obj"
        },
        {
          "from": "type_popover_name",
          "to": "type_popover",
          "as": "name"
        },
        {
          "from": "edge",
          "to": "type_popover_actions",
          "as": "edge"
        },
        {
          "from": "clear_popover_type",
          "to": "type_popover_actions",
          "as": "clear_popover"
        },
        {
          "from": "update_edge",
          "to": "type_popover_actions",
          "as": "update_edge"
        },
        {
          "from": "update_edge_action",
          "to": "popover_graph_actions",
          "as": "update_edge"
        },
        {
          "from": "type_popover",
          "to": "popover_graph_actions",
          "as": "type_popover"
        },
        {
          "from": "edge",
          "to": "clear_popover",
          "as": "edge"
        },
        {
          "from": "edge",
          "to": "to_name",
          "as": "edge"
        },
        {
          "from": "display_graph_nodes",
          "to": "to_name",
          "as": "nodes"
        },
        {
          "from": "to_name",
          "to": "popover_graph_actions",
          "as": "to_name"
        },
        {
          "from": "clear_popover",
          "to": "popover_graph_actions",
          "as": "clear_popover"
        },
        {
          "from": "insert_node",
          "to": "popover_graph_actions",
          "as": "insert_node"
        },
        {
          "from": "edge",
          "to": "popover_graph_actions",
          "as": "edge"
        },
        {
          "from": "randid",
          "to": "popover_graph_actions",
          "as": "randid"
        },
        {
          "from": "show_edit_text",
          "to": "popover_graph_actions",
          "as": "show_edit_text"
        },
        {
          "from": "update_sim",
          "to": "popover_graph_actions",
          "as": "update_sim"
        },
        {
          "from": "show_popover_graph_effector",
          "to": "popover_graph_actions",
          "as": "show_popover_graph"
        },
        {
          "from": "popover_graph_actions",
          "to": "popover_graph",
          "as": "obj"
        },
        {
          "from": "popover_graph_name",
          "to": "popover_graph",
          "as": "name"
        },
        {
          "from": "popover_graph",
          "to": "show_popover_graph_payload",
          "as": "popover_graph"
        },
        {
          "from": "show_popover_graph_effector",
          "to": "show_popover_graph",
          "as": "a0"
        },
        {
          "from": "show_popover_graph_payload",
          "to": "show_popover_graph",
          "as": "a1"
        },
        {
          "from": "show_popover_graph",
          "to": "effects",
          "as": "a0"
        },
        {
          "from": "effects",
          "to": "result",
          "as": "effects"
        },
        {
          "from": "state",
          "to": "result",
          "as": "state"
        },
        {
          "from": "result",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "edge",
          "ref": "arg",
          "value": "state.edit_id"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "randid",
          "ref": "arg",
          "value": "state.randid"
        },
        {
          "id": "display_graph_nodes",
          "ref": "arg",
          "value": "state.display_graph.nodes"
        },
        {
          "id": "clear_popover",
          "ref": "clear_popover_graph"
        },
        {
          "id": "clear_popover_type",
          "ref": "clear_popover_graph"
        },
        {
          "id": "update_edge",
          "ref": "update_edge"
        },
        {
          "id": "update_edge_action",
          "ref": "update_edge_action"
        },
        {
          "id": "show_edit_text",
          "ref": "show_edit_text"
        },
        {
          "id": "insert_node",
          "ref": "insert_node"
        },
        {
          "id": "update_sim",
          "ref": "arg",
          "value": "update_sim_effect"
        },
        {
          "id": "type_popover_actions",
          "script": "return {change_type: {_value: [[clear_popover]], ref: [[update_edge, {id: edge, properties: {type: 'ref'}}], [clear_popover]], none: [[update_edge, {id: edge, properties: {type: undefined}}], [clear_popover]], resolve: [[update_edge, {id: edge, properties: {type: 'resolve'}}], [clear_popover]]}}"
        },
        {
          "id": "type_popover",
          "ref": "create_object_graph"
        },
        {
          "id": "type_popover_name",
          "value": "change_type"
        },
        {
          "id": "to_name",
          "script": "return nodes.find(n => n.id === edge.to).name"
        },
        {
          "id": "popover_graph_actions",
          "script": "return {edit_edge: {_value: [[clear_popover]], 'change_type': [[show_popover_graph, {popover_graph: type_popover}]],'change_as': [[show_edit_text, {id: edge, property: 'as', value: edge.as, oneditconfirm: update_edge}], [clear_popover]], 'insert': {node: [[insert_node, {node: {id: randid}, edge, in_node: false}], [clear_popover]], in_node: [[insert_node, {node: {id:  randid, name: (to_name ?? edge.to) + '/in'}, edge, in_node: true}], [clear_popover]]}}}"
        },
        {
          "id": "popover_graph_name",
          "value": "change edge"
        },
        {
          "id": "popover_graph",
          "ref": "create_object_graph"
        },
        {
          "id": "show_popover_graph_payload"
        },
        {
          "id": "show_popover_graph_effector",
          "ref": "show_popover_graph"
        },
        {
          "id": "show_popover_graph",
          "ref": "array"
        },
        {
          "id": "effects",
          "ref": "array"
        },
        {
          "id": "result"
        },
        {
          "id": "out",
          "ref": "hyperapp_action"
        }
      ],
      "id": "open_edge_popover"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "out",
          "as": "args"
        },
        {
          "from": "edge",
          "to": "edit_text_position",
          "as": "edge"
        },
        {
          "from": "links",
          "to": "edit_text_position",
          "as": "links"
        },
        {
          "from": "edit_text_position",
          "to": "edit_edge_as_payload",
          "as": "position"
        },
        {
          "from": "as_path",
          "to": "edit_edge_as_payload",
          "as": "property"
        },
        {
          "from": "update_edge_action",
          "to": "edit_edge_as_payload",
          "as": "oneditconfirm"
        },
        {
          "from": "edge",
          "to": "edit_edge_as_payload",
          "as": "id"
        },
        {
          "from": "edge_as",
          "to": "edit_edge_as_payload",
          "as": "value"
        },
        {
          "from": "open_edge_popover",
          "to": "edit_edge_as_payload",
          "as": "oneditmore"
        },
        {
          "from": "edit_edge_as_payload",
          "to": "edit_edge_as",
          "as": "a1"
        },
        {
          "from": "show_edit_text",
          "to": "edit_edge_as",
          "as": "a0"
        },
        {
          "from": "edit_edge_as",
          "to": "editable_effects",
          "as": "a0"
        },
        {
          "from": "event",
          "to": "stop_propagation_payload",
          "as": "event"
        },
        {
          "from": "stop_propagation_effector",
          "to": "stop_propagation",
          "as": "a0"
        },
        {
          "from": "event",
          "to": "stop_propagation",
          "as": "a1"
        },
        {
          "from": "stop_propagation",
          "to": "editable_effects",
          "as": "a1"
        },
        {
          "from": "editable_effects",
          "to": "effects",
          "as": "false"
        },
        {
          "from": "readonly_effects",
          "to": "effects",
          "as": "true"
        },
        {
          "from": "readonly",
          "to": "effects",
          "as": "pred"
        },
        {
          "from": "state",
          "to": "result",
          "as": "state"
        },
        {
          "from": "effects",
          "to": "result",
          "as": "effects"
        },
        {
          "from": "result",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "edge",
          "ref": "arg",
          "value": "payload.edge"
        },
        {
          "id": "edge_as",
          "ref": "arg",
          "value": "payload.edge.as"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "readonly",
          "ref": "arg",
          "value": "state.readonly"
        },
        {
          "id": "links",
          "ref": "arg",
          "value": "state.links"
        },
        {
          "id": "event",
          "ref": "arg",
          "value": "payload.event"
        },
        {
          "id": "as_path",
          "value": "as"
        },
        {
          "id": "update_edge_action",
          "ref": "update_edge_action"
        },
        {
          "id": "show_edit_text",
          "ref": "show_edit_text"
        },
        {
          "id": "edit_text_position",
          "script": "return links.filter(l => l.source.node_id === edge.from && l.target.node_id === edge.to).map(l => ({x: (l.source.x + l.target.x) * 0.5, y: (l.source.y + l.target.y) * 0.5}))[0]"
        },
        {
          "id": "open_edge_popover",
          "ref": "open_edge_popover"
        },
        {
          "id": "edit_edge_as_payload"
        },
        {
          "id": "edit_edge_as",
          "ref": "array"
        },
        {
          "id": "stop_propagation_effector",
          "ref": "stop_propagation_effect"
        },
        {
          "id": "stop_propagation",
          "ref": "array"
        },
        {
          "id": "editable_effects",
          "ref": "array"
        },
        {
          "id": "readonly_effects",
          "ref": "array"
        },
        {
          "id": "effects",
          "ref": "if"
        },
        {
          "id": "result"
        },
        {
          "id": "out",
          "ref": "hyperapp_action"
        }
      ],
      "out": "out",
      "id": "onclick_edge"
    },
    {
      "value": "div",
      "id": "editor_dom_type"
    },
    {
      "value": {
        "key": "editor"
      },
      "id": "editor_props"
    },
    {
      "value": {
        "x": 400,
        "y": 800
      },
      "id": "popover_dimensions"
    },
    {
      "value": "html_id",
      "ref": "arg",
      "id": "html_id"
    },
    {
      "script": "return (dispatch, payload) => requestAnimationFrame(() => {payload = _lib.no.resolve(payload); if(payload.popover_dispatch) { payload.popover_dispatch(s => [{...s, display_graph: payload.display_graph, selected: [payload.display_graph.out]}, [s.update_sim_effect, {...s, display_graph: payload.display_graph}], [s.update_hyperapp] ]) } else { const popover_dispatch = _lib.no.executeGraphNode({graph: payload.graph, lib: _lib})('initialize_hyperapp_app')({graph: payload.graph, display_graph: payload.display_graph, html_id: `${payload.html_id}-popover`, dimensions: payload.dimensions, readonly: true, hide_types: true, static: true, hash: ''}).dispatch; dispatch(s => ({...s, popover_dispatch}));}})",
      "id": "render_popover_graph_effect"
    },
    {
      "edges": [
        {
          "from": "in",
          "to": "new_state",
          "as": "args"
        },
        {
          "from": "state",
          "to": "new_state",
          "as": "state"
        },
        {
          "from": "selected",
          "to": "effects",
          "as": "selected"
        },
        {
          "from": "popover_graph",
          "to": "effects",
          "as": "popover_graph"
        },
        {
          "from": "clear_popover_effect",
          "to": "effects",
          "as": "clear_popover"
        },
        {
          "from": "randid",
          "to": "effects",
          "as": "randid"
        },
        {
          "from": "payload",
          "to": "effects",
          "as": "payload"
        },
        {
          "from": "effects",
          "to": "new_state",
          "as": "effects"
        },
        {
          "from": "new_state",
          "to": "out",
          "as": "fn",
          "type": "ref"
        }
      ],
      "nodes": [
        {
          "id": "in"
        },
        {
          "id": "state",
          "ref": "arg",
          "value": "state"
        },
        {
          "id": "randid",
          "ref": "arg",
          "value": "state.randid"
        },
        {
          "id": "selected",
          "ref": "arg",
          "value": "state.selected"
        },
        {
          "id": "popover_graph",
          "ref": "arg",
          "value": "state.popover_graph"
        },
        {
          "id": "payload",
          "ref": "arg",
          "value": "payload"
        },
        {
          "id": "clear_popover_effect",
          "ref": "clear_popover_graph"
        },
        {
          "id": "effects",
          "script": "return popover_graph.nodes.find(n => n.id === payload.detail.node).value"
        },
        {
          "id": "new_state"
        },
        {
          "id": "out",
          "ref": "hyperapp_action"
        }
      ],
      "out": "out",
      "id": "handle_popover_event"
    },
    {
      "edges": [
        {
          "from": "graph",
          "to": "wrapper",
          "as": "graph"
        },
        {
          "from": "graph",
          "to": "out_input",
          "as": "graph"
        },
        {
          "from": "display_graph",
          "to": "out_input",
          "as": "display_graph"
        },
        {
          "from": "error",
          "to": "error_display",
          "as": "error"
        },
        {
          "from": "html_id",
          "to": "error_display",
          "as": "html_id"
        },
        {
          "from": "error",
          "to": "wrapper_children",
          "as": "error"
        },
        {
          "from": "search",
          "to": "wrapper_children",
          "as": "search"
        },
        {
          "from": "error_display",
          "to": "wrapper_children",
          "as": "error_display"
        },
        {
          "from": "readonly",
          "to": "wrapper_children",
          "as": "readonly"
        },
        {
          "from": "show_result",
          "to": "wrapper_children",
          "as": "show_result"
        },
        {
          "from": "editing",
          "to": "wrapper_children",
          "as": "editing"
        },
        {
          "from": "popover_graph",
          "to": "wrapper_children",
          "as": "popover_graph"
        },
        {
          "from": "args_display",
          "to": "wrapper_children",
          "as": "args_display"
        },
        {
          "from": "readonly",
          "to": "node_editor",
          "as": "readonly"
        },
        {
          "from": "graph",
          "to": "node_editor",
          "as": "graph"
        },
        {
          "from": "node_editor",
          "to": "wrapper_children",
          "as": "node_editor"
        },
        {
          "from": "edit_text",
          "to": "wrapper_children",
          "as": "edit_text"
        },
        {
          "from": "menu",
          "to": "wrapper_children",
          "as": "menu"
        },
        {
          "from": "result_display",
          "to": "result_wrapper",
          "as": "run"
        },
        {
          "from": "result_display",
          "to": "wrapper_children",
          "as": "result_display"
        },
        {
          "from": "show_all",
          "to": "wrapper_children",
          "as": "show_all"
        },
        {
          "from": "styles",
          "to": "wrapper_children",
          "as": "styles"
        },
        {
          "from": "popover_graph_h",
          "to": "popover_graph_h_wrapper",
          "as": "el"
        },
        {
          "from": "popover_graph_h_wrapper",
          "to": "wrapper_children",
          "as": "popover_graph_h"
        },
        {
          "from": "wrapper_children",
          "to": "wrapper",
          "as": "children",
          "type": "resolve"
        },
        {
          "from": "wrapper_dom_type",
          "to": "wrapper",
          "as": "dom_type"
        },
        {
          "from": "wrapper_props",
          "to": "wrapper",
          "as": "props",
          "type": "resolve"
        },
        {
          "from": "out_input",
          "to": "out",
          "as": "input"
        },
        {
          "from": "noop",
          "to": "out",
          "as": "noop",
          "type": "resolve"
        },
        {
          "from": "wrapper",
          "to": "out",
          "as": "hel"
        }
      ],
      "nodes": [
        {
          "id": "wrapper",
          "ref": "run_h"
        },
        {
          "id": "graph",
          "ref": "arg",
          "value": "graph"
        },
        {
          "id": "display_graph",
          "ref": "arg",
          "value": "display_graph"
        },
        {
          "id": "show_result",
          "ref": "arg",
          "value": "show_result"
        },
        {
          "id": "show_all",
          "ref": "arg",
          "value": "show_all"
        },
        {
          "id": "html_id",
          "ref": "arg",
          "value": "html_id"
        },
        {
          "id": "result_display",
          "ref": "arg",
          "value": "display"
        },
        {
          "id": "editing",
          "ref": "arg",
          "value": "editing"
        },
        {
          "id": "args_display",
          "ref": "arg",
          "value": "args_display"
        },
        {
          "id": "popover_graph",
          "ref": "arg",
          "value": "popover_graph"
        },
        {
          "id": "readonly",
          "ref": "arg",
          "value": "readonly"
        },
        {
          "id": "error",
          "ref": "arg",
          "value": "error"
        },
        {
          "id": "search",
          "ref": "arg",
          "value": "search"
        },
        {
          "id": "result_wrapper",
          "ref": "run_h"
        },
        {
          "id": "wrapper_dom_type",
          "value": "div"
        },
        {
          "id": "wrapper_props",
          "value": {}
        },
        {
          "id": "wrapper_children",
          "script": "return [styles.el, node_editor.el, !readonly && editing !== false && edit_text.el, !readonly && popover_graph && popover_graph_h.el.el, !!result_display && result_display.el, !editing && !show_all && args_display && args_display.el, !!error && error_display.el, menu.el].filter(e => e)"
        },
        {
          "id": "styles",
          "nodes": [
            {
              "id": "in"
            },
            {
              "id": "style_content",
              "value": "#node-editor { position: relative; width: 100%; height: 100vh; color: white; font-family: consolas; overflow: hidden; } #node-editor-editor.hash-view { background-color: unset; } svg { user-select: none; } .graph-ui { display: flex; position: absolute; right: 100px; top: 100px; flex-direction: row; gap: 8px; } .graph-ui ion-icon { cursor: pointer; width: 1.5em; height: 1.5em; color: #ccc; } .graph-ui ion-icon:hover { color: #fff; } .edit-value { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: #00000011; } .edit-value .more { cursor: pointer; } .edit-value .centering { position: absolute; width: 32vw; display: flex; flex-direction: column; } .edit-value.none { left: -1000%; } .edit-value textarea { width: 32vw; font-size: (1em + 1vh); outline: none; resize: none; } .edit-value label { font-size: calc(1em + 2vh) } .edit-value textarea { height: 64em; } .edit-value.ref input { position:relative; left: 0; } .edit-value .input { width: 256px; } .search-input.hidden { left: -1000px; } #arrow polyline { stroke: #fff; stroke-width: 2; fill: none } .node { cursor: pointer; } .node.hover { opacity: 1 !important; } .node .fill { opacity: 0; } .node .shape { animation_: 2s blink infinite; fill: #66ccff; } .node.hover .shape { stroke-width: 2; stroke: #3fc } .node.selected .shape { fill: #fcc; } .node .shape.script { transform-box: fill-box; transform-origin: 50% 50%; transform: rotate(45deg); fill: none; stroke-width: 2px; stroke: #66ccff; } .node.selected .shape.script { stroke: #fcc; } .node .shape.none { stroke-width: 2px; stroke: #66ccff; } .node .shape.error { fill: #FF0000 !important; } .node.selected .shape.none { stroke: #fcc; } .node-info { position: absolute; top: 0; left: 0; z-index: 10; border: 1px solid white; background: black; padding: .4em; max-width: 256px; color: white; display: flex; gap: .4em; flex-direction: column; } .node-info .args { display: flex; gap: 8px; flex-wrap: wrap; } .node-info .args span.clickable { cursor: pointer; text-decoration: underline dotted;  } /* result props */ .result { position: fixed; bottom: 100px; left: 100px; max-width: 33%; } .result.error { color: red; } text { user-select: none; fill: white; } .link.selected { stroke: red; } .link { stroke: #ccc; } svg.edge-info.selected rect { fill: red; } .insert-node, #dummy-add-node { cursor: pointer; stroke: #fff; stroke-width: 32; stroke-opacity: 1; } .insert-node .circle, #dummy-add-node .circle { fill-opacity: 0.5; } .node text { filter: url(#flood-background) } .node text .primary { font-weight: bold; } .node text .secondary { font-style: italic; } .node.selected text .secondary:hover { text-decoration: dashed underline; } .show-key { position: fixed; right: 100px; top: 100px; font-size: 2em;; font-family: consolas; } .edge-info { filter: url(\"#flood-background\"); padding: 4px; cursor: pointer; } .edge-info.selected { filter: url(\"#selected-flood-background\"); } .error.main { position: absolute; top: 0; left: 0; width: 25vw; color: red; padding: 1em; height: 8em; z-index: 100; } /* popover */ #node-editor-popover { position: fixed; width: 100vw; height: 100vh; z-index: 100; top: 0; left: 0; background: #000000EE; } .popover { position: absolute; z-index: 100; background: #000000EE; }"
            },
            {
              "id": "style_h_text",
              "ref": "html_text"
            },
            {
              "id": "style_dom_type",
              "value": "style"
            },
            {
              "id": "out",
              "ref": "html_element"
            }
          ],
          "edges": [
            {
              "from": "in",
              "to": "out",
              "as": "args",
              "type": "ref"
            },
            {
              "from": "style_h_text",
              "to": "out",
              "as": "children"
            },
            {
              "from": "style_content",
              "to": "style_h_text",
              "as": "text"
            },
            {
              "from": "style_dom_type",
              "to": "out",
              "as": "dom_type"
            }
          ]
        },
        {
          "id": "edit_text",
          "nodes": [
            {
              "id": "in"
            },
            {
              "id": "html_id",
              "ref": "arg",
              "value": "html_id"
            },
            {
              "id": "display_graph_nodes",
              "ref": "arg",
              "value": "display_graph.nodes"
            },
            {
              "id": "nodes",
              "ref": "arg",
              "value": "nodes"
            },
            {
              "id": "selected",
              "ref": "arg",
              "value": "selected.0"
            },
            {
              "id": "dimensions",
              "ref": "arg",
              "value": "dimensions"
            },
            {
              "id": "display_graph",
              "ref": "arg",
              "value": "display_graph"
            },
            {
              "id": "selected_edge",
              "ref": "arg",
              "value": "selected_edge"
            },
            {
              "id": "editing",
              "ref": "arg",
              "value": "editing"
            },
            {
              "id": "levels",
              "ref": "arg",
              "value": "levels"
            },
            {
              "id": "edit_value",
              "ref": "arg",
              "value": "edit_value"
            },
            {
              "id": "on_editmore_action",
              "ref": "arg",
              "value": "oneditmore"
            },
            {
              "id": "selected_node",
              "script": "return nodes.find(n => n.node_id === selected)"
            },
            {
              "id": "ref_nodes",
              "script": "return nodes.filter(n => !(n.ref || levels.level_by_node.has(n.id)) && (n.script || n.nodes))"
            },
            {
              "id": "edit_text",
              "ref": "html_element"
            },
            {
              "id": "edit_text_dom_type",
              "value": "div"
            },
            {
              "id": "edit_text_label_wrapper_children",
              "ref": "array"
            },
            {
              "id": "edit_text_label_wrapper",
              "ref": "html_element"
            },
            {
              "id": "edit_text_input",
              "ref": "html_element"
            },
            {
              "id": "edit_text_textarea",
              "ref": "html_element"
            },
            {
              "id": "confirm_edit_text",
              "ref": "confirm_edit_text"
            },
            {
              "id": "edit_position",
              "ref": "arg",
              "value": "edit_position"
            },
            {
              "id": "svg_offset",
              "ref": "arg",
              "value": "svg_offset"
            },
            {
              "id": "edit_html_position",
              "script": "return {x: Math.min(dimensions.x - 256 * 1.25, (position?.x ?? 0) * (svg_offset?.scale ?? 1) + (svg_offset?.x ?? 0)), y: Math.min(dimensions.y - 64, (position?.y ?? 0) * (svg_offset?.scale ?? 1) + (svg_offset?.y ?? 0))}"
            },
            {
              "id": "edit_text_base_props",
              "script": "return {id: `${html_id}-edit-value`, class: {'edit-value': true, [editing]: true}, onclick: (s, payload) => (payload.preventDefault(), payload.stopPropagation(), [s, [confirm_edit_text, payload]])}"
            },
            {
              "id": "edit_text_props"
            },
            {
              "id": "edit_text_edit_box",
              "ref": "switch"
            },
            {
              "id": "centering_wrapper_children",
              "script": "return [label.el, edit_box?.el, editing === 'ref' ? ref_description?.el : false, editing === 'ref' ? ref_datalist.el : false]"
            },
            {
              "id": "edit_text_textarea_dom_type",
              "args": ["editing"],
              "script": "return 'textarea'"
            },
            {
              "id": "edit_text_textarea_props",
              "script": "const start_value = edit_value ?? (!editing ? '' : (selected_edge ? display_graph.edges.find(e => e.from === selected_edge.from && e.to === selected_edge.to) : display_graph.nodes.find(n => n.id === selected))[editing]); return {id: `${html_id}-textarea`, class: {textarea: true, [editing]: true}, onclick: (s, payload) => (payload.stopPropagation(), s), onkeydown: (s, payload) => (payload.stopPropagation(), s), value: typeof(start_value) === 'string' ? start_value : JSON.stringify(start_value), onchange: (s, payload) => ({...s, edit_value: payload.target.value}), onfocus: (s, payload) => [s, [() => payload.target.setSelectionRange(0, payload.target.value.length)]] }"
            },
            {
              "id": "edit_text_input_dom_type",
              "args": ["editing"],
              "script": "return 'input'"
            },
            {
              "id": "edit_text_input_props",
              "script": "const start_value = edit_value ?? (!editing ? '' : (selected_edge ? display_graph.edges.find(e => e.from === selected_edge.from && e.to === selected_edge.to) : display_graph.nodes.find(n => n.id === selected))[editing]); return Object.assign({id: `${html_id}-edit-text`, class: {input: true, [editing]: true}, value: typeof(start_value) === 'string' ? start_value : JSON.stringify(start_value), onclick: (s, payload) => (payload.stopPropagation(), s), onkeydown: (s, payload) => (payload.stopPropagation(), payload.key === 'Enter' ? [{...s, edit_value: payload.target.value}, [confirm_edit_text, payload]] : [s]), onchange: (s, payload) => ({...s, edit_value: payload.target.value}), onfocus: (s, payload) => [s, [() => payload.target.setSelectionRange(0, payload.target.value.length)]]}, editing === 'ref' ? {list: 'node-options', type: 'text'} : {})"
            },
            {
              "id": "edit_text_label",
              "ref": "html_element"
            },
            {
              "id": "edit_text_label_dom_type",
              "value": "label"
            },
            {
              "id": "edit_text_label_props",
              "script": "return {for: `${html_id}-edit-text`}"
            },
            {
              "id": "edit_text_label_text",
              "ref": "html_text"
            },
            {
              "id": "edit_text_more_props",
              "script": "return {onclick: on_editmore_action, class: {more: true, hydrated: true, md: true}}"
            },
            {
              "id": "edit_text_more_icon",
              "value": "ellipsis-vertical-outline"
            },
            {
              "id": "edit_text_more",
              "ref": "icon"
            },
            {
              "id": "editing_path",
              "value": "editing"
            },
            {
              "id": "editing",
              "ref": "arg",
              "value": "editing"
            },
            {
              "id": "ref_description",
              "out": "out",
              "nodes": [
                {
                  "id": "node_id",
                  "ref": "arg",
                  "value": "node_id"
                },
                {
                  "id": "nodes",
                  "ref": "arg",
                  "value": "nodes"
                },
                {
                  "id": "node_description",
                  "ref": "node_description"
                },
                {
                  "id": "description_text",
                  "ref": "html_text"
                },
                {
                  "id": "out",
                  "ref": "html_element"
                }
              ],
              "edges": [
                {
                  "from": "node_id",
                  "to": "node_description",
                  "as": "node_id"
                },
                {
                  "from": "nodes",
                  "to": "node_description",
                  "as": "nodes"
                },
                {
                  "from": "node_description",
                  "to": "description_text",
                  "as": "text"
                },
                {
                  "from": "description_text",
                  "to": "out",
                  "as": "children"
                }
              ]
            },
            {
              "id": "ref_datalist",
              "name": "ref_datalist",
              "out": "xtr0qj6",
              "nodes": [
                {
                  "id": "xtr0qj6",
                  "ref": "html_element",
                  "name": "ref_datalist"
                },
                {
                  "id": "0msbgbm",
                  "ref": "map"
                },
                {
                  "id": "buav28h",
                  "value": "datalist"
                },
                {
                  "id": "ql1hqrf"
                },
                {
                  "id": "jppiihp/jppiihp",
                  "ref": "html_element"
                },
                {
                  "id": "h2altl0",
                  "ref": "arg",
                  "value": "ref_nodes"
                },
                {
                  "id": "jgaye79",
                  "value": "node-options"
                },
                {
                  "id": "tk685lj"
                },
                {
                  "id": "2xycz42",
                  "value": "option"
                },
                {
                  "id": "8v5dk5c",
                  "ref": "html_text"
                },
                {
                  "id": "jppiihp/ci554ww",
                  "ref": "arg",
                  "value": "element.id"
                },
                {
                  "id": "n5dpir5",
                  "ref": "default"
                },
                {
                  "id": "9q28w9y",
                  "ref": "arg",
                  "value": "element.name"
                },
                {
                  "id": "6s0wcu9",
                  "ref": "arg",
                  "value": "element.id"
                }
              ],
              "edges": [
                {
                  "from": "0msbgbm",
                  "to": "xtr0qj6",
                  "as": "children"
                },
                {
                  "from": "buav28h",
                  "to": "xtr0qj6",
                  "as": "dom_type"
                },
                {
                  "from": "ql1hqrf",
                  "to": "xtr0qj6",
                  "as": "props"
                },
                {
                  "from": "jppiihp/jppiihp",
                  "to": "0msbgbm",
                  "as": "fn",
                  "type": "ref"
                },
                {
                  "from": "h2altl0",
                  "to": "0msbgbm",
                  "as": "array"
                },
                {
                  "from": "jgaye79",
                  "to": "ql1hqrf",
                  "as": "id"
                },
                {
                  "from": "tk685lj",
                  "to": "jppiihp/jppiihp",
                  "as": "props"
                },
                {
                  "from": "2xycz42",
                  "to": "jppiihp/jppiihp",
                  "as": "dom_type"
                },
                {
                  "from": "8v5dk5c",
                  "to": "jppiihp/jppiihp",
                  "as": "children"
                },
                {
                  "from": "jppiihp/ci554ww",
                  "to": "tk685lj",
                  "as": "value"
                },
                {
                  "from": "n5dpir5",
                  "to": "8v5dk5c",
                  "as": "text"
                },
                {
                  "from": "9q28w9y",
                  "to": "n5dpir5",
                  "as": "value"
                },
                {
                  "from": "6s0wcu9",
                  "to": "n5dpir5",
                  "as": "otherwise"
                }
              ]
            },
            {
              "id": "get_nodes",
              "ref": "arg",
              "value": "display_graph.nodes"
            },
            {
              "id": "get_id",
              "script": "return node.id"
            },
            {
              "id": "centering_wrapper_dom_type",
              "value": "div"
            },
            {
              "id": "centering_wrapper_props",
              "script": "return {class: {centering: true}, style: {left: `${position.x}px`, top: `${position.y}px`} }"
            },
            {
              "id": "centering_wrapper",
              "ref": "html_element"
            },
            {
              "id": "edit_text_children",
              "ref": "array"
            },
            {
              "id": "edit_text_el_wrapper",
              "script": "return et.el"
            },
            {
              "id": "out"
            }
          ],
          "edges": [
            {
              "from": "selected",
              "to": "edit_text_textarea_props",
              "as": "selected"
            },
            {
              "from": "selected_edge",
              "to": "edit_text_textarea_props",
              "as": "selected_edge"
            },
            {
              "from": "display_graph",
              "to": "edit_text_textarea_props",
              "as": "display_graph"
            },
            {
              "from": "edit_value",
              "to": "edit_text_textarea_props",
              "as": "edit_value"
            },
            {
              "from": "editing",
              "to": "edit_text_textarea_props",
              "as": "editing"
            },
            {
              "from": "selected",
              "to": "edit_text_textarea_props",
              "as": "selected"
            },
            {
              "from": "selected_edge",
              "to": "edit_text_input_props",
              "as": "selected_edge"
            },
            {
              "from": "display_graph",
              "to": "edit_text_input_props",
              "as": "display_graph"
            },
            {
              "from": "edit_value",
              "to": "edit_text_input_props",
              "as": "edit_value"
            },
            {
              "from": "editing",
              "to": "edit_text_input_props",
              "as": "editing"
            },
            {
              "from": "selected",
              "to": "edit_text_input_props",
              "as": "selected"
            },
            {
              "from": "selected",
              "to": "selected_node",
              "as": "selected"
            },
            {
              "from": "nodes",
              "to": "selected_node",
              "as": "nodes"
            },
            {
              "from": "selected_node",
              "to": "centering_wrapper_props",
              "as": "node"
            },
            {
              "from": "edit_text",
              "to": "edit_text_el_wrapper",
              "as": "et"
            },
            {
              "from": "editing",
              "to": "edit_text_edit_box",
              "as": "input"
            },
            {
              "from": "editing",
              "to": "centering_wrapper_children",
              "as": "editing"
            },
            {
              "from": "edit_text_el_wrapper",
              "to": "out",
              "as": "el"
            },
            {
              "from": "edit_text_dom_type",
              "to": "edit_text",
              "as": "dom_type"
            },
            {
              "from": "html_id",
              "to": "edit_text_base_props",
              "as": "html_id"
            },
            {
              "from": "edit_text_base_props",
              "to": "edit_text_props"
            },
            {
              "from": "edit_text_props",
              "to": "edit_text",
              "as": "props"
            },
            {
              "from": "centering_wrapper",
              "to": "edit_text",
              "as": "children"
            },
            {
              "from": "dimensions",
              "to": "edit_html_position",
              "as": "dimensions"
            },
            {
              "from": "edit_position",
              "to": "edit_html_position",
              "as": "position"
            },
            {
              "from": "svg_offset",
              "to": "edit_html_position",
              "as": "svg_offset"
            },
            {
              "from": "edit_html_position",
              "to": "centering_wrapper_props",
              "as": "position"
            },
            {
              "from": "html_id",
              "to": "edit_text_input_props",
              "as": "html_id"
            },
            {
              "from": "confirm_edit_text",
              "to": "edit_text_input_props",
              "as": "confirm_edit_text"
            },
            {
              "from": "edit_text_input_props",
              "to": "edit_text_input",
              "as": "props"
            },
            {
              "from": "edit_text_input_dom_type",
              "to": "edit_text_input",
              "as": "dom_type"
            },
            {
              "from": "edit_text_input",
              "to": "edit_text_edit_box",
              "as": "otherwise"
            },
            {
              "from": "edit_text_textarea",
              "to": "edit_text_edit_box",
              "as": "script"
            },
            {
              "from": "edit_text_edit_box",
              "to": "centering_wrapper_children",
              "as": "edit_box"
            },
            {
              "from": "levels",
              "to": "ref_nodes",
              "as": "levels"
            },
            {
              "from": "nodes",
              "to": "ref_nodes",
              "as": "nodes"
            },
            {
              "from": "display_graph_nodes",
              "to": "ref_nodes",
              "as": "nodes"
            },
            {
              "from": "ref_nodes",
              "to": "ref_datalist",
              "as": "ref_nodes"
            },
            {
              "from": "ref_datalist",
              "to": "centering_wrapper_children",
              "as": "ref_datalist"
            },
            {
              "from": "edit_value",
              "to": "ref_description",
              "as": "node_id"
            },
            {
              "from": "display_graph_nodes",
              "to": "ref_description",
              "as": "nodes"
            },
            {
              "from": "ref_description",
              "to": "centering_wrapper_children",
              "as": "ref_description"
            },
            {
              "from": "html_id",
              "to": "edit_text_textarea_props",
              "as": "html_id"
            },
            {
              "from": "edit_text_textarea_props",
              "to": "edit_text_textarea",
              "as": "props"
            },
            {
              "from": "edit_text_textarea_dom_type",
              "to": "edit_text_textarea",
              "as": "dom_type"
            },
            {
              "from": "html_id",
              "to": "edit_text_label_props",
              "as": "html_id"
            },
            {
              "from": "edit_text_more",
              "to": "edit_text_label_wrapper_children",
              "as": "a1"
            },
            {
              "from": "edit_text_label",
              "to": "edit_text_label_wrapper_children",
              "as": "a0"
            },
            {
              "from": "edit_text_label_wrapper_children",
              "to": "edit_text_label_wrapper",
              "as": "children"
            },
            {
              "from": "edit_text_label_wrapper",
              "to": "centering_wrapper_children",
              "as": "label"
            },
            {
              "from": "edit_text_label_props",
              "to": "edit_text_label",
              "as": "props"
            },
            {
              "from": "edit_text_label_dom_type",
              "to": "edit_text_label",
              "as": "dom_type"
            },
            {
              "from": "edit_text_label_text",
              "to": "edit_text_label",
              "as": "children"
            },
            {
              "from": "on_editmore_action",
              "to": "edit_text_more_props",
              "as": "on_editmore_action"
            },
            {
              "from": "edit_text_more_props",
              "to": "edit_text_more",
              "as": "props"
            },
            {
              "from": "edit_text_more_icon",
              "to": "edit_text_more",
              "as": "icon"
            },
            {
              "from": "in",
              "to": "get_nodes"
            },
            {
              "from": "get_nodes",
              "to": "get_id",
              "as": "node"
            },
            {
              "from": "get_id",
              "to": "id_text",
              "as": "text"
            },
            {
              "from": "editing",
              "to": "edit_text_label_text",
              "as": "text"
            },
            {
              "from": "editing",
              "to": "edit_text_base_props",
              "as": "editing"
            },
            {
              "from": "confirm_edit_text",
              "to": "edit_text_base_props",
              "as": "confirm_edit_text"
            },
            {
              "from": "centering_wrapper_dom_type",
              "to": "centering_wrapper",
              "as": "dom_type"
            },
            {
              "from": "centering_wrapper_props",
              "to": "centering_wrapper",
              "as": "props"
            },
            {
              "from": "centering_wrapper_children",
              "to": "centering_wrapper",
              "as": "children"
            },
            {
              "from": "centering_wrapper",
              "to": "edit_text_children",
              "as": "a0"
            },
            {
              "from": "edit_text_children",
              "to": "edit_text",
              "as": "children"
            }
          ]
        },
        {
          "id": "popover_graph_h",
          "nodes": [
            {
              "id": "html_id",
              "ref": "arg",
              "value": "html_id"
            },
            {
              "id": "update_sim",
              "ref": "arg",
              "value": "update_sim"
            },
            {
              "id": "randid",
              "ref": "arg",
              "value": "randid"
            },
            {
              "id": "handle_popover_event",
              "ref": "handle_popover_event"
            },
            {
              "id": "clear_popover",
              "ref": "clear_popover_graph"
            },
            {
              "id": "props",
              "script": "return {id: `${html_id}-popover`, class: {popover: true}, key:  `${html_id}-popover`, onselectnode: handle_popover_event, ongraphclick: (s, p) => [s]}"
            },
            {
              "id": "dom_type",
              "value": "div"
            },
            {
              "id": "out",
              "ref": "html_element"
            }
          ],
          "edges": [
            {
              "from": "update_sim",
              "to": "props",
              "as": "update_sim"
            },
            {
              "from": "handle_popover_event",
              "to": "props",
              "as": "handle_popover_event"
            },
            {
              "from": "clear_popover",
              "to": "props",
              "as": "clear_popover"
            },
            {
              "from": "props",
              "to": "out",
              "as": "props"
            },
            {
              "from": "html_id",
              "to": "props",
              "as": "html_id"
            },
            {
              "from": "dom_type",
              "to": "out",
              "as": "dom_type"
            }
          ]
        },
        {
          "id": "popover_graph_h_wrapper"
        },
        {
          "id": "menu",
          "nodes": [
            {
              "id": "readonly",
              "ref": "arg",
              "value": "readonly"
            },
            {
              "id": "false",
              "value": false
            },
            {
              "id": "search_input",
              "nodes": [
                {
                  "id": "in"
                },
                {
                  "id": "search",
                  "ref": "arg",
                  "value": "search"
                },
                {
                  "id": "is_searching",
                  "script": "return typeof search === 'string'"
                },
                {
                  "id": "search_input_dom_type",
                  "value": "input"
                },
                {
                  "id": "nodes",
                  "ref": "arg",
                  "value": "nodes"
                },
                {
                  "id": "html_id",
                  "ref": "arg",
                  "value": "html_id"
                },
                {
                  "id": "display_graph",
                  "ref": "arg",
                  "value": "display_graph"
                },
                {
                  "id": "search_input_props",
                  "script": "return {id: `${html_id}-search-input`, key: `${html_id}-search-input`, class: 'search-input', type: 'text', onkeydown: (s, payload) => { if(payload.key === 'Enter'){ const direction = payload.shiftKey ? -1 : 1; const idx = (s.search_results.length + s.search_index + direction) % s.search_results.length; return [{...s, selected: s.search_results.slice(idx, idx + 1), search_index: idx}, [s.panzoom_selected_effect, {...s, selected: s.search_results[idx]}], [s.update_hyperapp]] } else { return s;} }, oninput: (s, payload) => {const search_results = new _lib.Fuse(nodes.map(n => Object.assign({}, n, display_graph.nodes.find(d => d.id === n.node_id))), {keys: ['name', 'node_id', 'ref', 'value']}).search(payload.target.value).map(r => r.item.node_id); return [{...s, search: payload.target.value, selected: search_results.length > 0 ? search_results.slice(0, 1) : s.selected, search_results, search_index: 0}, search_results.length > 0 && [s.panzoom_selected_effect, {...s, selected: search_results[0]}], [s.update_hyperapp]]}}"
                },
                {
                  "id": "search_field",
                  "ref": "html_element"
                },
                {
                  "id": "search_effect",
                  "ref": "search_effect"
                },
                {
                  "id": "focus_effect",
                  "ref": "focus_effect"
                },
                {
                  "id": "search_icon_props",
                  "script": "return {id: `${html_id}-search-input`, key: `${html_id}-search-input-icon`, class: 'search-input search-input-icon', onclick: s => [s, [search, {search: ''}], [focus, {selector: `#${html_id}-search-input`}]]}"
                },
                {
                  "id": "search_icon_dom_type",
                  "value": "div"
                },
                {
                  "id": "search_icon_name",
                  "value": "search"
                },
                {
                  "id": "search_icon",
                  "ref": "icon"
                },
                {
                  "id": "out",
                  "ref": "if"
                }
              ],
              "edges": [
                {
                  "from": "html_id",
                  "to": "search_input_props",
                  "as": "html_id"
                },
                {
                  "from": "nodes",
                  "to": "search_input_props",
                  "as": "nodes"
                },
                {
                  "from": "display_graph",
                  "to": "search_input_props",
                  "as": "display_graph"
                },
                {
                  "from": "search",
                  "to": "is_searching",
                  "as": "search"
                },
                {
                  "from": "search_input_dom_type",
                  "to": "search_field",
                  "as": "dom_type"
                },
                {
                  "from": "search_input_props",
                  "to": "search_field",
                  "as": "props"
                },
                {
                  "from": "html_id",
                  "to": "search_icon_props",
                  "as": "html_id"
                },
                {
                  "from": "search_effect",
                  "to": "search_icon_props",
                  "as": "search"
                },
                {
                  "from": "focus_effect",
                  "to": "search_icon_props",
                  "as": "focus"
                },
                {
                  "from": "search_icon_props",
                  "to": "search_icon",
                  "as": "props"
                },
                {
                  "from": "search_icon_dom_type",
                  "to": "search_icon",
                  "as": "dom_type"
                },
                {
                  "from": "search_icon_name",
                  "to": "search_icon",
                  "as": "icon"
                },
                {
                  "from": "search_icon",
                  "to": "out",
                  "as": "false"
                },
                {
                  "from": "search_field",
                  "to": "out",
                  "as": "true"
                },
                {
                  "from": "is_searching",
                  "to": "out",
                  "as": "pred"
                }
              ]
            },
            {
              "id": "close",
              "nodes": [
                {
                  "id": "icon",
                  "value": "close"
                },
                {
                  "id": "dispatch_custom_event_effect",
                  "ref": "dispatch_custom_event_effect"
                },
                {
                  "id": "props",
                  "script": "return {onclick: (s, p) => (p.stopPropagation(), [s, [dispatch_custom, {event: 'selectnode', detail: {node: s.display_graph.out}, html_id: s.html_id}]])}"
                },
                {
                  "id": "out",
                  "ref": "icon"
                }
              ],
              "edges": [
                {
                  "from": "dispatch_custom_event_effect",
                  "to": "props",
                  "as": "dispatch_custom"
                },
                {
                  "from": "props",
                  "to": "out",
                  "as": "props"
                },
                {
                  "from": "icon",
                  "to": "out",
                  "as": "icon"
                }
              ]
            },
            {
              "id": "close_readonly",
              "ref": "if"
            },
            {
              "id": "more",
              "nodes": [
                {
                  "id": "icon",
                  "value": "ellipsis-vertical-outline"
                },
                {
                  "id": "onclick",
                  "ref": "graph_ui_action"
                },
                {
                  "id": "props",
                  "script": "return {onclick}"
                },
                {
                  "id": "out",
                  "ref": "icon"
                }
              ],
              "edges": [
                {
                  "from": "props",
                  "to": "out",
                  "as": "props"
                },
                {
                  "from": "icon",
                  "to": "out",
                  "as": "icon"
                },
                {
                  "from": "onclick",
                  "to": "props",
                  "as": "onclick"
                }
              ]
            },
            {
              "id": "more_readonly",
              "ref": "if"
            },
            {
              "id": "dom_type",
              "value": "div"
            },
            {
              "id": "children",
              "ref": "array"
            },
            {
              "id": "html_id",
              "ref": "arg",
              "value": "html_id"
            },
            {
              "id": "props",
              "script": "return {class: {'graph-ui': true}, key: `${html_id}-graph-ui`}"
            },
            {
              "id": "out",
              "ref": "html_element"
            }
          ],
          "edges": [
            {
              "from": "more",
              "to": "more_readonly",
              "as": "false"
            },
            {
              "from": "false",
              "to": "more_readonly",
              "as": "true"
            },
            {
              "from": "readonly",
              "to": "more_readonly",
              "as": "pred"
            },
            {
              "from": "more_readonly",
              "to": "children",
              "as": "a1"
            },
            {
              "from": "search_input",
              "to": "children",
              "as": "a0"
            },
            {
              "from": "readonly",
              "to": "close_readonly",
              "as": "pred"
            },
            {
              "from": "close",
              "to": "close_readonly",
              "as": "true"
            },
            {
              "from": "false",
              "to": "close_readonly",
              "as": "false"
            },
            {
              "from": "close_readonly",
              "to": "children",
              "as": "a2",
              "type": "resolve"
            },
            {
              "from": "html_id",
              "to": "props",
              "as": "html_id"
            },
            {
              "from": "children",
              "to": "out",
              "as": "children"
            },
            {
              "from": "props",
              "to": "out",
              "as": "props"
            },
            {
              "from": "dom_type",
              "to": "out",
              "as": "dom_type"
            }
          ]
        },
        {
          "id": "node_editor",
          "nodes": [
            {
              "id": "in"
            },
            {
              "id": "out",
              "ref": "html_element"
            },
            {
              "id": "panzoom_box_dom_type",
              "value": "g"
            },
            {
              "id": "panzoom_box_props",
              "script": "return {id: `${html_id}-editor-panzoom`}"
            },
            {
              "id": "panzoom_box",
              "ref": "html_element"
            },
            {
              "id": "panzoom_box_arr",
              "ref": "array"
            },
            {
              "id": "html_id",
              "ref": "arg",
              "value": "html_id"
            },
            {
              "id": "hover",
              "ref": "arg",
              "value": "hover"
            },
            {
              "id": "randid",
              "ref": "arg",
              "value": "randid"
            },
            {
              "id": "node_el_width",
              "ref": "arg",
              "value": "node_el_width"
            },
            {
              "id": "display_graph",
              "ref": "arg",
              "value": "display_graph"
            },
            {
              "id": "readonly",
              "ref": "arg",
              "value": "readonly"
            },
            {
              "id": "hash",
              "ref": "arg",
              "value": "hash"
            },
            {
              "id": "show_all",
              "ref": "arg",
              "value": "show_all"
            },
            {
              "id": "error",
              "ref": "arg",
              "value": "error"
            },
            {
              "id": "hide_types",
              "ref": "arg",
              "value": "hide_types"
            },
            {
              "id": "links",
              "ref": "arg",
              "value": "links"
            },
            {
              "id": "get_levels",
              "ref": "arg",
              "value": "levels"
            },
            {
              "id": "nodes",
              "ref": "arg",
              "value": "nodes"
            },
            {
              "id": "dg_nodes",
              "ref": "arg",
              "value": "display_graph.nodes"
            },
            {
              "id": "dg_selected",
              "ref": "find_node"
            },
            {
              "id": "get_nodes",
              "script": "return nodes?.map(n => ({...n, x: (n.x - node_el_width * 0.5)})) ?? []"
            },
            {
              "id": "get_links",
              "script": "return links?.map(l => (Object.assign({}, l, {source: Object.assign({}, l.source, {x: (l.source.x - node_el_width * 0.5)}), target: Object.assign({}, l.target, {x: (l.target.x - node_el_width * 0.5)})}))) ?? []"
            },
            {
              "id": "get_selected",
              "ref": "arg",
              "value": "selected"
            },
            {
              "id": "get_graph",
              "ref": "arg",
              "value": "graph"
            },
            {
              "id": "get_selected_node",
              "ref": "find_node"
            },
            {
              "id": "get_selected_edge",
              "ref": "arg",
              "value": "selected_edge"
            },
            {
              "id": "dimensions",
              "ref": "arg",
              "value": "dimensions"
            },
            {
              "id": "onclick_graph",
              "ref": "onclick_graph_action"
            },
            {
              "id": "node_editor_props",
              "script": "return {id: `${html_id}-editor`, class: {[`hash-${hash.substring(1)}`]: hash.length > 0},width: dimensions.x, height: dimensions.y, onclick: onclick_graph, ontouchstart: onclick_graph}"
            },
            {
              "id": "node_editor_dom_type",
              "value": "svg"
            },
            {
              "id": "node_editor_children",
              "script": "return [defs.el].concat(nodes?.map(c => c.el) ?? []).concat(links?.flatMap(l => l.map(lc => lc.el)) ?? [])"
            },
            {
              "id": "node_args",
              "ref": "node_args"
            },
            {
              "id": "dummy_nodes",
              "script": "return !selected_node ? [] : [{node_id: selected_node.node_id + a, node_child_id: selected_node.node_id + a, dummy: true, name: a, x: selected_node.x - 128, y: selected_node.y + 32 * i}))"
            },
            {
              "id": "dummy_links",
              "script": "return !selected_node ? [] : nodes.map(n => ({edge: {from: n.id, to: selected_node.node_id, as: n.name}, source: n, target: selected_node}))"
            },
            {
              "id": "dummy_node_el",
              "nodes": [
                {
                  "id": "randid",
                  "ref": "arg",
                  "value": "randid"
                },
                {
                  "id": "selected",
                  "ref": "arg",
                  "value": "selected_node.node_id"
                },
                {
                  "id": "selected_node",
                  "ref": "arg",
                  "value": "selected_node"
                },
                {
                  "id": "add_node",
                  "ref": "add_node"
                },
                {
                  "id": "base_props",
                  "value": {
                    "href": "svg/add-circle-outline.svg#icon",
                    "width": "32px",
                    "height": "32px",
                    "id": "dummy-add-node"
                  }
                },
                {
                  "id": "onclick_props",
                  "script": "return {onclick: (s, p) => [s, [add_node, {node: {id: randid}, child}]], ontouchstart: (s, p) => [s, [add_node, {node: {id: randid}, child}]]}"
                },
                {
                  "id": "position",
                  "script": "return {x: (node?.x ?? 0) - 64, y: (node?.y ?? 0) - 64}"
                },
                {
                  "id": "props",
                  "ref": "merge_objects"
                },
                {
                  "id": "out",
                  "ref": "add_circle_icon"
                }
              ],
              "edges": [
                {
                  "from": "selected",
                  "to": "onclick_props",
                  "as": "child"
                },
                {
                  "from": "randid",
                  "to": "onclick_props",
                  "as": "randid"
                },
                {
                  "from": "add_node",
                  "to": "onclick_props",
                  "as": "add_node"
                },
                {
                  "from": "base_props",
                  "to": "props",
                  "as": "a0"
                },
                {
                  "from": "onclick_props",
                  "to": "props",
                  "as": "a1"
                },
                {
                  "from": "selected_node",
                  "to": "position",
                  "as": "node"
                },
                {
                  "from": "position",
                  "to": "_props",
                  "as": "a2"
                },
                {
                  "from": "props",
                  "to": "out",
                  "as": "props"
                }
              ]
            },
            {
              "id": "dummy_node_els",
              "script": "const fn = _lib.no.executeGraphNode({graph: _graph, lib: _lib})(node_layout_map); return nodes.map(n => fn({node: n, selected, selected_distance: 0}))"
            },
            {
              "id": "dummy_link_els",
              "script": "const fn = _lib.no.executeGraphNode({graph: _graph, lib: _lib})(link_layout_map); return links.map(l => fn({link: Object.assign(l, {edge: l.edge}), selected_distance: 0}))"
            },
            {
              "id": "node_layout",
              "script": "const error_nodes = error instanceof AggregateError ? error.errors.map(e => e instanceof _lib.no.NodysseusError ? e.node_id : false).filter(n => n) : error instanceof _lib.no.NodysseusError ? [error.node_id] : []; const fn = _lib.no.executeGraphNode({graph: {..._graph}, lib: _lib})(node_layout_map); return nodes.sort((a, b) => levels.distance_from_selected.get(b.node_child_id) - levels.distance_from_selected.get(a.node_child_id)).map(n => fn(Object.assign({node: Object.assign({}, n, display_graph.nodes.find(dgn => dgn.id === n.node_id)), hide_types, show_all, selected_distance: levels.distance_from_selected.get(n.node_child_id), level: levels.level_by_node.get(n.node_id), node_error: !error_nodes ? false : error_nodes.filter(k => k.startsWith(n.node_id)).length > 0}, _node_inputs), n.node_id))"
            },
            {
              "id": "node_layout_map",
              "nodes": [
                {
                  "id": "in"
                },
                {
                  "id": "get_node",
                  "ref": "arg",
                  "value": "node"
                },
                {
                  "id": "hover",
                  "ref": "arg",
                  "value": "hover"
                },
                {
                  "id": "selected_edge",
                  "ref": "arg",
                  "value": "selected_edge"
                },
                {
                  "id": "html_id",
                  "ref": "arg",
                  "value": "html_id"
                },
                {
                  "id": "show_all",
                  "ref": "arg",
                  "value": "show_all"
                },
                {
                  "id": "selected",
                  "ref": "arg",
                  "value": "selected"
                },
                {
                  "id": "node_el_width",
                  "ref": "arg",
                  "value": "node_el_width"
                },
                {
                  "id": "is_selected",
                  "script": "return node.node_id === selected[0]"
                },
                {
                  "id": "selected_distance",
                  "ref": "arg",
                  "value": "selected_distance"
                },
                {
                  "id": "level",
                  "ref": "arg",
                  "value": "level"
                },
                {
                  "id": "hide_types",
                  "ref": "arg",
                  "value": "hide_types"
                },
                {
                  "id": "error",
                  "ref": "arg",
                  "value": "node_error"
                },
                {
                  "id": "out",
                  "ref": "html_element"
                },
                {
                  "id": "parent",
                  "ref": "html_element"
                },
                {
                  "id": "parent_dom_type",
                  "value": "svg"
                },
                {
                  "id": "onclick_node",
                  "ref": "onselectnode_action"
                },
                {
                  "id": "parent_attrs",
                  "script": "return ({onclick: (_, payload) => [onclick, {event: payload, node_id: node.node_id}],  onmouseover: (state, payload) => [{...state, hover: node.node_id}], onmouseout: (state, payload) => [{...state, hover: undefined}],  ontouchstart: (_, payload) => [onclick, {event: payload, node_id: node.node_id}], width: '256', height: '64', key: html_id + '-' + node.node_child_id, id: html_id + '-' + node.node_child_id, class: {node: true,  selected: selected[0] === node.node_id, hover: hover === node.node_id }, opacity: selected_edge?.from === node.node_id || show_all ? 1 : selected_distance !== undefined ? Math.max(0.05, 1 - (selected_distance * selected_distance) / 6) : 0.1})"
                },
                {
                  "id": "children",
                  "nodes": [
                    {
                      "id": "in"
                    },
                    {
                      "id": "selected_distance",
                      "ref": "arg",
                      "value": "selected_distance"
                    },
                    {
                      "id": "node",
                      "ref": "arg",
                      "value": "node"
                    },
                    {
                      "id": "node_node",
                      "ref": "arg",
                      "value": "node.node"
                    },
                    {
                      "id": "error",
                      "ref": "arg",
                      "value": "node_error"
                    },
                    {
                      "id": "node_shape_attrs",
                      "script": "const r = 24; return node.script ? {class:{shape: true, script: true, error}, width: r, height: r, x: 10, y: 10} : node.ref && node.ref !== 'arg' ? {class: {shape: true, ref: true, error}, width: r, height: r, x: 10, y: 10} : node.nodes ? {class: {shape: true, graph: true, error}, r: r * 0.5, cx: r * 0.5 + 4, cy: r * 0.5 + 4}  : node.value !== undefined ? {class: {shape: true, value: true, error}, points: `4,${4 + r} ${4 + r},${4 + r} ${4 + r * 0.5},4`} : {class: {shape: true, none: true, error}, r: r * 0.5 , cx: r * 0.5 + 4, cy: r * 0.5 + 4}"
                    },
                    {
                      "id": "default_color",
                      "value": "blue"
                    },
                    {
                      "id": "empty_array",
                      "value": []
                    },
                    {
                      "id": "node_shape_dom_type",
                      "script": "return node.script ? 'rect' : node.ref && node.ref !== 'arg' ? 'rect' : node.value !== undefined ? 'polygon' : 'circle'"
                    },
                    {
                      "id": "node_shape",
                      "ref": "html_element"
                    },
                    {
                      "id": "text",
                      "nodes": [
                        {
                          "id": "in"
                        },
                        {
                          "id": "out"
                        },
                        {
                          "id": "node_id",
                          "value": "node_id"
                        },
                        {
                          "id": "node_ref",
                          "value": "ref"
                        },
                        {
                          "id": "node_name",
                          "value": "name"
                        },
                        {
                          "id": "node_value",
                          "value": "value"
                        },
                        {
                          "id": "id_path"
                        },
                        {
                          "id": "get_id",
                          "ref": "get"
                        },
                        {
                          "id": "get_name",
                          "ref": "get"
                        },
                        {
                          "id": "arg_node",
                          "ref": "arg",
                          "value": "node"
                        },
                        {
                          "id": "payload_node",
                          "ref": "arg",
                          "value": "payload.node"
                        },
                        {
                          "id": "node",
                          "ref": "default"
                        },
                        {
                          "id": "event",
                          "ref": "arg",
                          "value": "payload.event"
                        },
                        {
                          "id": "empty_string",
                          "value": ""
                        },
                        {
                          "id": "hide_types",
                          "ref": "arg",
                          "value": "hide_types"
                        },
                        {
                          "id": "update_node",
                          "ref": "update_node_action"
                        },
                        {
                          "id": "show_edit_text",
                          "ref": "show_edit_text"
                        },
                        {
                          "id": "stop_propagation_effector",
                          "ref": "stop_propagation_effect"
                        },
                        {
                          "id": "stop_propagation_payload"
                        },
                        {
                          "id": "stop_propagation_effect",
                          "ref": "array"
                        },
                        {
                          "id": "get_value",
                          "script": "return target.value !== undefined ? (typeof target.value === 'object' ? JSON.stringify(target.value) : target.value.toString()) : def"
                        },
                        {
                          "id": "get_ref",
                          "ref": "get"
                        },
                        {
                          "id": "ref_name",
                          "script": "return (target.ref ? target.ref : target.value !== undefined ? 'value' : target.script ? 'script' : target.nodes ? `graph (${target.nested_node_count}, ${target.nested_edge_count})` : 'object')"
                        },
                        {
                          "id": "selected_distance",
                          "ref": "arg",
                          "value": "selected_distance"
                        },
                        {
                          "id": "shorten",
                          "args": ["text"],
                          "script": "return text.substring(text.lastIndexOf('/') + 1)"
                        },
                        {
                          "id": "node_primary_text_attrs",
                          "value": {
                            "class": "primary",
                            "dy": ".6em",
                            "x": "48"
                          }
                        },
                        {
                          "id": "tspan_dom_type",
                          "value": "tspan"
                        },
                        {
                          "id": "display_name_input",
                          "script": "return n.name ? 'name' : n.value !== undefined ? 'value' : undefined"
                        },
                        {
                          "id": "display_name",
                          "ref": "switch"
                        },
                        {
                          "id": "node_primary_text_text",
                          "ref": "html_text"
                        },
                        {
                          "id": "node_primary_text",
                          "ref": "html_element"
                        },
                        {
                          "id": "node_secondary_text_base_props",
                          "value": {
                            "class": "secondary",
                            "dy": "1.2em",
                            "x": "48"
                          }
                        },
                        {
                          "id": "state",
                          "ref": "arg",
                          "value": "state"
                        },
                        {
                          "id": "state_nodes",
                          "ref": "arg",
                          "value": "state.display_graph.nodes"
                        },
                        {
                          "id": "arg_nodes",
                          "ref": "arg",
                          "value": "nodes"
                        },
                        {
                          "id": "nodes",
                          "ref": "default"
                        },
                        {
                          "id": "dg_nodes",
                          "ref": "default"
                        },
                        {
                          "id": "state_selected",
                          "ref": "arg",
                          "value": "state.selected.0"
                        },
                        {
                          "id": "arg_selected",
                          "ref": "arg",
                          "value": "selected"
                        },
                        {
                          "id": "selected",
                          "ref": "default"
                        },
                        {
                          "id": "is_selected",
                          "ref": "eq"
                        },
                        {
                          "id": "selected_node",
                          "ref": "find_node"
                        },
                        {
                          "id": "selected_dg_node",
                          "ref": "find_node"
                        },
                        {
                          "id": "selected_node_id",
                          "ref": "get"
                        },
                        {
                          "id": "node_secondary_text_onclick_show_edit_text_payload"
                        },
                        {
                          "id": "node_secondary_text_onclick_show_edit_text",
                          "ref": "array"
                        },
                        {
                          "id": "node_secondary_text_onclick_effects",
                          "ref": "array"
                        },
                        {
                          "id": "node_secondary_text_onclick"
                        },
                        {
                          "id": "node_secondary_text_onclick_runnable",
                          "ref": "runnable"
                        },
                        {
                          "id": "node_selected_secondary_text_onclick_runnable",
                          "ref": "if"
                        },
                        {
                          "id": "node_secondary_text_onclick_props"
                        },
                        {
                          "id": "node_secondary_text_props",
                          "ref": "merge_objects"
                        },
                        {
                          "id": "node_secondary_text_text",
                          "ref": "html_text"
                        },
                        {
                          "id": "node_secondary_text",
                          "ref": "html_element"
                        },
                        {
                          "id": "node_text_dom_type",
                          "value": "text"
                        },
                        {
                          "id": "node_text",
                          "ref": "html_element"
                        },
                        {
                          "id": "script",
                          "value": "script"
                        },
                        {
                          "id": "node_text_props",
                          "args": ["selected_distance"],
                          "script": "return { x: 48, y: 12 }"
                        },
                        {
                          "id": "node_text_children",
                          "args": ["primary", "secondary"],
                          "script": "return [primary.el, !hide_types && secondary.el]"
                        },
                        {
                          "id": "text",
                          "value": "text"
                        }
                      ],
                      "edges": [
                        {
                          "from": "node",
                          "to": "get_id",
                          "as": "target"
                        },
                        {
                          "from": "node_id",
                          "to": "get_id",
                          "as": "path"
                        },
                        {
                          "from": "state_nodes",
                          "to": "nodes",
                          "as": "otherwise"
                        },
                        {
                          "from": "arg_nodes",
                          "to": "nodes",
                          "as": "value"
                        },
                        {
                          "from": "get_id",
                          "to": "selected_node",
                          "as": "node_id"
                        },
                        {
                          "from": "nodes",
                          "to": "selected_node",
                          "as": "nodes"
                        },
                        {
                          "from": "arg_node",
                          "to": "node",
                          "as": "value"
                        },
                        {
                          "from": "payload_node",
                          "to": "node",
                          "as": "otherwise"
                        },
                        {
                          "from": "state_selected",
                          "to": "selected",
                          "as": "otherwise"
                        },
                        {
                          "from": "arg_selected",
                          "to": "selected",
                          "as": "value"
                        },
                        {
                          "from": "get_id",
                          "to": "is_selected",
                          "as": "a"
                        },
                        {
                          "from": "selected",
                          "to": "is_selected",
                          "as": "b"
                        },
                        {
                          "from": "node",
                          "to": "get_ref",
                          "as": "target"
                        },
                        {
                          "from": "node",
                          "to": "ref_name",
                          "as": "target"
                        },
                        {
                          "from": "node",
                          "to": "get_value",
                          "as": "target"
                        },
                        {
                          "from": "node",
                          "to": "get_name",
                          "as": "target"
                        },
                        {
                          "from": "empty_string",
                          "to": "display_name",
                          "as": "id"
                        },
                        {
                          "from": "get_value",
                          "to": "display_name",
                          "as": "value"
                        },
                        {
                          "from": "node_ref",
                          "to": "get_ref",
                          "as": "path"
                        },
                        {
                          "from": "node_ref",
                          "to": "ref_name",
                          "as": "path"
                        },
                        {
                          "from": "node_name",
                          "to": "get_name",
                          "as": "path"
                        },
                        {
                          "from": "script",
                          "to": "ref_name",
                          "as": "default_value"
                        },
                        {
                          "from": "get_name",
                          "to": "display_name",
                          "as": "name"
                        },
                        {
                          "from": "node",
                          "to": "display_name_input",
                          "as": "n"
                        },
                        {
                          "from": "display_name_input",
                          "to": "display_name",
                          "as": "input"
                        },
                        {
                          "from": "stop_propagation_effector",
                          "to": "stop_propagation_effect",
                          "as": "a0"
                        },
                        {
                          "from": "event",
                          "to": "stop_propagation_effect",
                          "as": "a1"
                        },
                        {
                          "from": "display_name",
                          "to": "node_primary_text_text",
                          "as": "text"
                        },
                        {
                          "from": "ref_name",
                          "to": "node_secondary_text_text",
                          "as": "text"
                        },
                        {
                          "from": "node_text_props",
                          "to": "node_text",
                          "as": "props"
                        },
                        {
                          "from": "node_primary_text_text",
                          "to": "node_primary_text",
                          "as": "children"
                        },
                        {
                          "from": "node_primary_text_attrs",
                          "to": "node_primary_text",
                          "as": "props"
                        },
                        {
                          "from": "node_primary_text",
                          "to": "node_text_children",
                          "as": "primary"
                        },
                        {
                          "from": "hide_types",
                          "to": "node_text_children",
                          "as": "hide_types"
                        },
                        {
                          "from": "node_secondary_text_text",
                          "to": "node_secondary_text",
                          "as": "children"
                        },
                        {
                          "from": "node_secondary_text_base_props",
                          "to": "node_secondary_text_props",
                          "as": "a0"
                        },
                        {
                          "from": "node_secondary_text_onclick_props",
                          "to": "node_secondary_text_props",
                          "as": "a1"
                        },
                        {
                          "from": "node",
                          "to": "node_secondary_text_onclick_runnable",
                          "as": "node"
                        },
                        {
                          "from": "node_secondary_text_onclick_runnable",
                          "to": "node_selected_secondary_text_onclick_runnable",
                          "as": "true"
                        },
                        {
                          "from": "arg_selected",
                          "to": "node_selected_secondary_text_onclick_runnable",
                          "as": "pred"
                        },
                        {
                          "from": "node_selected_secondary_text_onclick_runnable",
                          "to": "node_secondary_text_onclick_props",
                          "as": "onclick"
                        },
                        {
                          "from": "node_selected_secondary_text_onclick_runnable",
                          "to": "node_secondary_text_onclick_props",
                          "as": "ontouchstart"
                        },
                        {
                          "from": "node_secondary_text_onclick",
                          "to": "node_secondary_text_onclick_runnable",
                          "as": "fn"
                        },
                        {
                          "from": "show_edit_text",
                          "to": "node_secondary_text_onclick_show_edit_text",
                          "as": "a0"
                        },
                        {
                          "from": "update_node",
                          "to": "node_secondary_text_onclick_show_edit_text_payload",
                          "as": "oneditconfirm"
                        },
                        {
                          "from": "node",
                          "to": "node_secondary_text_onclick_show_edit_text_payload",
                          "as": "position"
                        },
                        {
                          "from": "get_id",
                          "to": "node_secondary_text_onclick_show_edit_text_payload",
                          "as": "id"
                        },
                        {
                          "from": "get_ref",
                          "to": "node_secondary_text_onclick_show_edit_text_payload",
                          "as": "value"
                        },
                        {
                          "from": "node_ref",
                          "to": "node_secondary_text_onclick_show_edit_text_payload",
                          "as": "property"
                        },
                        {
                          "from": "node",
                          "to": "node_secondary_text_onclick_show_edit_text_payload",
                          "as": "node"
                        },
                        {
                          "from": "node_secondary_text_onclick_show_edit_text_payload",
                          "to": "node_secondary_text_onclick_show_edit_text",
                          "as": "a1"
                        },
                        {
                          "from": "stop_propagation_effect",
                          "to": "node_secondary_text_onclick_effects",
                          "as": "a1"
                        },
                        {
                          "from": "node_secondary_text_onclick_show_edit_text",
                          "to": "node_secondary_text_onclick_effects",
                          "as": "a0"
                        },
                        {
                          "from": "node_secondary_text_onclick_effects",
                          "to": "node_secondary_text_onclick",
                          "as": "effects"
                        },
                        {
                          "from": "state",
                          "to": "node_secondary_text_onclick",
                          "as": "state"
                        },
                        {
                          "from": "node_secondary_text_props",
                          "to": "node_secondary_text",
                          "as": "props"
                        },
                        {
                          "from": "tspan_dom_type",
                          "to": "node_primary_text",
                          "as": "dom_type"
                        },
                        {
                          "from": "node_secondary_text",
                          "to": "node_text_children",
                          "as": "secondary"
                        },
                        {
                          "from": "tspan_dom_type",
                          "to": "node_secondary_text",
                          "as": "dom_type"
                        },
                        {
                          "from": "node_text_children",
                          "to": "node_text",
                          "as": "children"
                        },
                        {
                          "from": "node_text_dom_type",
                          "to": "node_text",
                          "as": "dom_type"
                        },
                        {
                          "from": "node_text",
                          "to": "out"
                        }
                      ]
                    },
                    {
                      "id": "fill_rect",
                      "script": "return {dom_type: 'rect', props:{class:{fill: true}, width: '48', 'height': '48'}, children: []}"
                    },
                    {
                      "id": "order",
                      "args": ["shape", "text"],
                      "script": "return [shape.el, text.el, rect]"
                    },
                    {
                      "id": "out"
                    }
                  ],
                  "edges": [
                    {
                      "from": "in",
                      "to": "out",
                      "as": "_"
                    },
                    {
                      "from": "node",
                      "to": "node_shape_attrs",
                      "as": "node"
                    },
                    {
                      "from": "selected_distance",
                      "to": "node_shape_attrs",
                      "as": "selected_distance"
                    },
                    {
                      "from": "error",
                      "to": "node_shape_attrs",
                      "as": "error"
                    },
                    {
                      "from": "default_color",
                      "to": "node_shape_attrs",
                      "as": "color"
                    },
                    {
                      "from": "empty_array",
                      "to": "node_shape",
                      "as": "children"
                    },
                    {
                      "from": "node",
                      "to": "node_shape_dom_type",
                      "as": "node"
                    },
                    {
                      "from": "node_shape_dom_type",
                      "to": "node_shape",
                      "as": "dom_type"
                    },
                    {
                      "from": "node_node",
                      "to": "text"
                    },
                    {
                      "from": "node_shape_attrs",
                      "to": "node_shape",
                      "as": "props"
                    },
                    {
                      "from": "node_shape",
                      "to": "order",
                      "as": "shape"
                    },
                    {
                      "from": "text",
                      "to": "order",
                      "as": "text"
                    },
                    {
                      "from": "fill_rect",
                      "to": "order",
                      "as": "rect"
                    },
                    {
                      "from": "order",
                      "to": "out",
                      "as": "children"
                    }
                  ]
                }
              ],
              "edges": [
                {
                  "from": "selected",
                  "to": "is_selected",
                  "as": "selected"
                },
                {
                  "from": "selected",
                  "to": "parent_attrs",
                  "as": "selected"
                },
                {
                  "from": "selected_edge",
                  "to": "parent_attrs",
                  "as": "selected_edge"
                },
                {
                  "from": "hover",
                  "to": "parent_attrs",
                  "as": "hover"
                },
                {
                  "from": "get_node",
                  "to": "get_ref"
                },
                {
                  "from": "get_node",
                  "to": "is_selected",
                  "as": "node"
                },
                {
                  "from": "is_selected",
                  "to": "children",
                  "as": "selected"
                },
                {
                  "from": "children",
                  "to": "out"
                },
                {
                  "from": "show_all",
                  "to": "parent_attrs",
                  "as": "show_all"
                },
                {
                  "from": "html_id",
                  "to": "parent_attrs",
                  "as": "html_id"
                },
                {
                  "from": "selected_distance",
                  "to": "parent_attrs",
                  "as": "selected_distance"
                },
                {
                  "from": "selected_distance",
                  "to": "children",
                  "as": "selected_distance"
                },
                {
                  "from": "onclick_node",
                  "to": "parent_attrs",
                  "as": "onclick"
                },
                {
                  "from": "parent_attrs",
                  "to": "out",
                  "as": "props"
                },
                {
                  "from": "parent_dom_type",
                  "to": "out",
                  "as": "dom_type"
                },
                {
                  "from": "get_node",
                  "to": "parent_attrs",
                  "as": "node"
                }
              ]
            },
            {
              "id": "link_layout",
              "script": "const fn = _lib.no.executeGraphNode({graph: _graph, lib: _lib})(link_layout_map); return links.map(link => fn(Object.assign({readonly, show_all, randid, link: Object.assign({edge: display_graph.edges.find(e => link.source.node_id === e.from && link.target.node_id === e.to)}, link), selected_distance: levels.distance_from_selected.get(link.target.node_child_id) !== undefined ? Math.min(levels.distance_from_selected.get(link.target.node_child_id), levels.distance_from_selected.get(link.source.node_child_id)) : undefined, sibling_index_normalized: (levels.siblings.get(link.source.node_id).findIndex(n => n === link.source.node_id) + 1) / (levels.siblings.get(link.source.node_id).length + 1)}, _node_inputs), link.source.node_chld_id))"
            },
            {
              "id": "link_layout_map",
              "nodes": [
                {
                  "id": "in"
                },
                {
                  "id": "get_link",
                  "ref": "arg",
                  "value": "link"
                },
                {
                  "id": "get_selected_edge",
                  "ref": "arg",
                  "value": "selected_edge"
                },
                {
                  "id": "source",
                  "ref": "arg",
                  "value": "link.source"
                },
                {
                  "id": "target",
                  "ref": "arg",
                  "value": "link.target"
                },
                {
                  "id": "selected_distance",
                  "ref": "arg",
                  "value": "selected_distance"
                },
                {
                  "id": "sibling_index_normalized",
                  "ref": "arg",
                  "value": "sibling_index_normalized"
                },
                {
                  "id": "show_all",
                  "ref": "arg",
                  "value": "show_all"
                },
                {
                  "id": "edge",
                  "ref": "arg",
                  "value": "link.edge"
                },
                {
                  "id": "edge_info_el",
                  "ref": "html_element"
                },
                {
                  "id": "edge_info_el_children",
                  "script": "return [rect.el, edge_as.el, edge_type.el]"
                },
                {
                  "id": "edge_info_dom_type",
                  "value": "svg"
                },
                {
                  "id": "onclick_edge",
                  "ref": "onclick_edge"
                },
                {
                  "id": "edge_info_props",
                  "script": "return ({id: `edge-info-${source.node_child_id}`, key: `edge-info-${source.node_child_id}`, z: selected_edge && source.node_id === selected_edge.from && target.node_id === selected_edge.to ? 100 : 200, opacity: show_all ? 1 : selected_distance !== undefined ? Math.max(0.05, 1 - selected_distance * selected_distance / 2) : 0.1, class: {'edge-info': true, selected: selected_edge && (source.node_id === selected_edge.from + '_' + selected_edge.to || (source.node_id === selected_edge.from && target.node_id === selected_edge.to))}, onclick: (state, payload) => [onclick_edge, {event: payload, edge}], ontouchstart: (state, payload) => [onclick_edge, {event: payload, edge}]})"
                },
                {
                  "id": "edge_info_line_position",
                  "value": 0.5,
                  "min": 0,
                  "max": 1,
                  "step": 0.01
                },
                {
                  "id": "edge_info_type_props",
                  "value": {
                    "font-size": 14,
                    "y": 32
                  }
                },
                {
                  "id": "edge_info_type_el",
                  "ref": "svg_text"
                },
                {
                  "id": "edge_info_type_text",
                  "script": "return edge?.type ?? ''"
                },
                {
                  "id": "edge_info_as_props",
                  "value": {
                    "font-size": 14,
                    "y": 16
                  }
                },
                {
                  "id": "edge_info_as_el",
                  "ref": "svg_text"
                },
                {
                  "id": "readonly",
                  "ref": "arg",
                  "value": "readonly"
                },
                {
                  "id": "edge_info_as_text",
                  "script": "return edge?.as ?? (readonly ? '' : '*')"
                },
                {
                  "id": "edge_info_rect_dom_type",
                  "value": "rect"
                },
                {
                  "id": "edge_info_rect",
                  "ref": "html_element"
                },
                {
                  "id": "lerp_length",
                  "value": 24
                },
                {
                  "id": "line_lerp",
                  "script": "const length_x = Math.abs(source.x - target.x); const length_y = Math.abs(source.y - target.y); const length = Math.sqrt(length_x * length_x + length_y * length_y); return {selected_distance, selected_edge, source: {...source, x: source.x + (target.x - source.x) * lerp_length / length, y: source.y + (target.y - source.y) * lerp_length / length}, target: {...target, x: source.x + (target.x - source.x) * (1 - (lerp_length / length)), y: source.y + (target.y - source.y) * (1 - (lerp_length / length))}}"
                },
                {
                  "id": "line_props",
                  "script": "return ({id: `link-${source.node_child_id}`, key: `link-${source.node_child_id}`, onclick: (state, payload) => [onclick_edge, {event: payload, edge}], class: `link ${selected_edge && (source.node_id === selected_edge.from + '_' + selected_edge.to || (source.node_id === selected_edge.from && target.node_id === selected_edge.to)) ? 'selected' : 'unselected'}`, 'marker-end': 'url(#arrow)', opacity: show_all ? 1 : selected_distance !== undefined ? Math.max(0.05, 1 - selected_distance * selected_distance / 2) : 0.1})"
                },
                {
                  "id": "line_dom_type",
                  "value": "line"
                },
                {
                  "id": "empty_array",
                  "value": []
                },
                {
                  "id": "line",
                  "ref": "html_element"
                },
                {
                  "id": "insert_node_el",
                  "out": "el",
                  "nodes": [
                    {
                      "id": "link",
                      "ref": "arg",
                      "value": "link"
                    },
                    {
                      "id": "randid",
                      "ref": "arg",
                      "value": "randid"
                    },
                    {
                      "id": "base_props",
                      "value": {
                        "href": "svg/add-circle-outline.svg#icon",
                        "width": "32px",
                        "height": "32px",
                        "class": "insert-node"
                      }
                    },
                    {
                      "id": "position",
                      "script": "return {x: (link.source.x + link.target.x) * 0.5 - 16, y: (link.source.y + link.target.y) * 0.5 - 16, id: `insert-${link.source.node_child_id}`, key: `insert-${link.source.node_child_id}`}"
                    },
                    {
                      "id": "insert_node",
                      "ref": "insert_node"
                    },
                    {
                      "id": "onclick_props",
                      "script": "return {onclick: (s, p) => [s, [insert_node, {edge: link.edge, node: {id: randid}}]], ontouchstart: (s, p) => [s, [insert_node, {edge: link.edge, node: {id: randid}}]]}"
                    },
                    {
                      "id": "props",
                      "ref": "merge_objects"
                    },
                    {
                      "id": "el",
                      "ref": "add_circle_icon"
                    }
                  ],
                  "edges": [
                    {
                      "from": "randid",
                      "to": "onclick_props",
                      "as": "randid"
                    },
                    {
                      "from": "link",
                      "to": "onclick_props",
                      "as": "link"
                    },
                    {
                      "from": "insert_node",
                      "to": "onclick_props",
                      "as": "insert_node"
                    },
                    {
                      "from": "link",
                      "to": "position",
                      "as": "link"
                    },
                    {
                      "from": "base_props",
                      "to": "props",
                      "as": "o0"
                    },
                    {
                      "from": "position",
                      "to": "props",
                      "as": "o1"
                    },
                    {
                      "from": "onclick_props",
                      "to": "props",
                      "as": "o2"
                    },
                    {
                      "from": "props",
                      "to": "el",
                      "as": "props"
                    }
                  ]
                },
                {
                  "id": "out",
                  "args": ["line", "edge_info"],
                  "script": "return [line, edge_info, !readonly && selected_distance < 1 && insert_node]"
                }
              ],
              "edges": [
                {
                  "from": "in",
                  "to": "line_props"
                },
                {
                  "from": "get_link",
                  "to": "line_lerp"
                },
                {
                  "from": "show_all",
                  "to": "line_props",
                  "as": "show_all"
                },
                {
                  "from": "get_selected_edge",
                  "to": "line_props",
                  "as": "selected_edge"
                },
                {
                  "from": "get_selected_edge",
                  "to": "line_lerp",
                  "as": "selected_edge"
                },
                {
                  "from": "get_selected_edge",
                  "to": "edge_info_props",
                  "as": "selected_edge"
                },
                {
                  "from": "selected_distance",
                  "to": "edge_info_props",
                  "as": "selected_distance"
                },
                {
                  "from": "sibling_index_normalized",
                  "to": "edge_info_props",
                  "as": "sibling_index_normalized"
                },
                {
                  "from": "show_all",
                  "to": "edge_info_props",
                  "as": "show_all"
                },
                {
                  "from": "onclick_edge",
                  "to": "edge_info_props",
                  "as": "onclick_edge"
                },
                {
                  "from": "edge",
                  "to": "line_props",
                  "as": "edge"
                },
                {
                  "from": "onclick_edge",
                  "to": "line_props",
                  "as": "onclick_edge"
                },
                {
                  "from": "selected_distance",
                  "to": "line_props",
                  "as": "selected_distance"
                },
                {
                  "from": "source",
                  "to": "line_lerp",
                  "as": "source"
                },
                {
                  "from": "target",
                  "to": "line_lerp",
                  "as": "target"
                },
                {
                  "from": "source",
                  "to": "line_props",
                  "as": "source"
                },
                {
                  "from": "target",
                  "to": "line_props",
                  "as": "target"
                },
                {
                  "from": "source",
                  "to": "edge_info_props",
                  "as": "source"
                },
                {
                  "from": "target",
                  "to": "edge_info_props",
                  "as": "target"
                },
                {
                  "from": "selected_distance",
                  "to": "line_lerp",
                  "as": "selected_distance"
                },
                {
                  "from": "line_lerp",
                  "to": "line_props"
                },
                {
                  "from": "lerp_length",
                  "to": "line_lerp",
                  "as": "lerp_length"
                },
                {
                  "from": "get_link",
                  "to": "edge_info_props"
                },
                {
                  "from": "edge",
                  "to": "edge_info_props",
                  "as": "edge"
                },
                {
                  "from": "readonly",
                  "to": "edge_info_props",
                  "as": "readonly"
                },
                {
                  "from": "edge",
                  "to": "edge_info_as_text",
                  "as": "edge"
                },
                {
                  "from": "edge_info_dom_type",
                  "to": "edge_info_el",
                  "as": "dom_type"
                },
                {
                  "from": "edge_info_props",
                  "to": "edge_info_el",
                  "as": "props"
                },
                {
                  "from": "edge_info_line_position",
                  "to": "edge_info_props",
                  "as": "line_position"
                },
                {
                  "from": "edge_info_rect",
                  "to": "edge_info_el_children",
                  "as": "rect"
                },
                {
                  "from": "edge_info_rect_dom_type",
                  "to": "edge_info_rect",
                  "as": "dom_type"
                },
                {
                  "from": "edge_info_el_children",
                  "to": "edge_info_el",
                  "as": "children"
                },
                {
                  "from": "edge_info_el",
                  "to": "out",
                  "as": "edge_info"
                },
                {
                  "from": "edge_info_type_props",
                  "to": "edge_info_type_el",
                  "as": "props"
                },
                {
                  "from": "edge",
                  "to": "edge_info_type_text",
                  "as": "edge"
                },
                {
                  "from": "edge_info_type_text",
                  "to": "edge_info_type_el",
                  "as": "text"
                },
                {
                  "from": "edge_info_type_el",
                  "to": "edge_info_el_children",
                  "as": "edge_type",
                  "type": "resolve"
                },
                {
                  "from": "edge_info_as_props",
                  "to": "edge_info_as_el",
                  "as": "props"
                },
                {
                  "from": "readonly",
                  "to": "edge_info_as_text",
                  "as": "readonly"
                },
                {
                  "from": "edge_info_as_text",
                  "to": "edge_info_as_el",
                  "as": "text"
                },
                {
                  "from": "edge_info_as_el",
                  "to": "edge_info_el_children",
                  "as": "edge_as",
                  "type": "resolve"
                },
                {
                  "from": "line_props",
                  "to": "line",
                  "as": "props"
                },
                {
                  "from": "line_dom_type",
                  "to": "line",
                  "as": "dom_type"
                },
                {
                  "from": "empty_array",
                  "to": "line",
                  "as": "children"
                },
                {
                  "from": "empty_array",
                  "to": "line",
                  "as": "children"
                },
                {
                  "from": "line",
                  "to": "out",
                  "as": "line"
                },
                {
                  "from": "selected_distance",
                  "to": "out",
                  "as": "selected_distance"
                },
                {
                  "from": "readonly",
                  "to": "out",
                  "as": "readonly"
                },
                {
                  "from": "insert_node_el",
                  "to": "out",
                  "as": "insert_node"
                }
              ]
            },
            {
              "id": "line_end",
              "ref": "html_element"
            },
            {
              "id": "line_end_props",
              "value": {
                "id": "arrow",
                "refX": 8,
                "refY": 4,
                "markerWidth": 8,
                "markerHeight": 8,
                "markerUnits": "userSpaceOnUse",
                "orient": "auto"
              }
            },
            {
              "id": "line_end_children",
              "args": ["children"],
              "script": "return [children.el]"
            },
            {
              "id": "arrow_path",
              "ref": "html_element"
            },
            {
              "id": "arrow_path_props",
              "value": {
                "points": "1 1, 8 4, 1 8"
              }
            },
            {
              "id": "arrow_path_dom_type",
              "value": "polyline"
            },
            {
              "id": "fill_filter_flood_dom_type",
              "value": "feFlood"
            },
            {
              "id": "fill_filter_flood_props",
              "value": {
                "flood-color": "#000a"
              }
            },
            {
              "id": "fill_filter_flood",
              "ref": "html_element"
            },
            {
              "id": "fill_filter_props",
              "value": {
                "id": "flood-background",
                "width": 1.2,
                "height": 1.1,
                "x": -0.1,
                "y": -0.05
              }
            },
            {
              "id": "fill_filter_flood_selected_dom_type",
              "value": "feFlood"
            },
            {
              "id": "fill_filter_flood_selected_props",
              "value": {
                "flood-color": "red"
              }
            },
            {
              "id": "fill_filter_flood_selected",
              "ref": "html_element"
            },
            {
              "id": "fill_filter_selected_props",
              "value": {
                "id": "selected-flood-background",
                "width": 1.2,
                "height": 1.5,
                "x": -0.1,
                "y": -0.25
              }
            },
            {
              "id": "fill_filter_composite_props",
              "value": {
                "in": "SourceGraphic"
              }
            },
            {
              "id": "fill_filter_composite_dom_type",
              "value": "feComposite"
            },
            {
              "id": "fill_filter_composite",
              "ref": "html_element"
            },
            {
              "id": "fill_filter_children",
              "script": "return [flood.el, comp.el]"
            },
            {
              "id": "fill_filter_selected_children",
              "script": "return [flood.el, comp.el]"
            },
            {
              "id": "fill_filter_dom_type",
              "value": "filter"
            },
            {
              "id": "fill_filter",
              "ref": "html_element"
            },
            {
              "id": "fill_filter_selected",
              "ref": "html_element"
            },
            {
              "id": "marker",
              "value": "marker"
            },
            {
              "id": "defs_children",
              "args": ["arrow", "bg_color", "bg_color_selected"],
              "script": "return [bg_color.el, bg_color_selected.el, arrow.el]"
            },
            {
              "id": "defs",
              "ref": "html_element"
            },
            {
              "id": "defs_dom_type",
              "value": "defs"
            },
            {
              "id": "defs_props",
              "value": {}
            },
            {
              "id": "link_selected_distance",
              "args": ["link"],
              "script": "return !link ? [] : link.selected_distance ? link.selected_distance : 10"
            },
            {
              "id": "filter_links",
              "ref": "filter_eq"
            }
          ],
          "edges": [
            {
              "from": "nodes",
              "to": "get_nodes",
              "as": "nodes"
            },
            {
              "from": "get_selected",
              "to": "get_links",
              "as": "selected"
            },
            {
              "from": "links",
              "to": "get_links",
              "as": "links"
            },
            {
              "from": "node_el_width",
              "to": "get_nodes",
              "as": "node_el_width"
            },
            {
              "from": "html_id",
              "to": "node_layout",
              "as": "html_id"
            },
            {
              "from": "hover",
              "to": "node_layout",
              "as": "hover"
            },
            {
              "from": "error",
              "to": "node_layout",
              "as": "error"
            },
            {
              "from": "display_graph",
              "to": "node_layout",
              "as": "display_graph"
            },
            {
              "from": "node_el_width",
              "to": "node_layout",
              "as": "node_el_width"
            },
            {
              "from": "get_nodes",
              "to": "node_layout",
              "as": "nodes"
            },
            {
              "from": "node_el_width",
              "to": "get_links",
              "as": "node_el_width"
            },
            {
              "from": "get_links",
              "to": "duplicate_nodes",
              "as": "links"
            },
            {
              "from": "get_levels",
              "to": "duplicate_nodes",
              "as": "levels"
            },
            {
              "from": "get_levels",
              "to": "node_layout",
              "as": "levels"
            },
            {
              "from": "get_graph",
              "to": "node_layout",
              "as": "graph"
            },
            {
              "from": "show_all",
              "to": "link_layout",
              "as": "show_all"
            },
            {
              "from": "randid",
              "to": "link_layout",
              "as": "randid"
            },
            {
              "from": "readonly",
              "to": "link_layout",
              "as": "readonly"
            },
            {
              "from": "show_all",
              "to": "node_layout",
              "as": "show_all"
            },
            {
              "from": "hide_types",
              "to": "node_layout",
              "as": "hide_types"
            },
            {
              "from": "display_graph",
              "to": "link_layout",
              "as": "display_graph"
            },
            {
              "from": "get_graph",
              "to": "link_layout",
              "as": "graph"
            },
            {
              "from": "get_selected",
              "to": "node_layout",
              "as": "selected"
            },
            {
              "from": "get_links",
              "to": "link_selected_distance",
              "as": "link"
            },
            {
              "from": "get_selected_edge",
              "to": "filter_links",
              "as": "selected_edge"
            },
            {
              "from": "get_selected_edge",
              "to": "node_layout",
              "as": "selected_edge"
            },
            {
              "from": "get_selected_edge",
              "to": "link_layout",
              "as": "selected_edge"
            },
            {
              "from": "link_selected_distance",
              "to": "filter_links",
              "as": "keep"
            },
            {
              "from": "get_links",
              "to": "filter_links"
            },
            {
              "from": "get_links",
              "to": "link_layout",
              "as": "links"
            },
            {
              "from": "get_levels",
              "to": "link_layout",
              "as": "levels"
            },
            {
              "from": "link_layout_map",
              "to": "link_layout",
              "as": "link_layout_map",
              "type": "ref"
            },
            {
              "from": "in",
              "to": "node_editor_props"
            },
            {
              "from": "html_id",
              "to": "node_editor_props",
              "as": "html_id"
            },
            {
              "from": "readonly",
              "to": "node_editor_props",
              "as": "readonly"
            },
            {
              "from": "hash",
              "to": "node_editor_props",
              "as": "hash"
            },
            {
              "from": "html_id",
              "to": "panzoom_box_props",
              "as": "html_id"
            },
            {
              "from": "get_selected",
              "to": "get_selected_node",
              "as": "node_id"
            },
            {
              "from": "node_el_width",
              "to": "node_editor_props",
              "as": "node_el_width"
            },
            {
              "from": "dimensions",
              "to": "node_editor_props",
              "as": "dimensions"
            },
            {
              "from": "get_nodes",
              "to": "get_selected_node",
              "as": "nodes"
            },
            {
              "from": "get_selected_node",
              "to": "node_editor_props",
              "as": "selected"
            },
            {
              "from": "onclick_graph",
              "to": "node_editor_props",
              "as": "onclick_graph"
            },
            {
              "from": "node_editor_props",
              "to": "out",
              "as": "props"
            },
            {
              "from": "node_editor_dom_type",
              "to": "out",
              "as": "dom_type"
            },
            {
              "from": "node_layout_map",
              "to": "node_layout",
              "as": "node_layout_map",
              "type": "ref"
            },
            {
              "from": "node_layout",
              "to": "node_editor_children",
              "as": "nodes"
            },
            {
              "from": "get_selected",
              "to": "dg_selected",
              "as": "node_id"
            },
            {
              "from": "dg_nodes",
              "to": "dg_selected",
              "as": "nodes"
            },
            {
              "from": "dg_selected",
              "to": "node_args",
              "as": "node"
            },
            {
              "from": "dg_nodes",
              "to": "node_args",
              "as": "nodes"
            },
            {
              "from": "get_selected_node",
              "to": "dummy_nodes",
              "as": "selected_node"
            },
            {
              "from": "node_args",
              "to": "dummy_nodes",
              "as": "args"
            },
            {
              "from": "get_selected",
              "to": "dummy_node_els",
              "as": "selected"
            },
            {
              "from": "dummy_nodes",
              "to": "dummy_node_els",
              "as": "nodes"
            },
            {
              "from": "dummy_nodes",
              "to": "dummy_links",
              "as": "nodes"
            },
            {
              "from": "get_selected_node",
              "to": "dummy_links",
              "as": "selected_node"
            },
            {
              "from": "node_args",
              "to": "dummy_links",
              "as": "args"
            },
            {
              "from": "dummy_links",
              "to": "dummy_link_els",
              "as": "links"
            },
            {
              "from": "node_layout_map",
              "to": "dummy_node_els",
              "as": "node_layout_map",
              "type": "ref"
            },
            {
              "from": "dummy_node_els",
              "to": "_node_editor_children",
              "as": "dummy_nodes"
            },
            {
              "from": "link_layout_map",
              "to": "dummy_link_els",
              "as": "link_layout_map",
              "type": "ref"
            },
            {
              "from": "dummy_link_els",
              "to": "_node_editor_children",
              "as": "dummy_links"
            },
            {
              "from": "get_selected_node",
              "to": "dummy_node_el",
              "as": "selected_node"
            },
            {
              "from": "dummy_node_el",
              "to": "node_editor_children",
              "as": "dummy_node"
            },
            {
              "from": "get_nodes",
              "to": "node_editor_children_inputs",
              "as": "nodes"
            },
            {
              "from": "link_layout",
              "to": "node_editor_children",
              "as": "links"
            },
            {
              "from": "get_links",
              "to": "node_editor_children_inputs",
              "as": "links"
            },
            {
              "from": "defs",
              "to": "node_editor_children",
              "as": "defs"
            },
            {
              "from": "marker",
              "to": "line_end",
              "as": "dom_type"
            },
            {
              "from": "arrow_path_props",
              "to": "arrow_path",
              "as": "props"
            },
            {
              "from": "arrow_path_dom_type",
              "to": "arrow_path",
              "as": "dom_type"
            },
            {
              "from": "arrow_path",
              "to": "line_end",
              "as": "children"
            },
            {
              "from": "line_end_props",
              "to": "line_end",
              "as": "props"
            },
            {
              "from": "line_end",
              "to": "defs_children",
              "as": "arrow"
            },
            {
              "from": "fill_filter_flood_props",
              "to": "fill_filter_flood",
              "as": "props"
            },
            {
              "from": "fill_filter_flood_dom_type",
              "to": "fill_filter_flood",
              "as": "dom_type"
            },
            {
              "from": "fill_filter_flood",
              "to": "fill_filter_children",
              "as": "flood"
            },
            {
              "from": "fill_filter_flood_selected_props",
              "to": "fill_filter_flood_selected",
              "as": "props"
            },
            {
              "from": "fill_filter_flood_selected_dom_type",
              "to": "fill_filter_flood_selected",
              "as": "dom_type"
            },
            {
              "from": "fill_filter_flood_selected",
              "to": "fill_filter_selected_children",
              "as": "flood"
            },
            {
              "from": "fill_filter_composite_props",
              "to": "fill_filter_composite",
              "as": "props"
            },
            {
              "from": "fill_filter_composite_dom_type",
              "to": "fill_filter_composite",
              "as": "dom_type"
            },
            {
              "from": "fill_filter_composite",
              "to": "fill_filter_children",
              "as": "comp"
            },
            {
              "from": "fill_filter_children",
              "to": "fill_filter",
              "as": "children"
            },
            {
              "from": "fill_filter_props",
              "to": "fill_filter",
              "as": "props"
            },
            {
              "from": "fill_filter_composite",
              "to": "fill_filter_selected_children",
              "as": "comp"
            },
            {
              "from": "fill_filter_selected_children",
              "to": "fill_filter_selected",
              "as": "children"
            },
            {
              "from": "fill_filter_selected_props",
              "to": "fill_filter_selected",
              "as": "props"
            },
            {
              "from": "fill_filter_dom_type",
              "to": "fill_filter",
              "as": "dom_type"
            },
            {
              "from": "fill_filter_dom_type",
              "to": "fill_filter_selected",
              "as": "dom_type"
            },
            {
              "from": "fill_filter",
              "to": "defs_children",
              "as": "bg_color"
            },
            {
              "from": "fill_filter_selected",
              "to": "defs_children",
              "as": "bg_color_selected"
            },
            {
              "from": "defs_dom_type",
              "to": "defs",
              "as": "dom_type"
            },
            {
              "from": "defs_props",
              "to": "defs",
              "as": "props"
            },
            {
              "from": "defs_children",
              "to": "defs",
              "as": "children"
            },
            {
              "from": "node_editor_children",
              "to": "panzoom_box",
              "as": "children"
            },
            {
              "from": "panzoom_box_dom_type",
              "to": "panzoom_box",
              "as": "dom_type"
            },
            {
              "from": "panzoom_box_props",
              "to": "panzoom_box",
              "as": "props"
            },
            {
              "from": "panzoom_box",
              "to": "out",
              "as": "children"
            },
            {
              "from": "panzoom_box_arr",
              "to": "node_editor",
              "as": "children"
            }
          ]
        },
        {
          "id": "error_display",
          "script": "return {el: {dom_type: 'div', props: {class:{error: true, main: true}, key: `${html_id}-error_display`}, children: [{dom_type: 'text_value', text: error instanceof AggregateError ? error.errors.map(e => e.toString()).join(\" \") : error?.toString()}]}}"
        },
        {
          "id": "noop",
          "script": "return {el: _lib.ha.h.fn('div', {key: 'loading'}, _lib.ha.text.fn('loading...'))}"
        },
        {
          "id": "out_input",
          "script": "return display_graph && graph ? 'hel' : 'noop'"
        },
        {
          "id": "out",
          "ref": "switch"
        }
      ],
      "out": "out",
      "id": "editor"
    }
  ],
  "edges": [
    {
      "from": "editor",
      "to": "hyperapp_view",
      "type": "ref",
      "as": "fn"
    },
    {
      "from": "get_graph",
      "to": "update_sim_fn",
      "as": "graph"
    },
    {
      "from": "error_nodes",
      "to": "hyperapp_init_state",
      "as": "error_nodes"
    },
    {
      "from": "static",
      "to": "hyperapp_init_state",
      "as": "static"
    },
    {
      "from": "readonly",
      "to": "hyperapp_init_state",
      "as": "readonly"
    },
    {
      "from": "norun",
      "to": "hyperapp_init_state",
      "as": "norun"
    },
    {
      "from": "hash",
      "to": "hyperapp_init_state",
      "as": "hash"
    },
    {
      "from": "hide_types",
      "to": "hyperapp_init_state",
      "as": "hide_types"
    },
    {
      "from": "dimensions",
      "to": "hyperapp_init_state",
      "as": "dimensions"
    },
    {
      "from": "html_id",
      "to": "hyperapp_init_state",
      "as": "html_id"
    },
    {
      "from": "examples",
      "to": "hyperapp_init_state",
      "as": "examples"
    },
    {
      "from": "display_graph_out",
      "to": "init_selected",
      "as": "a0"
    },
    {
      "from": "init_selected",
      "to": "hyperapp_init_state",
      "as": "selected"
    },
    {
      "from": "update_sim_effect",
      "to": "hyperapp_init_state",
      "as": "update_sim_effect"
    },
    {
      "from": "sim_to_hyperapp_fn",
      "to": "hyperapp_init_state",
      "as": "sim_to_hyperapp"
    },
    {
      "from": "get_graph",
      "to": "onkey_fn",
      "as": "graph"
    },
    {
      "from": "onkey_fn",
      "to": "initialize_hyperapp_app",
      "as": "onkey_fn"
    },
    {
      "from": "onkey_fn_body",
      "to": "onkey_fn",
      "as": "fn",
      "type": "ref"
    },
    {
      "from": "html_id",
      "to": "render_graph_effect",
      "as": "html_id"
    },
    {
      "from": "update_sim_effect",
      "to": "render_graph_effect",
      "as": "update_sim"
    },
    {
      "from": "popover_dimensions",
      "to": "render_graph_effect",
      "as": "dimensions"
    },
    {
      "from": "get_graph",
      "to": "render_graph_effect",
      "as": "graph"
    },
    {
      "from": "html_id",
      "to": "initialize_hyperapp_app",
      "as": "html_id"
    },
    {
      "from": "render_graph_effect",
      "to": "_initialize_hyperapp_app",
      "as": "render_graph_effect"
    },
    {
      "from": "hyperapp_view",
      "to": "initialize_hyperapp_app",
      "as": "view"
    },
    {
      "from": "update_hyperapp",
      "to": "update_hyperapp_action",
      "as": "fn",
      "type": "ref"
    },
    {
      "from": "update_hyperapp_action",
      "to": "update_hyperapp_effect",
      "as": "fn"
    },
    {
      "from": "update_hyperapp_effect",
      "to": "initialize_hyperapp_app",
      "as": "update_hyperapp"
    },
    {
      "from": "update_hyperapp_effect",
      "to": "hyperapp_init_state",
      "as": "update_hyperapp"
    },
    {
      "from": "hyperapp_init_state",
      "to": "initialize_hyperapp_app",
      "as": "init"
    },
    {
      "from": "get_graph",
      "to": "hyperapp_view",
      "as": "graph"
    },
    {
      "from": "get_graph",
      "to": "hyperapp_init_state",
      "as": "graph"
    },
    {
      "from": "get_graph",
      "to": "update_nodes",
      "as": "graph"
    },
    {
      "from": "get_display_graph",
      "to": "update_nodes",
      "as": "display_graph"
    },
    {
      "from": "get_display_graph",
      "to": "hyperapp_init_state",
      "as": "display_graph"
    },
    {
      "from": "display_graph_out",
      "to": "calculate_levels",
      "as": "selected"
    },
    {
      "from": "get_display_graph",
      "to": "calculate_levels",
      "as": "display_graph"
    },
    {
      "from": "calculate_levels",
      "to": "hyperapp_init_state",
      "as": "levels"
    },
    {
      "from": "initial_state",
      "to": "hyperapp_init_state"
    },
    {
      "from": "nodes",
      "to": "graph_to_simulation",
      "as": "nodes"
    },
    {
      "from": "links",
      "to": "graph_to_simulation",
      "as": "links"
    },
    {
      "from": "graph_to_simulation",
      "to": "graph_to_sim_action",
      "as": "fn",
      "type": "ref"
    },
    {
      "from": "sim_to_hyperapp",
      "to": "sim_to_hyperapp_fn",
      "as": "fn",
      "type": "ref"
    },
    {
      "from": "sim_to_hyperapp_fn",
      "to": "initialize_hyperapp_app",
      "as": "sim_to_hyperapp_action"
    },
    {
      "from": "graph_to_sim_action",
      "to": "initialize_hyperapp_app",
      "as": "graph_to_sim_action"
    },
    {
      "from": "update_sim_in",
      "to": "update_sim_fn",
      "as": "in_node",
      "type": "ref"
    },
    {
      "from": "update_sim_fn",
      "to": "update_sim_effect",
      "as": "fn"
    },
    {
      "from": "update_sim_effect",
      "to": "editor",
      "as": "update_sim"
    },
    {
      "from": "update_sim_effect",
      "to": "initialize_hyperapp_app",
      "as": "update_sim"
    },
    {
      "from": "initialize_hyperapp_app",
      "to": "out",
      "type": "resolve"
    },
    { "from": "get", "to": "object" },
    { "from": "set", "to": "object" },
    { "from": "delete", "to": "object" },
    { "from": "switch", "to": "flow" },
    { "from": "if", "to": "flow" },
    { "from": "html_element", "to": "html" },
    { "from": "toggle", "to": "html" },
    { "from": "input", "to": "html" },
    { "from": "css_styles", "to": "html" },
    { "from": "modify_state_runnable", "to": "state" },
    { "from": "set_display", "to": "state" },
    { "from": "array", "to": "arrays" },
    { "from": "filter", "to": "arrays" },
    { "from": "append", "to": "arrays" },
    { "from": "map", "to": "arrays" },
    { "from": "log", "to": "utility" },
    { "from": "execute_graph", "to": "utility" },
    { "from": "arg", "to": "utility" },
    { "from": "partial", "to": "utility" },
    { "from": "apply", "to": "utility" },
    { "from": "fetch", "to": "utility" },
    { "from": "merge_objects", "to": "utility" },
    { "from": "sequence", "to": "utility" },
    { "from": "runnable", "to": "utility" },
    { "from": "object_entries", "to": "utility" },
    { "from": "add", "to": "math" },
    { "from": "divide", "to": "math" },
    { "from": "negate", "to": "math" },
    { "from": "mult", "to": "math" },
    { "from": "stringify", "to": "JSON" }
  ]
}
