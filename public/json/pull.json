{
  "id": "nodysseus_hyperapp",
  "out": "out",
  "nodes": [
    { "id": "in" },
    { "id": "arrays" },
    { "id": "utility" },
    { "id": "flow" },
    { "id": "html" },
    { "id": "object" },
    { "id": "custom" },
    { "id": "state" },
    { "id": "JSON" },
    {
      "id": "log",
      "nodes": [
        { "id": "in" },
        { "id": "value", "ref": "arg", "value": "value" },
        { "id": "out", "args": [], "script": "console.log(_graph.name ?? _graph.id); console.log(value); return value" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "input", "type":"ref"},
        { "from": "value", "to": "out", "as": "value" }
      ]
    },
    { "id": "fetch", "name": "fetch", "extern": "utility.fetch" },
    { "id": "call", "name": "call", "extern": "utility.call" },
    { "id": "stringify", "name": "stringify", "extern": "JSON.stringify" },
    { "id": "parse", "name": "parse", "extern": "JSON.parse" },
    { "id": "add", "extern": "utility.add" },
    { "id": "mult", "extern": "utility.mult" },
    { "id": "divide", "extern": "utility.divide" },
    { "id": "negate", "extern": "utility.negate" },
    {
      "id": "sim_to_hyperapp_action",
      "out": "out",
      "nodes": [
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "old_nodes", "ref": "arg", "value": "state.nodes" },
        { "id": "old_links", "ref": "arg", "value": "state.links" },
        { "id": "new_nodes", "ref": "arg", "value": "payload.nodes" },
        { "id": "new_links", "ref": "arg", "value": "payload.links" },
        { "id": "selected", "ref": "arg", "value": "state.selected" },
        { "id": "display_graph", "ref": "arg", "value": "state.display_graph" },
        {
          "id": "calculate_levels",
          "script": "return _lib.scripts.calculateLevels(nodes, links, display_graph, selected)"
        },
        { "id": "with_levels", "script": "return {...state, levels}" },
        { "id": "graph_topology_change", "script": "return true" },
        { "id": "if_levels", "ref": "if" },
        {
          "id": "action",
          "script": "return {state: {...state, nodes: new_nodes, links: new_links, randid: Math.random().toString(36).substring(2, 9)}, effects: [[state.update_hyperapp]]};"
        },
        {"id": "out", "ref": "hyperapp_action"}
      ],
      "edges": [
        { "from": "old_nodes", "to": "graph_topology_change", "as": "old_nodes" },
        { "from": "new_nodes", "to": "graph_topology_change", "as": "new_nodes" },
        { "from": "new_links", "to": "graph_topology_change", "as": "new_links" },
        { "from": "old_links", "to": "graph_topology_change", "as": "old_links" },
        { "from": "new_nodes", "to": "calculate_levels", "as": "nodes" },
        { "from": "new_links", "to": "calculate_levels", "as": "links" },
        { "from": "selected", "to": "calculate_levels", "as": "selected" },
        { "from": "display_graph", "to": "calculate_levels", "as": "display_graph" },
        { "from": "calculate_levels", "to": "with_levels", "as": "levels" },
        { "from": "state", "to": "with_levels", "as": "state" },
        { "from": "graph_topology_change", "to": "if_levels", "as": "pred" },
        { "from": "with_levels", "to": "if_levels", "as": "true" },
        { "from": "state", "to": "if_levels", "as": "false" },
        { "from": "new_nodes", "to": "action", "as": "new_nodes" },
        { "from": "new_links", "to": "action", "as": "new_links" },
        { "from": "if_levels", "to": "action", "as": "state" },
        {"from": "action", "to": "out", "as": "fn", "type": "ref"}
      ]
    },
    {
      "id": "hyperapp_app",
      "nodes": [
        { "id": "init", "ref": "arg", "value": "init" },
        { "id": "view", "ref": "arg", "value": "view" },
        { "id": "html_id", "ref": "arg", "value": "html_id" },
        { "id": "static", "ref": "arg", "value": "static" },
        { "id": "display_graph", "ref": "arg", "value": "display_graph" },
        { "id": "update_hyperapp", "ref": "arg", "value": "update_hyperapp" },
        { "id": "update_sim", "ref": "arg", "value": "update_sim" },
        { "id": "sim_to_hyperapp_action", "ref": "arg", "value": "sim_to_hyperapp_action" },
        { "id": "render_graph_effect", "ref": "arg", "value": "render_graph_effect" },
        { "id": "onkey_fn", "ref": "arg", "value": "onkey_fn" },
        {
          "id": "out",
          "script": "return {dispatch: _lib.ha.app({dispatch: _lib.ha.middleware, init: () => [init, static && [update_sim, {...init, action: sim_to_hyperapp_action}], [update_hyperapp], [() => _lib.no.runtime.add_graph(init.display_graph)]], view: s => {if(s instanceof Map){ throw new Error('stop') } const vs = view(s); return vs.el}, node: document.getElementById(html_id), subscriptions: s => [!static && [_lib.scripts.d3subscription, {action: sim_to_hyperapp_action, update: update_sim}], !static && [_lib.scripts.graph_subscription, {graph: s.display_graph}], !static && !init.norun._value && [_lib.scripts.result_subscription, {graph: s.display_graph}], !s.popover_graph && [_lib.scripts.keydownSubscription, {action: onkey_fn}], _lib.scripts.listen('resize', (s, _) => [{...s, dimensions: {x: document.getElementById(html_id).clientWidth, y: document.getElementById(html_id).clientHeight}}, [update_sim, s]]), !!document.getElementById( `${html_id}-editor-panzoom`) && [_lib.panzoom.init, {id: `${html_id}-editor-panzoom`, action: (s, p) => [{...s, show_all: p.event !== 'effect_transform', svg_offset: p.transform}]}]]})}"
        }
      ],
      "edges": [
        { "from": "view", "to": "out", "as": "view" },
        { "from": "html_id", "to": "out", "as": "html_id" },
        { "from": "display_graph", "to": "out", "as": "display_graph" },
        { "from": "static", "to": "out", "as": "static" },
        { "from": "update_sim", "to": "out", "as": "update_sim" },
        { "from": "update_hyperapp", "to": "out", "as": "update_hyperapp" },
        { "from": "sim_to_hyperapp_action", "to": "out", "as": "sim_to_hyperapp_action" },
        { "from": "onkey_fn", "to": "out", "as": "onkey_fn" },
        { "from": "render_graph_effect", "to": "out", "as": "render_graph_effect" },
        { "from": "init", "to": "out", "as": "init" }
      ]
    },
    {
      "id": "ancestors",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "graph", "ref": "arg", "value": "graph" },
        { "id": "node", "ref": "arg", "value": "node" },
        {
          "id": "out",
          "script": "const parents = (id) => (graph ?? _graph).edges.filter(e => e.to === id).flatMap(e => parents(e.from)).concat([id]); return parents(node ?? graph.out ?? 'out')"
        }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "_", "type": "ref" },
        { "from": "graph", "to": "out", "as": "graph" },
        { "from": "node", "to": "out", "as": "node" }
      ]
    },
    {
      "id": "append",
      "type": "(array: A[], item: A) => A[]",
      "nodes": [
        { "id": "in" },
        { "id": "array", "ref": "arg", "value": "array" },
        { "id": "item", "ref": "arg", "value": "item" },
        { "id": "out", "script": "return array.concat(Array.isArray(item) ? item : [item])" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "_", "type": "ref" },
        { "from": "array", "to": "out", "as": "array" },
        { "from": "item", "to": "out", "as": "item" }
      ]
    },
    {
      "id": "concat",
      "type": "(array: A[], items: A[]) => A[]",
      "nodes": [
        { "id": "in" },
        { "id": "array", "ref": "arg", "value": "array" },
        { "id": "items", "ref": "arg", "value": "items" },
        { "id": "out", "args": ["item", "array"], "script": "return (array ?? []).concat(items ?? [])" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "array", "to": "out", "as": "array" },
        { "from": "items", "to": "out", "as": "items" }
      ]
    },
    {
      "id": "filter",
      "name": "filter",
      "in": "74n1jfm",
      "out": "lahq5z4",
      "description": "Filters an array using `fn: (element) => boolean`",
      "nodes": [
        {
          "id": "lahq5z4",
          "args": [],
          "name": "filter/out",
          "script": "const filter_fn = _lib.no.executeGraphNode({graph: _graph, lib: _lib})(typeof fn === 'string' ? fn : fn.fn); return arr.filter(element => filter_fn(Object.assign(fn.args ?? {}, {element})))"
        },
        { "id": "x2sz5kb", "args": [], "ref": "arg", "value": "arr" },
        { "id": "fn", "ref": "arg", "value": "fn" },
        { "id": "74n1jfm", "args": [], "name": "filter/in" }
      ],
      "edges": [
        { "from": "x2sz5kb", "to": "lahq5z4", "as": "arr" },
        { "from": "fn", "to": "lahq5z4", "as": "fn" },
        { "from": "74n1jfm", "to": "lahq5z4", "as": "_", "type": "ref" }
      ]
    },
    {
      "id": "filter_eq",
      "name": "filter_eq",
      "in": "74n1jfm",
      "out": "lahq5z4",
      "nodes": [
        { "id": "lahq5z4", "args": [], "name": "filter/out", "script": "return arr.filter(v => v[key] === value)" },
        { "id": "pfoypo5", "args": [], "ref": "arg", "value": "key" },
        { "id": "zinx621", "args": [], "ref": "arg", "value": "value" },
        { "id": "x2sz5kb", "args": [], "ref": "arg", "value": "arr" },
        { "id": "74n1jfm", "args": [], "name": "filter/in" }
      ],
      "edges": [
        { "from": "pfoypo5", "to": "lahq5z4", "as": "key" },
        { "from": "zinx621", "to": "lahq5z4", "as": "value" },
        { "from": "x2sz5kb", "to": "lahq5z4", "as": "arr" },
        { "from": "74n1jfm", "to": "lahq5z4", "as": "input" }
      ]
    },
    {
      "id": "default",
      "nodes": [
        { "id": "in" },
        { "id": "value", "ref": "arg", "value": "value" },
        { "id": "otherwise", "ref": "arg", "value": "otherwise" },
        { "id": "data" },
        { "id": "out", "script": "return value ?? data['otherwise']" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "_args", "type": "ref" },
        { "from": "value", "to": "out", "as": "value" },
        { "from": "otherwise", "to": "data", "as": "otherwise" },
        { "from": "data", "to": "out", "as": "data" }
      ]
    },
    {
      "id": "switch",
      "args": ["data", "input"],
      "nodes": [
        { "id": "in" },
        {"id": "args", "ref": "arg", "value": "_args"},
        { "id": "out",  "ref": "get"},
        { "id": "input", "ref": "arg", "value": "input" },
        { "id": "otherwise", "ref": "arg", "value": "otherwise" },
        {"id": "string_input",  "script": "return new String(input).toString()"}
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "_", "type": "ref" },
        { "from": "args", "to": "out", "as": "target" },
        { "from": "input", "to": "string_input", "as": "input" },
        { "from": "string_input", "to": "out", "as": "path" },
        { "from": "otherwise", "to": "out", "as": "otherwise" }
      ]
    },
    {
      "id": "if",
      "nodes": [
        { "id": "in" },
        { "id": "pred", "ref": "arg", "value": "pred" },
        { "id": "true", "ref": "arg", "value": "true" },
        { "id": "false", "ref": "arg", "value": "false" },
        { "id": "data"},
        { "id": "out", "script": "return !!pred ? data.true_val : data.false_val" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "_", "type":"ref" },
        { "from": "true", "to": "data", "as": "true_val" },
        { "from": "false", "to": "data", "as": "false_val" },
        { "from": "data", "to": "out", "as": "data" },
        { "from": "pred", "to": "out", "as": "pred" }
      ]
    },
    {
      "id": "find_node",
      "script": "const nid = typeof node_id === 'string' ? node_id : node_id[0]; return nodes.find(n => n.id === nid || n.node_id === nid)"
    },
    {
      "id": "svg_text",
      "out": "out",
      "nodes": [
        { "id": "dom_type", "value": "text" },
        { "id": "text", "ref": "arg", "value": "text" },
        { "id": "props", "ref": "arg", "value": "props" },
        { "id": "text_el", "ref": "html_text" },
        { "id": "children", "script": "return [text]" },
        { "id": "out", "ref": "html_element" }
      ],
      "edges": [
        { "from": "dom_type", "to": "out", "as": "dom_type" },
        { "from": "text", "to": "text_el", "as": "text" },
        { "from": "text_el", "to": "children", "as": "text" },
        { "from": "props", "to": "out", "as": "props" },
        { "from": "children", "to": "out", "as": "children" }
      ]
    },
    {
      "id": "return",
      "out": "out",
      "nodes": [
        {"id": "fn_args", "ref": "arg", "value": "_args"},
        {"id": "args", "ref": "arg", "value": "args"},
        {"id": "fn_el_from", "ref": "arg", "value": "element.from"},
        {"id": "fn_el_as", "ref": "arg", "value": "element.as"},
        {"id": "fn", "script": "return {fn, graph: _graph, args}"},
        {"id": "fn_run", "ref": "run"},
        {"id": "result_entry", "ref": "array"},
        {"id": "fn_runnable", "ref": "runnable"},
        {"id": "edges", "script": "return _lib.no.runtime.get_edges_in(_graph, _lib.no.runtime.get_parent(_graph, _node.id)).filter(e => e.as !== 'args');"},
        {"id": "entries", "ref": "map"},
        {"id": "out", "script": "return Object.fromEntries(entries)"}
      ],
      "edges": [
        {"from": "fn_args", "to": "fn", "as": "args"},
        {"from": "fn_el_from", "to": "fn", "as": "fn"},
        {"from": "fn", "to": "fn_run", "as": "runnable"},
        {"from": "fn_run", "to": "result_entry", "as": "a1"},
        {"from": "fn_el_as", "to": "result_entry", "as": "a0"},
        {"from": "result_entry", "to": "fn_runnable", "as": "fn"},
        {"from": "result", "to": "fn_runnable", "as": "fn"},
        {"from": "fn_runnable", "to": "entries", "as": "fn"},
        {"from": "edges", "to": "entries", "as": "array"},
        {"from": "args", "to": "entries", "as": "args"},
        {"from": "entries", "to": "out", "as": "entries"}
      ]
    },
    {
      "id": "runnable",
      "out": "out",
      "nodes": [
        { "id": "fn", "ref": "arg", "value": "fn" },
        { "id": "value_args", "ref": "arg", "value": "args" },
        { "id": "context_args", "ref": "arg", "value": "_args" },
        { "id": "fn_path", "value": "fn" },
        { "id": "args_path", "value": "args" },
        { "id": "prune_vals", "value": { "args": false } },
        { "id": "delete_fn", "ref": "delete" },
        { "id": "delete_args", "ref": "delete" },
        { "id": "args", "ref": "merge_objects" },
        {
          "id": "out",
          "script": "const parent_graph = _lib.no.runtime.get_parent(_graph); const input = _lib.no.runtime.get_edges_in(parent_graph, _graph.node_id).find(i => i.as === 'fn'); return input ? {fn: input.from, graph: parent_graph, args: args ?? {}} : false"
        }
      ],
      "edges": [
        { "from": "context_args", "to": "delete_fn", "as": "target" },
        { "from": "fn_path", "to": "delete_fn", "as": "path" },
        { "from": "delete_fn", "to": "delete_args", "as": "target" },
        { "from": "args_path", "to": "delete_args", "as": "path" },
        { "from": "delete_args", "to": "args", "as": "o0" },
        { "from": "prune_vals", "to": "args", "as": "o1" },
        { "from": "value_args", "to": "args", "as": "o2" },
        { "from": "args", "to": "out", "as": "args", "type": "resolve" },
        { "from": "fn", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "execute_graph",
      "nodes": [
        { "id": "in" },
        { "id": "args", "ref": "arg", "value": "_args" },
        { "id": "fn", "ref": "arg", "value": "fn" },
        { "id": "fn_graph", "ref": "arg", "value": "fn_graph" },
        {
          "id": "out",
          "script": "const res_graph = fn_graph ?? _graph; return (...inner_args) => {return _lib.no.executeGraphNode({graph: {...res_graph, nodes: [...res_graph.nodes], edges: [...res_graph.edges]}, lib: _lib})(fn)(Object.keys(args).length > 0 ? Object.assign(args, inner_args.length === 1 ? inner_args[0] : inner_args) : inner_args.length === 1 ? inner_args[0] : inner_args);}"
        }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "_", "type": "ref" },
        { "from": "args", "to": "out", "as": "args" },
        { "from": "fn", "to": "out", "as": "fn" },
        { "from": "fn_graph", "to": "out", "as": "fn_graph" }
      ]
    },
    {
      "id": "apply",
      "script": "return _lib.no.executeGraphNode({graph: fn.graph ?? _graph, lib: _lib})(fn.fn ?? fn)(args);"
    },
    { "id": "apply_graph", "script": "return _lib.no.executeGraphNode({graph, lib: _lib})(fn)(args);" },
    {
      "id": "partial",
      "nodes": [
        { "id": "in" },
        { "id": "input_value", "ref": "arg", "value": "_args" },
        { "id": "fn", "ref": "arg", "value": "fn" },
        { "id": "args", "ref": "arg", "value": "args" },
        {
          "id": "out",
          "script": "return _lib.no.executeGraphNode({graph: _graph, lib: _lib})(fn)(Object.assign({}, _args, args))"
        }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args", "type": "ref" },
        { "from": "fn", "to": "out", "as": "fn" },
        { "from": "args", "to": "out", "as": "args" },
        { "from": "input_value", "to": "out", "as": "_args" }
      ]
    },
    {
      "id": "partial_graph",
      "script": "return _lib.no.executeGraphNode({graph, lib: _lib})(fn)(Object.assign({}, _args, args))"
    },
    {
      "id": "resolve",
      "args": ["data"],
      "nodes": [
        { "id": "in" },
        { "id": "keys", "args": ["data"], "script": "return [...data.keys()]" },
        { "id": "collate" },
        { "id": "out", "args": ["data"], "script": "return data" }
      ],
      "edges": [
        { "from": "in", "to": "keys" },
        { "from": "keys", "to": "collate", "as": "input" },
        { "from": "in", "to": "collate" },
        { "from": "collate", "to": "out", "as": "data" }
      ]
    },
    { "id": "array", "name": "array", "extern": "utility.new_array" },
    { "id": "merge_objects", "extern": "utility.merge_objects" },
    {
      "id": "get",
      "nodes": [
        { "id": "in" },
        { "id": "target", "ref": "arg", "value": "target" },
        { "id": "path", "ref": "arg", "value": "path" },
        { "id": "otherwise", "ref": "arg", "value": "otherwise" },
        { "id": "out", "extern": "just.get" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "input" },
        { "from": "otherwise", "to": "out", "as": "def" },
        { "from": "path", "to": "out", "as": "path" },
        { "from": "target", "to": "out", "as": "target" }
      ]
    },
    { "id": "arg", "extern": "utility.arg" },
    { "id": "set-mutable", "args": ["target", "path", "value"], "script": "return _lib.just.set(target, path, value)" },
    {
      "id": "set",
      "type": "(target: any, value: any, path: string) => any",
      "script": "const keys = path.split('.'); const check = (o, v, k) => k.length === 1 ? {...o, [k[0]]: v, _needsresolve: true} : o.hasOwnProperty(k[0]) ? {...o, [k[0]]: check(o[k[0]], v, k.slice(1)), _needsresolve: true} : o; return check(target, value, keys)"
    },
    {
      "id": "delete",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "target", "ref": "arg", "value": "target" },
        { "id": "path", "ref": "arg", "value": "path" },
        { "id": "out", "script": "const new_val = Object.assign({}, target); delete new_val[path]; return new_val" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "target", "to": "out", "as": "target" },
        { "from": "path", "to": "out", "as": "path" }
      ]
    },
    {
      "id": "event_publisher",
      "out": "update",
      "nodes": [
        { "id": "name", "ref": "arg", "value": "name" },
        { "id": "value", "ref": "arg", "value": "value" },
        { "id": "update", "extern": "no.runtime.publish" }
      ],
      "edges": [
        { "from": "name", "to": "update", "as": "event" },
        { "from": "value", "to": "update", "as": "data" }
      ]
    },
    {
      "id": "input_value",
      "out": "out",
      "nodes": [
        { "id": "value", "ref": "arg", "value": "value" },
        {
          "id": "out",
          "script": "const parent = _lib.no.runtime.get_node(_graph, _node.id.substring(0, _node.id.lastIndexOf('/'))); if(!_lib.utility.compare(parent.value, value)) { _lib.no.runtime.add_node(_graph, {...parent , value}); } return value"
        }
      ],
      "edges": [{ "from": "value", "to": "out", "as": "value", "type": "resolve" }]
    },
    {
      "id": "event_subscriber",
      "out": "out",
      "nodes": [
        { "id": "name", "ref": "arg", "value": "name" },
        {
          "id": "add_listener",
          "script": "const parent = _lib.no.runtime.get_node(_graph, _lib.no.runtime.get_parent(_graph, _node.id)); _lib.no.runtime.add_listener(_graph, event, parent.id, (graph, ev) => (_lib.no.runtime.add_node(_graph, {...parent , value: ev})), true)"
        },
        {
          "id": "out",
          "script": "return _lib.no.runtime.get_node(_graph, _lib.no.runtime.get_parent(_graph, _node.id)).value;"
        }
      ],
      "edges": [
        { "from": "name", "to": "add_listener", "as": "event" },
        { "from": "add_listener", "to": "out", "as": "listener" }
      ]
    },
    { 
      "id": "events_broadcast_channel", 
      "out": "out",
      "nodes": [
        {"id": "arg_onmessage", "ref": "arg", "value": "onmessage"},
        {"id": "message_data", "ref": "arg", "value": "message.data.data"},
        {"id": "message_name", "ref": "arg", "value": "message.data.name"},
        {"id": "publish_event", "ref": "event_publisher"},
        {"id": "publish_event_runnable", "ref": "runnable"},
        {"id": "onmessageseq", "ref": "sequence"},
        {"id": "out", "script": "const bc = new BroadcastChannel('events'); bc.onmessage = e => { _lib.no.runGraph(onmessage.graph, onmessage.fn, {message: e}, _lib); }; return bc;"}
      ],
      "edges": [
        {"from": "message_data", "to": "publish_event", "as": "value"},
        {"from": "message_name", "to": "publish_event", "as": "name"},
        {"from": "publish_event", "to": "publish_event_runnable", "as": "fn"},
        {"from": "publish_event_runnable", "to": "onmessageseq", "as": "arg0"},
        {"from": "arg_onmessage", "to": "onmessageseq", "as": "arg1"},
        {"from": "onmessageseq", "to": "out", "as": "onmessage"}
      ]
    },
    { "id": "hyperapp_action", "script": "return {fn, graph: _graph}" },
    { "id": "hyperapp_state_action", "script": "return {fn, graph: _graph, stateonly: true}" },
    {
      "id": "hyperapp_action_effect",
      "description": "Creates an effect that dispatches the passed-in fn",
      "script": "const action = typeof fn === 'string' ? {fn, graph: _graph} : (typeof fn === 'function' || (typeof fn === 'object' && fn.hasOwnProperty('fn'))) ? fn : undefined; return (dispatch, payload) => dispatch(action, payload)"
    },
    {
      "id": "hyperapp_action_effect_debounced",
      "description": "Creates an effect that dispatches the passed-in fn",
      "script": "const action = typeof fn === 'string' ? {fn, graph: _graph} : (typeof fn === 'function' || (typeof fn === 'object' && fn.hasOwnProperty('fn'))) ? fn : undefined; return (dispatch, payload) => requestAnimationFrame(() => {dispatch(action, payload)})"
    },
    {
      "id": "run",
      "out": "out",
      "nodes": [
        { "id": "runnable", "ref": "arg", "value": "runnable" },
        { "id": "args", "ref": "arg", "value": "_args" },
        {
          "id": "out",
          "script": "return _lib.no.runGraph(runnable.graph, runnable.fn, Object.assign({}, args, {runnable: undefined}, runnable.args), _lib)"
        }
      ],
      "edges": [
        { "from": "args", "to": "out", "as": "args", "type": "resolve" },
        { "from": "runnable", "to": "out", "as": "runnable" }
      ]
    },
    {
      "id": "create_fn",
      "out": "out",
      "nodes": [
        { "id": "runnable", "ref": "arg", "value": "runnable" },
        { "id": "args", "ref": "arg", "value": "_args" },
        {
          "id": "out",
          "script": "return (fnargs) => _lib.no.runGraph(runnable.graph, runnable.fn, Object.assign({}, args, {runnable: undefined}, runnable.args, typeof fnargs === 'object' ? fnargs : {}), _lib)"
        }
      ],
      "edges": [
        { "from": "args", "to": "out", "as": "args", "type": "resolve" },
        { "from": "runnable", "to": "out", "as": "runnable" }
      ]
    },
    {
      "id": "runnable_hyperapp_effect",
      "out": "out",
      "nodes": [
        { "id": "fn", "ref": "arg", "value": "fn" },
        {
          "id": "out",
          "script": "return (dispatch, payload) => {const wrapped_dispatch = (a, p) => Promise.resolve(p).then(resp => Promise.resolve(a).then(aresp => [aresp, resp])).then(([a, p]) => dispatch(a, p)).catch(e => dispatch(s => [{...s, error: e}])); wrapped_dispatch(state => {Promise.resolve(state).then(s => _lib.no.runGraph(fn.graph, fn.fn, {state: s, ...payload, ...fn.args, dispatch: wrapped_dispatch}, _lib)); return state.error ? {...state, error: false} : state;})}"
        }
      ],
      "edges": [{ "from": "fn", "to": "out", "as": "fn" }]
    },
    {
      "id": "update_graph_display",
      "in": "in",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "payload", "ref": "arg", "value": "payload" },
        { "id": "update_sim_effect", "ref": "arg", "value": "state.update_sim_effect" },
        { "id": "show_result", "ref": "arg", "value": "state.show_result" },
        { "id": "update_arg", "ref": "arg", "value": "state.update" },
        { "id": "nodes", "ref": "arg", "value": "state.nodes" },
        { "id": "links", "ref": "arg", "value": "state.links" },
        { "id": "selected", "ref": "arg", "value": "state.selected" },
        { "id": "readonly", "ref": "arg", "value": "state.readonly" },
        { "id": "html_id", "ref": "arg", "value": "state.html_id" },
        { "id": "show_args_effector", "ref": "show_args_effect" },
        { "id": "show_args_effect", "ref": "array" },
        { "id": "should_show_args", "ref": "switch" },
        { "id": "dispatch_custom_event_effect", "ref": "dispatch_custom_event_effect" },
        { "id": "in_effects", "ref": "arg", "value": "effects" },
        { "id": "new_effects", "ref": "array" },
        { "id": "effects", "ref": "concat" },
        { "id": "display_graph", "ref": "arg", "value": "state.display_graph" },
        {
          "id": "calculate_levels",
          "script": "return _lib.scripts.calculateLevels(nodes, links, display_graph, selected)"
        },
        { "id": "levels", "ref": "switch", "args": ["levels"] },
        { "id": "levels_inputs", "args": ["selected"], "script": "return ['levels']" },
        {
          "id": "set_levels",
          "args": ["state", "levels"],
          "script": "return {...state, levels: levels ?? state.levels}"
        },
        { "id": "graph_sim", "script": "return undefined;" },
        {
          "id": "new_state",
          "script": "return Object.assign({}, state, {nodes: graph_sim?.nodes ?? state.nodes, links: graph_sim?.links ?? state.links, levels: graph_sim?.levels ?? state.levels});"
        },
        { "id": "update", "script": "return update || !!display_graph || !!selected" },
        {
          "id": "out",
          "script": "return {state, effects: [!readonly && (!!update || !!update_graph_sim) && [update_sim_effect, state], !readonly && [dispatch_custom_event_effect, {html_id, event: 'updategraph', detail: {graph: state.display_graph}}], ...(effects?.filter(e => e?.[0]) ?? [])]}"
        }
      ],
      "edges": [
        { "from": "update_arg", "to": "update", "as": "update" },
        { "from": "state", "to": "set_levels", "as": "state" },
        { "from": "in", "to": "levels_inputs" },
        { "from": "in", "to": "graph" },
        { "from": "display_graph", "to": "reduce_graph", "as": "graph" },
        { "from": "nodes", "to": "calculate_levels", "as": "nodes" },
        { "from": "links", "to": "calculate_levels", "as": "links" },
        { "from": "selected", "to": "calculate_levels", "as": "selected" },
        { "from": "display_graph", "to": "calculate_levels", "as": "display_graph" },
        { "from": "calculate_levels", "to": "levels", "as": "levels" },
        { "from": "levels", "to": "set_levels", "as": "levels" },
        { "from": "set_levels", "to": "new_state", "as": "state" },
        { "from": "levels_inputs", "to": "levels", "as": "input" },
        { "from": "graph_sim", "to": "new_state", "as": "graph_sim" },
        { "from": "show_result", "to": "out", "as": "show_result" },
        { "from": "readonly", "to": "out", "as": "readonly" },
        { "from": "selected", "to": "update", "as": "selected" },
        { "from": "display_graph", "to": "update", "as": "display_graph" },
        { "from": "update", "to": "out", "as": "update" },
        { "from": "readonly", "to": "should_show_args", "as": "input" },
        { "from": "show_args_effector", "to": "show_args_effect", "as": "a0" },
        { "from": "show_args_effect", "to": "should_show_args", "as": "false" },
        { "from": "should_show_args", "to": "new_effects", "as": "a0" },
        { "from": "new_effects", "to": "effects", "as": "array" },
        { "from": "in_effects", "to": "effects", "as": "items" },
        { "from": "payload", "to": "out", "as": "payload" },
        { "from": "html_id", "to": "out", "as": "html_id" },
        { "from": "display_graph", "to": "out", "as": "display_graph" },
        { "from": "effects", "to": "out", "as": "effects", "type": "resolve" },
        { "from": "dispatch_custom_event_effect", "to": "out", "as": "dispatch_custom_event_effect" },
        { "from": "update_sim_effect", "to": "out", "as": "update_sim_effect" },
        { "from": "new_state", "to": "out", "as": "state" }
      ]
    },
    {
      "id": "reduce",
      "name": "reduce",
      "in": "m3b5wg3",
      "out": "tgurdpo",
      "nodes": [
        { "id": "tgurdpo", "ref": "call", "name": "out" },
        { "id": "m3b5wg3", "name": "in" },
        { "id": "rielyq8", "value": "reduce", "name": "rielyq8" },
        { "ref": "arg", "id": "1rre4bx", "value": "array", "name": "1rre4bx" },
        { "ref": "arg", "id": "6g75abk", "value": "fn", "name": "6g75abk" },
        { "id": "w0zzawl", "ref": "array", "name": "w0zzawl" },
        { "id": "args", "ref": "arg", "value": "_args" },
        {
          "id": "pdljod1",
          "name": "pdljod1",
          "script": "return (previous, current, index, array) => _lib.no.runGraph(fn?.graph ?? _graph, fn?.fn ?? fn, Object.assign({}, args, {previous, current, index, array}), _lib);"
        },
        { "id": "2lvs5dj", "script": "return _graph", "name": "2lvs5dj" }
      ],
      "edges": [
        { "from": "m3b5wg3", "to": "tgurdpo", "as": "args", "type": "ref" },
        { "from": "rielyq8", "to": "tgurdpo", "as": "fn" },
        { "from": "1rre4bx", "to": "tgurdpo", "as": "self" },
        { "from": "w0zzawl", "to": "tgurdpo", "as": "args", "type": "resolve" },
        { "from": "pdljod1", "to": "w0zzawl", "as": "a0" },
        { "from": "2lvs5dj", "to": "pdljod1", "as": "graph" },
        { "from": "args", "to": "pdljod1", "as": "args" },
        { "from": "6g75abk", "to": "pdljod1", "as": "fn" }
      ]
    },
    {
      "id": "map",
      "name": "map",
      "in": "m3b5wg3",
      "out": "tgurdpo",
      "nodes": [
        { "id": "tgurdpo", "ref": "call", "name": "out" },
        { "id": "m3b5wg3", "name": "in" },
        { "id": "rielyq8", "value": "map", "name": "rielyq8" },
        { "ref": "arg", "id": "1rre4bx", "value": "array", "name": "1rre4bx" },
        { "ref": "arg", "id": "6g75abk", "value": "fn", "name": "6g75abk" },
        { "id": "w0zzawl", "ref": "array", "name": "w0zzawl" },
        { "id": "args", "ref": "arg", "value": "args" },
        {
          "id": "pdljod1",
          "name": "pdljod1",
          "script": "return (element, index, array) => _lib.no.runGraph(fn?.graph ?? _graph, fn?.fn ?? fn, Object.assign({}, fn.args, args, {element, index, array}), _lib);"
        },
        { "id": "2lvs5dj", "script": "return _graph", "name": "2lvs5dj" }
      ],
      "edges": [
        { "from": "m3b5wg3", "to": "tgurdpo", "as": "args", "type": "ref" },
        { "from": "rielyq8", "to": "tgurdpo", "as": "fn" },
        { "from": "1rre4bx", "to": "tgurdpo", "as": "self" },
        { "from": "1rre4bx", "to": "pdljod1", "as": "arr" },
        { "from": "w0zzawl", "to": "tgurdpo", "as": "args", "type": "resolve" },
        { "from": "pdljod1", "to": "w0zzawl", "as": "a0", "type": "resolve" },
        { "from": "2lvs5dj", "to": "pdljod1", "as": "graph" },
        { "from": "args", "to": "pdljod1", "as": "args" },
        { "from": "6g75abk", "to": "pdljod1", "as": "fn" }
      ]
    },
    {
      "id": "sequence",
      "name": "sequence",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "args", "ref": "arg", "value": "_args" },
        { "id": "runnable_args", "ref": "arg", "value": "_args" },
        { "id": "value_args", "ref": "arg", "value": "args" },
        { "id": "context_args", "ref": "arg", "value": "_args" },
        { "id": "merged_args", "ref": "merge_objects" },
        { "id": "args_path", "value": "args" },
        { "id": "seq_runnable_args", "ref": "delete" },
        { "name": "in", "id": "in" },
        { "id": "runnables_promise", "script": "return Promise.all(promises);" },
        { "id": "map_runnables", "ref": "map" },
        {
          "id": "runnables",
          "script": "const runnables = Object.entries(inputs).filter(e => e[0] !== 'args').map(e => [e[0], e[1] && e[1]._Proxy ? e[1]._value : e[1]]).filter(r => r[1] && (!r[1]._Proxy || r[1]._value) && r[1].hasOwnProperty('fn') && r[1].hasOwnProperty('graph')); const filtered_args = Object.fromEntries(Object.entries(args).filter(a => !runnables.find(r => r[0] === a[0]))); return runnables.map(r => r[1]).map(r => ({...r, args: {...r.args, ...filtered_args}}))"
        },
        { "id": "element", "ref": "arg", "value": "element", "type": "internal" },
        {
          "id": "map_fn",
          "script": "return new Promise((resolve, reject) => resolve(_lib.no.runGraph(runnable.graph, runnable.fn, runnable.args, _lib)));"
        },
        { "id": "map_fn_runnable", "ref": "runnable" },
        { "name": "seq_runnable", "id": "out", "ref": "runnable" }
      ],
      "edges": [
        { "from": "in", "to": "runnables", "as": "inputs" },
        { "from": "args", "to": "runnables", "as": "args" },
        { "from": "element", "to": "map_fn", "as": "runnable" },
        { "from": "map_fn", "to": "map_fn_runnable", "as": "fn" },
        { "from": "runnable_args", "to": "map_runnables", "as": "args" },
        { "from": "runnables", "to": "map_runnables", "as": "array" },
        { "from": "map_fn_runnable", "to": "map_runnables", "as": "fn" },
        { "from": "map_runnables", "to": "runnables_promise", "as": "promises" },
        { "from": "runnables_promise", "to": "out", "as": "fn" },
        { "from": "context_args", "to": "merged_args", "as": "a0" },
        { "from": "value_args", "to": "merged_args", "as": "a1" },
        { "from": "merged_args", "to": "seq_runnable_args", "as": "target" },
        { "from": "args_path", "to": "seq_runnable_args", "as": "path" },
        { "from": "seq_runnable_args", "to": "out", "as": "args" }
      ]
    },
    {
      "id": "import_json",
      "name": "import_json",
      "in": "gsiimdp",
      "out": "lapeojg",
      "nodes": [
        {
          "id": "lapeojg",
          "script": "const new_nodes = import_graph.nodes.map(n => ({...n, id: name + '.' + n.id}));\n\nconst new_graph = {\n..._graph,\nnodes: [...(new Map(_graph.nodes.concat(new_nodes).map(n => [n.id, n])).values())]\n}\n\n_lib.no.runtime.update_graph(new_graph); return name;",
          "name": "out"
        },
        { "id": "gsiimdp", "name": "in" },
        { "id": "3zfjt1h", "ref": "call" },
        { "id": "05eag47", "ref": "arg", "value": "name" },
        { "id": "2vtokcl", "script": "return fetch(url);" },
        { "id": "i9x02is", "value": "json" },
        { "id": "irr99xz", "ref": "arg", "value": "url" }
      ],
      "edges": [
        { "from": "gsiimdp", "to": "lapeojg", "as": "arg0" },
        { "as": "import_graph", "from": "3zfjt1h", "to": "lapeojg" },
        { "from": "05eag47", "to": "lapeojg", "as": "name" },
        { "as": "self", "from": "2vtokcl", "to": "3zfjt1h" },
        { "from": "i9x02is", "to": "3zfjt1h", "as": "fn" },
        { "from": "irr99xz", "to": "2vtokcl", "as": "url" }
      ]
    },
    {
      "id": "object_entries",
      "name": "object_entries",
      "in": "tkd4tqn",
      "out": "j8c79uf",
      "nodes": [
        { "name": "out", "id": "j8c79uf", "ref": "filter" },
        { "id": "tkd4tqn", "name": "in" },
        { "id": "hfexsuu", "script": "return !key?.startsWith('_');" },
        { "id": "bgi2g37", "script": "return Object.entries(obj)" },
        { "id": "7gqcw0o", "ref": "arg", "value": "0.0" },
        { "id": "kpakw50", "ref": "arg", "value": "object" }
      ],
      "edges": [
        { "from": "tkd4tqn", "to": "j8c79uf", "as": "arr" },
        { "from": "hfexsuu", "to": "j8c79uf", "as": "fn", "type": "ref" },
        { "from": "bgi2g37", "to": "j8c79uf", "as": "arr" },
        { "from": "7gqcw0o", "to": "hfexsuu", "as": "key" },
        { "from": "kpakw50", "to": "bgi2g37", "as": "obj" }
      ]
    },
    {
      "id": "css_anim",
      "name": "css_anim",
      "in": "cawqofn",
      "out": "spy9h48",
      "nodes": [
        {
          "name": "out",
          "id": "spy9h48",
          "script": "return Object.fromEntries((Array.isArray(arr[0]) ? arr[0] : arr).map((v, i, a) => [Math.floor((i / a.length)*100) + \"%\", v]))"
        },
        { "id": "cawqofn", "ref": "array", "name": "in" }
      ],
      "edges": [{ "as": "arr", "from": "cawqofn", "to": "spy9h48", "type": "resolve" }]
    },
    {
      "id": "css_styles",
      "name": "css_styles",
      "in": "xw3pmx7",
      "out": "5yxmxua",
      "nodes": [
        { "id": "5yxmxua", "ref": "html_element", "name": "out" },
        { "id": "vgv61zj", "ref": "html_text" },
        { "id": "jstjx7g" },
        { "id": "h40e3j9", "value": "style" },
        { "id": "xw3pmx7", "name": "in" },
        { "id": "jlgp7uy", "ref": "call", "name": "named_obj/out" },
        { "id": "o1j78dd", "value": "result-view" },
        { "id": "ij4z84e", "ref": "map" },
        { "id": "q3pwj9j", "value": "join" },
        { "id": "d6h3gdw", "ref": "array" },
        { "id": "j8c79uf", "name": "object_entries", "ref": "object_entries" },
        { "id": "n9g4wyq", "ref": "runnable" },
        { "id": "z63iaay", "script": "return \"\\n\";" },
        { "id": "vwsgweb", "ref": "default" },
        { "id": "aelf1a7", "script": "return key + '{' + value + '}'", "name": "out" },
        { "id": "mkwx4yx" },
        { "id": "fzr4mkv", "ref": "arg", "value": "css_object" },
        { "id": "5eqf77t", "value": "element.0", "ref": "arg" },
        { "id": "5pwetw5", "ref": "if" },
        { "id": "o5ojdyc", "script": "return key.startsWith(\"@keyframes\")" },
        { "id": "1hpnid4", "ref": "call" },
        { "id": "slj7ynn/jlgp7uy", "ref": "call", "name": "named_obj/out" },
        { "id": "ft1oksl", "ref": "arg", "value": "element.0" },
        { "id": "bbbp82v", "ref": "map" },
        { "id": "cp66ig5", "value": "join" },
        { "id": "uwq9u81", "ref": "array" },
        { "id": "slj7ynn/ij4z84e", "ref": "map" },
        { "id": "slj7ynn/q3pwj9j", "value": "join" },
        { "id": "slj7ynn/d6h3gdw", "ref": "array" },
        { "id": "i1ifamx", "ref": "object_entries" },
        { "id": "druspar", "ref": "runnable" },
        { "id": "gth1wc2", "script": "return \"\\n\";" },
        { "id": "slj7ynn/j8c79uf", "name": "object_entries", "ref": "object_entries" },
        { "id": "slj7ynn/n9g4wyq", "ref": "runnable" },
        { "id": "slj7ynn/z63iaay", "script": "return \"\\n\";" },
        { "id": "y25dg2n", "value": "element.1", "ref": "arg" },
        { "id": "0d4yh8u", "script": "return key + ': ' + value + \";\";" },
        { "id": "slj7ynn/vwsgweb", "ref": "default" },
        { "id": "slj7ynn/aelf1a7", "script": "return key + '{' + value + '}'", "name": "out" },
        { "id": "h13a9fd", "ref": "arg", "value": "element.0" },
        { "id": "h7me3v8", "ref": "arg", "value": "element.1" },
        { "id": "slj7ynn/mkwx4yx" },
        { "id": "slj7ynn/fzr4mkv", "ref": "arg", "value": "element.1" },
        { "id": "slj7ynn/5eqf77t", "value": "element.0", "ref": "arg" },
        { "id": "slj7ynn/1hpnid4", "ref": "call" },
        { "id": "slj7ynn/bbbp82v", "ref": "map" },
        { "id": "slj7ynn/cp66ig5", "value": "join" },
        { "id": "slj7ynn/uwq9u81", "ref": "array" },
        { "id": "slj7ynn/i1ifamx", "ref": "object_entries" },
        { "id": "slj7ynn/druspar", "ref": "runnable" },
        { "id": "slj7ynn/gth1wc2", "script": "return \"\\n\";" },
        { "id": "slj7ynn/y25dg2n", "value": "element.1", "ref": "arg" },
        { "id": "slj7ynn/0d4yh8u", "script": "return key + ': ' + value + \";\";" },
        { "id": "slj7ynn/h13a9fd", "ref": "arg", "value": "element.0" },
        { "id": "slj7ynn/h7me3v8", "ref": "arg", "value": "element.1" }
      ],
      "edges": [
        { "from": "vgv61zj", "to": "5yxmxua", "as": "children" },
        { "from": "jstjx7g", "to": "5yxmxua", "as": "props" },
        { "from": "h40e3j9", "to": "5yxmxua", "as": "dom_type" },
        { "from": "xw3pmx7", "to": "5yxmxua", "as": "arg3" },
        { "from": "jlgp7uy", "to": "vgv61zj", "as": "text" },
        { "from": "o1j78dd", "to": "jstjx7g", "as": "key" },
        { "from": "ij4z84e", "to": "jlgp7uy", "as": "self" },
        { "from": "q3pwj9j", "to": "jlgp7uy", "as": "fn" },
        { "from": "d6h3gdw", "to": "jlgp7uy", "as": "args" },
        { "from": "j8c79uf", "to": "ij4z84e", "as": "array" },
        { "as": "fn", "from": "n9g4wyq", "to": "ij4z84e" },
        { "from": "z63iaay", "to": "d6h3gdw", "as": "arg0" },
        { "from": "vwsgweb", "to": "j8c79uf", "as": "object" },
        { "as": "fn", "from": "aelf1a7", "to": "n9g4wyq" },
        { "from": "mkwx4yx", "to": "vwsgweb", "as": "otherwise" },
        { "from": "fzr4mkv", "to": "vwsgweb", "as": "value" },
        { "from": "5eqf77t", "to": "aelf1a7", "as": "key" },
        { "from": "5pwetw5", "to": "aelf1a7", "as": "value" },
        { "from": "o5ojdyc", "to": "5pwetw5", "as": "pred" },
        { "as": "false", "from": "1hpnid4", "to": "5pwetw5" },
        { "from": "slj7ynn/jlgp7uy", "to": "5pwetw5", "as": "true" },
        { "as": "key", "from": "ft1oksl", "to": "o5ojdyc" },
        { "from": "bbbp82v", "to": "1hpnid4", "as": "self" },
        { "from": "cp66ig5", "to": "1hpnid4", "as": "fn" },
        { "from": "uwq9u81", "to": "1hpnid4", "as": "args" },
        { "from": "slj7ynn/ij4z84e", "to": "slj7ynn/jlgp7uy", "as": "self" },
        { "from": "slj7ynn/q3pwj9j", "to": "slj7ynn/jlgp7uy", "as": "fn" },
        { "from": "slj7ynn/d6h3gdw", "to": "slj7ynn/jlgp7uy", "as": "args" },
        { "from": "i1ifamx", "to": "bbbp82v", "as": "array" },
        { "as": "fn", "from": "druspar", "to": "bbbp82v" },
        { "from": "gth1wc2", "to": "uwq9u81", "as": "arg0" },
        { "from": "slj7ynn/j8c79uf", "to": "slj7ynn/ij4z84e", "as": "array" },
        { "as": "fn", "from": "slj7ynn/n9g4wyq", "to": "slj7ynn/ij4z84e" },
        { "from": "slj7ynn/z63iaay", "to": "slj7ynn/d6h3gdw", "as": "arg0" },
        { "from": "y25dg2n", "to": "i1ifamx", "as": "object" },
        { "as": "fn", "from": "0d4yh8u", "to": "druspar" },
        { "from": "slj7ynn/vwsgweb", "to": "slj7ynn/j8c79uf", "as": "object" },
        { "as": "fn", "from": "slj7ynn/aelf1a7", "to": "slj7ynn/n9g4wyq" },
        { "from": "h13a9fd", "to": "0d4yh8u", "as": "key" },
        { "from": "h7me3v8", "to": "0d4yh8u", "as": "value" },
        { "from": "slj7ynn/mkwx4yx", "to": "slj7ynn/vwsgweb", "as": "otherwise" },
        { "from": "slj7ynn/fzr4mkv", "to": "slj7ynn/vwsgweb", "as": "value" },
        { "from": "slj7ynn/5eqf77t", "to": "slj7ynn/aelf1a7", "as": "key" },
        { "as": "value", "from": "slj7ynn/1hpnid4", "to": "slj7ynn/aelf1a7" },
        { "from": "slj7ynn/bbbp82v", "to": "slj7ynn/1hpnid4", "as": "self" },
        { "from": "slj7ynn/cp66ig5", "to": "slj7ynn/1hpnid4", "as": "fn" },
        { "from": "slj7ynn/uwq9u81", "to": "slj7ynn/1hpnid4", "as": "args" },
        { "from": "slj7ynn/i1ifamx", "to": "slj7ynn/bbbp82v", "as": "array" },
        { "as": "fn", "from": "slj7ynn/druspar", "to": "slj7ynn/bbbp82v" },
        { "from": "slj7ynn/gth1wc2", "to": "slj7ynn/uwq9u81", "as": "arg0" },
        { "from": "slj7ynn/y25dg2n", "to": "slj7ynn/i1ifamx", "as": "object" },
        { "as": "fn", "from": "slj7ynn/0d4yh8u", "to": "slj7ynn/druspar" },
        { "from": "slj7ynn/h13a9fd", "to": "slj7ynn/0d4yh8u", "as": "key" },
        { "from": "slj7ynn/h7me3v8", "to": "slj7ynn/0d4yh8u", "as": "value" }
      ]
    },
    {
      "edges": [
        { "from": "gvkhkfw", "to": "nn4twx9", "as": "children" },
        { "from": "7rhq0q5", "to": "nn4twx9", "as": "_" },
        { "from": "4972gx3", "to": "gvkhkfw", "as": "arg1" },
        { "from": "1ldhfah", "to": "gvkhkfw", "as": "arg0" },
        { "from": "ee5i5r2", "to": "4972gx3", "as": "dom_type" },
        { "from": "ro8n2gc", "to": "4972gx3", "as": "props" },
        { "from": "wet0jdv", "to": "1ldhfah", "as": "children" },
        { "from": "gcuxiw9", "to": "1ldhfah", "as": "props" },
        { "from": "875c1wk", "to": "1ldhfah", "as": "dom_type" },
        { "from": "t6q6rvf", "to": "ro8n2gc", "as": "arg0" },
        { "from": "rjwtb3c", "to": "ro8n2gc", "as": "props" },
        { "from": "utkc9o6", "to": "wet0jdv", "as": "arg0" },
        { "from": "jxl9r29", "to": "gcuxiw9", "as": "for" },
        { "from": "2zxw9oo", "to": "t6q6rvf", "as": "onkeydown" },
        { "from": "i7y9dyy", "to": "t6q6rvf", "as": "onchange" },
        { "from": "vks4vul", "to": "rjwtb3c", "as": "value" },
        { "from": "ddfgy2s", "to": "rjwtb3c", "as": "otherwise" },
        { "from": "trd8ptp", "to": "utkc9o6", "as": "text" },
        { "from": "zfrrk0z", "to": "jxl9r29", "as": "value" },
        { "to": "2zxw9oo", "from": "qseh2tb", "as": "fn", "type": "ref" },
        { "from": "b0j8nyq", "to": "i7y9dyy", "as": "dispatch" },
        { "from": "eotod0l", "to": "i7y9dyy", "as": "seq" },
        { "from": "qxwvdfe", "to": "i7y9dyy", "as": "value" },
        { "from": "0dnqo5l", "to": "i7y9dyy", "as": "onchange_fn" },
        { "from": "1wps21n", "to": "qseh2tb", "as": "a1" },
        { "from": "y5q7mbn", "to": "qseh2tb", "as": "a0" },
        { "from": "qjc0zt6", "to": "eotod0l", "as": "arg" },
        { "from": "widk6u6", "to": "qjc0zt6", "as": "fn" },
        { "from": "506ntvb", "to": "qjc0zt6", "as": "value" },
        { "from": "4ck1vaf", "to": "widk6u6", "as": "fn" }
      ],
      "nodes": [
        {
          "id": "nn4twx9",
          "ref": "html_element",
          "inputs": [
            { "from": "bw4iez5/gvkhkfw", "to": "bw4iez5/nn4twx9", "as": "children" },
            { "from": "bw4iez5/7rhq0q5", "to": "bw4iez5/nn4twx9", "as": "props" }
          ],
          "name": "out"
        },
        { "id": "gvkhkfw", "ref": "array" },
        { "id": "7rhq0q5", "name": "in" },
        { "id": "1ldhfah", "ref": "html_element", "name": "label" },
        { "id": "4972gx3", "ref": "html_element" },
        { "id": "wet0jdv", "ref": "array" },
        { "id": "gcuxiw9" },
        { "id": "875c1wk", "value": "label" },
        { "id": "ee5i5r2", "value": "input" },
        { "id": "ro8n2gc", "ref": "merge_objects" },
        { "id": "n1qcxu2", "value": "true" },
        { "id": "utkc9o6", "ref": "html_text" },
        { "id": "jxl9r29", "script": "return \"input-\" + name;" },
        { "id": "t6q6rvf" },
        { "id": "rjwtb3c", "ref": "default" },
        { "id": "varubwp" },
        { "id": "trd8ptp", "ref": "arg", "value": "name" },
        { "id": "zfrrk0z", "ref": "arg", "value": "name" },
        { "id": "2zxw9oo", "ref": "execute_graph", "name": "stop_propagation" },
        { "id": "sjw3rie", "ref": "default" },
        { "id": "vks4vul", "ref": "arg", "value": "props" },
        { "id": "ddfgy2s" },
        { "id": "671rzr9", "ref": "arg", "value": "name" },
        { "id": "ccir2fl", "ref": "arg", "value": "name" },
        { "id": "qseh2tb", "ref": "array" },
        { "id": "i7y9dyy", "ref": "runnable" },
        { "id": "fihihz0", "ref": "arg", "value": "oninput" },
        {
          "id": "1wps21n",
          "name": "stop propagation effect",
          "out": "hj2cig0",
          "nodes": [
            { "id": "hj2cig0", "ref": "array", "name": "stop propagation effect" },
            { "id": "1pvaim9", "ref": "execute_graph" },
            { "id": "0o86xp3", "ref": "arg", "value": "1" },
            { "id": "d60jwms", "script": "payload.stopPropagation();" },
            { "id": "xgbubrq", "ref": "arg", "value": "1" }
          ],
          "edges": [
            { "from": "1pvaim9", "to": "hj2cig0", "as": "a0" },
            { "from": "0o86xp3", "to": "hj2cig0", "as": "a1" },
            { "from": "d60jwms", "to": "1pvaim9", "as": "fn", "type": "ref" },
            { "from": "xgbubrq", "to": "d60jwms", "as": "payload" }
          ]
        },
        { "id": "y5q7mbn", "ref": "arg", "value": "0" },
        { "id": "y9bkhqc" },
        { "id": "6m6m1hq_1/ocuonub/qjc0zt6", "ref": "event_publisher" },
        { "id": "nb2sswc", "ref": "arg", "value": "name" },
        { "id": "6m6m1hq_1/ocuonub/506ntvb", "value": "payload.event.target.value", "ref": "arg" },
        { "id": "6m6m1hq_1/ocuonub/4ck1vaf", "ref": "arg", "value": "payload.name" }
      ],
      "out": "nn4twx9",
      "in": "7rhq0q5",
      "name": "input",
      "id": "input"
    },
    {
      "id": "html_text",
      "description": "Some HTML plaintext. Usually used as a child of html_element.",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "text", "ref": "arg", "value": "text" },
        { "id": "text_value", "value": "text_value" },
        { "id": "out" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "_", "type": "ref" },
        { "from": "text_value", "to": "out", "as": "dom_type" },
        { "from": "text", "to": "out", "as": "text" }
      ]
    },
    {
      "id": "html_element",
      "description": "An HTML Element. `children` is an array of html_element or html_text, `props` are the attributes for the html element as an object.",
      "nodes": [
        { "id": "in" },
        { "id": "children", "ref": "arg", "value": "children" },
        { "id": "props", "ref": "arg", "value": "props" },
        { "id": "dom_type", "ref": "arg", "value": "dom_type" },
        { "id": "div", "value": "div" },
        {
          "id": "fill_children",
          "script": "return children === undefined ? [] : children.length !== undefined ? children.filter(c => !!c).map(c => c.el ?? c) : [children.el ?? children]"
        },
        { "id": "fill_props", "script": "return props ?? {}" },
        { "id": "dom_type_def", "ref": "default" },
        {
          "id": "out",
          "script": "if(!(typeof dom_type === 'string' && Array.isArray(children))){ throw new Error('invalid element');} children.filter(c => c).forEach(c => {if(typeof c.dom_type !== 'string'){throw new Error ('invalid child element');}}); return {el: {dom_type, props, children}}"
        }
      ],
      "edges": [
        { "from": "children", "to": "fill_children", "as": "children" },
        { "from": "props", "to": "fill_props", "as": "props", "type": "resolve" },
        { "from": "fill_children", "to": "out", "as": "children", "type": "resolve" },
        { "from": "fill_props", "to": "out", "as": "props" },
        { "from": "dom_type", "to": "dom_type_def", "as": "value" },
        { "from": "div", "to": "dom_type_def", "as": "otherwise" },
        { "from": "dom_type_def", "to": "out", "as": "dom_type" },
        { "from": "in", "to": "out", "as": "args", "type": "ref" }
      ]
    },
    {
      "id": "icon",
      "name": "icon",
      "out": "c2sko9c",
      "nodes": [
        { "id": "c2sko9c", "ref": "html_element", "name": "ionicon" },
        { "id": "2lr3ihi", "value": "ion-icon" },
        { "id": "empty_obj", "value": {} },
        { "id": "props", "ref": "arg", "value": "props" },
        { "id": "defined_props", "ref": "if" },
        { "id": "name_path", "value": "name" },
        { "id": "a0jb5es", "ref": "set" },
        { "id": "s5x2r1f", "ref": "arg", "value": "icon" }
      ],
      "edges": [
        { "from": "2lr3ihi", "to": "c2sko9c", "as": "dom_type" },
        { "from": "props", "to": "defined_props", "as": "true" },
        { "from": "props", "to": "defined_props", "as": "pred" },
        { "from": "empty_obj", "to": "defined_props", "as": "false" },
        { "from": "defined_props", "to": "a0jb5es", "as": "target" },
        { "from": "name_path", "to": "a0jb5es", "as": "path" },
        { "from": "a0jb5es", "to": "c2sko9c", "as": "props" },
        { "from": "s5x2r1f", "to": "a0jb5es", "as": "value" }
      ]
    },
    {
      "id": "add_circle_icon",
      "out": "out",
      "nodes": [
        { "id": "in_props", "ref": "arg", "value": "props" },
        { "id": "viewbox_props", "value": { "viewBox": "0 0 512 512" } },
        { "id": "props", "ref": "merge_objects" },
        { "id": "svg", "value": "svg" },
        { "id": "path", "value": "path" },
        { "id": "add_props", "value": { "d": "M256 176v160M336 256H176", "class": "add" } },
        { "id": "add", "ref": "html_element" },
        {
          "id": "circle_props",
          "value": {
            "d": "M448 256c0-106-86-192-192-192S64 150 64 256s86 192 192 192 192-86 192-192z",
            "class": "circle"
          }
        },
        { "id": "circle", "ref": "html_element" },
        { "id": "children", "ref": "array" },
        { "id": "out", "ref": "html_element" }
      ],
      "edges": [
        { "from": "add_props", "to": "add", "as": "props" },
        { "from": "circle_props", "to": "circle", "as": "props" },
        { "from": "add", "to": "children", "as": "a1" },
        { "from": "circle", "to": "children", "as": "a0" },
        { "from": "path", "to": "add", "as": "dom_type" },
        { "from": "path", "to": "circle", "as": "dom_type" },
        { "from": "svg", "to": "out", "as": "dom_type" },
        { "from": "children", "to": "out", "as": "children" },
        { "from": "in_props", "to": "props", "as": "o1" },
        { "from": "viewbox_props", "to": "props", "as": "o2" },
        { "from": "props", "to": "out", "as": "props" }
      ]
    },
    {
      "id": "run_h",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "dom_type", "ref": "arg", "value": "dom_type" },
        { "id": "props", "ref": "arg", "value": "props" },
        { "id": "children", "ref": "arg", "value": "children" },
        { "id": "text", "ref": "arg", "value": "text" },
        {"id": "map_child_text", "ref": "arg", "value": "element.text"},
        {"id": "map_child_props", "ref": "arg", "value": "element.props"},
        {"id": "map_child_dom_type", "ref": "arg", "value": "element.dom_type"},
        {"id": "map_child_children", "ref": "arg", "value": "element.children"},
        {"id": "el_path", "value": "el"},
        {"id": "map_run", "ref": "run_h"},
        {"id": "map_el", "ref": "get"},
        {"id": "map_runnable", "ref": "runnable"},
        {
          "id": "mapped_children",
          "ref": "map"
        },
        {"id": "empty_array", "value": []},
        {"id": "out_children", "ref": "if"},
        { "id": "out_h", "extern": "ha.h" },
        { "id": "out_text", "extern": "ha.text" },
        { "id": "out_input", "script": "return dom_type === 'text_value' ? 'h_text' : 'h'" },
        { "id": "out_el", "ref": "switch" },
        { "id": "out" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "_", "type": "ref" },
        { "from": "dom_type", "to": "out_input", "as": "dom_type"},
        { "from": "dom_type", "to": "out_h", "as": "dom_type" },
        {"from": "map_child_props", "to": "map_run", "as": "props"},
        {"from": "map_child_text", "to": "map_run", "as": "text"},
        {"from": "map_child_dom_type", "to": "map_run", "as": "dom_type"},
        {"from": "map_child_children", "to": "map_run", "as": "children"},
        {"from": "map_run", "to": "map_el", "as": "target"},
        {"from": "el_path", "to": "map_el", "as": "path"},
        {"from": "map_el", "to": "map_runnable", "as": "fn"},
        {"from": "map_runnable", "to": "mapped_children", "as": "fn"},
        { "from": "children", "to": "mapped_children", "as": "array"},
        { "from": "children", "to": "out_children", "as": "pred" },
        { "from": "mapped_children", "to": "out_children", "as": "true" },
        { "from": "empty_array", "to": "out_children", "as": "false" },
        { "from": "out_children", "to": "out_h", "as": "children"},
        { "from": "props", "to": "out_h", "as": "props" },
        { "from": "text", "to": "out_text", "as": "text", "type": "resolve" },
        { "from": "out_text", "to": "out_el", "as": "h_text" },
        { "from": "out_h", "to": "out_el", "as": "h" },
        { "from": "out_input", "to": "out_el", "as": "input"},
        { "from": "out_el", "to": "out", "as": "el", "type": "resolve" }
      ]
    },
    {
      "id": "expand_contract",
      "nodes": [
        { "id": "in" },
        { "id": "node_id", "ref": "arg", "value": "node_id" },
        { "id": "display_graph", "ref": "arg", "value": "display_graph" },
        { "id": "display_graph_out", "ref": "arg", "value": "display_graph_out" },
        { "id": "selected_node", "script": "return display_graph.nodes.find(n => n.id === selected)" },
        {
          "id": "expand_contract_result_inputs",
          "script": "return expandable ? 'expand' : contractable ? 'contract' : undefined"
        },
        { "id": "selected", "script": "return [contract] ?? [expand]" },
        { "id": "expand_contract_result", "ref": "switch" },
        { "id": "get_name", "script": "return node.name" },
        { "id": "expandable_id", "script": "return node.id ? node.id + '/' + out : undefined" },
        {
          "id": "contractable_id",
          "script": "node_id = name ?? node_id; return !node_id ? undefined : node_id.endsWith('/out') ? node_id.substring(0, node_id.lastIndexOf('/')) : node_id.lastIndexOf('/') >= 0 ? node_id.substring(0, node_id.lastIndexOf('/')) : node_id"
        },
        {
          "id": "expand",
          "script": "return display_graph && node_id ? _lib.scripts.expand_node({display_graph, node_id}) : []"
        },
        {
          "id": "contract",
          "script": "return display_graph && node_id ? _lib.scripts.contract_node({display_graph, node_id, name, node_name}) : []"
        },
        { "id": "has_nodes", "script": "return !!display_graph.nodes.find(n => n.id === node_id).nodes" },
        { "id": "is_contractable", "script": "return !has_nodes" },
        { "id": "out", "ref": "default" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args", "type": "ref" },
        { "from": "node_id", "to": "selected_node", "as": "selected" },
        { "from": "display_graph", "to": "selected_node", "as": "display_graph" },
        { "from": "display_graph", "to": "has_nodes", "as": "display_graph" },
        { "from": "node_id", "to": "has_nodes", "as": "node_id" },
        { "from": "display_graph", "to": "contract", "as": "display_graph" },
        { "from": "node_id", "to": "contract", "as": "node_id" },
        { "from": "node_id", "to": "expand", "as": "node_id" },
        { "from": "display_graph", "to": "expand", "as": "display_graph" },
        { "from": "has_nodes", "to": "is_contractable", "as": "has_nodes" },
        { "from": "selected_node", "to": "get_name", "as": "node" },
        { "from": "selected_node", "to": "expandable_id", "as": "node" },
        { "from": "display_graph_out", "to": "expandable_id", "as": "out" },
        { "from": "selected_node", "to": "contract", "as": "node" },
        { "from": "get_name", "to": "contract", "as": "node_name" },
        { "from": "contractable_id", "to": "contract", "as": "name" },
        { "from": "get_name", "to": "is_contractable", "as": "name" },
        { "from": "node_id", "to": "contractable_id", "as": "node_id" },
        { "from": "get_name", "to": "contractable_id", "as": "name" },
        { "from": "contractable_id", "to": "selected", "as": "contract" },
        { "from": "expandable_id", "to": "selected", "as": "expand" },
        { "from": "has_nodes", "to": "expand_contract_result_inputs", "as": "expandable" },
        { "from": "is_contractable", "to": "expand_contract_result_inputs", "as": "contractable" },
        { "from": "expand_contract_result_inputs", "to": "selected", "as": "input" },
        { "from": "expand_contract_result_inputs", "to": "expand_contract_result", "as": "input" },
        { "from": "selected", "to": "expand_contract_result", "as": "selected" },
        { "from": "expand", "to": "expand_contract_result", "as": "expand" },
        { "from": "contract", "to": "expand_contract_result", "as": "contract" },
        { "from": "expand_contract_result", "to": "out", "as": "value" },
        { "from": "in", "to": "out", "as": "otherwise" }
      ]
    },
    {
      "id": "graph_display",
      "name": "graph_display",
      "in": "in",
      "out": "out",
      "nodes": [
        { "id": "out", "ref": "html_element", "name": "graph_display" },
        { "id": "ml655hs73", "args": [], "value": "pre" },
        { "id": "thsez3hy1", "args": [], "ref": "html_text" },
        {
          "id": "stringify",
          "args": ["data"],
          "script": "return JSON.stringify({...data.node, nodes: data.node.nodes.length, edges:data.node.edges.length, result: data.result}, null, 2)"
        },
        { "id": "in" }
      ],
      "edges": [
        { "from": "ml655hs73", "to": "out", "as": "dom_type" },
        { "from": "thsez3hy1", "to": "out", "as": "children" },
        { "from": "stringify", "to": "thsez3hy1", "as": "text" },
        { "from": "in", "to": "stringify", "as": "data" },
        { "from": "in", "to": "stringify", "as": "data" }
      ]
    },
    { "id": "not", "args": ["target"], "script": "return !target" },
    { "id": "data", "value": "data" },
    { "id": "graph", "value": "graph" },
    { "id": "display_graph", "value": "display_graph" },
    { "id": "nodes", "value": "nodes" },
    { "id": "readonly", "ref": "arg", "value": "readonly" },
    { "id": "norun", "ref": "arg", "value": "norun" },
    { "id": "hash", "ref": "arg", "value": "hash" },
    { "id": "static", "ref": "arg", "value": "static" },
    { "id": "hide_types", "ref": "arg", "value": "hide_types" },
    { "id": "nodes", "ref": "arg", "value": "nodes" },
    { "id": "links", "ref": "arg", "value": "links" },
    { "id": "dimensions", "ref": "arg", "value": "dimensions" },
    { "id": "get_graph", "ref": "arg", "value": "graph" },
    { "id": "get_display_graph", "ref": "arg", "value": "display_graph" },
    { "id": "display_graph_out", "ref": "arg", "value": "display_graph.out" },
    { "id": "html_id", "ref": "arg", "value": "html_id" },
    { "id": "examples", "ref": "arg", "value": "examples" },
    {
      "id": "initial_state",
      "value": {
        "nodes": [],
        "links": [],
        "editing": false,
        "search": false,
        "show_all": false,
        "show_result": false,
        "node_el_width": 256,
        "args_display": false,
        "imports": {},
        "history": [],
        "redo_history": []
      }
    },
    { "id": "error_nodes", "script": "return new Map()" },
    { "id": "hyperapp_init_state" },
    { "id": "calculate_levels", "script": "return _lib.scripts.calculateLevels([], [], display_graph, selected)" },
    { "id": "init_selected", "ref": "array" },
    { "id": "hyperapp_view", "ref": "execute_graph" },
    { "id": "update_hyperapp", "ref": "update_graph_display" },
    { "id": "update_hyperapp_action", "ref": "hyperapp_action" },
    { "id": "update_hyperapp_effect", "ref": "hyperapp_action_effect" },
    { "id": "initialize_hyperapp_app", "ref": "hyperapp_app" },
    { "id": "out" },
    {
      "id": "graph_to_simulation",
      "args": ["nodes", "links", "display_graph", "selected", "levels"],
      "ref": "graph_to_sim_fn",
      "_script": "return _lib.scripts.graphToSimulationNodes({display_graph, nodes, links, selected, levels})"
    },
    { "id": "sim_to_hyperapp", "ref": "sim_to_hyperapp_action" },
    { "id": "graph_to_sim_action", "ref": "execute_graph" },
    { "id": "update_nodes_in" },
    { "id": "onkey_fn", "ref": "hyperapp_action" },
    { "id": "eq", "script": "return a === b;" },
    { "id": "neq", "script": "return a !== b;" },
    {
      "id": "clear_popover_graph",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "popover_path", "value": "popover_graph" },
        { "id": "false", "value": false },
        { "id": "clear_popover", "ref": "set" },
        { "id": "new_state" },
        { "id": "popover_dispatch", "ref": "arg", "value": "state.popover_dispatch" },
        {
          "id": "clear_popover_hyperapp_effect",
          "script": "return [[(dispatch, payload) => { payload.dispatch(s => undefined); dispatch(s => ({...s, popover_dispatch: undefined}))}, {dispatch: popover_dispatch}]]"
        },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "new_state", "as": "args" },
        { "from": "state", "to": "clear_popover", "as": "target" },
        { "from": "state", "to": "clear_popover_hyperapp_effect", "as": "state" },
        { "from": "popover_path", "to": "clear_popover", "as": "path" },
        { "from": "false", "to": "clear_popover", "as": "value" },
        { "from": "clear_popover", "to": "new_state", "as": "state" },
        { "from": "popover_dispatch", "to": "clear_popover_hyperapp_effect", "as": "popover_dispatch" },
        { "from": "clear_popover_hyperapp_effect", "to": "new_state", "as": "effects" },
        { "from": "new_state", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "show_popover_graph",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "popover_graph_path", "value": "popover_graph" },
        { "id": "graph", "ref": "arg", "value": "state.graph" },
        { "id": "html_id", "ref": "arg", "value": "state.html_id" },
        { "id": "dimensions", "ref": "arg", "value": "state.dimensions" },
        { "id": "popover_dispatch", "ref": "arg", "value": "state.popover_dispatch" },
        { "id": "set_popover_graph", "ref": "set" },
        { "id": "popover_graph_value", "ref": "arg", "value": "payload.popover_graph" },
        { "id": "render_popover_graph_effector", "ref": "render_popover_graph_effect" },
        { "id": "render_popover_graph_effect_payload" },
        { "id": "render_popover_graph_effect", "ref": "array" },
        { "id": "effects", "ref": "array" },
        { "id": "new_state" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "state", "to": "set_popover_graph", "as": "target" },
        { "from": "popover_graph_value", "to": "set_popover_graph", "as": "value" },
        { "from": "popover_graph_path", "to": "set_popover_graph", "as": "path" },
        { "from": "set_popover_graph", "to": "new_state", "as": "state" },
        { "from": "popover_graph_value", "to": "render_popover_graph_effect_payload", "as": "display_graph" },
        { "from": "graph", "to": "render_popover_graph_effect_payload", "as": "graph" },
        { "from": "html_id", "to": "render_popover_graph_effect_payload", "as": "html_id" },
        { "from": "dimensions", "to": "render_popover_graph_effect_payload", "as": "dimensions" },
        { "from": "popover_dispatch", "to": "render_popover_graph_effect_payload", "as": "popover_dispatch" },
        { "from": "render_popover_graph_effect_payload", "to": "render_popover_graph_effect", "as": "arg1" },
        { "from": "render_popover_graph_effector", "to": "render_popover_graph_effect", "as": "arg0" },
        { "from": "render_popover_graph_effect", "to": "effects", "as": "arg0" },
        { "from": "effects", "to": "new_state", "as": "effects" },
        { "from": "new_state", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "expand_contract_fn",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "display_graph_path", "value": "display_graph" },
        { "id": "selected_path", "value": "selected" },
        { "id": "node_id", "ref": "arg", "value": "payload.id" },
        { "id": "display_graph", "ref": "arg", "value": "state.display_graph" },
        { "id": "expand_contract", "ref": "expand_contract" },
        { "id": "expand_contract_display_graph", "ref": "get" },
        { "id": "expand_contract_selected", "ref": "get" },
        { "id": "set_selected", "ref": "set" },
        { "id": "update_sim_effector", "ref": "arg", "value": "state.update_sim_effect" },
        { "id": "update_sim_effect", "ref": "array" },
        { "id": "update_display_graph", "script": "return [() => _lib.no.runtime.update_graph(display_graph)]" },
        { "id": "effects", "ref": "array" },
        { "id": "out" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "state", "to": "set_display_graph", "as": "target" },
        { "from": "node_id", "to": "expand_contract", "as": "node_id" },
        { "from": "display_graph", "to": "expand_contract", "as": "display_graph" },
        { "from": "expand_contract", "to": "expand_contract_display_graph", "as": "target" },
        { "from": "display_graph_path", "to": "expand_contract_display_graph", "as": "path" },
        { "from": "expand_contract", "to": "expand_contract_selected", "as": "target" },
        { "from": "selected_path", "to": "expand_contract_selected", "as": "path" },
        { "from": "expand_contract_selected", "to": "set_selected", "as": "value" },
        { "from": "selected_path", "to": "set_selected", "as": "path" },
        { "from": "state", "to": "set_selected", "as": "target" },
        { "from": "update_sim_effector", "to": "update_sim_effect", "as": "a0" },
        { "from": "set_selected", "to": "update_sim_effect", "as": "a1" },
        { "from": "update_sim_effect", "to": "effects", "as": "a1" },
        { "from": "expand_contract_display_graph", "to": "update_display_graph", "as": "display_graph" },
        { "from": "update_display_graph", "to": "effects", "as": "a0" },
        { "from": "set_selected", "to": "out", "as": "state" },
        { "from": "effects", "to": "out", "as": "effects" }
      ]
    },
    {
      "id": "expand_contract_action",
      "out": "out",
      "nodes": [
        {"id": "expand_contract_fn", "ref": "expand_contract_fn"},
        {"id": "out", "ref": "hyperapp_action"}
      ],
      "edges": [
        {"from": "expand_contract_fn", "to": "out", "as": "fn", "type": "ref"}
      ]
    },
    {
      "id": "expand_contract_effect",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "expand_contract_fn", "ref": "expand_contract_fn" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "_", "type": "ref" },
        { "from": "expand_contract_fn", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "delete_node_action",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "nodes", "ref": "arg", "value": "state.display_graph.nodes" },
        { "id": "edges", "ref": "arg", "value": "state.display_graph.edges" },
        { "id": "update_sim_effect", "ref": "arg", "value": "state.update_sim_effect" },
        { "id": "display_graph_out", "ref": "arg", "value": "state.display_graph.out" },
        { "id": "display_graph", "ref": "arg", "value": "state.display_graph" },
        { "id": "history", "ref": "arg", "value": "state.history" },
        { "id": "selected_path", "value": "selected" },
        { "id": "history_path", "value": "history" },
        { "id": "payload", "ref": "arg", "value": "payload" },
        { "id": "node_id", "ref": "arg", "value": "payload.id" },
        { "id": "node", "ref": "find_node" },
        { "id": "parent_edge", "script": "return edges.find(e => e.from === node_id)" },
        { "id": "replaced_edges", "script": "return edges.filter(e => e.to === node_id)" },
        { "id": "new_selected", "script": "return [edges.find(e => e.from === node_id)?.to ?? out]" },
        {
          "id": "history_item",
          "script": "return {action: 'delete_node', node, edges, parent_edge, runnable: {fn: 'delete_node_action', graph: _graph, args: payload}}"
        },
        { "id": "new_history", "ref": "append" },
        { "id": "set_selected", "ref": "set" },
        { "id": "set_history", "ref": "set" },
        { "id": "out" },
        {
          "id": "effects",
          "script": "return [[() => _lib.no.runtime.delete_node(display_graph, id)], [update_sim_effect, new_state.state]]"
        },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "state", "to": "set_edges", "as": "target" },
        { "from": "node_id", "to": "new_nodes", "as": "node_id" },
        { "from": "nodes", "to": "new_nodes", "as": "nodes" },
        { "from": "node_id", "to": "node", "as": "node_id" },
        { "from": "nodes", "to": "node", "as": "nodes" },
        { "from": "new_nodes", "to": "set_nodes", "as": "value" },
        { "from": "nodes_path", "to": "set_nodes", "as": "path" },
        { "from": "state", "to": "set_selected", "as": "target" },
        { "from": "edges", "to": "new_edges", "as": "edges" },
        { "from": "node_id", "to": "new_edges", "as": "node_id" },
        { "from": "parent_edge", "to": "new_edges", "as": "parent_edge" },
        { "from": "edge", "to": "new_edges", "as": "edge" },
        { "from": "new_edges", "to": "set_edges", "as": "value" },
        { "from": "edges_path", "to": "set_edges", "as": "path" },
        { "from": "in", "to": "out", "as": "args" },
        { "from": "set_edges", "to": "set_nodes", "as": "target" },
        { "from": "edges", "to": "new_selected", "as": "edges" },
        { "from": "node_id", "to": "new_selected", "as": "node_id" },
        { "from": "display_graph_out", "to": "new_selected", "as": "out" },
        { "from": "new_selected", "to": "set_selected", "as": "value" },
        { "from": "selected_path", "to": "set_selected", "as": "path" },
        { "from": "set_selected", "to": "set_history", "as": "target" },
        { "from": "payload", "to": "history_item", "as": "payload" },
        { "from": "node", "to": "history_item", "as": "node" },
        { "from": "edges", "to": "replaced_edges", "as": "edges" },
        { "from": "node_id", "to": "replaced_edges", "as": "node_id" },
        { "from": "replaced_edges", "to": "history_item", "as": "edges" },
        { "from": "node_id", "to": "parent_edge", "as": "node_id" },
        { "from": "edges", "to": "parent_edge", "as": "edges" },
        { "from": "parent_edge", "to": "history_item", "as": "parent_edge" },
        { "from": "history", "to": "new_history", "as": "array" },
        { "from": "history_item", "to": "new_history", "as": "item" },
        { "from": "new_history", "to": "set_history", "as": "value" },
        { "from": "history_path", "to": "set_history", "as": "path" },
        { "from": "set_history", "to": "out", "as": "state" },
        { "from": "set_history", "to": "effects", "as": "new_state" },
        { "from": "update_sim_effect", "to": "effects", "as": "update_sim_effect" },
        { "from": "node_id", "to": "effects", "as": "id" },
        { "from": "display_graph", "to": "effects", "as": "display_graph" },
        { "from": "effects", "to": "out", "as": "effects" }
      ]
    },
    {
      "id": "delete_node",
      "out": "out",
      "nodes": [
        { "id": "delete_node", "ref": "delete_node_action" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [{ "from": "delete_node", "to": "out", "as": "fn", "type": "ref" }]
    },
    {
      "id": "next_edge",
      "out": "new_edge",
      "nodes": [
        { "id": "payload_edge", "ref": "arg", "value": "edge" },
        { "id": "nodes", "ref": "arg", "value": "graph.nodes" },
        { "id": "edges", "ref": "arg", "value": "graph.edges" },
        {
          "id": "new_edge",
          "script": "return {...payload_edge, as: payload_edge.as ?? next_arg ??  (`arg${(siblings.map(s => s.as).filter(a => a.startsWith('arg')).sort().map(s => parseInt(s.substring(3))).filter(i => !isNaN(i)).reverse()[0] ?? -1) + 1}`)}"
        },
        { "id": "child_node", "script": "return nodes.find(n => n.id === edge.to)" },
        { "id": "siblings", "script": "return edges.filter(e => e.to === new_edge.to)" },
        { "id": "node_args", "ref": "node_args" },
        {
          "id": "next_arg",
          "script": "return args?.filter(a => !(a === '_node_inputs' || a === '_lib' || a === '_node' || a === '_args') && !siblings.find(e => e.as === a))[0]"
        }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "edges", "to": "new_edges", "as": "array" },
        { "from": "edges", "to": "siblings", "as": "edges" },
        { "from": "payload_edge", "to": "siblings", "as": "new_edge" },
        { "from": "payload_edge", "to": "new_edge", "as": "payload_edge" },
        { "from": "siblings", "to": "new_edge", "as": "siblings" },
        { "from": "nodes", "to": "child_node", "as": "nodes" },
        { "from": "payload_edge", "to": "child_node", "as": "edge" },
        { "from": "nodes", "to": "node_args", "as": "nodes" },
        { "from": "child_node", "to": "node_args", "as": "node" },
        { "from": "siblings", "to": "next_arg", "as": "siblings" },
        { "from": "node_args", "to": "next_arg", "as": "args" },
        { "from": "next_arg", "to": "new_edge", "as": "next_arg" },
        { "from": "siblings", "to": "new_edge", "as": "sibling_count" }
      ]
    },
    {
      "id": "add_edge",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "display_graph", "ref": "arg", "value": "state.display_graph" },
        { "id": "next_edge", "ref": "next_edge" },
        { "id": "edges_path", "value": "display_graph.edges" },
        { "id": "new_edges", "ref": "append" },
        { "id": "set_new_edges", "ref": "set" },
        { "id": "effects", "script": "return [[update_sim_effect, new_state]]" },
        { "id": "new_state" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "_" },
        { "from": "display_graph", "to": "next_edge", "as": "graph" },
        { "from": "next_edge", "to": "new_edges", "as": "item" },
        { "from": "state", "to": "set_new_edges", "as": "target" },
        { "from": "edges_path", "to": "set_new_edges", "as": "path" },
        { "from": "new_edges", "to": "set_new_edges", "as": "value" },
        { "from": "update_sim_effect", "to": "effects", "as": "update_sim_effect" },
        { "from": "set_new_edges", "to": "effects", "as": "new_state" },
        { "from": "set_new_edges", "to": "new_state", "as": "state" },
        { "from": "effects", "to": "new_state", "as": "effects" },
        { "from": "new_state", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "save_effect",
      "script": "return (dispatch, payload) => { const graph_list = JSON.parse(localStorage.getItem('graph_list'))?.filter(l => l !== payload.display_graph.id) ?? []; graph_list.unshift(payload.display_graph.id); localStorage.setItem('graph_list', JSON.stringify(graph_list)); const graphstr = JSON.stringify({...payload.display_graph, node_map: undefined, in_edge_map: undefined}); localStorage.setItem(payload.display_graph.id, graphstr); window.location.hash = '#' + payload.display_graph.id; }"
    },
    {
      "id": "export_effect",
      "script": "return (dispatch, payload) => { const str = `data:text/json;charset=utf-8,${encodeURIComponent(payload.data)}`; const a = document.createElement('a'); a.setAttribute('href', str); a.setAttribute('download', payload.id + '.' + payload.ext); a.click(); a.remove();}"
    },
    { "id": "graph_list_effect", "script": "return (dispatch, payload)" },
    {
      "id": "new_graph_effect",
      "script": "return (dispatch, payload) => { localStorage.removeItem('display_graph'); window.location.reload(); }"
    },
    {
      "id": "focus_effect",
      "script": "return (dispatch, payload) => requestAnimationFrame(() => document.querySelector(payload.selector)?.focus())"
    },
    {
      "id": "blur_effect",
      "script": "return (dispatch, payload) => requestAnimationFrame(() => document.querySelector(payload.selector)?.blur())"
    },
    {
      "id": "open_graph_effect",
      "nodes": [
        { "id": "in" },
        { "id": "new_graph", "ref": "arg", "value": "payload.graph" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "update_sim_effector", "ref": "arg", "value": "state.update_sim_effect" },
        { "id": "update_graph", "script": "return [() => _lib.no.runtime.update_graph(graph)]" },
        { "id": "update_location", "script": "return [() => window.location.hash = '#' + graph.id]" },
        { "id": "display_graph_path", "value": "display_graph" },
        { "id": "set_display_graph", "ref": "set" },
        { "id": "update_sim_effect", "ref": "array" },
        { "id": "effects", "ref": "array" },
        { "id": "result" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args", "type": "ref" },
        { "from": "state", "to": "set_display_graph", "as": "target" },
        { "from": "display_graph_path", "to": "set_display_graph", "as": "path" },
        { "from": "new_graph", "to": "set_display_graph", "as": "value" },
        { "from": "new_graph", "to": "update_graph", "as": "graph" },
        { "from": "new_graph", "to": "update_location", "as": "graph" },
        { "from": "set_display_graph", "to": "result", "as": "state" },
        { "from": "update_sim_effector", "to": "update_sim_effect", "as": "a0" },
        { "from": "update_sim_effect", "to": "effects", "as": "a0" },
        { "from": "update_graph", "to": "effects", "as": "a1" },
        { "from": "update_location", "to": "effects", "as": "a2" },
        { "from": "effects", "to": "result", "as": "effects" },
        { "from": "result", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "open_saved_graph_effect",
      "nodes": [
        { "id": "in" },
        { "id": "new_graph_id", "ref": "arg", "value": "payload.id" },
        { "id": "new_graph", "script": "return JSON.parse(localStorage.getItem(id))" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "open_graph_effector", "ref": "open_graph_effect" },
        { "id": "open_graph_payload" },
        { "id": "open_graph_effect", "ref": "array" },
        { "id": "effects", "ref": "array" },
        { "id": "result" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args", "type": "ref" },
        { "from": "new_graph_id", "to": "new_graph", "as": "id" },
        { "from": "new_graph", "to": "open_graph_payload", "as": "graph" },
        { "from": "open_graph_effector", "to": "open_graph_effect", "as": "a0" },
        { "from": "open_graph_payload", "to": "open_graph_effect", "as": "a1" },
        { "from": "open_graph_effect", "to": "effects", "as": "a0" },
        { "from": "state", "to": "result", "as": "state" },
        { "from": "effects", "to": "result", "as": "effects" },
        { "from": "result", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "update_node_fn",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "nodes", "ref": "arg", "value": "state.display_graph.nodes" },
        { "id": "edges", "ref": "arg", "value": "state.display_graph.edges" },
        { "id": "history", "ref": "arg", "value": "state.history" },
        { "id": "display_graph", "ref": "arg", "value": "state.display_graph" },
        { "id": "update_hyperapp", "ref": "arg", "value": "state.update_hyperapp" },
        { "id": "update_hyperapp_effect", "ref": "array" },
        { "id": "new_display_graph_values" },
        { "id": "new_display_graph", "ref": "merge_objects" },
        { "id": "payload", "ref": "arg", "value": "payload" },
        { "id": "node_id", "ref": "arg", "value": "payload.id" },
        { "id": "node_properties", "ref": "arg", "value": "payload.properties" },
        { "id": "prev_node", "ref": "find_node" },
        { "id": "new_node", "ref": "merge_objects" },
        { "id": "replace_node", "script": "return nodes.map(n => n.id === new_node.id ? new_node : n)" },
        { "id": "node_args", "ref": "node_args" },
        {
          "id": "arg_value",
          "script": "return node.ref === 'arg' ? node.value.substring(node.value.lastIndexOf('.') + 1) : undefined"
        },
        {
          "id": "replace_edges",
          "script": "const parents = edges.filter(e => e.to === node_id).map(e => e.as); const needed_args = !update.hasOwnProperty('ref') ? [] : node_args.filter(a => !parents.includes(a) && a !== '_node_inputs' && a !== '_graph' && a !== '_lib' && a !== '_args'); return edges.map(e => e.from === node_id && arg_value && (e.as.startsWith('arg') || e.as === prev_node?.value) ? {...e, as: arg_value} : e.to === node_id && !node_args.includes(e.as) && needed_args?.length > 0 ? {...e, as: needed_args.shift()} : e)"
        },
        {
          "id": "history_item",
          "script": "return {action: 'update_node', node, update, parent_edge: edges.find(e => e.from === node.id), child_edges: edges.filter(e => e.to === node.id), runnable: {fn: 'update_node_fn', graph: _graph, args: payload}}"
        },
        { "id": "new_history", "ref": "append" },
        { "id": "history_path", "value": "history" },
        { "id": "set_history", "ref": "set" },
        { "id": "add_node_effect", "script": "return [() => _lib.no.runtime.update_graph(display_graph)]" },
        { "id": "effects", "ref": "array" },
        { "id": "out" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "nodes", "to": "replace_node", "as": "nodes" },
        { "from": "nodes", "to": "prev_node", "as": "nodes" },
        { "from": "edges", "to": "replace_edges", "as": "edges" },
        { "from": "node_properties", "to": "replace_edges", "as": "update" },
        { "from": "node_id", "to": "prev_node", "as": "node_id" },
        { "from": "node_properties", "to": "new_node", "as": "o1" },
        { "from": "prev_node", "to": "new_node", "as": "o0" },
        { "from": "new_node", "to": "replace_node", "as": "new_node" },
        { "from": "state", "to": "set_display_graph_nodes", "as": "target" },
        { "from": "display_graph_nodes_path", "to": "set_display_graph_nodes", "as": "path" },
        { "from": "replace_node", "to": "new_display_graph_values", "as": "nodes" },
        { "from": "nodes", "to": "node_args", "as": "nodes" },
        { "from": "new_node", "to": "node_args", "as": "node" },
        { "from": "new_node", "to": "arg_value", "as": "node" },
        { "from": "node_id", "to": "arg_value", "as": "node_id" },
        { "from": "prev_node", "to": "replace_edges", "as": "prev_node" },
        { "from": "arg_value", "to": "replace_edges", "as": "arg_value" },
        { "from": "node_args", "to": "replace_edges", "as": "node_args" },
        { "from": "node_id", "to": "replace_edges", "as": "node_id" },
        { "from": "replace_edges", "to": "new_display_graph_values", "as": "edges" },
        { "from": "new_display_graph_values", "to": "new_display_graph", "as": "o1" },
        { "from": "display_graph", "to": "new_display_graph", "as": "o0" },
        { "from": "display_graph_edges_path", "to": "set_display_graph_edges", "as": "path" },
        { "from": "state", "to": "set_history", "as": "target" },
        { "from": "payload", "to": "history_item", "as": "payload" },
        { "from": "edges", "to": "history_item", "as": "edges" },
        { "from": "node_properties", "to": "history_item", "as": "update" },
        { "from": "prev_node", "to": "history_item", "as": "node" },
        { "from": "history_path", "to": "set_history", "as": "path" },
        { "from": "history", "to": "new_history", "as": "array" },
        { "from": "history_item", "to": "new_history", "as": "item" },
        { "from": "new_history", "to": "set_history", "as": "value" },
        { "from": "set_history", "to": "out", "as": "state" },
        { "from": "update_hyperapp", "to": "update_hyperapp_effect", "as": "a0" },
        { "from": "update_hyperapp_effect", "to": "effects", "as": "a1" },
        { "from": "new_display_graph", "to": "add_node_effect", "as": "display_graph" },
        { "from": "add_node_effect", "to": "effects", "as": "a0" },
        { "from": "effects", "to": "out", "as": "effects" }
      ]
    },
    {
      "id": "update_node_action",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "update_node_fn", "ref": "update_node_fn" },
        { "id": "out", "ref": "hyperapp_action" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "update_node_fn", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "update_node",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "update_node_fn", "ref": "update_node_fn" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "update_node_fn", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "update_edge_fn",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "edges", "ref": "arg", "value": "state.display_graph.edges" },
        { "id": "history", "ref": "arg", "value": "state.history" },
        { "id": "display_graph", "ref": "arg", "value": "state.display_graph" },
        { "id": "payload", "ref": "arg", "value": "payload" },
        { "id": "edge", "ref": "arg", "value": "payload.id" },
        { "id": "properties", "ref": "arg", "value": "payload.properties" },
        { "id": "history_path", "value": "history" },
        { "id": "prev_edge", "script": "return edges.find(e => e.to === edge.to && e.from === edge.from)" },
        { "id": "new_edge", "ref": "merge_objects" },
        {
          "id": "history_item",
          "script": "return {action: 'update_edge', edge, update, runnable: {fn: 'update_edge_fn', graph: _graph, args: payload}}"
        },
        { "id": "new_history", "ref": "append" },
        { "id": "set_history", "ref": "set" },
        { "id": "update_hyperapp", "ref": "arg", "value": "state.update_hyperapp" },
        { "id": "update_hyperapp_effect", "ref": "array" },
        { "id": "edit_edge_effect", "script": "return [() => _lib.no.runtime.edit_edge(display_graph, edge)]" },
        { "id": "effects", "ref": "array" },
        { "id": "out" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "edges", "to": "replace_edge", "as": "edges" },
        { "from": "edge", "to": "replace_edge", "as": "edge" },
        { "from": "properties", "to": "replace_edge", "as": "update" },
        { "from": "state", "to": "set_display_graph_edges", "as": "target" },
        { "from": "display_graph_edges_path", "to": "set_display_graph_edges", "as": "path" },
        { "from": "replace_edge", "to": "set_display_graph_edges", "as": "value" },
        { "from": "edge", "to": "prev_edge", "as": "edge" },
        { "from": "edges", "to": "prev_edge", "as": "edges" },
        { "from": "prev_edge", "to": "history_item", "as": "edge" },
        { "from": "properties", "to": "history_item", "as": "update" },
        { "from": "payload", "to": "history_item", "as": "payload" },
        { "from": "history_item", "to": "new_history", "as": "item" },
        { "from": "history", "to": "new_history", "as": "array" },
        { "from": "state", "to": "set_history", "as": "target" },
        { "from": "history_path", "to": "set_history", "as": "path" },
        { "from": "new_history", "to": "set_history", "as": "value" },
        { "from": "set_history", "to": "out", "as": "state" },
        { "from": "update_hyperapp", "to": "update_hyperapp_effect", "as": "a0" },
        { "from": "prev_edge", "to": "new_edge", "as": "o0" },
        { "from": "properties", "to": "new_edge", "as": "o1" },
        { "from": "new_edge", "to": "edit_edge_effect", "as": "edge" },
        { "from": "display_graph", "to": "edit_edge_effect", "as": "display_graph" },
        { "from": "update_hyperapp_effect", "to": "effects", "as": "a0" },
        { "from": "edit_edge_effect", "to": "effects", "as": "a1" },
        { "from": "effects", "to": "out", "as": "effects" }
      ]
    },
    {
      "id": "update_edge_action",
      "nodes": [
        { "id": "update_edge_fn", "ref": "update_edge_fn" },
        { "id": "out", "ref": "hyperapp_action" }
      ],
      "edges": [{ "from": "update_edge_fn", "to": "out", "as": "fn", "type": "ref" }]
    },
    {
      "id": "update_edge",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "update_edge_action", "ref": "update_edge_fn" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "update_edge_action", "to": "out", "as": "fn" }
      ]
    },
    {
      "id": "copy_effect",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "nodes", "ref": "arg", "value": "state.display_graph.nodes" },
        { "id": "clipboard_path", "value": "clipboard" },
        { "id": "node_id", "ref": "arg", "value": "payload.id" },
        { "id": "node", "ref": "find_node" },
        { "id": "set_clipboard", "ref": "set" },
        { "id": "result" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "state", "to": "set_clipboard", "as": "target" },
        { "from": "clipboard_path", "to": "set_clipboard", "as": "path" },
        { "from": "node_id", "to": "node", "as": "node_id" },
        { "from": "nodes", "to": "node", "as": "nodes" },
        { "from": "node", "to": "set_clipboard", "as": "value" },
        { "from": "set_clipboard", "to": "result", "as": "state" },
        { "from": "result", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "change_display_graph_id",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "id_path", "value": "display_graph.id" },
        { "id": "id", "ref": "arg", "value": "payload.properties.id" },
        { "id": "set_display_graph_id", "ref": "set" },
        { "id": "effects", "ref": "array" },
        { "id": "result" },
        { "id": "out", "ref": "hyperapp_action" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "state", "to": "set_display_graph_id", "as": "target" },
        { "from": "id_path", "to": "set_display_graph_id", "as": "path" },
        { "from": "id", "to": "set_display_graph_id", "as": "value" },
        { "from": "set_display_graph_id", "to": "result", "as": "state" },
        { "from": "effects", "to": "result", "as": "effects" },
        { "from": "result", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "paste_node_effect",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "randid", "ref": "arg", "value": "payload.randid" },
        { "id": "selected", "ref": "arg", "value": "payload.node_id" },
        { "id": "node", "ref": "arg", "value": "state.clipboard" },
        { "id": "id_path", "value": "id" },
        { "id": "clipboard_path", "value": "clipboard" },
        { "id": "delete_clipboard", "ref": "delete" },
        { "id": "add_node_effector", "ref": "add_node" },
        { "id": "new_node", "ref": "set" },
        { "id": "select", "value": "true" },
        { "id": "add_node_payload" },
        { "id": "add_node_effect", "ref": "array" },
        { "id": "update_hyperapp", "ref": "arg", "value": "state.update_hyperapp" },
        { "id": "update_hyperapp_effect", "ref": "array" },
        { "id": "effects", "ref": "array" },
        { "id": "result" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "state", "to": "delete_clipboard", "as": "target" },
        { "from": "id_path", "to": "new_node", "as": "path" },
        { "from": "randid", "to": "new_node", "as": "value" },
        { "from": "node", "to": "new_node", "as": "target" },
        { "from": "new_node", "to": "add_node_payload", "as": "node" },
        { "from": "select", "to": "add_node_payload", "as": "select" },
        { "from": "selected", "to": "add_node_payload", "as": "child" },
        { "from": "clipboard_path", "to": "delete_clipboard", "as": "path" },
        { "from": "delete_clipboard", "to": "result", "as": "state" },
        { "from": "add_node_effector", "to": "add_node_effect", "as": "a0" },
        { "from": "add_node_payload", "to": "add_node_effect", "as": "a1" },
        { "from": "add_node_effect", "to": "effects", "as": "a0" },
        { "from": "update_hyperapp", "to": "update_hyperapp_effect", "as": "a0" },
        { "from": "update_hyperapp_effect", "to": "effects", "as": "a2" },
        { "from": "effects", "to": "result", "as": "effects" },
        { "from": "result", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "show_edit_text",
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "dimensions", "ref": "arg", "value": "state.dimensions" },
        { "id": "html_id", "ref": "arg", "value": "state.html_id" },
        { "id": "node_el_width", "ref": "arg", "value": "state.node_el_width" },
        { "id": "oneditconfirm", "ref": "arg", "value": "payload.oneditconfirm" },
        { "id": "oneditmore", "ref": "arg", "value": "payload.oneditmore" },
        { "id": "id", "ref": "arg", "value": "payload.id" },
        { "id": "current_value", "ref": "arg", "value": "payload.value" },
        { "id": "property", "ref": "arg", "value": "payload.property" },
        { "id": "arg_position", "ref": "arg", "value": "payload.position" },
        { "id": "editing_path", "value": "editing" },
        { "id": "edit_value_path", "value": "edit_value" },
        { "id": "edit_id_path", "value": "edit_id" },
        { "id": "edit_onconfirm_path", "value": "oneditconfirm" },
        { "id": "edit_onmore_path", "value": "oneditmore" },
        { "id": "edit_position_path", "value": "edit_position" },
        { "id": "default_position", "script": "return {x: dimensions.x * 0.5, y: dimensions.y * 0.5}" },
        {
          "id": "arg_position_offset",
          "script": "return position && {x: position.x + node_el_width * 0.25, y: position.y + 32}"
        },
        { "id": "position", "ref": "default" },
        { "id": "set_editing", "ref": "set" },
        { "id": "set_edit_value", "ref": "set" },
        { "id": "set_edit_onconfirm", "ref": "set" },
        { "id": "set_edit_onmore", "ref": "set" },
        { "id": "set_edit_id", "ref": "set" },
        { "id": "set_edit_position", "ref": "set" },
        { "id": "focus_props", "script": "return {'selector': `#${html_id}-edit-value .${editing}`, focus: true}" },
        { "id": "focus_effector", "ref": "focus_effect" },
        { "id": "focus_effect", "ref": "array" },
        { "id": "effects", "ref": "array" },
        { "id": "result" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "editing_path", "to": "set_editing", "as": "path" },
        { "from": "property", "to": "set_editing", "as": "value" },
        { "from": "state", "to": "set_editing", "as": "target" },
        { "from": "display_graph", "to": "selected_node", "as": "display_graph" },
        { "from": "property", "to": "current_node_value", "as": "path" },
        { "from": "selected_node", "to": "current_node_value", "as": "target" },
        { "from": "set_editing", "to": "set_edit_value", "as": "target" },
        { "from": "edit_value_path", "to": "set_edit_value", "as": "path" },
        { "from": "current_value", "to": "set_edit_value", "as": "value" },
        { "from": "set_edit_value", "to": "set_edit_onconfirm", "as": "target" },
        { "from": "edit_onconfirm_path", "to": "set_edit_onconfirm", "as": "path" },
        { "from": "oneditconfirm", "to": "set_edit_onconfirm", "as": "value" },
        { "from": "set_edit_onconfirm", "to": "set_edit_onmore", "as": "target" },
        { "from": "edit_onmore_path", "to": "set_edit_onmore", "as": "path" },
        { "from": "oneditmore", "to": "set_edit_onmore", "as": "value" },
        { "from": "set_edit_onmore", "to": "set_edit_id", "as": "target" },
        { "from": "edit_id_path", "to": "set_edit_id", "as": "path" },
        { "from": "id", "to": "set_edit_id", "as": "value" },
        { "from": "node_el_width", "to": "arg_position_offset", "as": "node_el_width" },
        { "from": "arg_position", "to": "arg_position_offset", "as": "position" },
        { "from": "arg_position_offset", "to": "position", "as": "value" },
        { "from": "dimensions", "to": "default_position", "as": "dimensions" },
        { "from": "default_position", "to": "position", "as": "otherwise" },
        { "from": "position", "to": "set_edit_position", "as": "value" },
        { "from": "edit_position_path", "to": "set_edit_position", "as": "path" },
        { "from": "set_edit_id", "to": "set_edit_position", "as": "target" },
        { "from": "focus_effector", "to": "focus_effect", "as": "a0" },
        { "from": "html_id", "to": "focus_props", "as": "html_id" },
        { "from": "property", "to": "focus_props", "as": "editing" },
        { "from": "focus_props", "to": "focus_effect", "as": "a1" },
        { "from": "focus_effect", "to": "effects", "as": "a0" },
        { "from": "set_edit_position", "to": "result", "as": "state" },
        { "from": "effects", "to": "result", "as": "effects" },
        { "from": "result", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "node_args",
      "out": "out",
      "nodes": [
        { "id": "node", "ref": "arg", "value": "node" },
        { "id": "nodes", "ref": "arg", "value": "nodes" },
        { "id": "ref_path", "value": "ref" },
        { "id": "ref", "ref": "get" },
        { "id": "ref_node", "script": "return nodes.find(n => n.id === selected)" },
        { "id": "source_node", "ref": "if" },
        { "id": "nodes_path", "value": "nodes" },
        { "id": "node_nodes", "ref": "get" },
        { "id": "node_arg_nodes", "script": "return nodes?.filter(n => n.ref ==='arg' && n.type !== 'internal')" },
        {
          "id": "nested_node_args",
          "script": "return [...(new Set(nodes.map(n => n.value).filter(a => !a.includes('.'))))]"
        },
        { "id": "extern_node_args", "script": "return _lib.just.get.fn(_lib, node.extern).args" },
        {
          "id": "node_args_input",
          "script": "return node.id === 'arg' ? undefined : node.extern ? 'extern' : node.nodes ?  'nested' : 'none'"
        },
        { "id": "node_args", "ref": "switch" },
        { "id": "empty", "value": [] },
        { "id": "out", "ref": "default" }
      ],
      "edges": [
        { "from": "ref_path", "to": "ref", "as": "path" },
        { "from": "ref", "to": "source_node", "as": "pred" },
        { "from": "ref_node", "to": "source_node", "as": "true" },
        { "from": "node", "to": "source_node", "as": "false" },
        { "from": "node", "to": "ref", "as": "target" },
        { "from": "node", "to": "ref_node", "as": "node" },
        { "from": "nodes", "to": "ref_node", "as": "nodes" },
        { "from": "ref", "to": "ref_node", "as": "selected" },
        { "from": "source_node", "to": "node_nodes", "as": "target" },
        { "from": "nodes_path", "to": "node_nodes", "as": "path" },
        { "from": "node_nodes", "to": "node_arg_nodes", "as": "nodes" },
        { "from": "node_arg_nodes", "to": "nested_node_args", "as": "nodes" },
        { "from": "nested_node_args", "to": "node_args", "as": "nested" },
        { "from": "source_node", "to": "extern_node_args", "as": "node" },
        { "from": "extern_node_args", "to": "node_args", "as": "extern" },
        { "from": "nodes", "to": "node_args_input", "as": "nodes" },
        { "from": "source_node", "to": "node_args_input", "as": "node" },
        { "from": "node", "to": "node_args_input", "as": "ng" },
        { "from": "node_args_input", "to": "node_args", "as": "input" },
        { "from": "empty", "to": "out", "as": "otherwise" },
        { "from": "node_args", "to": "out", "as": "value" }
      ]
    },
    {
      "id": "node_description",
      "out": "out",
      "nodes": [
        { "id": "node_id", "ref": "arg", "value": "node_id" },
        { "id": "nodes", "ref": "arg", "value": "nodes" },
        { "id": "node", "script": "return nodes.find(n => n.id === node_id)" },
        { "id": "ref_path", "value": "ref" },
        { "id": "ref", "ref": "get" },
        { "id": "ref_node", "script": "return nodes.find(n => n.id === selected)" },
        { "id": "source_node", "ref": "if" },
        { "id": "description_path", "value": "description" },
        { "id": "node_description", "ref": "get" },
        { "id": "empty_text", "value": "" },
        { "id": "out", "ref": "default" }
      ],
      "edges": [
        { "from": "node_id", "to": "node", "as": "node_id" },
        { "from": "nodes", "to": "node", "as": "nodes" },
        { "from": "ref_path", "to": "ref", "as": "path" },
        { "from": "ref", "to": "source_node", "as": "pred" },
        { "from": "ref_node", "to": "source_node", "as": "true" },
        { "from": "node", "to": "source_node", "as": "false" },
        { "from": "node", "to": "ref", "as": "target" },
        { "from": "node", "to": "ref_node", "as": "node" },
        { "from": "nodes", "to": "ref_node", "as": "nodes" },
        { "from": "ref", "to": "ref_node", "as": "selected" },
        { "from": "source_node", "to": "node_description", "as": "target" },
        { "from": "description_path", "to": "node_description", "as": "path" },
        { "from": "node_description", "to": "out", "as": "value" },
        { "from": "empty_text", "to": "out", "as": "otherwise" }
      ]
    },
    {
      "id": "show_args_effect",
      "nodes": [
        { "id": "in" },
        { "id": "display_graph_nodes", "ref": "arg", "value": "state.display_graph.nodes" },
        { "id": "display_graph_edges", "ref": "arg", "value": "state.display_graph.edges" },
        { "id": "nodes", "ref": "arg", "value": "state.nodes" },
        { "id": "selected", "ref": "arg", "value": "state.selected.0" },
        { "id": "dimensions", "ref": "arg", "value": "state.dimensions" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "svg_offset", "ref": "arg", "value": "state.svg_offset" },
        { "id": "x_path", "value": "x" },
        { "id": "y_path", "value": "y" },
        { "id": "true", "value": true },
        { "id": "ref_path", "value": "ref" },
        { "id": "nodes_path", "value": "nodes" },
        { "id": "length_path", "value": "length" },
        { "id": "node_args_arr", "ref": "node_args" },
        {
          "id": "create_input",
          "script": "return `arg${(siblings.map(s => s.as).filter(a => a.startsWith('arg')).sort().map(s => parseInt(s.substring(3))).filter(i => !isNaN(i)).reverse()[0] ?? -1) + 1}`"
        },
        { "id": "clickable_args", "ref": "append" },
        { "id": "node_args_text", "value": "inputs: " },
        { "id": "node_args_count", "ref": "get" },
        { "id": "node_description", "ref": "node_description" },
        { "id": "info_display_path", "value": "args_display" },
        { "id": "selected_node", "script": "return nodes.find(n => n.id === selected)" },
        { "id": "selected_node_ref", "ref": "get" },
        { "id": "selected_node_nodes", "ref": "get" },
        { "id": "selected_inputs", "script": "return edges.filter(e => e.to === selected)" },
        { "id": "selected_el_node", "script": "return nodes.find(n => n.node_id === selected)" },
        { "id": "x", "ref": "get" },
        { "id": "y", "ref": "get" },
        {
          "id": "arg_el",
          "out": "out",
          "nodes": [
            { "id": "in" },
            { "id": "selected", "ref": "arg", "value": "state.selected.0" },
            { "id": "randid", "ref": "arg", "value": "state.randid" },
            { "id": "child_as", "ref": "arg", "value": "payload.text" },
            { "id": "text", "ref": "arg", "value": "element" },
            { "id": "inputs", "ref": "arg", "value": "inputs" },
            { "id": "add_node", "ref": "add_node_action" },
            { "id": "add_node_action", "ref": "runnable" },
            { "id": "new_node" },
            { "id": "payload" },
            { "id": "create_node" },
            { "id": "clickable_action_args" },
            { "id": "clickable_action", "ref": "runnable" },
            { "id": "action", "ref": "if" },
            { "id": "text_html", "ref": "html_text" },
            {
              "id": "clickable",
              "script": "return !(text === '_args' || text === '_node_inputs' || text === '_node' || text === '_graph') && !inputs.find(e => e.as === text)"
            },
            { "id": "class" },
            { "id": "props" },
            { "id": "dom_type", "value": "span" },
            { "id": "out", "ref": "html_element" }
          ],
          "edges": [
            { "from": "in", "to": "out", "as": "_" },
            { "from": "selected", "to": "payload", "as": "child" },
            { "from": "randid", "to": "new_node", "as": "id" },
            { "from": "new_node", "to": "payload", "as": "node" },
            { "from": "child_as", "to": "payload", "as": "child_as" },
            { "from": "add_node", "to": "add_node_action", "as": "fn" },
            { "from": "add_node_action", "to": "create_node", "as": "action" },
            { "from": "payload", "to": "create_node", "as": "payload" },
            { "from": "text", "to": "clickable_action_args", "as": "text" },
            { "from": "clickable_action_args", "to": "clickable_action", "as": "args" },
            { "from": "create_node", "to": "clickable_action", "as": "fn" },
            { "from": "clickable", "to": "action", "as": "pred" },
            { "from": "clickable_action", "to": "action", "as": "true" },
            { "from": "action", "to": "props", "as": "onclick" },
            { "from": "inputs", "to": "clickable", "as": "inputs" },
            { "from": "text", "to": "clickable", "as": "text" },
            { "from": "clickable", "to": "class", "as": "clickable" },
            { "from": "class", "to": "props", "as": "class" },
            { "from": "props", "to": "out", "as": "props" },
            { "from": "text", "to": "text_html", "as": "text" },
            { "from": "text_html", "to": "out", "as": "children" },
            { "from": "dom_type", "to": "out", "as": "dom_type" }
          ]
        },
        { "id": "arg_el_runnable_args" },
        { "id": "arg_el_runnable", "ref": "runnable" },
        { "id": "args_links", "ref": "map" },
        { "id": "args_h_text", "ref": "html_text" },
        { "id": "args_h_text_array", "ref": "array" },
        { "id": "args_h_children", "ref": "append" },
        { "id": "args_h", "ref": "html_element" },
        { "id": "args_h_props", "value": { "class": "args" } },
        { "id": "args_h_out", "ref": "default" },
        { "id": "expand_contract", "script": "return nodes?.length > 0 ? 'expand' : (ref === 'return' || in_edges.length > 0) ? 'contract' : false"},
        { "id": "expand_contract_action_props"},
        { "id": "expand_contract_actionor", "ref": "expand_contract_action"},
        { "id": "expand_contract_action", "ref": "array"},
        { "id": "expand_contract_class"},
        { "id": "expand_contract_el_props"},
        { "id": "expand_contract_el", "ref": "html_element"},
        { "id": "expand_contract_text", "ref": "html_text"},
        { "id": "expand_contract_show", "script": "return expand_contract !== false"},
        { "id": "expand_contract_out", "ref": "if"},
        { "id": "description_h_text", "ref": "html_text" },
        { "id": "description_h", "ref": "html_element" },
        { "id": "description_h_out", "ref": "if" },
        { "id": "info_h_children", "ref": "array" },
        {
          "id": "info_h_props",
          "script": "return {class: {'node-info': true}, style: {left: `${Math.min(x * (svg_offset?.scale ?? 1) + (svg_offset?.x ?? 0) - 64, dimensions.x - 256)}px`, top: `${y * (svg_offset?.scale ?? 1) + (svg_offset?.y ?? 0) + 32}px`}}"
        },
        { "id": "info_h", "ref": "html_element" },
        { "id": "info_pred", "script": "return true" },
        { "id": "info_out", "ref": "if" },
        { "id": "set_info_display", "ref": "set" },
        { "id": "result" },
        { "id": "out", "ref": "hyperapp_action_effect_debounced" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args", "type": "ref" },
        { "from": "display_graph_nodes", "to": "selected_node", "as": "nodes" },
        { "from": "selected", "to": "selected_node", "as": "selected" },
        { "from": "display_graph_nodes", "to": "node_args_arr", "as": "nodes" },
        { "from": "selected_node", "to": "node_args_arr", "as": "node" },
        { "from": "node_args_text", "to": "args_h_text", "as": "text" },
        { "from": "args_h_text", "to": "args_h_text_array", "as": "a0" },
        { "from": "node_args_arr", "to": "node_args_count", "as": "target" },
        { "from": "length_path", "to": "node_args_count", "as": "path" },
        { "from": "selected", "to": "selected_inputs", "as": "selected" },
        { "from": "display_graph_edges", "to": "selected_inputs", "as": "edges" },
        { "from": "selected_inputs", "to": "arg_el_runnable_args", "as": "inputs" },
        { "from": "arg_el_runnable_args", "to": "arg_el_runnable", "as": "args" },
        { "from": "arg_el", "to": "arg_el_runnable", "as": "fn" },
        { "from": "arg_el_runnable", "to": "args_links", "as": "fn", "type": "resolve" },
        { "from": "selected_inputs", "to": "create_input", "as": "siblings" },
        { "from": "create_input", "to": "clickable_args", "as": "item" },
        { "from": "node_args_arr", "to": "clickable_args", "as": "array" },
        { "from": "clickable_args", "to": "args_links", "as": "array" },
        { "from": "args_links", "to": "args_h_children", "as": "item" },
        { "from": "args_h_text_array", "to": "args_h_children", "as": "array" },
        { "from": "args_h_children", "to": "args_h", "as": "children" },
        { "from": "args_h_props", "to": "args_h", "as": "props" },
        { "from": "args_h", "to": "args_h_out", "as": "value" },
        { "from": "selected", "to": "node_description", "as": "node_id" },
        { "from": "display_graph_nodes", "to": "node_description", "as": "nodes" },
        { "from": "node_description", "to": "description_h_text", "as": "text" },
        { "from": "description_h_text", "to": "description_h", "as": "children" },
        { "from": "description_h", "to": "description_h_out", "as": "true" },
        { "from": "node_description", "to": "description_h_out", "as": "pred" },
        { "from": "nodes", "to": "selected_el_node", "as": "nodes" },
        { "from": "selected", "to": "selected_el_node", "as": "selected" },
        { "from": "selected_el_node", "to": "x", "as": "target" },
        { "from": "x_path", "to": "x", "as": "path" },
        { "from": "selected_el_node", "to": "y", "as": "target" },
        { "from": "y_path", "to": "y", "as": "path" },
        { "from": "dimensions", "to": "info_h_props", "as": "dimensions" },
        { "from": "x", "to": "info_h_props", "as": "x" },
        { "from": "y", "to": "info_h_props", "as": "y" },
        { "from": "svg_offset", "to": "info_h_props", "as": "svg_offset" },
        { "from": "info_h_props", "to": "info_h", "as": "props" },
        { "from": "args_h_out", "to": "info_h_children", "as": "a0" },
        { "from": "description_h_out", "to": "info_h_children", "as": "a1" },
        { "from": "selected_node", "to": "selected_node_ref", "as": "target" },
        { "from": "ref_path", "to": "selected_node_ref", "as": "path" },
        { "from": "selected_node", "to": "selected_node_nodes", "as": "target" },
        { "from": "selected_node_ref", "to": "expand_contract", "as": "ref" },
        { "from": "nodes_path", "to": "selected_node_nodes", "as": "path" },
        { "from": "selected_node_nodes", "to": "expand_contract", "as": "nodes" },
        { "from": "expand_contract", "to": "expand_contract_text", "as": "text" },
        { "from": "expand_contract_text", "to": "expand_contract_el", "as": "children" },
        { "from": "selected_inputs", "to": "expand_contract", "as": "in_edges" },
        { "from": "selected", "to": "expand_contract_action_props", "as": "id" },
        { "from": "expand_contract_actionor", "to": "expand_contract_action", "as": "a0" },
        { "from": "expand_contract_action_props", "to": "expand_contract_action", "as": "a1" },
        { "from": "expand_contract_action", "to": "expand_contract_el_props", "as": "onclick" },
        { "from": "true", "to": "expand_contract_class", "as": "expand_contract" },
        { "from": "expand_contract_class", "to": "expand_contract_el_props", "as": "class" },
        { "from": "expand_contract_el_props", "to": "expand_contract_el", "as": "props" },
        { "from": "expand_contract_el", "to": "expand_contract_out", "as": "true" },
        { "from": "expand_contract", "to": "expand_contract_show", "as": "expand_contract" },
        { "from": "expand_contract_show", "to": "expand_contract_out", "as": "pred" },
        { "from": "expand_contract_out", "to": "info_h_children", "as": "a2" },
        { "from": "info_h_children", "to": "info_h", "as": "children" },
        { "from": "info_h", "to": "info_out", "as": "true" },
        { "from": "node_args_count", "to": "info_pred", "as": "args_count" },
        { "from": "node_description", "to": "info_pred", "as": "description" },
        { "from": "info_pred", "to": "info_out", "as": "pred" },
        { "from": "state", "to": "set_info_display", "as": "target" },
        { "from": "info_display_path", "to": "set_info_display", "as": "path" },
        { "from": "info_out", "to": "set_info_display", "as": "value" },
        { "from": "set_info_display", "to": "result", "as": "state" },
        { "from": "result", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "confirm_edit_text",
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "property", "ref": "arg", "value": "state.editing" },
        { "id": "payload_value_raw", "ref": "arg", "value": "state.edit_value" },
        { "id": "payload_value", "script": "return value === '' ? undefined : value" },
        { "id": "id", "ref": "arg", "value": "state.edit_id" },
        { "id": "edit_id_path", "ref": "arg", "value": "edit_id" },
        { "id": "on_change", "ref": "arg", "value": "state.oneditconfirm" },
        { "id": "html_id", "ref": "arg", "value": "state.html_id" },
        { "id": "false", "value": false },
        { "id": "empty_string", "value": "" },
        { "id": "editing_path", "value": "editing" },
        { "id": "edit_value_path", "value": "edit_value" },
        { "id": "set_editing", "ref": "set" },
        { "id": "set_edit_value", "ref": "set" },
        { "id": "set_edit_id", "ref": "delete" },
        { "id": "change_effector", "ref": "hyperapp_action_effect" },
        { "id": "change_effect_payload" },
        { "id": "change_effect", "ref": "array" },
        { "id": "blur_payload", "script": "return {selector: `#${html_id}-edit-value textarea`}" },
        { "id": "blur_effector", "ref": "blur_effect" },
        { "id": "blur_effect", "ref": "array" },
        { "id": "empty", "value": {} },
        { "id": "new_node_props", "ref": "set" },
        { "id": "effects", "ref": "array" },
        { "id": "result" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "editing_path", "to": "set_editing", "as": "path" },
        { "from": "false", "to": "set_editing", "as": "value" },
        { "from": "state", "to": "set_editing", "as": "target" },
        { "from": "empty_string", "to": "set_edit_value", "as": "value" },
        { "from": "set_editing", "to": "set_edit_value", "as": "target" },
        { "from": "edit_value_path", "to": "set_edit_value", "as": "path" },
        { "from": "empty", "to": "new_node_props", "as": "target" },
        { "from": "property", "to": "new_node_props", "as": "path" },
        { "from": "payload_value_raw", "to": "payload_value", "as": "value" },
        { "from": "payload_value", "to": "new_node_props", "as": "value" },
        { "from": "set_edit_value", "to": "set_edit_id", "as": "target" },
        { "from": "edit_id_path", "to": "set_edit_id", "as": "path" },
        { "from": "set_edit_id", "to": "result", "as": "state" },
        { "from": "new_node_props", "to": "change_effect_payload", "as": "properties" },
        { "from": "id", "to": "change_effect_payload", "as": "id" },
        { "from": "on_change", "to": "change_effector", "as": "fn" },
        { "from": "change_effector", "to": "change_effect", "as": "a0" },
        { "from": "change_effect_payload", "to": "change_effect", "as": "a1" },
        { "from": "change_effect", "to": "effects", "as": "a0" },
        { "from": "html_id", "to": "blur_payload", "as": "html_id" },
        { "from": "blur_payload", "to": "blur_effect", "as": "a1" },
        { "from": "blur_effector", "to": "blur_effect", "as": "a0" },
        { "from": "blur_effect", "to": "effects", "as": "a1" },
        { "from": "effects", "to": "result", "as": "effects" },
        { "from": "state", "to": "noop", "as": "state" },
        { "from": "noop", "to": "out_result", "as": "false" },
        { "from": "result", "to": "out_result", "as": "true" },
        { "from": "property", "to": "out_result", "as": "pred" },
        { "from": "result", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "open_reference_popover",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "nodes", "ref": "arg", "value": "state.display_graph.nodes" },
        { "id": "edges", "ref": "arg", "value": "state.display_graph.edges" },
        { "id": "levels", "ref": "arg", "value": "state.levels" },
        { "id": "node_id", "ref": "arg", "value": "payload.id" },
        { "id": "update_node", "ref": "update_node" },
        { "id": "clear_popover", "ref": "clear_popover_graph" },
        { "id": "valid_nodes", "script": "return nodes.filter(n => !n.ref && !levels.level_by_node.has(n.id))" },
        {
          "id": "popover_graph_nodes",
          "script": "return nodes.map(n => ({id: `reference-popover${n.id}`, name: n.name ?? n.id, value: n.hasOwnProperty('script') || n.hasOwnProperty('nodes') || n.hasOwnProperty('extern') ? [[update_node, {id: node_id, properties: {ref: n.id}}], [clear_popover]] : []})).concat([{id: 'out', name: 'reference nodes', value: [[clear_popover]]}])"
        },
        {
          "id": "popover_graph_edges",
          "script": "return edges.filter(e => !!nodes.find(n => e.to === n.id)).map(e => ({from: `reference-popover${e.from}`, to:  `reference-popover${e.to}`})).concat(nodes.filter(n => edges.filter(e => e.from === n.id).length === 0).map(n => ({from: `reference-popover${n.id}`, to: 'out'})))"
        },
        { "id": "popover_graph_out", "value": "out" },
        { "id": "popover_graph_value" },
        { "id": "show_popover_graph_payload" },
        { "id": "show_popover_graph", "ref": "show_popover_graph" },
        { "id": "show_popover_graph_effect", "ref": "array" },
        { "id": "effects", "ref": "array" },
        { "id": "result" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "nodes", "to": "valid_nodes", "as": "nodes" },
        { "from": "edges", "to": "popover_graph_edges", "as": "edges" },
        { "from": "levels", "to": "valid_nodes", "as": "levels" },
        { "from": "levels", "to": "popover_graph_edges", "as": "levels" },
        { "from": "node_id", "to": "popover_graph_nodes", "as": "node_id" },
        { "from": "clear_popover", "to": "popover_graph_nodes", "as": "clear_popover" },
        { "from": "update_node", "to": "popover_graph_nodes", "as": "update_node" },
        { "from": "valid_nodes", "to": "popover_graph_nodes", "as": "nodes" },
        { "from": "popover_graph_nodes", "to": "popover_graph_value", "as": "nodes" },
        { "from": "valid_nodes", "to": "popover_graph_edges", "as": "nodes" },
        { "from": "popover_graph_edges", "to": "popover_graph_value", "as": "edges" },
        { "from": "popover_graph_out", "to": "popover_graph_value", "as": "out" },
        { "from": "popover_graph_value", "to": "set_popover_graph", "as": "value" },
        { "from": "set_popover_graph_path", "to": "set_popover_graph", "as": "path" },
        { "from": "state", "to": "set_popover_graph", "as": "target" },
        { "from": "show_popover_graph", "to": "show_popover_graph_effect", "as": "a0" },
        { "from": "popover_graph_value", "to": "show_popover_graph_payload", "as": "popover_graph" },
        { "from": "show_popover_graph_payload", "to": "show_popover_graph_effect", "as": "a1" },
        { "from": "show_popover_graph_effect", "to": "effects", "as": "a0" },
        { "from": "effects", "to": "result", "as": "effects" },
        { "from": "state", "to": "result", "as": "state" },
        { "from": "result", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "insert_node",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "display_graph", "ref": "arg", "value": "state.display_graph" },
        { "id": "edge", "ref": "arg", "value": "payload.edge" },
        { "id": "edge_from", "ref": "arg", "value": "payload.edge.from" },
        { "id": "id", "ref": "arg", "value": "payload.node.id" },
        { "id": "name", "ref": "arg", "value": "payload.node.name" },
        { "id": "display_graph_path", "value": "display_graph" },
        { "id": "from_path", "value": "from" },
        { "id": "selected_path", "value": "selected" },
        { "id": "arg0", "value": "arg0" },
        { "id": "new_in_edge" },
        { "id": "new_out_edge", "ref": "set" },
        { "id": "new_node" },
        { "id": "remove_edge", "ref": "remove_edge" },
        { "id": "add_node", "ref": "create_or_update_node" },
        { "id": "add_out_edge", "ref": "create_or_update_edge" },
        { "id": "add_in_edge", "ref": "create_or_update_edge" },
        { "id": "selected_array", "ref": "array" },
        { "id": "set_selected", "ref": "set" },
        { "id": "set_display_graph", "ref": "set" },
        { "id": "update_graph_effect", "script": "return [() => _lib.no.runtime.update_graph(display_graph)]" },
        { "id": "effects", "ref": "array" },
        { "id": "result" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args", "type": "ref" },
        { "from": "state", "to": "set_selected", "as": "target" },
        { "from": "id", "to": "selected_array", "as": "value" },
        { "from": "selected_array", "to": "set_selected", "as": "value" },
        { "from": "selected_path", "to": "set_selected", "as": "path" },
        { "from": "set_selected", "to": "set_display_graph", "as": "target" },
        { "from": "add_in_edge", "to": "set_display_graph", "as": "value" },
        { "from": "display_graph_path", "to": "set_display_graph", "as": "path" },
        { "from": "set_display_graph", "to": "result", "as": "state" },
        { "from": "id", "to": "new_node", "as": "id" },
        { "from": "name", "to": "new_node", "as": "name" },
        { "from": "edge_to", "to": "add_node_payload", "as": "child" },
        { "from": "edge_as", "to": "add_node_payload", "as": "child_as" },
        { "from": "new_node", "to": "add_node_payload", "as": "node" },
        { "from": "display_graph", "to": "remove_edge", "as": "graph" },
        { "from": "edge", "to": "remove_edge", "as": "edge" },
        { "from": "remove_edge", "to": "add_node", "as": "graph" },
        { "from": "new_node", "to": "add_node", "as": "node" },
        { "from": "edge", "to": "new_out_edge", "as": "target" },
        { "from": "from_path", "to": "new_out_edge", "as": "path" },
        { "from": "id", "to": "new_out_edge", "as": "value" },
        { "from": "add_node", "to": "add_out_edge", "as": "graph" },
        { "from": "new_out_edge", "to": "add_out_edge", "as": "edge" },
        { "from": "add_out_edge", "to": "next_edge", "as": "graph" },
        { "from": "id", "to": "new_in_edge", "as": "to" },
        { "from": "edge_from", "to": "new_in_edge", "as": "from" },
        { "from": "arg0", "to": "new_in_edge", "as": "as" },
        { "from": "add_out_edge", "to": "add_in_edge", "as": "graph" },
        { "from": "new_in_edge", "to": "add_in_edge", "as": "edge" },
        { "from": "add_in_edge", "to": "update_graph_effect", "as": "display_graph" },
        { "from": "update_graph_effect", "to": "effects", "as": "a1" },
        { "from": "effects", "to": "result", "as": "effects" },
        { "from": "result", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "create_reference_effect",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "id", "ref": "arg", "value": "payload.id" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "nodes", "ref": "arg", "value": "state.display_graph.nodes" },
        { "id": "edges", "ref": "arg", "value": "state.display_graph.edges" },
        { "id": "nodes_path", "value": "display_graph.nodes" },
        { "id": "edges_path", "value": "display_graph.edges" },
        { "id": "node", "script": "return nodes.find(n => n.id === id)" },
        { "id": "ref", "script": "return node.name ?? (node.id + 'reference')" },
        {
          "id": "new_nodes",
          "script": "return nodes.filter(n => n.id !== ref).flatMap(n => n.id === id ? [{id: n.id, name: n.name, ref}, {...n, id: ref, name: n.name ?? ref}] : n)"
        },
        { "id": "set_nodes", "ref": "set" },
        { "id": "new_edges", "script": "return edges.concat([{from: ref, to: 'custom'}])" },
        { "id": "set_edges", "ref": "set" },
        {"id": "update_graph_effect", "script": "return [() => _lib.no.runtime.update_graph(graph)]"},
        {"id": "effects", "ref": "array"},
        { "id": "result" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args", "type": "ref" },
        { "from": "id", "to": "new_nodes", "as": "id" },
        { "from": "id", "to": "node", "as": "id" },
        { "from": "nodes", "to": "node", "as": "nodes" },
        { "from": "node", "to": "ref", "as": "node" },
        { "from": "ref", "to": "new_nodes", "as": "ref" },
        { "from": "nodes", "to": "new_nodes", "as": "nodes" },
        { "from": "nodes_path", "to": "set_nodes", "as": "path" },
        { "from": "new_nodes", "to": "set_nodes", "as": "value" },
        { "from": "state", "to": "set_nodes", "as": "target" },
        { "from": "ref", "to": "new_edges", "as": "ref" },
        { "from": "edges", "to": "new_edges", "as": "edges" },
        { "from": "new_edges", "to": "set_edges", "as": "value" },
        { "from": "edges_path", "to": "set_edges", "as": "path" },
        { "from": "set_nodes", "to": "set_edges", "as": "target" },
        { "from": "set_edges", "to": "result", "as": "state" },
        { "from": "set_edges", "to": "update_graph_effect", "as": "graph" },
        { "from": "update_graph_effect", "to": "effects", "as": "a0" },
        { "from": "effects", "to": "result", "as": "effects" },
        { "from": "result", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "redo_action",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "redo_history", "ref": "arg", "value": "state.redo_history" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "update", "ref": "arg", "value": "state.update_sim_effect" },
        { "id": "state_path", "value": "state" },
        { "id": "new_redo_history", "script": "return redo_history.slice(0, -1)" },
        { "id": "last_change", "script": "return redo_history[redo_history.length - 1]" },
        {
          "id": "last_change_action",
          "script": "return {...last_change.runnable, args: {payload: last_change.runnable.args, state}}"
        },
        { "id": "redo", "ref": "run" },
        { "id": "redo_state", "ref": "get" },
        { "id": "history_obj" },
        { "id": "new_state", "ref": "merge_objects" },
        { "id": "result", "ref": "if" },
        { "id": "update_effect", "ref": "array" },
        { "id": "onchange_effects", "script": "return (redo.effects ?? []).concat([update])" },
        { "id": "noop_effects", "ref": "array" },
        { "id": "effects", "ref": "if" },
        { "id": "out" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "_", "type": "ref" },
        { "from": "state", "to": "last_change_action", "as": "state" },
        { "from": "redo_history", "to": "last_change", "as": "redo_history" },
        { "from": "last_change", "to": "last_change_action", "as": "last_change" },
        { "from": "last_change_action", "to": "redo", "as": "runnable" },
        { "from": "state_path", "to": "redo_state", "as": "path" },
        { "from": "redo", "to": "redo_state", "as": "target" },
        { "from": "redo_state", "to": "new_state", "as": "a0" },
        { "from": "redo_history", "to": "new_redo_history", "as": "redo_history" },
        { "from": "new_redo_history", "to": "history_obj", "as": "redo_history" },
        { "from": "history_obj", "to": "new_state", "as": "a1" },
        { "from": "new_state", "to": "result", "as": "true" },
        { "from": "state", "to": "result", "as": "false" },
        { "from": "last_change", "to": "result", "as": "pred" },
        { "from": "result", "to": "out", "as": "state" },
        { "from": "update", "to": "update_effect", "as": "a0" },
        { "from": "update_effect", "to": "onchange_effects", "as": "update" },
        { "from": "effects_path", "to": "redo_effects", "as": "path" },
        { "from": "redo", "to": "onchange_effects", "as": "redo" },
        { "from": "onchange_effects", "to": "effects", "as": "true" },
        { "from": "noop_effects", "to": "effects", "as": "false" },
        { "from": "last_change", "to": "effects", "as": "pred" },
        { "from": "effects", "to": "out", "as": "effects" }
      ]
    },
    {
      "id": "undo_action",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "history", "ref": "arg", "value": "state.history" },
        { "id": "redo_history", "ref": "arg", "value": "state.redo_history" },
        { "id": "update", "ref": "arg", "value": "state.update_sim_effect" },
        { "id": "last_change", "script": "return history[history.length - 1]" },
        { "id": "new_history", "script": "return history.slice(0, -1)" },
        { "id": "new_redo_history", "ref": "append" },
        { "id": "last_change_action", "script": "return change?.action" },
        {
          "id": "undo_add_node",
          "script": "return {...state, selected: [change.child], display_graph: {...state.display_graph, nodes: state.display_graph.nodes.filter(n => n.id !== change.node.id), edges: state.display_graph.edges.filter(e => e.from !== change.node.id)}}"
        },
        {
          "id": "undo_delete_node",
          "script": "return {...state, selected: [change.node.id], display_graph: {...state.display_graph, nodes: state.display_graph.nodes.concat([change.node]), edges: state.display_graph.edges.filter(e => !change.edges.find(c => c.from === e.from)).concat(change.edges).concat([change.parent_edge])}}"
        },
        {
          "id": "undo_update_node",
          "script": "return {...state, selected: [change.node.id], display_graph: {...state.display_graph, nodes: state.display_graph.nodes.filter(n => n.id !== change.node.id).concat([change.node]), edges: state.display_graph.edges.filter(e => !((change.parent_edge.to === e.to && change.parent_edge.from === e.from) || change.child_edges.find(c => c.from === e.from))).concat(change.child_edges).concat([change.parent_edge])}}"
        },
        {
          "id": "undo_update_edge",
          "script": "return {...state, display_graph: {...state.display_graph, edges: state.display_graph.edges.filter(e => !(e.to === change.edge.to && e.from === change.edge.from)).concat([change.edge])}}"
        },
        { "id": "history_obj" },
        { "id": "action_state", "ref": "switch" },
        { "id": "new_state", "ref": "merge_objects" },
        { "id": "update_effect", "ref": "array" },
        { "id": "onchange_effects", "ref": "array" },
        { "id": "effects", "ref": "if" },
        { "id": "action", "ref": "if" },
        { "id": "out" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "_", "type": "ref" },
        { "from": "history", "to": "last_change", "as": "history" },
        { "from": "state", "to": "undo_add_node", "as": "state" },
        { "from": "last_change", "to": "undo_add_node", "as": "change" },
        { "from": "undo_add_node", "to": "action_state", "as": "add_node" },
        { "from": "state", "to": "undo_delete_node", "as": "state" },
        { "from": "last_change", "to": "undo_delete_node", "as": "change" },
        { "from": "undo_delete_node", "to": "action_state", "as": "delete_node" },
        { "from": "state", "to": "undo_update_node", "as": "state" },
        { "from": "last_change", "to": "undo_update_node", "as": "change" },
        { "from": "undo_update_node", "to": "action_state", "as": "update_node" },
        { "from": "state", "to": "undo_update_edge", "as": "state" },
        { "from": "last_change", "to": "undo_update_edge", "as": "change" },
        { "from": "undo_update_edge", "to": "action_state", "as": "update_edge" },
        { "from": "last_change", "to": "last_change_action", "as": "change" },
        { "from": "last_change_action", "to": "action_state", "as": "input" },
        { "from": "action_state", "to": "new_state", "as": "a0" },
        { "from": "history", "to": "new_history", "as": "history" },
        { "from": "new_history", "to": "history_obj", "as": "history" },
        { "from": "redo_history", "to": "new_redo_history", "as": "array" },
        { "from": "last_change", "to": "new_redo_history", "as": "item" },
        { "from": "new_redo_history", "to": "history_obj", "as": "redo_history" },
        { "from": "history_obj", "to": "new_state", "as": "a1" },
        { "from": "last_change_action", "to": "action", "as": "pred" },
        { "from": "new_state", "to": "action", "as": "true" },
        { "from": "state", "to": "action", "as": "false" },
        { "from": "action", "to": "out", "as": "state" },
        { "from": "update", "to": "update_effect", "as": "a0" },
        { "from": "update_effect", "to": "onchange_effects", "as": "a0" },
        { "from": "last_change_action", "to": "effects", "as": "pred" },
        { "from": "onchange_effects", "to": "effects", "as": "true" },
        { "from": "effects", "to": "out", "as": "effects" }
      ]
    },
    {
      "id": "create_or_update_node",
      "out": "new_graph",
      "nodes": [
        { "id": "id", "ref": "arg", "value": "node.id" },
        { "id": "arg_node", "ref": "arg", "value": "node" },
        { "id": "graph", "ref": "arg", "value": "graph" },
        { "id": "nodes", "ref": "arg", "value": "graph.nodes" },
        { "id": "old_node", "ref": "find_node" },
        { "id": "node", "ref": "merge_objects" },
        { "id": "nodes_path", "value": "nodes" },
        { "id": "filtered_nodes", "script": "return nodes.filter(n => n.id !== node_id)" },
        { "id": "new_nodes", "ref": "append" },
        { "id": "new_graph", "ref": "set" }
      ],
      "edges": [
        { "from": "id", "to": "old_node", "as": "node_id" },
        { "from": "nodes", "to": "old_node", "as": "nodes" },
        { "from": "old_node", "to": "node", "as": "o0" },
        { "from": "arg_node", "to": "node", "as": "o1" },
        { "from": "node", "to": "new_nodes", "as": "item", "type": "resolve" },
        { "from": "id", "to": "filtered_nodes", "as": "node_id" },
        { "from": "nodes", "to": "filtered_nodes", "as": "nodes" },
        { "from": "filtered_nodes", "to": "new_nodes", "as": "array" },
        { "from": "new_nodes", "to": "new_graph", "as": "value" },
        { "from": "nodes_path", "to": "new_graph", "as": "path" },
        { "from": "graph", "to": "new_graph", "as": "target" }
      ]
    },
    {
      "id": "create_or_update_edge",
      "out": "new_graph",
      "nodes": [
        { "id": "arg_edge", "ref": "arg", "value": "edge" },
        { "id": "graph", "ref": "arg", "value": "graph" },
        { "id": "edges", "ref": "arg", "value": "graph.edges" },
        { "id": "old_edge", "script": "return edges.find(e => e.to === edge.to && e.from === edge.from)" },
        { "id": "new_edge", "ref": "merge_objects" },
        { "id": "edges_path", "value": "edges" },
        { "id": "filtered_edges", "script": "return edges.filter(e => !(e.to === edge.to && e.from === edge.from))" },
        { "id": "new_edges", "ref": "append" },
        { "id": "new_graph", "ref": "set" }
      ],
      "edges": [
        { "from": "arg_edge", "to": "old_edge", "as": "edge" },
        { "from": "edges", "to": "old_edge", "as": "edges" },
        { "from": "old_edge", "to": "new_edge", "as": "o0" },
        { "from": "arg_edge", "to": "new_edge", "as": "o1" },
        { "from": "new_edge", "to": "new_edges", "as": "item", "type": "resolve" },
        { "from": "arg_edge", "to": "filtered_edges", "as": "edge" },
        { "from": "edges", "to": "filtered_edges", "as": "edges" },
        { "from": "filtered_edges", "to": "new_edges", "as": "array" },
        { "from": "new_edges", "to": "new_graph", "as": "value" },
        { "from": "edges_path", "to": "new_graph", "as": "path" },
        { "from": "graph", "to": "new_graph", "as": "target" }
      ]
    },
    {
      "id": "remove_edge",
      "out": "new_graph",
      "nodes": [
        { "id": "arg_edge", "ref": "arg", "value": "edge" },
        { "id": "graph", "ref": "arg", "value": "graph" },
        { "id": "edges", "ref": "arg", "value": "graph.edges" },
        { "id": "edges_path", "value": "edges" },
        { "id": "filtered_edges", "script": "return edges.filter(e => !(e.to === edge.to && e.from === edge.from))" },
        { "id": "new_graph", "ref": "set" }
      ],
      "edges": [
        { "from": "arg_edge", "to": "filtered_edges", "as": "edge" },
        { "from": "edges", "to": "filtered_edges", "as": "edges" },
        { "from": "filtered_edges", "to": "new_graph", "as": "value" },
        { "from": "edges_path", "to": "new_graph", "as": "path" },
        { "from": "graph", "to": "new_graph", "as": "target" }
      ]
    },
    {
      "id": "add_node_action",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "id", "ref": "arg", "value": "payload.node.id" },
        { "id": "payload", "ref": "arg", "value": "payload" },
        { "id": "node", "ref": "arg", "value": "payload.node" },
        { "id": "select", "ref": "arg", "value": "payload.select" },
        { "id": "child", "ref": "arg", "value": "payload.child" },
        { "id": "child_as", "ref": "arg", "value": "payload.child_as" },
        { "id": "history", "ref": "arg", "value": "state.history" },
        { "id": "selected", "ref": "arg", "value": "state.selected" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "display_graph", "ref": "arg", "value": "state.display_graph" },
        { "id": "history_path", "value": "history" },
        { "id": "display_graph_path", "value": "display_graph" },
        { "id": "id_array", "ref": "array" },
        { "id": "update_sim_effect", "ref": "arg", "value": "state.update_sim_effect" },
        {
          "id": "history_item",
          "script": "return {action: 'add_node', node, child, runnable: {fn: 'add_node_action', graph: _graph, args: payload}}"
        },
        { "id": "new_history", "ref": "append" },
        { "id": "new_edge", "script": "return {from: id, to: child, as: child_as}" },
        { "id": "next_edge", "ref": "next_edge" },
        { "id": "add_node", "ref": "create_or_update_node" },
        { "id": "add_edge", "ref": "create_or_update_edge" },
        {
          "id": "effects",
          "script": "return [[() => _lib.no.runtime.update_graph(display_graph)], [update_sim_effect]]"
        },
        { "id": "set_display_graph", "ref": "set" },
        { "id": "selected_path", "value": "selected" },
        { "id": "new_node" },
        { "id": "new_selected", "ref": "if" },
        { "id": "set_selected", "ref": "set" },
        { "id": "set_history", "ref": "set" },
        { "id": "out" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "node", "to": "new_node" },
        { "from": "node", "to": "history_item", "as": "node" },
        { "from": "payload", "to": "history_item", "as": "payload" },
        { "from": "child", "to": "history_item", "as": "child" },
        { "from": "child_as", "to": "history_item", "as": "child_as" },
        { "from": "history_item", "to": "new_history", "as": "item" },
        { "from": "history", "to": "new_history", "as": "array" },
        { "from": "id", "to": "id_array", "as": "arg0" },
        { "from": "nodes", "to": "new_nodes", "as": "array" },
        { "from": "new_node", "to": "new_nodes", "as": "item" },
        { "from": "state", "to": "set_new_nodes", "as": "target" },
        { "from": "nodes_path", "to": "set_new_nodes", "as": "path" },
        { "from": "new_nodes", "to": "set_new_nodes", "as": "value" },
        { "from": "id", "to": "new_edge", "as": "id" },
        { "from": "child", "to": "new_edge", "as": "child" },
        { "from": "child_as", "to": "new_edge", "as": "child_as" },
        { "from": "display_graph", "to": "add_node", "as": "graph" },
        { "from": "new_node", "to": "add_node", "as": "node" },
        { "from": "add_node", "to": "add_edge", "as": "graph" },
        { "from": "add_node", "to": "next_edge", "as": "graph" },
        { "from": "new_edge", "to": "next_edge", "as": "edge" },
        { "from": "next_edge", "to": "add_edge", "as": "edge" },
        { "from": "add_edge", "to": "effects", "as": "display_graph" },
        { "from": "update_sim_effect", "to": "effects", "as": "update_sim_effect" },
        { "from": "state", "to": "set_display_graph", "as": "target" },
        { "from": "display_graph_path", "to": "set_display_graph", "as": "path" },
        { "from": "add_node", "to": "set_display_graph", "as": "value" },
        { "from": "set_display_graph", "to": "set_selected", "as": "target" },
        { "from": "selected_path", "to": "set_selected", "as": "path" },
        { "from": "set_selected", "to": "set_history", "as": "target" },
        { "from": "history_path", "to": "set_history", "as": "path" },
        { "from": "new_history", "to": "set_history", "as": "value" },
        { "from": "id_array", "to": "new_selected", "as": "true" },
        { "from": "selected", "to": "new_selected", "as": "false" },
        { "from": "select", "to": "new_selected", "as": "pred" },
        { "from": "new_selected", "to": "set_selected", "as": "value" },
        { "from": "set_selected", "to": "effects", "as": "new_state" },
        { "from": "set_history", "to": "out", "as": "state" },
        { "from": "effects", "to": "out", "as": "effects" }
      ]
    },
    {
      "id": "add_node",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "add_node_fn", "ref": "add_node_action" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "_", "type": "ref" },
        { "from": "add_node_fn", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "keybindings",
      "out": "out",
      "nodes": [
        { "id": "editing" },
        { "id": "searching" },
        { "id": "graph" },
        { "id": "j", "value": "down" },
        { "id": "k", "value": "up" },
        { "value": "right", "id": "arrowright" },
        { "value": "left", "id": "arrowleft" },
        { "id": "arrowdown", "value": "down" },
        { "id": "arrowup", "value": "up" },
        { "value": "left", "id": "h" },
        { "value": "right", "id": "l" },
        { "value": "edit_value", "id": "v" },
        { "value": "edit_name", "id": "n" },
        { "value": "edit_ref", "id": "r" },
        { "value": "edit_script", "id": "s" },
        { "value": "edit_edge", "id": "e" },
        { "value": "copy", "id": "y" },
        { "value": "copy", "id": "ctrl_c" },
        { "value": "paste", "id": "p" },
        { "value": "paste", "id": "ctrl_v" },
        { "value": "add_node", "id": "o" },
        { "value": "add_arg_node", "id": "a" },
        { "value": "delete_node", "id": "x" },
        { "value": "expand_contract", "id": "shift_enter" },
        { "value": "save", "id": "ctrl_s" },
        { "value": "undo", "id": "ctrl_z" },
        { "value": "redo", "id": "ctrl_y" },
        { "value": "select", "id": "enter" },
        { "value": "show_keybindings", "id": "questionmark" },
        { "value": "find", "id": "f" },
        { "value": "cancel_search", "id": "esc_search" },
        { "id": "out" }
      ],
      "edges": [
        { "from": "editing", "to": "out", "as": "editing" },
        { "from": "searching", "to": "out", "as": "searching" },
        { "from": "graph", "to": "out", "as": "graph" },
        { "from": "arrowdown", "to": "graph", "as": "arrowdown" },
        { "from": "arrowup", "to": "graph", "as": "arrowup" },
        { "from": "arrowleft", "to": "graph", "as": "arrowleft" },
        { "from": "arrowright", "to": "graph", "as": "arrowright" },
        { "from": "j", "to": "graph", "as": "j" },
        { "from": "k", "to": "graph", "as": "k" },
        { "from": "h", "to": "graph", "as": "h" },
        { "from": "l", "to": "graph", "as": "l" },
        { "from": "v", "to": "graph", "as": "v" },
        { "from": "n", "to": "graph", "as": "n" },
        { "from": "s", "to": "graph", "as": "s" },
        { "from": "r", "to": "graph", "as": "r" },
        { "from": "o", "to": "graph", "as": "o" },
        { "from": "y", "to": "graph", "as": "y" },
        { "from": "p", "to": "graph", "as": "p" },
        { "from": "x", "to": "graph", "as": "x" },
        { "from": "a", "to": "graph", "as": "a" },
        { "from": "f", "to": "graph", "as": "f" },
        { "from": "e", "to": "graph", "as": "e" },
        { "from": "questionmark", "to": "graph", "as": "shift_questionmark" },
        { "from": "enter", "to": "graph", "as": "enter" },
        { "from": "ctrl_c", "to": "graph", "as": "ctrl_c" },
        { "from": "ctrl_v", "to": "graph", "as": "ctrl_v" },
        { "from": "ctrl_s", "to": "graph", "as": "ctrl_s" },
        { "from": "ctrl_z", "to": "graph", "as": "ctrl_z" },
        { "from": "ctrl_y", "to": "graph", "as": "ctrl_y" },
        { "from": "shift_enter", "to": "graph", "as": "shift_enter" },
        { "from": "esc_search", "to": "searching", "as": "escape" }
      ]
    },
    {
      "id": "onkey_fn_body",
      "out": "out",
      "nodes": [
        { "id": "key_event", "ref": "arg", "value": "payload" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "static", "ref": "arg", "value": "state.static" },
        { "id": "randid", "ref": "arg", "value": "state.randid" },
        { "id": "arg_levels", "ref": "arg", "value": "state.levels" },
        { "id": "dimensions", "ref": "arg", "value": "state.dimensions" },
        { "id": "html_id", "ref": "arg", "value": "state.html_id" },
        { "id": "arg_display_graph", "ref": "arg", "value": "state.display_graph" },
        { "id": "arg_display_graph_nodes", "ref": "arg", "value": "state.display_graph.nodes" },
        { "id": "nodes", "ref": "arg", "value": "state.nodes" },
        { "id": "edges", "ref": "arg", "value": "state.display_graph.edges" },
        { "id": "links", "ref": "arg", "value": "state.links" },
        { "id": "editing", "ref": "arg", "value": "state.editing" },
        { "id": "search", "ref": "arg", "value": "state.search" },
        { "id": "selected", "ref": "arg", "value": "state.selected.0" },
        { "id": "arg_selected_edge", "ref": "arg", "value": "state.selected_edge" },
        { "id": "add_node_effect", "ref": "add_node" },
        { "id": "add_edge_effect", "ref": "add_edge" },
        { "id": "delete_node_effect", "ref": "delete_node" },
        { "id": "save_effect", "ref": "save_effect" },
        { "id": "show_edit_text", "ref": "show_edit_text" },
        { "id": "update_node", "ref": "update_node_action" },
        { "id": "onselectnode_effect", "ref": "onselectnode_effect" },
        { "id": "update_edge", "ref": "update_edge_action" },
        { "id": "onselectnode_action", "ref": "onselectnode_action" },
        { "id": "search_effect", "ref": "search_effect" },
        { "id": "focus_effect", "ref": "focus_effect" },
        { "id": "blur_effect", "ref": "blur_effect" },
        { "id": "stop_propagation", "ref": "stop_propagation_effect" },
        { "id": "copy_effect", "ref": "copy_effect" },
        { "id": "paste_effect", "ref": "paste_node_effect" },
        { "id": "clear_popover", "ref": "clear_popover_graph" },
        { "id": "expand_contract_effect", "ref": "expand_contract_effect" },
        { "id": "keybindings_graph", "script": "return _lib.no.runtime.get_node(_graph, 'keybindings')" },
        { "id": "show_popover_effect", "ref": "show_popover_graph" },
        { "id": "keybindings", "ref": "keybindings" },
        { "id": "mode", "script": "return editing !== false ? 'editing' : search !== false ? 'searching' : 'graph'" },
        { "id": "mode_keybindings", "ref": "get" },
        { "id": "key_action_effect", "ref": "get" },
        { "id": "effects_map", "ref": "switch" },
        { "id": "actions_map", "ref": "switch" },
        {
          "id": "key_inputs",
          "script": "return (ev.ctrlKey ? 'ctrl_' : '') + (ev.shiftKey ? 'shift_' : '') + (ev.key === '?' ? 'questionmark' : ev.key.toLowerCase())"
        },
        { "id": "selected_node", "ref": "find_node" },
        { "id": "edge_out", "script": "return edges.find(e => e.from === node_id)" },
        { "id": "el_node", "script": "return nodes.find(n => n.node_id === node_id)" },
        { "id": "save", "script": "return [[save_effect, {display_graph}]]" },
        { "id": "undo", "ref": "undo_action" },
        { "id": "redo", "ref": "redo_action" },
        {
          "id": "down",
          "script": "const next_node_edge = display_graph.edges.find(e => e.from === selected); return next_node_edge ? {state: {...state, selected: [next_node_edge.to]}, effects: [[stop_propagation, event], [_lib.panzoom.effect, {...state, selected: [next_node_edge.to]}], [state.update_hyperapp]]} : {state, effects: [[stop_propagation, event]]}"
        },
        {
          "id": "up",
          "script": "const next_edges = display_graph.edges.filter(e => e.to === selected); const next_node_edge = next_edges[Math.ceil(next_edges.length / 2) - 1]; return next_node_edge ? {state: {...state, selected: [next_node_edge.from]}, effects: [[stop_propagation, event], [_lib.panzoom.effect, {...state, selected: [next_node_edge.from]}], [state.update_hyperapp]]} : {state, effects: [[stop_propagation, event]]}"
        },
        {
          "id": "left",
          "script": "const current_node = nodes.find(n => n.node_id === selected); const siblings = levels.siblings.get(selected); const next_node = static ? nodes.find(n => n.node_id === siblings[(siblings.findIndex(s => s === selected) - 1 + siblings.length) % siblings.length]): siblings.reduce((dist, sibling) => { const sibling_node = nodes.find(n => n.node_id === sibling); if(!sibling_node){ return dist } const xdist = Math.abs(sibling_node.x - current_node.x); dist = (sibling_node.x < current_node.x) && xdist < dist[0] ? [xdist, sibling_node] : dist; return dist }, [dimensions.x])[1]; return next_node ? {state: {...state, selected: [next_node.node_id]}, effects: [[stop_propagation, event], [_lib.panzoom.effect, {...state, selected: next_node.node_id}], [state.update_hyperapp]]} : {state, effects: [[stop_propagation, event]]}"
        },
        {
          "id": "right",
          "script": "const current_node = nodes.find(n => n.node_id === selected); const siblings = levels.siblings.get(selected); const next_node = static ? nodes.find(n => n.node_id === siblings[(siblings.findIndex(s => s === selected) + 1) % siblings.length]) : siblings.reduce((dist, sibling) => { const sibling_node = nodes.find(n => n.node_id === sibling); if(!sibling_node){ return dist } const xdist = Math.abs(sibling_node.x - current_node.x); dist = sibling_node.x > current_node.x && xdist < dist[0] ? [xdist, sibling_node] : dist; return dist }, [dimensions.x])[1]; return next_node ? {state: {...state, selected: [next_node.node_id]}, effects: [[stop_propagation, event], [_lib.panzoom.effect, {...state, selected: next_node.node_id}], [state.update_hyperapp]]} : {state, effects: [[stop_propagation, event]]}"
        },
        {
          "id": "edit_value",
          "script": "return [[show_edit_text, {id, property:'value', oneditconfirm: update_node, value: selected_node.value, position: {x: node.x, y: node.y}}]]"
        },
        {
          "id": "edit_name",
          "script": "return [[show_edit_text, {id, property:'name', oneditconfirm: update_node, value: selected_node.name, position: {x: node.x, y: node.y}}]]"
        },
        {
          "id": "edit_ref",
          "script": "return [[show_edit_text, {id, property: 'ref', oneditconfirm: update_node, value: selected_node.ref, position: {x: node.x, y: node.y}}]]"
        },
        {
          "id": "edit_script",
          "script": "return [[show_edit_text, {id, property:'script', oneditconfirm: update_node, value: selected_node.script, position: {x: node.x, y: node.y}}]]"
        },
        {
          "id": "edit_edge",
          "script": "return [[show_edit_text, {id: edge, property: 'as', oneditconfirm: update_edge, value: edge.as, position: {x: node.x, y: node.y}}]]"
        },
        { "id": "select", "script": "return [[onselectnode, {node_id, event}]]" },
        { "id": "add_node", "script": "return [[add_node, {node: {id: randid}, select: true, child: selected}]]" },
        { "id": "delete_node", "script": "return [[delete_node, {id: selected}]]" },
        { "id": "copy", "script": "return [[copy_effect, {id}]]" },
        { "id": "paste", "script": "return [[paste_effect, {node_id: id, randid}]]" },
        { "id": "expand_contract", "script": "return [[expand_contract, {id}]]" },
        {
          "id": "add_arg_node",
          "script": "return [[add_node, {node: {id: randid, ref: 'arg'}, select: true, child: selected}], [show_edit_text, {id: randid, property:'value', oneditconfirm: update_node, value: ''}]]"
        },
        {
          "id": "find",
          "args": [],
          "script": "return [[search, {search: ''}], [focus, {selector: `#${html_id}-search-input`}]]"
        },
        {
          "id": "cancel_search",
          "script": "return [[search, {search: false}], [blur, {selector: `#${html_id}-search-input`}]]"
        },
        {
          "id": "show_keybindings",
          "script": "return [[show_popover_effect, {popover_graph: {...keybindings, nodes: keybindings.nodes.map(n => n.id === 'out' ? {...n, name: 'keybindings', value: [[clear_popover]]} : n)}}]]"
        },
        { "id": "update", "ref": "update_graph_display" },
        { "id": "update_effector", "ref": "hyperapp_action_effect" },
        { "id": "update_effect", "ref": "array" },
        { "id": "default_graph_fx", "ref": "array" },
        { "id": "default_fx", "ref": "switch" },
        { "id": "default_out" },
        { "id": "out_effects" },
        { "id": "out_action_effect", "ref": "default" },
        { "id": "out_pred", "script": "return action || effect" },
        { "id": "out", "ref": "if" }
      ],
      "edges": [
        { "from": "randid", "to": "add_node", "as": "randid" },
        { "from": "selected", "to": "add_node", "as": "selected" },
        { "from": "add_edge_effect", "to": "add_node", "as": "add_edge" },
        { "from": "add_node_effect", "to": "add_node", "as": "add_node" },
        { "from": "selected", "to": "copy", "as": "id" },
        { "from": "copy_effect", "to": "copy", "as": "copy_effect" },
        { "from": "selected", "to": "paste", "as": "id" },
        { "from": "randid", "to": "paste", "as": "randid" },
        { "from": "paste_effect", "to": "paste", "as": "paste_effect" },
        { "from": "selected", "to": "expand_contract", "as": "id" },
        { "from": "expand_contract_effect", "to": "expand_contract", "as": "expand_contract" },
        { "from": "randid", "to": "add_arg_node", "as": "randid" },
        { "from": "selected", "to": "add_arg_node", "as": "selected" },
        { "from": "add_edge_effect", "to": "add_arg_node", "as": "add_edge" },
        { "from": "add_node_effect", "to": "add_arg_node", "as": "add_node" },
        { "from": "show_edit_text", "to": "add_arg_node", "as": "show_edit_text" },
        { "from": "update_node", "to": "add_arg_node", "as": "update_node" },
        { "from": "edit_value", "to": "effects_map", "as": "edit_value" },
        { "from": "edit_name", "to": "effects_map", "as": "edit_name" },
        { "from": "edit_ref", "to": "effects_map", "as": "edit_ref" },
        { "from": "edit_script", "to": "effects_map", "as": "edit_script" },
        { "from": "edit_edge", "to": "effects_map", "as": "edit_edge" },
        { "from": "add_node", "to": "effects_map", "as": "add_node" },
        { "from": "add_arg_node", "to": "effects_map", "as": "add_arg_node" },
        { "from": "delete_node", "to": "effects_map", "as": "delete_node" },
        { "from": "copy", "to": "effects_map", "as": "copy" },
        { "from": "paste", "to": "effects_map", "as": "paste" },
        { "from": "expand_contract", "to": "effects_map", "as": "expand_contract" },
        { "from": "save", "to": "effects_map", "as": "save" },
        { "from": "cancel_search", "to": "effects_map", "as": "cancel_search" },
        { "from": "find", "to": "effects_map", "as": "find" },
        { "from": "select", "to": "effects_map", "as": "select" },
        { "from": "show_keybindings", "to": "effects_map", "as": "show_keybindings" },
        { "from": "undo", "to": "actions_map", "as": "undo" },
        { "from": "redo", "to": "actions_map", "as": "redo" },
        { "from": "down", "to": "actions_map", "as": "down" },
        { "from": "up", "to": "actions_map", "as": "up" },
        { "from": "left", "to": "actions_map", "as": "left" },
        { "from": "right", "to": "actions_map", "as": "right" },
        { "from": "editing", "to": "mode", "as": "editing" },
        { "from": "search", "to": "mode", "as": "search" },
        { "from": "keybindings", "to": "mode_keybindings", "as": "target" },
        { "from": "mode", "to": "mode_keybindings", "as": "path" },
        { "from": "mode_keybindings", "to": "key_action_effect", "as": "target" },
        { "from": "key_inputs", "to": "key_action_effect", "as": "path" },
        { "from": "key_action_effect", "to": "effects_map", "as": "input" },
        { "from": "effects_map", "to": "out_effects", "as": "effects" },
        { "from": "state", "to": "out_effects", "as": "state" },
        { "from": "out_effects", "to": "out_action_effect", "as": "otherwise" },
        { "from": "key_action_effect", "to": "actions_map", "as": "input" },
        { "from": "actions_map", "to": "out_action_effect", "as": "value" },
        { "from": "out_action_effect", "to": "out", "as": "true" },
        { "from": "state", "to": "default_out", "as": "state" },
        { "from": "actions_map", "to": "out_pred", "as": "action" },
        { "from": "effects_map", "to": "out_pred", "as": "effect" },
        { "from": "run_display_graph_effector", "to": "run_display_graph_effect", "as": "a0" },
        { "from": "key_event", "to": "run_display_graph_effect", "as": "a1" },
        { "from": "run_display_graph_effect", "to": "_default_fx", "as": "a0" },
        { "from": "mode", "to": "default_fx", "as": "input"},
        { "from": "default_graph_fx", "to": "default_fx", "as": "graph"},
        { "from": "update", "to": "update_effector", "as": "fn", "type": "ref" },
        { "from": "update_effector", "to": "update_effect", "as": "a0" },
        { "from": "key_event", "to": "update_effect", "as": "a1" },
        { "from": "update_effect", "to": "default_fx", "as": "a0" },
        { "from": "default_fx", "to": "default_out", "as": "effects" },
        { "from": "out_pred", "to": "out", "as": "pred" },
        { "from": "default_out", "to": "out", "as": "false" },
        { "from": "state", "to": "key_inputs", "as": "state" },
        { "from": "key_event", "to": "key", "as": "ev" },
        { "from": "state", "to": "key_inputs", "as": "state" },
        { "from": "key_event", "to": "key_inputs", "as": "ev" },
        { "from": "arg_display_graph_nodes", "to": "selected_node", "as": "nodes" },
        { "from": "selected", "to": "selected_node", "as": "node_id" },
        { "from": "nodes", "to": "el_node", "as": "nodes" },
        { "from": "selected", "to": "el_node", "as": "node_id" },
        { "from": "edges", "to": "edge_out", "as": "edges" },
        { "from": "selected", "to": "edge_out", "as": "node_id" },
        { "from": "key_event", "to": "run" },
        { "from": "key_inputs", "to": "graph_effects", "as": "input" },
        { "from": "key_inputs", "to": "editing_effects", "as": "input" },
        { "from": "state", "to": "calculate_levels", "as": "state" },
        { "from": "selected", "to": "calculate_levels", "as": "selected" },
        { "from": "display_graph", "to": "calculate_levels", "as": "display_graph" },
        { "from": "key_inputs", "to": "edit_value", "as": "input" },
        { "from": "key_inputs", "to": "display_graph", "as": "input" },
        { "from": "key_inputs", "to": "clipboard", "as": "input" },
        { "from": "key_inputs", "to": "show_all", "as": "input" },
        { "from": "key_inputs", "to": "show_result", "as": "input" },
        { "from": "arg_display_graph", "to": "save", "as": "display_graph" },
        { "from": "save_effect", "to": "save", "as": "save_effect" },
        { "from": "onselectnode_action", "to": "up", "as": "onselectnode" },
        { "from": "state", "to": "up", "as": "state" },
        { "from": "selected", "to": "up", "as": "selected" },
        { "from": "arg_display_graph", "to": "up", "as": "display_graph" },
        { "from": "key_event", "to": "up", "as": "event" },
        { "from": "stop_propagation", "to": "up", "as": "stop_propagation" },
        { "from": "key_event", "to": "down", "as": "event" },
        { "from": "stop_propagation", "to": "down", "as": "stop_propagation" },
        { "from": "onselectnode_action", "to": "down", "as": "onselectnode" },
        { "from": "state", "to": "down", "as": "state" },
        { "from": "selected", "to": "down", "as": "selected" },
        { "from": "arg_display_graph", "to": "down", "as": "display_graph" },
        { "from": "show_edit_text", "to": "edit_value", "as": "show_edit_text" },
        { "from": "update_node", "to": "edit_value", "as": "update_node" },
        { "from": "el_node", "to": "edit_value", "as": "node" },
        { "from": "selected_node", "to": "edit_value", "as": "selected_node" },
        { "from": "selected", "to": "edit_value", "as": "id" },
        { "from": "edit_value", "to": "graph_effects", "as": "edit_value" },
        { "from": "selected_node", "to": "edit_name", "as": "selected_node" },
        { "from": "show_edit_text", "to": "edit_name", "as": "show_edit_text" },
        { "from": "update_node", "to": "edit_name", "as": "update_node" },
        { "from": "el_node", "to": "edit_name", "as": "node" },
        { "from": "selected", "to": "edit_name", "as": "id" },
        { "from": "edit_name", "to": "graph_effects", "as": "edit_name" },
        { "from": "el_node", "to": "edit_ref", "as": "node" },
        { "from": "selected_node", "to": "edit_ref", "as": "selected_node" },
        { "from": "show_edit_text", "to": "edit_ref", "as": "show_edit_text" },
        { "from": "update_node", "to": "edit_ref", "as": "update_node" },
        { "from": "selected", "to": "edit_ref", "as": "id" },
        { "from": "el_node", "to": "edit_script", "as": "node" },
        { "from": "show_edit_text", "to": "edit_script", "as": "show_edit_text" },
        { "from": "update_node", "to": "edit_script", "as": "update_node" },
        { "from": "selected_node", "to": "edit_script", "as": "selected_node" },
        { "from": "selected", "to": "edit_script", "as": "id" },
        { "from": "el_node", "to": "edit_edge", "as": "node" },
        { "from": "edge_out", "to": "edit_edge", "as": "edge" },
        { "from": "show_edit_text", "to": "edit_edge", "as": "show_edit_text" },
        { "from": "update_edge", "to": "edit_edge", "as": "update_edge" },
        { "from": "el_node", "to": "edit_edge", "as": "node" },
        { "from": "edit_ref", "to": "graph_effects", "as": "edit_ref" },
        { "from": "show_edit_text", "to": "s", "as": "show_edit_text" },
        { "from": "update_node", "to": "s", "as": "update_node" },
        { "from": "el_node", "to": "s", "as": "node" },
        { "from": "selected_node", "to": "s", "as": "selected_node" },
        { "from": "s", "to": "graph_effects", "as": "s" },
        { "from": "selected", "to": "select", "as": "node_id" },
        { "from": "onselectnode_effect", "to": "select", "as": "onselectnode" },
        { "from": "key_event", "to": "select", "as": "event" },
        { "from": "key_event", "to": "t" },
        { "from": "state", "to": "t" },
        { "from": "key_event", "to": "shift_t" },
        { "from": "state", "to": "shift_t" },
        { "from": "html_id", "to": "s", "as": "html_id" },
        { "from": "html_id", "to": "f", "as": "html_id" },
        { "from": "focus_effect", "to": "f", "as": "focus_effect" },
        { "from": "html_id", "to": "a", "as": "html_id" },
        { "from": "html_id", "to": "t", "as": "html_id" },
        { "from": "html_id", "to": "set_selected", "as": "html_id" },
        { "from": "html_id", "to": "esc_search", "as": "html_id" },
        { "from": "key_event", "to": "s" },
        { "from": "state", "to": "s" },
        { "from": "state", "to": "p" },
        { "from": "state", "to": "q" },
        { "from": "key_event", "to": "n" },
        { "from": "state", "to": "n" },
        { "from": "key_event", "to": "a" },
        { "from": "state", "to": "a" },
        { "from": "selected", "to": "delete_node", "as": "selected" },
        { "from": "delete_node_effect", "to": "delete_node", "as": "delete_node" },
        { "from": "randid", "to": "o", "as": "randid" },
        { "from": "selected", "to": "o", "as": "selected" },
        { "from": "add_edge_effect", "to": "o", "as": "add_edge" },
        { "from": "state", "to": "i", "as": "state" },
        { "from": "state", "to": "e" },
        { "from": "selected_node", "to": "y", "as": "node" },
        { "from": "key_event", "to": "left", "as": "event" },
        { "from": "dimensions", "to": "left", "as": "dimensions" },
        { "from": "links", "to": "left", "as": "links" },
        { "from": "arg_levels", "to": "left", "as": "levels" },
        { "from": "selected", "to": "left", "as": "selected" },
        { "from": "arg_selected_edge", "to": "left", "as": "selected_edge" },
        { "from": "arg_display_graph", "to": "left", "as": "display_graph" },
        { "from": "nodes", "to": "left", "as": "nodes" },
        { "from": "onselectnode_action", "to": "left", "as": "onselectnode" },
        { "from": "state", "to": "left", "as": "state" },
        { "from": "static", "to": "left", "as": "static" },
        { "from": "stop_propagation", "to": "left", "as": "stop_propagation" },
        { "from": "static", "to": "right", "as": "static" },
        { "from": "stop_propagation", "to": "right", "as": "stop_propagation" },
        { "from": "key_event", "to": "right", "as": "event" },
        { "from": "dimensions", "to": "right", "as": "dimensions" },
        { "from": "nodes", "to": "right", "as": "nodes" },
        { "from": "links", "to": "right", "as": "links" },
        { "from": "arg_levels", "to": "right", "as": "levels" },
        { "from": "selected", "to": "right", "as": "selected" },
        { "from": "arg_selected_edge", "to": "right", "as": "selected_edge" },
        { "from": "arg_display_graph", "to": "right", "as": "display_graph" },
        { "from": "onselectnode_action", "to": "right", "as": "onselectnode" },
        { "from": "state", "to": "right", "as": "state" },
        { "from": "static", "to": "right_edge", "as": "static" },
        { "from": "dimensions", "to": "right_edge", "as": "dimensions" },
        { "from": "nodes", "to": "right_edge", "as": "nodes" },
        { "from": "links", "to": "right_edge", "as": "links" },
        { "from": "arg_levels", "to": "right_edge", "as": "levels" },
        { "from": "selected", "to": "right_edge", "as": "selected" },
        { "from": "arg_selected_edge", "to": "right_edge", "as": "selected_edge" },
        { "from": "arg_display_graph", "to": "right_edge", "as": "display_graph" },
        { "from": "right_edge", "to": "selected_edge", "as": "arrowright" },
        { "from": "right_edge", "to": "selected_edge", "as": "l" },
        { "from": "selected_edge", "to": "set_selected_edge", "as": "selected_edge" },
        { "from": "state", "to": "pending_edges", "as": "state" },
        { "from": "key_event", "to": "pending_edges" },
        { "from": "pending_edges", "to": "make_edge", "as": "pending_edges" },
        { "from": "pending_edges", "to": "set_pending_edges", "as": "pending_edges" },
        { "from": "state", "to": "make_edge", "as": "state" },
        { "from": "q", "to": "show_all", "as": "q" },
        { "from": "i", "to": "show_result", "as": "i" },
        { "from": "confirm_edit_text", "to": "esc_editing", "as": "confirm_edit_text" },
        { "from": "esc_editing", "to": "editing_effects", "as": "escape" },
        { "from": "clear_popover", "to": "show_keybindings", "as": "clear_popover" },
        { "from": "show_popover_effect", "to": "show_keybindings", "as": "show_popover_effect" },
        { "from": "keybindings_graph", "to": "show_keybindings", "as": "keybindings" },
        { "from": "html_id", "to": "cancel_search", "as": "html_id" },
        { "from": "search_effect", "to": "cancel_search", "as": "search" },
        { "from": "blur_effect", "to": "cancel_search", "as": "blur" },
        { "from": "html_id", "to": "find", "as": "html_id" },
        { "from": "focus_effect", "to": "find", "as": "focus" },
        { "from": "search_effect", "to": "find", "as": "search" }
      ]
    },
    { "id": "simulation", "ref": "arg", "value": "simulation" },
    { "id": "arg_nodes", "ref": "arg", "value": "nodes" },
    { "id": "arg_links", "ref": "arg", "value": "links" },
    { "id": "arg_selected", "ref": "arg", "value": "selected" },
    { "id": "arg_levels", "ref": "arg", "value": "levels" },
    {
      "id": "update_sim_effect",
      "script": "return (dispatch, payload) => payload ? !(payload.simulation || payload.static) ? undefined : _lib.scripts.updateSimulationNodes(dispatch, payload) : dispatch(state => [state, [() => !(state.simulation || state.static) ? undefined : _lib.scripts.updateSimulationNodes(dispatch, state)]])"
    },
    { "id": "update_sim_in" },
    { "id": "update_sim_fn", "ref": "execute_graph" },
    {
      "id": "stop_propagation_effect",
      "script": "return (_, payload) => {payload.stopPropagation(); payload.preventDefault();}"
    },
    {
      "id": "dispatch_custom_event_effect",
      "script": "return (_, payload) => document.getElementById(`${payload.html_id}`)?.dispatchEvent(new CustomEvent(payload.event, {detail: payload.detail}))"
    },
    {
      "id": "search_effect",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "search", "ref": "arg", "value": "payload.search" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "search_path", "value": "search" },
        { "id": "set_search", "ref": "set" },
        { "id": "result" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args", "type": "ref" },
        { "from": "state", "to": "set_search", "as": "target" },
        { "from": "search_path", "to": "set_search", "as": "path" },
        { "from": "search", "to": "set_search", "as": "value" },
        { "from": "set_search", "to": "result", "as": "state" },
        { "from": "result", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "create_object_graph",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "in_obj", "ref": "arg", "value": "obj" },
        { "id": "map_obj", "script": "return _lib.no.objToGraph(obj)" },
        { "id": "out_node_id", "script": "return Object.keys(obj)[0]" },
        { "id": "out" }
      ],
      "edges": [
        { "from": "in_obj", "to": "map_obj", "as": "obj" },
        { "from": "in_obj", "to": "out_node_id", "as": "obj" },
        { "from": "name", "to": "out_node", "as": "name" },
        { "from": "map_obj", "to": "out" },
        { "from": "in", "to": "out", "as": "args", "type": "ref" },
        { "from": "out_node_id", "to": "out", "as": "out" }
      ]
    },
    {
      "id": "create_popover_graph",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "in_nodes", "ref": "arg", "value": "nodes" },
        { "id": "name", "ref": "arg", "value": "name" },
        { "id": "clear_popover", "ref": "clear_popover_graph" },
        { "id": "out_node", "script": "return {'id': 'out', name, value: [[clear_popover]]}" },
        { "id": "out_node_id", "value": "out" },
        { "id": "edges", "script": "return nodes.map(n => ({from: n.id, to: 'out', _needsresolve: true}))" },
        { "id": "nodes", "ref": "append" },
        { "id": "out" }
      ],
      "edges": [
        { "from": "clear_popover", "to": "out_node", "as": "clear_popover" },
        { "from": "name", "to": "out_node", "as": "name" },
        { "from": "out_node", "to": "nodes", "as": "item" },
        { "from": "in_nodes", "to": "nodes", "as": "array" },
        { "from": "in_nodes", "to": "edges", "as": "nodes" },
        { "from": "in", "to": "out", "as": "args", "type": "ref" },
        { "from": "nodes", "to": "out", "as": "nodes" },
        { "from": "edges", "to": "out", "as": "edges" },
        { "from": "out_node_id", "to": "out", "as": "out" }
      ]
    },
    {
      "id": "graph_ui_action",
      "nodes": [
        { "id": "in" },
        { "id": "payload", "ref": "arg", "value": "payload" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "name", "ref": "arg", "value": "state.display_graph.id" },
        { "id": "display_graph", "ref": "arg", "value": "state.display_graph" },
        { "id": "readonly", "ref": "arg", "value": "state.readonly" },
        { "id": "html_id", "ref": "arg", "value": "state.html_id" },
        { "id": "examples", "ref": "arg", "value": "state.examples" },
        { "id": "event_name", "value": "graphclick" },
        { "id": "id_path", "value": "id" },
        { "id": "clear_popover", "ref": "clear_popover_graph" },
        { "id": "clear_popover_effect", "ref": "array" },
        { "id": "save_effector", "ref": "save_effect" },
        { "id": "save_payload" },
        { "id": "save_effect", "ref": "array" },
        { "id": "save_node_effects", "ref": "array" },
        { "id": "export_effector", "ref": "export_effect" },
        { "id": "export_json_payload" },
        { "id": "export_json_ext", "value": "json" },
        { "id": "export_json_effect", "ref": "array" },
        { "id": "export_json_node_effects", "ref": "array" },
        { "id": "export_json_data", "script": "return JSON.stringify(display_graph)" },
        { "id": "export_js_payload" },
        { "id": "export_js_ext", "value": "js" },
        { "id": "export_js_effect", "ref": "array" },
        { "id": "export_js_node_effects", "ref": "array" },
        {
          "id": "export_js_data",
          "script": "return `let graph = ${JSON.stringify(display_graph)}; import('nodysseus.bundle.js').then(({runGraph}) => runGraph(graph, 'main/out', {}, _lib))`"
        },
        { "id": "export_json_node" },
        { "id": "export_js_node" },
        { "id": "export_node" },
        { "id": "new_graph_effector", "ref": "new_graph_effect" },
        { "id": "new_graph_effect", "ref": "array" },
        { "id": "new_graph_node_effects", "ref": "array" },
        { "id": "empty", "value": {} },
        { "id": "popover_graph_obj_actions", "ref": "array" },
        { "id": "popover_graph_obj" },
        { "id": "popover_graph_parent_obj", "ref": "set" },
        { "id": "popover_graph", "ref": "create_object_graph" },
        { "id": "show_popover_effector", "ref": "show_popover_graph" },
        { "id": "show_popover_effect", "ref": "array" },
        { "id": "show_popover_payload" },
        { "id": "display_graph_path", "value": "display_graph" },
        { "id": "change_display_graph_id", "ref": "change_display_graph_id" },
        { "id": "change_display_graph_id_node_value", "ref": "array" },
        { "id": "show_edit_text_effector", "ref": "show_edit_text" },
        { "id": "show_edit_text_payload" },
        { "id": "show_edit_text_effect", "ref": "array" },
        { "id": "open_graph", "ref": "open_saved_graph_effect" },
        {
          "id": "open_obj",
          "script": "return Object.fromEntries(JSON.parse(localStorage.getItem('graph_list') ?? '[]').map(g => [g, [clear_popover, [open_graph, {id: g}]]]))"
        },
        { "id": "open_example_graph", "ref": "open_graph_effect" },
        {
          "id": "examples_obj",
          "script": "return Object.fromEntries(examples.map(e => ['example-' + e.id, [clear_popover, [open_graph, {graph: e}]]]))"
        },
        { "id": "stop_propagation_effector", "ref": "stop_propagation_effect" },
        { "id": "stop_propagation_effect", "ref": "array" },
        { "id": "dispatch_on_graph_click_effector", "ref": "dispatch_custom_event_effect" },
        { "id": "dispatch_on_graph_click_payload" },
        { "id": "dispatch_on_graph_click_effect", "ref": "array" },
        { "id": "edit_effects", "ref": "array" },
        { "id": "readonly_effects", "ref": "array" },
        { "id": "effects", "ref": "if" },
        { "id": "result" },
        { "id": "out", "ref": "hyperapp_action" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "payload", "to": "stop_propagation_effect", "as": "a1" },
        { "from": "display_graph", "to": "save_payload", "as": "display_graph" },
        { "from": "clear_popover", "to": "clear_popover_effect", "as": "a0" },
        { "from": "clear_popover_effect", "to": "save_node_effects", "as": "a1" },
        { "from": "save_effector", "to": "save_effect", "as": "a0" },
        { "from": "save_payload", "to": "save_effect", "as": "a1" },
        { "from": "save_effect", "to": "save_node_effects", "as": "a0" },
        { "from": "save_effector", "to": "save_effect", "as": "a0" },
        { "from": "save_payload", "to": "save_effect", "as": "a1" },
        { "from": "save_effect", "to": "save_node_effects", "as": "a0" },
        { "from": "save_node_effects", "to": "popover_graph_obj", "as": "save" },
        { "from": "save_name", "to": "save_node", "as": "name" },
        { "from": "save_id", "to": "save_node", "as": "id" },
        { "from": "save_node", "to": "popover_graph_actions", "as": "a" },
        { "from": "clear_popover_effect", "to": "export_node_effects", "as": "a1" },
        { "from": "display_graph", "to": "export_json_data", "as": "display_graph" },
        { "from": "display_graph", "to": "export_js_data", "as": "display_graph" },
        { "from": "export_effector", "to": "export_json_effect", "as": "a0" },
        { "from": "export_effector", "to": "export_js_effect", "as": "a0" },
        { "from": "export_json_payload", "to": "export_json_effect", "as": "a1" },
        { "from": "export_js_payload", "to": "export_js_effect", "as": "a1" },
        { "from": "export_json_effect", "to": "export_json_node_effects", "as": "a0" },
        { "from": "export_js_effect", "to": "export_js_node_effects", "as": "a0" },
        { "from": "clear_popover_effect", "to": "export_json_node_effects", "as": "a1" },
        { "from": "clear_popover_effect", "to": "export_js_node_effects", "as": "a1" },
        { "from": "export_json_node_effects", "to": "export_json_node", "as": "_value" },
        { "from": "export_js_node_effects", "to": "export_js_node", "as": "_value" },
        { "from": "export_json_node", "to": "export_node", "as": "json" },
        { "from": "export_js_node", "to": "export_node", "as": "js" },
        { "from": "export_node", "to": "popover_graph_obj", "as": "export" },
        { "from": "export_json_data", "to": "export_json_payload", "as": "data" },
        { "from": "export_json_ext", "to": "export_json_payload", "as": "ext" },
        { "from": "name", "to": "export_json_payload", "as": "id" },
        { "from": "name", "to": "export_js_payload", "as": "id" },
        { "from": "export_js_data", "to": "export_js_payload", "as": "data" },
        { "from": "export_js_ext", "to": "export_js_payload", "as": "ext" },
        { "from": "export_node", "to": "popover_graph_actions", "as": "c" },
        { "from": "new_graph_effector", "to": "new_graph_effect", "as": "a0" },
        { "from": "new_graph_effect", "to": "new_graph_node_effects", "as": "a0" },
        { "from": "new_graph_node_effects", "to": "popover_graph_obj", "as": "new" },
        { "from": "new_graph_name", "to": "new_graph_node", "as": "name" },
        { "from": "new_graph_id", "to": "new_graph_node", "as": "id" },
        { "from": "new_graph_node", "to": "popover_graph_actions", "as": "b" },
        { "from": "change_display_graph_id_effector", "to": "change_display_graph_id_effect", "as": "a0" },
        { "from": "change_display_graph_id", "to": "show_edit_text_payload", "as": "oneditconfirm" },
        { "from": "display_graph_path", "to": "show_edit_text_payload", "as": "id" },
        { "from": "name", "to": "show_edit_text_payload", "as": "value" },
        { "from": "id_path", "to": "show_edit_text_payload", "as": "property" },
        { "from": "show_edit_text_effector", "to": "show_edit_text_effect", "as": "a0" },
        { "from": "show_edit_text_payload", "to": "show_edit_text_effect", "as": "a1" },
        { "from": "show_edit_text_effect", "to": "change_display_graph_id_node_value", "as": "a" },
        { "from": "clear_popover_effect", "to": "change_display_graph_id_node_value", "as": "b" },
        { "from": "change_display_graph_id_node_value", "to": "popover_graph_obj", "as": "change_name" },
        { "from": "change_display_graph_id_node_id", "to": "change_display_graph_id_node", "as": "id" },
        { "from": "change_display_graph_id_node_name", "to": "change_display_graph_id_node", "as": "name" },
        { "from": "change_display_graph_id_node", "to": "popover_graph_actions", "as": "d" },
        { "from": "clear_popover_effect", "to": "open_obj", "as": "clear_popover" },
        { "from": "open_graph", "to": "open_obj", "as": "open_graph" },
        { "from": "open_obj", "to": "popover_graph_obj", "as": "open" },
        { "from": "examples", "to": "examples_obj", "as": "examples" },
        { "from": "clear_popover_effect", "to": "examples_obj", "as": "clear_popover" },
        { "from": "open_example_graph", "to": "examples_obj", "as": "open_graph" },
        { "from": "examples_obj", "to": "popover_graph_obj", "as": "examples" },
        { "from": "clear_popover_effect", "to": "popover_graph_obj_actions", "as": "a0" },
        { "from": "popover_graph_obj_actions", "to": "popover_graph_obj", "as": "_value" },
        { "from": "name", "to": "popover_graph", "as": "name" },
        { "from": "empty", "to": "popover_graph_parent_obj", "as": "target" },
        { "from": "name", "to": "popover_graph_parent_obj", "as": "path" },
        { "from": "popover_graph_obj", "to": "popover_graph_parent_obj", "as": "value" },
        { "from": "popover_graph_parent_obj", "to": "popover_graph", "as": "obj", "type": "resolve" },
        { "from": "popover_graph", "to": "show_popover_payload", "as": "popover_graph" },
        { "from": "show_popover_effector", "to": "show_popover_effect", "as": "a0" },
        { "from": "show_popover_payload", "to": "show_popover_effect", "as": "a1" },
        { "from": "stop_propagation_effector", "to": "stop_propagation_effect", "as": "a0" },
        { "from": "payload", "to": "stop_propagation_effect", "as": "a1" },
        { "from": "stop_propagation_effect", "to": "edit_effects", "as": "a1" },
        { "from": "html_id", "to": "dispatch_on_graph_click_payload", "as": "html_id" },
        { "from": "event_name", "to": "dispatch_on_graph_click_payload", "as": "event" },
        { "from": "dispatch_on_graph_click_effector", "to": "dispatch_on_graph_click_effect", "as": "a0" },
        { "from": "dispatch_on_graph_click_payload", "to": "dispatch_on_graph_click_effect", "as": "a1" },
        { "from": "dispatch_on_graph_click_effect", "to": "readonly_effects", "as": "a0" },
        { "from": "show_popover_effect", "to": "edit_effects", "as": "a0" },
        { "from": "edit_effects", "to": "effects", "as": "false" },
        { "from": "readonly_effects", "to": "effects", "as": "true" },
        { "from": "readonly", "to": "effects", "as": "pred" },
        { "from": "effects", "to": "result", "as": "effects" },
        { "from": "state", "to": "result", "as": "state" },
        { "from": "result", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "onclick_graph_action",
      "nodes": [
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "false", "value": false },
        { "id": "search_payload" },
        { "id": "search_effect", "ref": "search_effect" },
        { "id": "clear_search", "ref": "array" },
        { "id": "effects", "ref": "array" },
        { "id": "result" },
        { "id": "out", "ref": "hyperapp_action" }
      ],
      "edges": [
        { "from": "false", "to": "search_payload", "as": "search" },
        { "from": "search_payload", "to": "clear_search", "as": "a1" },
        { "from": "search_effect", "to": "clear_search", "as": "a0" },
        { "from": "clear_search", "to": "effects", "as": "a0" },
        { "from": "effects", "to": "result", "as": "effects" },
        { "from": "state", "to": "result", "as": "state" },
        { "from": "result", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "onselectnode",
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "html_id", "ref": "arg", "value": "state.html_id" },
        { "id": "event", "ref": "arg", "value": "payload.event" },
        { "id": "node_id", "ref": "arg", "value": "payload.node_id" },
        { "id": "arg_selected", "ref": "arg", "value": "state.selected" },
        { "id": "readonly", "ref": "arg", "value": "state.readonly" },
        { "id": "arg_display_graph", "ref": "arg", "value": "state.display_graph" },
        { "id": "display_graph_nodes", "ref": "arg", "value": "state.display_graph.nodes" },
        { "id": "node_el_width", "ref": "arg", "value": "state.node_el_width" },
        { "id": "dimensions", "ref": "arg", "value": "state.dimensions" },
        { "id": "nodes", "ref": "arg", "value": "state.nodes" },
        { "id": "links", "ref": "arg", "value": "state.links" },
        {
          "id": "get_selected_node",
          "script": "return Object.assign({}, nodes.find(n => n.node_id === node_id), display_graph.nodes.find(n => n.id === node_id))"
        },
        { "id": "set_selected", "args": ["selected", "state"], "script": "return {...state, selected: [node_id]}" },
        { "id": "false", "value": false },
        { "id": "should_show_popover", "script": "return !readonly && node_id === selected[0]" },
        { "id": "randid", "ref": "arg", "value": "state.randid" },
        { "id": "add_node_effect", "ref": "add_node" },
        { "id": "add_edge_effect", "ref": "add_edge" },
        { "id": "paste_node_effect", "ref": "paste_node_effect" },
        { "id": "copy_effect", "ref": "copy_effect" },
        { "id": "delete_node_effect", "ref": "delete_node" },
        { "id": "expand_contract_effect", "ref": "expand_contract_effect" },
        { "id": "open_reference_popover", "ref": "open_reference_popover" },
        { "id": "show_edit_text", "ref": "show_edit_text" },
        { "id": "clear_popover", "ref": "clear_popover_graph" },
        { "id": "update_node", "ref": "update_node_action" },
        { "id": "update_node_effect", "ref": "update_node" },
        { "id": "create_reference_effect", "ref": "create_reference_effect" },
        {
          "id": "popover_graph_obj",
          "script": "return {[selected.node_id]: {_value: [[clear_popover]], inputs: {create_input: [[add_node, {node: {id: randid}, select: true, child: selected.node_id}], [clear_popover]], arg: [[add_node, {node: {id: randid, ref: 'arg'}, select: true, child: selected.node_id}], [show_edit_text, {id: randid, property:'value', oneditconfirm: update_node, value: ''}], [clear_popover]]}, structure: {delete: [[delete_node, {id: selected.node_id}], [clear_popover]], expand_contract: [[expand_contract, {id: selected.node_id}], [clear_popover]]}, change: {name: [[show_edit_text, {id: selected.node_id, property:'name', position: {x: selected.x, y: selected.y}, oneditconfirm: update_node, value: selected.name}], [clear_popover]], value: [[show_edit_text, {id: selected.node_id, property:'value', position: {x: selected.x, y: selected.y}, oneditconfirm: update_node, value: selected.value}], [clear_popover]], script: [[show_edit_text, {id: selected.node_id, property:'script', position: {x: selected.x, y: selected.y}, oneditconfirm: update_node, value: selected.script}], [clear_popover]]}, clipboard: {copy: [[copy_effect, {id: selected.node_id}], [clear_popover]], paste: [[paste_node_effect, {randid, node_id: selected.node_id}], [clear_popover]]}, reference: {create: [[create_reference_effect, {id: selected.node_id}], [clear_popover]], clear: [[update_node_effect, {id: selected.node_id, properties: {ref: undefined}}], [clear_popover]], copy: [[update_node_effect, {id: selected.node_id, properties: {...nodes.find(n => n.id === selected.ref), id: selected.node_id, ref: undefined}}], [clear_popover]], change: [[show_edit_text, {id: selected.node_id, property: 'ref', position: {x: selected.x, y: selected.y}, oneditconfirm: update_node, value: selected.ref}], [clear_popover]]}}}"
        },
        { "id": "popover_graph_value", "ref": "create_object_graph" },
        {
          "id": "dispatch_custom_event_effect",
          "script": "return [(_, payload) => document.getElementById(`${html_id}`).dispatchEvent(new CustomEvent(`selectnode`, {detail: {node: node_id}}))]"
        },
        { "id": "show_popover_payload" },
        { "id": "show_popover_effector", "ref": "show_popover_graph" },
        { "id": "show_popover_effect", "ref": "array" },
        { "id": "stop_propagation_effector", "ref": "stop_propagation_effect" },
        { "id": "stop_propagation_effect", "ref": "array" },
        { "id": "panzoom_selected_effector", "script": "return _lib.panzoom.effect" },
        { "id": "panzoom_selected_effect", "ref": "array" },
        { "id": "panzoom_selected_payload" },
        { "id": "clear_search_payload", "value": { "search": false } },
        { "id": "search_effect", "ref": "search_effect" },
        { "id": "clear_search", "ref": "array" },
        { "id": "if_show_popover", "ref": "if" },
        { "id": "effects", "ref": "array" },
        { "id": "out", "ref": "update_graph_display" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "node_id", "to": "selected_inputs", "as": "node_id" },
        { "from": "node_id", "to": "get_selected_node", "as": "node_id" },
        { "from": "arg_display_graph", "to": "get_selected_node", "as": "display_graph" },
        { "from": "nodes", "to": "get_selected_node", "as": "nodes" },
        { "from": "get_selected_node", "to": "selected_inputs", "as": "node" },
        { "from": "event", "to": "selected_inputs", "as": "event" },
        { "from": "node_id", "to": "wrapped_node_id", "as": "value" },
        { "from": "wrapped_node_id", "to": "selected", "as": "node_id" },
        { "from": "state", "to": "set_selected", "as": "state" },
        { "from": "node_id", "to": "set_selected", "as": "node_id" },
        { "from": "html_id", "to": "set_selected", "as": "html_id" },
        { "from": "set_selected", "to": "set_display_graph", "as": "state" },
        { "from": "display_graph", "to": "set_display_graph", "as": "display_graph" },
        { "from": "get_selected_node", "to": "display_graph_inputs", "as": "node" },
        { "from": "state", "to": "display_graph_inputs" },
        { "from": "event", "to": "display_graph_inputs", "as": "event" },
        { "from": "display_graph_inputs", "to": "display_graph", "as": "input" },
        { "from": "state", "to": "expand_contract" },
        { "from": "node_id", "to": "expand_contract", "as": "node_id" },
        { "from": "event", "to": "out", "as": "payload" },
        { "from": "show_popover_effector", "to": "show_popover_effect", "as": "arg0" },
        { "from": "event", "to": "stop_propagation_effect", "as": "a1" },
        { "from": "stop_propagation_effector", "to": "stop_propagation_effect", "as": "a0" },
        { "from": "randid", "to": "popover_graph_obj", "as": "randid" },
        { "from": "display_graph_nodes", "to": "popover_graph_obj", "as": "nodes" },
        { "from": "get_selected_node", "to": "popover_graph_obj", "as": "selected" },
        { "from": "add_node_effect", "to": "popover_graph_obj", "as": "add_node" },
        { "from": "add_edge_effect", "to": "popover_graph_obj", "as": "add_edge" },
        { "from": "delete_node_effect", "to": "popover_graph_obj", "as": "delete_node" },
        { "from": "expand_contract_effect", "to": "popover_graph_obj", "as": "expand_contract" },
        { "from": "open_reference_popover", "to": "popover_graph_obj", "as": "open_reference_popover" },
        { "from": "show_edit_text", "to": "popover_graph_obj", "as": "show_edit_text" },
        { "from": "clear_popover", "to": "popover_graph_obj", "as": "clear_popover" },
        { "from": "update_node", "to": "popover_graph_obj", "as": "update_node" },
        { "from": "update_node_effect", "to": "popover_graph_obj", "as": "update_node_effect" },
        { "from": "copy_effect", "to": "popover_graph_obj", "as": "copy_effect" },
        { "from": "paste_node_effect", "to": "popover_graph_obj", "as": "paste_node_effect" },
        { "from": "create_reference_effect", "to": "popover_graph_obj", "as": "create_reference_effect" },
        { "from": "popover_graph_obj", "to": "popover_graph_value", "as": "obj" },
        { "from": "popover_graph_value", "to": "show_popover_payload", "as": "popover_graph" },
        { "from": "show_popover_payload", "to": "show_popover_effect", "as": "arg1" },
        { "from": "show_popover_effect", "to": "if_show_popover", "as": "true" },
        { "from": "false", "to": "if_show_popover", "as": "false" },
        { "from": "node_id", "to": "should_show_popover", "as": "node_id" },
        { "from": "readonly", "to": "should_show_popover", "as": "readonly" },
        { "from": "arg_selected", "to": "should_show_popover", "as": "selected" },
        { "from": "should_show_popover", "to": "if_show_popover", "as": "pred" },
        { "from": "arg_selected", "to": "dispatch_custom_event_effect", "as": "selected" },
        { "from": "html_id", "to": "dispatch_custom_event_effect", "as": "html_id" },
        { "from": "node_id", "to": "dispatch_custom_event_effect", "as": "node_id" },
        { "from": "if_show_popover", "to": "effects", "as": "a1" },
        { "from": "stop_propagation_effect", "to": "effects", "as": "a0" },
        { "from": "dispatch_custom_event_effect", "to": "effects", "as": "a2" },
        { "from": "node_id", "to": "panzoom_selected_payload", "as": "selected" },
        { "from": "html_id", "to": "panzoom_selected_payload", "as": "html_id" },
        { "from": "dimensions", "to": "panzoom_selected_payload", "as": "dimensions" },
        { "from": "node_el_width", "to": "panzoom_selected_payload", "as": "node_el_width" },
        { "from": "links", "to": "panzoom_selected_payload", "as": "links" },
        { "from": "nodes", "to": "panzoom_selected_payload", "as": "nodes" },
        { "from": "panzoom_selected_payload", "to": "panzoom_selected_effect", "as": "a1" },
        { "from": "panzoom_selected_effector", "to": "panzoom_selected_effect", "as": "a0" },
        { "from": "panzoom_selected_effect", "to": "effects", "as": "a3" },
        { "from": "search_effect", "to": "clear_search", "as": "a0" },
        { "from": "clear_search_payload", "to": "clear_search", "as": "a1" },
        { "from": "clear_search", "to": "effects", "as": "a4" },
        { "from": "effects", "to": "out", "as": "effects", "type": "resolve" },
        { "from": "set_selected", "to": "out", "as": "state" }
      ]
    },
    {
      "id": "onselectnode_effect",
      "nodes": [
        { "id": "in" },
        { "id": "onselectnode", "ref": "onselectnode" },
        { "id": "out", "ref": "hyperapp_action_effect" }
      ],
      "edges": [
        { "from": "in", "to": "out", "type": "ref", "as": "args" },
        { "from": "onselectnode", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "onselectnode_action",
      "nodes": [
        { "id": "in" },
        { "id": "onselectnode", "ref": "onselectnode" },
        { "id": "out", "ref": "hyperapp_action" }
      ],
      "edges": [
        { "from": "in", "to": "out", "type": "ref", "as": "args" },
        { "from": "onselectnode", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "open_edge_popover",
      "nodes": [
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "edge", "ref": "arg", "value": "state.edit_id" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "randid", "ref": "arg", "value": "state.randid" },
        { "id": "display_graph_nodes", "ref": "arg", "value": "state.display_graph.nodes" },
        { "id": "clear_popover", "ref": "clear_popover_graph" },
        { "id": "clear_popover_type", "ref": "clear_popover_graph" },
        { "id": "update_edge", "ref": "update_edge" },
        { "id": "update_edge_action", "ref": "update_edge_action" },
        { "id": "show_edit_text", "ref": "show_edit_text" },
        { "id": "insert_node", "ref": "insert_node" },
        { "id": "update_sim", "ref": "arg", "value": "update_sim_effect" },
        {
          "id": "type_popover_actions",
          "script": "return {change_type: {_value: [[clear_popover]], ref: [[update_edge, {id: edge, properties: {type: 'ref'}}], [clear_popover]], none: [[update_edge, {id: edge, properties: {type: undefined}}], [clear_popover]], resolve: [[update_edge, {id: edge, properties: {type: 'resolve'}}], [clear_popover]]}}"
        },
        { "id": "type_popover", "ref": "create_object_graph" },
        { "id": "type_popover_name", "value": "change_type" },
        { "id": "to_name", "script": "return nodes.find(n => n.id === edge.to).name" },
        {
          "id": "popover_graph_actions",
          "script": "return {edit_edge: {_value: [[clear_popover]], 'change_type': [[show_popover_graph, {popover_graph: type_popover}]],'change_as': [[show_edit_text, {id: edge, property: 'as', value: edge.as, oneditconfirm: update_edge}], [clear_popover]], 'insert': {node: [[insert_node, {node: {id: randid}, edge, in_node: false}], [clear_popover]], in_node: [[insert_node, {node: {id:  randid, name: (to_name ?? edge.to) + '/in'}, edge, in_node: true}], [clear_popover]]}}}"
        },
        { "id": "popover_graph_name", "value": "change edge" },
        { "id": "popover_graph", "ref": "create_object_graph" },
        { "id": "show_popover_graph_payload" },
        { "id": "show_popover_graph_effector", "ref": "show_popover_graph" },
        { "id": "show_popover_graph", "ref": "array" },
        { "id": "effects", "ref": "array" },
        { "id": "result" },
        { "id": "out", "ref": "hyperapp_action" }
      ],
      "edges": [
        { "from": "type_popover_actions", "to": "type_popover", "as": "obj" },
        { "from": "type_popover_name", "to": "type_popover", "as": "name" },
        { "from": "edge", "to": "type_popover_actions", "as": "edge" },
        { "from": "clear_popover_type", "to": "type_popover_actions", "as": "clear_popover" },
        { "from": "update_edge", "to": "type_popover_actions", "as": "update_edge" },
        { "from": "update_edge_action", "to": "popover_graph_actions", "as": "update_edge" },
        { "from": "type_popover", "to": "popover_graph_actions", "as": "type_popover" },
        { "from": "edge", "to": "clear_popover", "as": "edge" },
        { "from": "edge", "to": "to_name", "as": "edge" },
        { "from": "display_graph_nodes", "to": "to_name", "as": "nodes" },
        { "from": "to_name", "to": "popover_graph_actions", "as": "to_name" },
        { "from": "clear_popover", "to": "popover_graph_actions", "as": "clear_popover" },
        { "from": "insert_node", "to": "popover_graph_actions", "as": "insert_node" },
        { "from": "edge", "to": "popover_graph_actions", "as": "edge" },
        { "from": "randid", "to": "popover_graph_actions", "as": "randid" },
        { "from": "show_edit_text", "to": "popover_graph_actions", "as": "show_edit_text" },
        { "from": "update_sim", "to": "popover_graph_actions", "as": "update_sim" },
        { "from": "show_popover_graph_effector", "to": "popover_graph_actions", "as": "show_popover_graph" },
        { "from": "popover_graph_actions", "to": "popover_graph", "as": "obj" },
        { "from": "popover_graph_name", "to": "popover_graph", "as": "name" },
        { "from": "popover_graph", "to": "show_popover_graph_payload", "as": "popover_graph" },
        { "from": "show_popover_graph_effector", "to": "show_popover_graph", "as": "a0" },
        { "from": "show_popover_graph_payload", "to": "show_popover_graph", "as": "a1" },
        { "from": "show_popover_graph", "to": "effects", "as": "a0" },
        { "from": "effects", "to": "result", "as": "effects" },
        { "from": "state", "to": "result", "as": "state" },
        { "from": "result", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "onclick_edge",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "edge", "ref": "arg", "value": "payload.edge" },
        { "id": "edge_as", "ref": "arg", "value": "payload.edge.as" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "readonly", "ref": "arg", "value": "state.readonly" },
        { "id": "links", "ref": "arg", "value": "state.links" },
        { "id": "event", "ref": "arg", "value": "payload.event" },
        { "id": "as_path", "value": "as" },
        { "id": "update_edge_action", "ref": "update_edge_action" },
        { "id": "show_edit_text", "ref": "show_edit_text" },
        {
          "id": "edit_text_position",
          "script": "return links.filter(l => l.source.node_id === edge.from && l.target.node_id === edge.to).map(l => ({x: (l.source.x + l.target.x) * 0.5, y: (l.source.y + l.target.y) * 0.5}))[0]"
        },
        { "id": "open_edge_popover", "ref": "open_edge_popover" },
        { "id": "edit_edge_as_payload" },
        { "id": "edit_edge_as", "ref": "array" },
        { "id": "stop_propagation_effector", "ref": "stop_propagation_effect" },
        { "id": "stop_propagation", "ref": "array" },
        { "id": "editable_effects", "ref": "array" },
        { "id": "readonly_effects", "ref": "array" },
        { "id": "effects", "ref": "if" },
        { "id": "result" },
        { "id": "out", "ref": "hyperapp_action" }
      ],
      "edges": [
        { "from": "in", "to": "out", "as": "args" },
        { "from": "edge", "to": "edit_text_position", "as": "edge" },
        { "from": "links", "to": "edit_text_position", "as": "links" },
        { "from": "edit_text_position", "to": "edit_edge_as_payload", "as": "position" },
        { "from": "as_path", "to": "edit_edge_as_payload", "as": "property" },
        { "from": "update_edge_action", "to": "edit_edge_as_payload", "as": "oneditconfirm" },
        { "from": "edge", "to": "edit_edge_as_payload", "as": "id" },
        { "from": "edge_as", "to": "edit_edge_as_payload", "as": "value" },
        { "from": "open_edge_popover", "to": "edit_edge_as_payload", "as": "oneditmore" },
        { "from": "edit_edge_as_payload", "to": "edit_edge_as", "as": "a1" },
        { "from": "show_edit_text", "to": "edit_edge_as", "as": "a0" },
        { "from": "edit_edge_as", "to": "editable_effects", "as": "a0" },
        { "from": "event", "to": "stop_propagation_payload", "as": "event" },
        { "from": "stop_propagation_effector", "to": "stop_propagation", "as": "a0" },
        { "from": "event", "to": "stop_propagation", "as": "a1" },
        { "from": "stop_propagation", "to": "editable_effects", "as": "a1" },
        { "from": "editable_effects", "to": "effects", "as": "false" },
        { "from": "readonly_effects", "to": "effects", "as": "true" },
        { "from": "readonly", "to": "effects", "as": "pred" },
        { "from": "state", "to": "result", "as": "state" },
        { "from": "effects", "to": "result", "as": "effects" },
        { "from": "result", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    { "id": "editor_dom_type", "value": "div" },
    { "id": "editor_props", "value": { "key": "editor" } },
    { "id": "popover_dimensions", "value": { "x": 400, "y": 800 } },
    { "id": "html_id", "ref": "arg", "value": "html_id" },
    {
      "id": "render_popover_graph_effect",
      "script": "return (dispatch, payload) => requestAnimationFrame(() => {payload = _lib.no.resolve(payload); if(payload.popover_dispatch) { payload.popover_dispatch(s => [{...s, display_graph: payload.display_graph, selected: [payload.display_graph.out]}, [s.update_sim_effect, {...s, display_graph: payload.display_graph}], [s.update_hyperapp] ]) } else { const popover_dispatch = _lib.no.executeGraphNode({graph: payload.graph, lib: _lib})('initialize_hyperapp_app')({graph: payload.graph, display_graph: payload.display_graph, html_id: `${payload.html_id}-popover`, dimensions: payload.dimensions, readonly: true, hide_types: true, static: true, hash: ''}).dispatch; dispatch(s => ({...s, popover_dispatch}));}})"
    },
    {
      "id": "handle_popover_event",
      "out": "out",
      "nodes": [
        { "id": "in" },
        { "id": "state", "ref": "arg", "value": "state" },
        { "id": "randid", "ref": "arg", "value": "state.randid" },
        { "id": "selected", "ref": "arg", "value": "state.selected" },
        { "id": "popover_graph", "ref": "arg", "value": "state.popover_graph" },
        { "id": "payload", "ref": "arg", "value": "payload" },
        { "id": "clear_popover_effect", "ref": "clear_popover_graph" },
        { "id": "effects", "script": "return popover_graph.nodes.find(n => n.id === payload.detail.node).value" },
        { "id": "new_state" },
        { "id": "out", "ref": "hyperapp_action" }
      ],
      "edges": [
        { "from": "in", "to": "new_state", "as": "args" },
        { "from": "state", "to": "new_state", "as": "state" },
        { "from": "selected", "to": "effects", "as": "selected" },
        { "from": "popover_graph", "to": "effects", "as": "popover_graph" },
        { "from": "clear_popover_effect", "to": "effects", "as": "clear_popover" },
        { "from": "randid", "to": "effects", "as": "randid" },
        { "from": "payload", "to": "effects", "as": "payload" },
        { "from": "effects", "to": "new_state", "as": "effects" },
        { "from": "new_state", "to": "out", "as": "fn", "type": "ref" }
      ]
    },
    {
      "id": "editor",
      "out": "out",
      "nodes": [
        { "id": "wrapper", "ref": "run_h" },
        { "id": "graph", "ref": "arg", "value": "graph" },
        { "id": "display_graph", "ref": "arg", "value": "display_graph" },
        { "id": "show_result", "ref": "arg", "value": "show_result" },
        { "id": "show_all", "ref": "arg", "value": "show_all" },
        { "id": "html_id", "ref": "arg", "value": "html_id" },
        { "id": "result_display", "ref": "arg", "value": "display" },
        { "id": "editing", "ref": "arg", "value": "editing" },
        { "id": "args_display", "ref": "arg", "value": "args_display" },
        { "id": "popover_graph", "ref": "arg", "value": "popover_graph" },
        { "id": "readonly", "ref": "arg", "value": "readonly" },
        { "id": "error", "ref": "arg", "value": "error" },
        { "id": "search", "ref": "arg", "value": "search" },
        { "id": "wrapper_dom_type", "value": "div" },
        { "id": "wrapper_props", "value": {} },
        {
          "id": "wrapper_children",
          "script": "return [styles.el, node_editor.el, !!result_display && result_display.el, !readonly && editing !== false && edit_text.el, !readonly && popover_graph && popover_graph_h.el.el, !editing && !show_all && args_display && args_display.el, !!error && error_display.el, menu.el].filter(e => e)"
        },
        {
          "id": "styles",
          "nodes": [
            { "id": "in" },
            {
              "id": "style_content",
              "value": "#node-editor { position: relative; width: 100%; height: 100vh; color: white; font-family: consolas; overflow: hidden; } #node-editor-editor.hash-view { background-color: unset; } svg { user-select: none; } .graph-ui { display: flex; position: absolute; right: 100px; top: 100px; flex-direction: row; gap: 8px; } .graph-ui ion-icon { cursor: pointer; width: 1.5em; height: 1.5em; color: #ccc; } .graph-ui ion-icon:hover { color: #fff; } .edit-value { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: #00000011; } .edit-value .more { cursor: pointer; } .edit-value .centering { position: absolute; width: 32vw; display: flex; flex-direction: column; } .edit-value.none { left: -1000%; } .edit-value textarea { width: 32vw; font-size: (1em + 1vh); outline: none; resize: none; } .edit-value label { font-size: calc(1em + 2vh) } .edit-value textarea { height: 64em; } .edit-value.ref input { position:relative; left: 0; } .edit-value .input { width: 256px; } .search-input.hidden { left: -1000px; } #arrow polyline { stroke: #fff; stroke-width: 2; fill: none } .node { cursor: pointer; } .node.hover { opacity: 1 !important; } .node .fill { opacity: 0; } .node .shape { animation_: 2s blink infinite; fill: #66ccff; } .node.hover .shape { stroke-width: 2; stroke: #3fc } .node.selected .shape { fill: #fcc; } .node .shape.script { transform-box: fill-box; transform-origin: 50% 50%; transform: rotate(45deg); fill: none; stroke-width: 2px; stroke: #66ccff; } .node.selected .shape.script { stroke: #fcc; } .node .shape.none { stroke-width: 2px; stroke: #66ccff; } .node .shape.error { fill: #FF0000 !important; } .node.selected .shape.none { stroke: #fcc; } .node-info { position: absolute; top: 0; left: 0; z-index: 10; border: 1px solid white; background: black; padding: .4em; max-width: 256px; color: white; display: flex; gap: .4em; flex-direction: column; } .node-info .args { display: flex; gap: 8px; flex-wrap: wrap; } .node-info .args span.clickable { cursor: pointer; text-decoration: underline dotted;  } .expand_contract {cursor: pointer; text-decoration: underline dotted;} /* result props */ .result { position: fixed; bottom: 100px; left: 100px; max-width: 33%; } .result.error { color: red; } text { user-select: none; fill: white; } .link.selected { stroke: red; } .link { stroke: #ccc; } svg.edge-info.selected rect { fill: red; } .insert-node, #dummy-add-node { cursor: pointer; stroke: #fff; stroke-width: 32; stroke-opacity: 1; } .insert-node .circle, #dummy-add-node .circle { fill-opacity: 0.5; } .node text { filter: url(#flood-background) } .node text .primary { font-weight: bold; } .node text .secondary { font-style: italic; } .node.selected text .secondary:hover, .node.selected text .primary:hover { text-decoration: dashed underline; } .show-key { position: fixed; right: 100px; top: 100px; font-size: 2em;; font-family: consolas; } .edge-info { filter: url(\"#flood-background\"); padding: 4px; cursor: pointer; } .edge-info.selected { filter: url(\"#selected-flood-background\"); } .error.main { position: absolute; top: 0; left: 0; width: 25vw; color: red; padding: 1em; height: 8em; z-index: 100; } /* popover */ #node-editor-popover { position: fixed; width: 100vw; height: 100vh; z-index: 100; top: 0; left: 0; background: #000000EE; } .popover { position: absolute; z-index: 100; background: #000000EE; }"
            },
            { "id": "style_h_text", "ref": "html_text" },
            { "id": "style_dom_type", "value": "style" },
            { "id": "out", "ref": "html_element" }
          ],
          "edges": [
            { "from": "in", "to": "out", "as": "args", "type": "ref" },
            { "from": "style_h_text", "to": "out", "as": "children" },
            { "from": "style_content", "to": "style_h_text", "as": "text" },
            { "from": "style_dom_type", "to": "out", "as": "dom_type" }
          ]
        },
        {
          "id": "edit_text",
          "nodes": [
            { "id": "in" },
            { "id": "html_id", "ref": "arg", "value": "html_id" },
            { "id": "display_graph_nodes", "ref": "arg", "value": "display_graph.nodes" },
            { "id": "nodes", "ref": "arg", "value": "nodes" },
            { "id": "selected", "ref": "arg", "value": "selected.0" },
            { "id": "dimensions", "ref": "arg", "value": "dimensions" },
            { "id": "display_graph", "ref": "arg", "value": "display_graph" },
            { "id": "selected_edge", "ref": "arg", "value": "selected_edge" },
            { "id": "editing", "ref": "arg", "value": "editing" },
            { "id": "levels", "ref": "arg", "value": "levels" },
            { "id": "edit_value", "ref": "arg", "value": "edit_value" },
            { "id": "on_editmore_action", "ref": "arg", "value": "oneditmore" },
            { "id": "selected_node", "script": "return nodes.find(n => n.node_id === selected)" },
            {
              "id": "ref_nodes",
              "script": "return nodes.filter(n => !(n.ref || levels.level_by_node.has(n.id)) && (n.script || n.nodes))"
            },
            { "id": "edit_text", "ref": "html_element" },
            { "id": "edit_text_dom_type", "value": "div" },
            { "id": "edit_text_label_wrapper_children", "ref": "array" },
            { "id": "edit_text_label_wrapper", "ref": "html_element" },
            { "id": "edit_text_input", "ref": "html_element" },
            { "id": "edit_text_textarea", "ref": "html_element" },
            { "id": "confirm_edit_text", "ref": "confirm_edit_text" },
            { "id": "edit_position", "ref": "arg", "value": "edit_position" },
            { "id": "svg_offset", "ref": "arg", "value": "svg_offset" },
            {
              "id": "edit_html_position",
              "script": "return {x: Math.min(dimensions.x - 256 * 1.25, (position?.x ?? 0) * (svg_offset?.scale ?? 1) + (svg_offset?.x ?? 0)), y: Math.min(dimensions.y - 64, (position?.y ?? 0) * (svg_offset?.scale ?? 1) + (svg_offset?.y ?? 0))}"
            },
            {
              "id": "edit_text_base_props",
              "script": "return {id: `${html_id}-edit-value`, class: {'edit-value': true, [editing]: true}, onclick: (s, payload) => (payload.preventDefault(), payload.stopPropagation(), [s, [confirm_edit_text, payload]])}"
            },
            { "id": "edit_text_props" },
            { "id": "edit_text_edit_box", "ref": "switch" },
            {
              "id": "centering_wrapper_children",
              "script": "return [label.el, edit_box?.el, editing === 'ref' ? ref_description?.el : false, editing === 'ref' ? ref_datalist.el : false]"
            },
            { "id": "edit_text_textarea_dom_type", "args": ["editing"], "script": "return 'textarea'" },
            {
              "id": "edit_text_textarea_props",
              "script": "const start_value = edit_value ?? (!editing ? '' : (selected_edge ? display_graph.edges.find(e => e.from === selected_edge.from && e.to === selected_edge.to) : display_graph.nodes.find(n => n.id === selected))[editing]); return {id: `${html_id}-textarea`, class: {textarea: true, [editing]: true}, onclick: (s, payload) => (payload.stopPropagation(), s), value: typeof(start_value) === 'string' ? start_value : JSON.stringify(start_value), oninput: (s, payload) => ({...s, edit_value: payload.target.value}), onfocus: (s, payload) => [s, [() => payload.target.setSelectionRange(0, payload.target.value.length)]] }"
            },
            { "id": "edit_text_input_dom_type", "args": ["editing"], "script": "return 'input'" },
            {
              "id": "edit_text_input_props",
               "script": "const start_value = edit_value ?? (!editing ? '' : (selected_edge ? display_graph.edges.find(e => e.from === selected_edge.from && e.to === selected_edge.to) : display_graph.nodes.find(n => n.id === selected))[editing]); return Object.assign({id: `${html_id}-edit-text`, class: {input: true, [editing]: true}, value: typeof(start_value) === 'string' ? start_value : JSON.stringify(start_value), onclick: (s, payload) => (payload.stopPropagation(), s), onkeydown: (s, payload) => [s, (payload.key === 'Enter' ? (payload.stopPropagation(), [confirm_edit_text, payload]): false)], oninput: (s, payload) => ({...s, edit_value: payload.target.value}), onfocus: (s, payload) => [s, [() => payload.target.setSelectionRange(0, payload.target.value.length)]]}, editing === 'ref' ? {list: 'node-options', type: 'text'} : {})"
            },
            { "id": "edit_text_label", "ref": "html_element" },
            { "id": "edit_text_label_dom_type", "value": "label" },
            { "id": "edit_text_label_props", "script": "return {for: `${html_id}-edit-text`}" },
            { "id": "edit_text_label_text", "ref": "html_text" },
            {
              "id": "edit_text_more_props",
              "script": "return {onclick: on_editmore_action, class: {more: true, hydrated: true, md: true}}"
            },
            { "id": "edit_text_more_icon", "value": "ellipsis-vertical-outline" },
            { "id": "edit_text_more", "ref": "icon" },
            { "id": "editing_path", "value": "editing" },
            { "id": "editing", "ref": "arg", "value": "editing" },
            {
              "id": "ref_description",
              "out": "out",
              "nodes": [
                { "id": "node_id", "ref": "arg", "value": "node_id" },
                { "id": "nodes", "ref": "arg", "value": "nodes" },
                { "id": "node_description", "ref": "node_description" },
                { "id": "description_text", "ref": "html_text" },
                { "id": "out", "ref": "html_element" }
              ],
              "edges": [
                { "from": "node_id", "to": "node_description", "as": "node_id" },
                { "from": "nodes", "to": "node_description", "as": "nodes" },
                { "from": "node_description", "to": "description_text", "as": "text" },
                { "from": "description_text", "to": "out", "as": "children" }
              ]
            },
            {
              "id": "ref_datalist",
              "name": "ref_datalist",
              "out": "xtr0qj6",
              "nodes": [
                { "id": "xtr0qj6", "ref": "html_element", "name": "ref_datalist" },
                { "id": "0msbgbm", "ref": "map" },
                { "id": "buav28h", "value": "datalist" },
                { "id": "ql1hqrf" },
                { "id": "jppiihp/jppiihp", "ref": "html_element" },
                {"id": "map_runnable", "ref": "runnable"},
                { "id": "h2altl0", "ref": "arg", "value": "ref_nodes" },
                { "id": "jgaye79", "value": "node-options" },
                { "id": "tk685lj" },
                { "id": "2xycz42", "value": "option" },
                { "id": "8v5dk5c", "ref": "html_text" },
                { "id": "jppiihp/ci554ww", "ref": "arg", "value": "element.id" },
                { "id": "n5dpir5", "ref": "default" },
                { "id": "9q28w9y", "ref": "arg", "value": "element.name" },
                { "id": "6s0wcu9", "ref": "arg", "value": "element.id" }
              ],
              "edges": [
                { "from": "0msbgbm", "to": "xtr0qj6", "as": "children" },
                { "from": "buav28h", "to": "xtr0qj6", "as": "dom_type" },
                { "from": "ql1hqrf", "to": "xtr0qj6", "as": "props" },
                { "from": "jppiihp/jppiihp", "to": "map_runnable", "as": "fn"},
                { "from": "map_runnable", "to": "0msbgbm", "as": "fn"},
                { "from": "h2altl0", "to": "0msbgbm", "as": "array" },
                { "from": "jgaye79", "to": "ql1hqrf", "as": "id" },
                { "from": "tk685lj", "to": "jppiihp/jppiihp", "as": "props" },
                { "from": "2xycz42", "to": "jppiihp/jppiihp", "as": "dom_type" },
                { "from": "8v5dk5c", "to": "jppiihp/jppiihp", "as": "children" },
                { "from": "jppiihp/ci554ww", "to": "tk685lj", "as": "value" },
                { "from": "n5dpir5", "to": "8v5dk5c", "as": "text" },
                { "from": "9q28w9y", "to": "n5dpir5", "as": "value" },
                { "from": "6s0wcu9", "to": "n5dpir5", "as": "otherwise" }
              ]
            },
            { "id": "get_nodes", "ref": "arg", "value": "display_graph.nodes" },
            { "id": "get_id", "script": "return node.id" },
            { "id": "centering_wrapper_dom_type", "value": "div" },
            {
              "id": "centering_wrapper_props",
              "script": "return {class: {centering: true}, style: {left: `${position.x}px`, top: `${position.y}px`} }"
            },
            { "id": "centering_wrapper", "ref": "html_element" },
            { "id": "edit_text_children", "ref": "array" },
            { "id": "edit_text_el_wrapper", "script": "return et.el" },
            { "id": "out" }
          ],
          "edges": [
            { "from": "selected", "to": "edit_text_textarea_props", "as": "selected" },
            { "from": "selected_edge", "to": "edit_text_textarea_props", "as": "selected_edge" },
            { "from": "display_graph", "to": "edit_text_textarea_props", "as": "display_graph" },
            { "from": "edit_value", "to": "edit_text_textarea_props", "as": "edit_value" },
            { "from": "editing", "to": "edit_text_textarea_props", "as": "editing" },
            { "from": "selected", "to": "edit_text_textarea_props", "as": "selected" },
            { "from": "selected_edge", "to": "edit_text_input_props", "as": "selected_edge" },
            { "from": "display_graph", "to": "edit_text_input_props", "as": "display_graph" },
            { "from": "edit_value", "to": "edit_text_input_props", "as": "edit_value" },
            { "from": "editing", "to": "edit_text_input_props", "as": "editing" },
            { "from": "selected", "to": "edit_text_input_props", "as": "selected" },
            { "from": "selected", "to": "selected_node", "as": "selected" },
            { "from": "nodes", "to": "selected_node", "as": "nodes" },
            { "from": "selected_node", "to": "centering_wrapper_props", "as": "node" },
            { "from": "edit_text", "to": "edit_text_el_wrapper", "as": "et" },
            { "from": "editing", "to": "edit_text_edit_box", "as": "input" },
            { "from": "editing", "to": "centering_wrapper_children", "as": "editing" },
            { "from": "edit_text_el_wrapper", "to": "out", "as": "el" },
            { "from": "edit_text_dom_type", "to": "edit_text", "as": "dom_type" },
            { "from": "html_id", "to": "edit_text_base_props", "as": "html_id" },
            { "from": "edit_text_base_props", "to": "edit_text_props" },
            { "from": "edit_text_props", "to": "edit_text", "as": "props" },
            { "from": "centering_wrapper", "to": "edit_text", "as": "children" },
            { "from": "dimensions", "to": "edit_html_position", "as": "dimensions" },
            { "from": "edit_position", "to": "edit_html_position", "as": "position" },
            { "from": "svg_offset", "to": "edit_html_position", "as": "svg_offset" },
            { "from": "edit_html_position", "to": "centering_wrapper_props", "as": "position" },
            { "from": "html_id", "to": "edit_text_input_props", "as": "html_id" },
            { "from": "confirm_edit_text", "to": "edit_text_input_props", "as": "confirm_edit_text" },
            { "from": "edit_text_input_props", "to": "edit_text_input", "as": "props" },
            { "from": "edit_text_input_dom_type", "to": "edit_text_input", "as": "dom_type" },
            { "from": "edit_text_input", "to": "edit_text_edit_box", "as": "otherwise" },
            { "from": "edit_text_textarea", "to": "edit_text_edit_box", "as": "script" },
            { "from": "edit_text_edit_box", "to": "centering_wrapper_children", "as": "edit_box" },
            { "from": "levels", "to": "ref_nodes", "as": "levels" },
            { "from": "nodes", "to": "ref_nodes", "as": "nodes" },
            { "from": "display_graph_nodes", "to": "ref_nodes", "as": "nodes" },
            { "from": "ref_nodes", "to": "ref_datalist", "as": "ref_nodes" },
            { "from": "ref_datalist", "to": "centering_wrapper_children", "as": "ref_datalist" },
            { "from": "edit_value", "to": "ref_description", "as": "node_id" },
            { "from": "display_graph_nodes", "to": "ref_description", "as": "nodes" },
            { "from": "ref_description", "to": "centering_wrapper_children", "as": "ref_description" },
            { "from": "html_id", "to": "edit_text_textarea_props", "as": "html_id" },
            { "from": "edit_text_textarea_props", "to": "edit_text_textarea", "as": "props" },
            { "from": "edit_text_textarea_dom_type", "to": "edit_text_textarea", "as": "dom_type" },
            { "from": "html_id", "to": "edit_text_label_props", "as": "html_id" },
            { "from": "edit_text_more", "to": "edit_text_label_wrapper_children", "as": "a1" },
            { "from": "edit_text_label", "to": "edit_text_label_wrapper_children", "as": "a0" },
            { "from": "edit_text_label_wrapper_children", "to": "edit_text_label_wrapper", "as": "children" },
            { "from": "edit_text_label_wrapper", "to": "centering_wrapper_children", "as": "label" },
            { "from": "edit_text_label_props", "to": "edit_text_label", "as": "props" },
            { "from": "edit_text_label_dom_type", "to": "edit_text_label", "as": "dom_type" },
            { "from": "edit_text_label_text", "to": "edit_text_label", "as": "children" },
            { "from": "on_editmore_action", "to": "edit_text_more_props", "as": "on_editmore_action" },
            { "from": "edit_text_more_props", "to": "edit_text_more", "as": "props" },
            { "from": "edit_text_more_icon", "to": "edit_text_more", "as": "icon" },
            { "from": "in", "to": "get_nodes" },
            { "from": "get_nodes", "to": "get_id", "as": "node" },
            { "from": "get_id", "to": "id_text", "as": "text" },
            { "from": "editing", "to": "edit_text_label_text", "as": "text" },
            { "from": "editing", "to": "edit_text_base_props", "as": "editing" },
            { "from": "confirm_edit_text", "to": "edit_text_base_props", "as": "confirm_edit_text" },
            { "from": "centering_wrapper_dom_type", "to": "centering_wrapper", "as": "dom_type" },
            { "from": "centering_wrapper_props", "to": "centering_wrapper", "as": "props" },
            { "from": "centering_wrapper_children", "to": "centering_wrapper", "as": "children" },
            { "from": "centering_wrapper", "to": "edit_text_children", "as": "a0" },
            { "from": "edit_text_children", "to": "edit_text", "as": "children" }
          ]
        },
        {
          "id": "popover_graph_h",
          "nodes": [
            { "id": "html_id", "ref": "arg", "value": "html_id" },
            { "id": "update_sim", "ref": "arg", "value": "update_sim" },
            { "id": "randid", "ref": "arg", "value": "randid" },
            { "id": "handle_popover_event", "ref": "handle_popover_event" },
            { "id": "clear_popover", "ref": "clear_popover_graph" },
            {
              "id": "props",
              "script": "return {id: `${html_id}-popover`, class: {popover: true}, key:  `${html_id}-popover`, onselectnode: handle_popover_event, ongraphclick: (s, p) => [s]}"
            },
            { "id": "dom_type", "value": "div" },
            { "id": "out", "ref": "html_element" }
          ],
          "edges": [
            { "from": "update_sim", "to": "props", "as": "update_sim" },
            { "from": "handle_popover_event", "to": "props", "as": "handle_popover_event" },
            { "from": "clear_popover", "to": "props", "as": "clear_popover" },
            { "from": "props", "to": "out", "as": "props" },
            { "from": "html_id", "to": "props", "as": "html_id" },
            { "from": "dom_type", "to": "out", "as": "dom_type" }
          ]
        },
        { "id": "popover_graph_h_wrapper" },
        {
          "id": "menu",
          "nodes": [
            { "id": "readonly", "ref": "arg", "value": "readonly" },
            { "id": "false", "value": false },
            {
              "id": "search_input",
              "nodes": [
                { "id": "in" },
                { "id": "search", "ref": "arg", "value": "search" },
                { "id": "is_searching", "script": "return typeof search === 'string'" },
                { "id": "search_input_dom_type", "value": "input" },
                { "id": "nodes", "ref": "arg", "value": "nodes" },
                { "id": "html_id", "ref": "arg", "value": "html_id" },
                { "id": "display_graph", "ref": "arg", "value": "display_graph" },
                {
                  "id": "search_input_props",
                  "script": "return {id: `${html_id}-search-input`, key: `${html_id}-search-input`, class: 'search-input', type: 'text', onkeydown: (s, payload) => { if(payload.key === 'Enter'){ const direction = payload.shiftKey ? -1 : 1; const idx = (s.search_results.length + s.search_index + direction) % s.search_results.length; return [{...s, selected: s.search_results.slice(idx, idx + 1), search_index: idx}, [_lib.panzoom.effect, {...s, selected: s.search_results[idx]}], [s.update_hyperapp]] } else { return s;} }, oninput: (s, payload) => {const search_results = new _lib.Fuse(nodes.map(n => Object.assign({}, n, display_graph.nodes.find(d => d.id === n.node_id))), {keys: ['name', 'node_id', 'ref']}).search(payload.target.value).map(r => r.item.node_id); return [{...s, search: payload.target.value, selected: search_results.length > 0 ? search_results.slice(0, 1) : s.selected, search_results, search_index: 0}, search_results.length > 0 && [_lib.panzoom.effect, {...s, selected: search_results[0]}], [s.update_hyperapp]]}}"
                },
                { "id": "search_field", "ref": "html_element" },
                { "id": "search_effect", "ref": "search_effect" },
                { "id": "focus_effect", "ref": "focus_effect" },
                {
                  "id": "search_icon_props",
                  "script": "return {id: `${html_id}-search-input`, key: `${html_id}-search-input-icon`, class: 'search-input search-input-icon', onclick: s => [s, [search, {search: ''}], [focus, {selector: `#${html_id}-search-input`}]]}"
                },
                { "id": "search_icon_dom_type", "value": "div" },
                { "id": "search_icon_name", "value": "search" },
                { "id": "search_icon", "ref": "icon" },
                { "id": "out", "ref": "if" }
              ],
              "edges": [
                { "from": "html_id", "to": "search_input_props", "as": "html_id" },
                { "from": "nodes", "to": "search_input_props", "as": "nodes" },
                { "from": "display_graph", "to": "search_input_props", "as": "display_graph" },
                { "from": "search", "to": "is_searching", "as": "search" },
                { "from": "search_input_dom_type", "to": "search_field", "as": "dom_type" },
                { "from": "search_input_props", "to": "search_field", "as": "props" },
                { "from": "html_id", "to": "search_icon_props", "as": "html_id" },
                { "from": "search_effect", "to": "search_icon_props", "as": "search" },
                { "from": "focus_effect", "to": "search_icon_props", "as": "focus" },
                { "from": "search_icon_props", "to": "search_icon", "as": "props" },
                { "from": "search_icon_dom_type", "to": "search_icon", "as": "dom_type" },
                { "from": "search_icon_name", "to": "search_icon", "as": "icon" },
                { "from": "search_icon", "to": "out", "as": "false" },
                { "from": "search_field", "to": "out", "as": "true" },
                { "from": "is_searching", "to": "out", "as": "pred" }
              ]
            },
            {
              "id": "close",
              "nodes": [
                { "id": "icon", "value": "close" },
                { "id": "dispatch_custom_event_effect", "ref": "dispatch_custom_event_effect" },
                {
                  "id": "props",
                  "script": "return {onclick: (s, p) => (p.stopPropagation(), [s, [dispatch_custom, {event: 'selectnode', detail: {node: s.display_graph.out}, html_id: s.html_id}]])}"
                },
                { "id": "out", "ref": "icon" }
              ],
              "edges": [
                { "from": "dispatch_custom_event_effect", "to": "props", "as": "dispatch_custom" },
                { "from": "props", "to": "out", "as": "props" },
                { "from": "icon", "to": "out", "as": "icon" }
              ]
            },
            { "id": "close_readonly", "ref": "if" },
            {
              "id": "more",
              "nodes": [
                { "id": "icon", "value": "ellipsis-vertical-outline" },
                { "id": "onclick", "ref": "graph_ui_action" },
                { "id": "props", "script": "return {onclick}" },
                { "id": "out", "ref": "icon" }
              ],
              "edges": [
                { "from": "props", "to": "out", "as": "props" },
                { "from": "icon", "to": "out", "as": "icon" },
                { "from": "onclick", "to": "props", "as": "onclick" }
              ]
            },
            { "id": "more_readonly", "ref": "if" },
            { "id": "dom_type", "value": "div" },
            { "id": "children", "ref": "array" },
            { "id": "html_id", "ref": "arg", "value": "html_id" },
            { "id": "props", "script": "return {class: {'graph-ui': true}, key: `${html_id}-graph-ui`}" },
            { "id": "out", "ref": "html_element" }
          ],
          "edges": [
            { "from": "more", "to": "more_readonly", "as": "false" },
            { "from": "false", "to": "more_readonly", "as": "true" },
            { "from": "readonly", "to": "more_readonly", "as": "pred" },
            { "from": "more_readonly", "to": "children", "as": "a1" },
            { "from": "search_input", "to": "children", "as": "a0" },
            { "from": "readonly", "to": "close_readonly", "as": "pred" },
            { "from": "close", "to": "close_readonly", "as": "true" },
            { "from": "false", "to": "close_readonly", "as": "false" },
            { "from": "close_readonly", "to": "children", "as": "a2", "type": "resolve" },
            { "from": "html_id", "to": "props", "as": "html_id" },
            { "from": "children", "to": "out", "as": "children" },
            { "from": "props", "to": "out", "as": "props" },
            { "from": "dom_type", "to": "out", "as": "dom_type" }
          ]
        },
        {
          "id": "node_editor",
          "nodes": [
            { "id": "in" },
            { "id": "out", "ref": "html_element" },
            { "id": "panzoom_box_dom_type", "value": "g" },
            { "id": "panzoom_box_props", "script": "return {id: `${html_id}-editor-panzoom`}" },
            { "id": "panzoom_box", "ref": "html_element" },
            { "id": "panzoom_box_arr", "ref": "array" },
            { "id": "html_id", "ref": "arg", "value": "html_id" },
            { "id": "hover", "ref": "arg", "value": "hover" },
            { "id": "randid", "ref": "arg", "value": "randid" },
            { "id": "node_el_width", "ref": "arg", "value": "node_el_width" },
            { "id": "display_graph", "ref": "arg", "value": "display_graph" },
            { "id": "readonly", "ref": "arg", "value": "readonly" },
            { "id": "hash", "ref": "arg", "value": "hash" },
            { "id": "show_all", "ref": "arg", "value": "show_all" },
            { "id": "error", "ref": "arg", "value": "error" },
            { "id": "hide_types", "ref": "arg", "value": "hide_types" },
            { "id": "links", "ref": "arg", "value": "links" },
            { "id": "get_levels", "ref": "arg", "value": "levels" },
            { "id": "nodes", "ref": "arg", "value": "nodes" },
            { "id": "dg_nodes", "ref": "arg", "value": "display_graph.nodes" },
            { "id": "dg_selected", "ref": "find_node" },
            { "id": "get_nodes", "script": "return nodes?.map(n => ({...n, x: (n.x - node_el_width * 0.5)})) ?? []" },
            {
              "id": "get_links",
              "script": "return links?.map(l => (Object.assign({}, l, {source: Object.assign({}, l.source, {x: (l.source.x - node_el_width * 0.5)}), target: Object.assign({}, l.target, {x: (l.target.x - node_el_width * 0.5)})}))) ?? []"
            },
            { "id": "get_selected", "ref": "arg", "value": "selected" },
            { "id": "get_graph", "ref": "arg", "value": "graph" },
            { "id": "get_selected_node", "ref": "find_node" },
            { "id": "get_selected_edge", "ref": "arg", "value": "selected_edge" },
            { "id": "dimensions", "ref": "arg", "value": "dimensions" },
            { "id": "onclick_graph", "ref": "onclick_graph_action" },
            {
              "id": "node_editor_props",
              "script": "return {id: `${html_id}-editor`, class: {[`hash-${hash.substring(1)}`]: hash.length > 0},width: dimensions.x, height: dimensions.y, onclick: onclick_graph, ontouchstart: onclick_graph}"
            },
            { "id": "node_editor_dom_type", "value": "svg" },
            {
              "id": "node_editor_children",
              "script": "return [defs.el].concat(nodes?.map(c => c.el) ?? []).concat(links?.flatMap(l => l.map(lc => lc.el)) ?? [])"
            },
            { "id": "node_args", "ref": "node_args" },
            {
              "id": "dummy_nodes",
              "script": "return !selected_node ? [] : [{node_id: selected_node.node_id + a, node_child_id: selected_node.node_id + a, dummy: true, name: a, x: selected_node.x - 128, y: selected_node.y + 32 * i}))"
            },
            {
              "id": "dummy_links",
              "script": "return !selected_node ? [] : nodes.map(n => ({edge: {from: n.id, to: selected_node.node_id, as: n.name}, source: n, target: selected_node}))"
            },
            {
              "id": "dummy_node_el",
              "nodes": [
                { "id": "randid", "ref": "arg", "value": "randid" },
                { "id": "selected", "ref": "arg", "value": "selected_node.node_id" },
                { "id": "selected_node", "ref": "arg", "value": "selected_node" },
                { "id": "add_node", "ref": "add_node" },
                {
                  "id": "base_props",
                  "value": {
                    "href": "svg/add-circle-outline.svg#icon",
                    "width": "32px",
                    "height": "32px",
                    "id": "dummy-add-node"
                  }
                },
                {
                  "id": "onclick_props",
                  "script": "return {onclick: (s, p) => [s, [add_node, {node: {id: randid}, child}]], ontouchstart: (s, p) => [s, [add_node, {node: {id: randid}, child}]]}"
                },
                { "id": "position", "script": "return {x: (node?.x ?? 0) - 64, y: (node?.y ?? 0) - 64}" },
                { "id": "props", "ref": "merge_objects" },
                { "id": "out", "ref": "add_circle_icon" }
              ],
              "edges": [
                { "from": "selected", "to": "onclick_props", "as": "child" },
                { "from": "randid", "to": "onclick_props", "as": "randid" },
                { "from": "add_node", "to": "onclick_props", "as": "add_node" },
                { "from": "base_props", "to": "props", "as": "a0" },
                { "from": "onclick_props", "to": "props", "as": "a1" },
                { "from": "selected_node", "to": "position", "as": "node" },
                { "from": "position", "to": "_props", "as": "a2" },
                { "from": "props", "to": "out", "as": "props" }
              ]
            },
            {
              "id": "dummy_node_els",
              "script": "const fn = _lib.no.executeGraphNode({graph: _graph, lib: _lib})(node_layout_map); return nodes.map(n => fn({node: n, selected, selected_distance: 0}))"
            },
            {
              "id": "dummy_link_els",
              "script": "const fn = _lib.no.executeGraphNode({graph: _graph, lib: _lib})(link_layout_map); return links.map(l => fn({link: Object.assign(l, {edge: l.edge}), selected_distance: 0}))"
            },
            {
              "id": "node_layout",
              "script": "const error_nodes = error instanceof AggregateError ? error.errors.map(e => e instanceof _lib.no.NodysseusError ? e.node_id : false).filter(n => n) : error instanceof _lib.no.NodysseusError ? [error.node_id] : []; const fn = _lib.no.executeGraphNode({graph: {..._graph}, lib: _lib})(node_layout_map); return nodes.sort((a, b) => levels.distance_from_selected.get(b.node_child_id) - levels.distance_from_selected.get(a.node_child_id)).map(n => fn(Object.assign({node: Object.assign({}, n, display_graph.nodes.find(dgn => dgn.id === n.node_id)), hide_types, show_all, selected_distance: levels.distance_from_selected.get(n.node_child_id), level: levels.level_by_node.get(n.node_id), node_error: !error_nodes ? false : error_nodes.filter(k => k.startsWith(n.node_id)).length > 0}, _node_inputs), n.node_id))"
            },
            {
              "id": "node_layout_map",
              "nodes": [
                { "id": "in" },
                { "id": "get_node", "ref": "arg", "value": "node" },
                { "id": "hover", "ref": "arg", "value": "hover" },
                { "id": "selected_edge", "ref": "arg", "value": "selected_edge" },
                { "id": "html_id", "ref": "arg", "value": "html_id" },
                { "id": "show_all", "ref": "arg", "value": "show_all" },
                { "id": "selected", "ref": "arg", "value": "selected" },
                { "id": "node_el_width", "ref": "arg", "value": "node_el_width" },
                { "id": "is_selected", "script": "return node.node_id === selected[0]" },
                { "id": "selected_distance", "ref": "arg", "value": "selected_distance" },
                { "id": "level", "ref": "arg", "value": "level" },
                { "id": "hide_types", "ref": "arg", "value": "hide_types" },
                { "id": "error", "ref": "arg", "value": "node_error" },
                { "id": "out", "ref": "html_element" },
                { "id": "parent", "ref": "html_element" },
                { "id": "parent_dom_type", "value": "svg" },
                { "id": "onclick_node", "ref": "onselectnode_action" },
                {
                  "id": "parent_attrs",
                  "script": "return ({onclick: (_, payload) => [onclick, {event: payload, node_id: node.node_id}],  onmouseover: (state, payload) => [{...state, hover: node.node_id}], onmouseout: (state, payload) => [{...state, hover: undefined}],  ontouchstart: (_, payload) => [onclick, {event: payload, node_id: node.node_id}], width: '256', height: '64', key: html_id + '-' + node.node_child_id, id: html_id + '-' + node.node_child_id, class: {node: true,  selected: selected[0] === node.node_id, hover: hover === node.node_id }, opacity: selected_edge?.from === node.node_id || show_all ? 1 : selected_distance !== undefined ? Math.max(0.05, 1 - (selected_distance * selected_distance) / 6) : 0.1})"
                },
                {
                  "id": "children",
                  "nodes": [
                    { "id": "in" },
                    { "id": "selected_distance", "ref": "arg", "value": "selected_distance" },
                    { "id": "node", "ref": "arg", "value": "node" },
                    { "id": "node_node", "ref": "arg", "value": "node.node" },
                    { "id": "error", "ref": "arg", "value": "node_error" },
                    {
                      "id": "node_shape_attrs",
                      "script": "const r = 24; return node.script ? {class:{shape: true, script: true, error}, width: r, height: r, x: 10, y: 10} : node.ref && node.ref !== 'arg' ? {class: {shape: true, ref: true, error}, width: r, height: r, x: 10, y: 10} : node.nodes ? {class: {shape: true, graph: true, error}, r: r * 0.5, cx: r * 0.5 + 4, cy: r * 0.5 + 4}  : node.value !== undefined ? {class: {shape: true, value: true, error}, points: `4,${4 + r} ${4 + r},${4 + r} ${4 + r * 0.5},4`} : {class: {shape: true, none: true, error}, r: r * 0.5 , cx: r * 0.5 + 4, cy: r * 0.5 + 4}"
                    },
                    { "id": "default_color", "value": "blue" },
                    { "id": "empty_array", "value": [] },
                    {
                      "id": "node_shape_dom_type",
                      "script": "return node.script ? 'rect' : node.ref && node.ref !== 'arg' ? 'rect' : node.nodes ? 'circle' : node.value ? 'polygon' : 'circle'"
                    },
                    { "id": "node_shape", "ref": "html_element" },
                    {
                      "id": "text",
                      "nodes": [
                        { "id": "in" },
                        { "id": "out" },
                        { "id": "node_id", "value": "node_id" },
                        { "id": "node_ref", "value": "ref" },
                        { "id": "node_name", "value": "name" },
                        { "id": "node_value", "value": "value" },
                        { "id": "id_path" },
                        { "id": "get_id", "ref": "get" },
                        { "id": "get_name", "ref": "get" },
                        { "id": "arg_node", "ref": "arg", "value": "node" },
                        { "id": "payload_node", "ref": "arg", "value": "payload.node" },
                        { "id": "payload_node_value", "ref": "arg", "value": "payload.node.value" },
                        { "id": "node", "ref": "default" },
                        { "id": "event", "ref": "arg", "value": "payload.event" },
                        { "id": "empty_string", "value": "" },
                        { "id": "hide_types", "ref": "arg", "value": "hide_types" },
                        { "id": "update_node", "ref": "update_node_action" },
                        { "id": "show_edit_text", "ref": "show_edit_text" },
                        { "id": "stop_propagation_effector", "ref": "stop_propagation_effect" },
                        { "id": "stop_propagation_payload" },
                        { "id": "stop_propagation_effect", "ref": "array" },
                        {
                          "id": "get_value",
                          "script": "return (target.value !== undefined ? (typeof target.value === 'object' ? JSON.stringify(target.value) : target.value.toString()) : def).substring(0, 255)"
                        },
                        { "id": "get_ref", "ref": "get" },
                        {
                          "id": "ref_name",
                          "script": "return (target.ref ? target.ref : target.script ? 'script' : target.nodes ? `graph (${target.nested_node_count}, ${target.nested_edge_count})` : target.value !== undefined ? 'value' : 'object')"
                        },
                        { "id": "selected_distance", "ref": "arg", "value": "selected_distance" },
                        {
                          "id": "shorten",
                          "args": ["text"],
                          "script": "return text.substring(text.lastIndexOf('/') + 1)"
                        },
                        { "id": "node_primary_text_base_props", "value": { "class": "primary", "dy": ".6em", "x": "48" } },
                        { "id": "tspan_dom_type", "value": "tspan" },
                        {
                          "id": "display_name_input",
                          "script": "return n.name ? 'name' : n.value !== undefined ? 'value' : undefined"
                        },
                        { "id": "display_name", "ref": "switch" },
                        { "id": "node_primary_text_onclick_show_edit_text_payload" },
                        { "id": "node_primary_text_onclick_show_edit_text", "ref": "array" },
                        { "id": "node_primary_text_onclick_effects", "ref": "array" },
                        { "id": "node_primary_text_onclick" },
                        { "id": "node_primary_text_onclick_runnable", "ref": "runnable" },
                        { "id": "node_selected_primary_text_onclick_runnable", "ref": "if" },
                        { "id": "node_primary_text_onclick_props" },
                        { "id": "node_primary_text_props", "ref": "merge_objects" },
                        { "id": "node_primary_text_text", "ref": "html_text" },
                        { "id": "node_primary_text", "ref": "html_element" },
                        {
                          "id": "node_secondary_text_base_props",
                          "value": { "class": "secondary", "dy": "1.2em", "x": "48" }
                        },
                        { "id": "state", "ref": "arg", "value": "state" },
                        { "id": "state_nodes", "ref": "arg", "value": "state.display_graph.nodes" },
                        { "id": "arg_nodes", "ref": "arg", "value": "nodes" },
                        { "id": "nodes", "ref": "default" },
                        { "id": "dg_nodes", "ref": "default" },
                        { "id": "state_selected", "ref": "arg", "value": "state.selected.0" },
                        { "id": "arg_selected", "ref": "arg", "value": "selected" },
                        { "id": "selected", "ref": "default" },
                        { "id": "is_selected", "ref": "eq" },
                        { "id": "selected_node", "ref": "find_node" },
                        { "id": "selected_dg_node", "ref": "find_node" },
                        { "id": "selected_node_id", "ref": "get" },
                        { "id": "node_secondary_text_onclick_show_edit_text_payload" },
                        { "id": "node_secondary_text_onclick_show_edit_text", "ref": "array" },
                        { "id": "node_secondary_text_onclick_effects", "ref": "array" },
                        { "id": "node_secondary_text_onclick" },
                        { "id": "node_secondary_text_onclick_runnable", "ref": "runnable" },
                        { "id": "node_selected_secondary_text_onclick_runnable", "ref": "if" },
                        { "id": "node_secondary_text_onclick_props" },
                        { "id": "node_secondary_text_props", "ref": "merge_objects" },
                        { "id": "node_secondary_text_text", "ref": "html_text" },
                        { "id": "node_secondary_text", "ref": "html_element" },
                        { "id": "node_text_dom_type", "value": "text" },
                        { "id": "node_text", "ref": "html_element" },
                        { "id": "script", "value": "script" },
                        { "id": "node_text_props", "args": ["selected_distance"], "script": "return { x: 48, y: 12 }" },
                        {
                          "id": "node_text_children",
                          "args": ["primary", "secondary"],
                          "script": "return [primary.el, !hide_types && secondary.el]"
                        },
                        { "id": "text", "value": "text" }
                      ],
                      "edges": [
                        { "from": "node", "to": "get_id", "as": "target" },
                        { "from": "node_id", "to": "get_id", "as": "path" },
                        { "from": "state_nodes", "to": "nodes", "as": "otherwise" },
                        { "from": "arg_nodes", "to": "nodes", "as": "value" },
                        { "from": "get_id", "to": "selected_node", "as": "node_id" },
                        { "from": "nodes", "to": "selected_node", "as": "nodes" },
                        { "from": "arg_node", "to": "node", "as": "value" },
                        { "from": "payload_node", "to": "node", "as": "otherwise" },
                        { "from": "state_selected", "to": "selected", "as": "otherwise" },
                        { "from": "arg_selected", "to": "selected", "as": "value" },
                        { "from": "get_id", "to": "is_selected", "as": "a" },
                        { "from": "selected", "to": "is_selected", "as": "b" },
                        { "from": "node", "to": "get_ref", "as": "target" },
                        { "from": "node", "to": "ref_name", "as": "target" },
                        { "from": "node", "to": "get_value", "as": "target" },
                        { "from": "node", "to": "get_name", "as": "target" },
                        { "from": "empty_string", "to": "display_name", "as": "id" },
                        { "from": "get_value", "to": "display_name", "as": "value" },
                        { "from": "node_ref", "to": "get_ref", "as": "path" },
                        { "from": "node_ref", "to": "ref_name", "as": "path" },
                        { "from": "node_name", "to": "get_name", "as": "path" },
                        { "from": "script", "to": "ref_name", "as": "default_value" },
                        { "from": "get_name", "to": "display_name", "as": "name" },
                        { "from": "node", "to": "display_name_input", "as": "n" },
                        { "from": "display_name_input", "to": "display_name", "as": "input" },
                        { "from": "stop_propagation_effector", "to": "stop_propagation_effect", "as": "a0" },
                        { "from": "event", "to": "stop_propagation_effect", "as": "a1" },
                        { "from": "display_name", "to": "node_primary_text_text", "as": "text" },
                        { "from": "ref_name", "to": "node_secondary_text_text", "as": "text" },
                        { "from": "node_text_props", "to": "node_text", "as": "props" },
                        { "from": "node_primary_text_text", "to": "node_primary_text", "as": "children" },
                        { "from": "node_primary_text_attrs", "to": "node_primary_text", "as": "props" },
                        { "from": "node_primary_text", "to": "node_text_children", "as": "primary" },
                        { "from": "hide_types", "to": "node_text_children", "as": "hide_types" },
                        { "from": "node_primary_text_text", "to": "node_primary_text", "as": "children" },
                        { "from": "node_primary_text_base_props", "to": "node_primary_text_props", "as": "a0" },
                        { "from": "node_primary_text_onclick_props", "to": "node_primary_text_props", "as": "a1" },
                        { "from": "node", "to": "node_primary_text_onclick_runnable", "as": "node" },
                        {
                          "from": "node_primary_text_onclick_runnable",
                          "to": "node_selected_primary_text_onclick_runnable",
                          "as": "true"
                        },
                        { "from": "arg_selected", "to": "node_selected_primary_text_onclick_runnable", "as": "pred" },
                        {
                          "from": "node_selected_primary_text_onclick_runnable",
                          "to": "node_primary_text_onclick_props",
                          "as": "onclick"
                        },
                        {
                          "from": "node_selected_primary_text_onclick_runnable",
                          "to": "node_primary_text_onclick_props",
                          "as": "ontouchstart"
                        },
                        {
                          "from": "node_primary_text_onclick",
                          "to": "node_primary_text_onclick_runnable",
                          "as": "fn"
                        },
                        { "from": "show_edit_text", "to": "node_primary_text_onclick_show_edit_text", "as": "a0" },
                        {
                          "from": "update_node",
                          "to": "node_primary_text_onclick_show_edit_text_payload",
                          "as": "oneditconfirm"
                        },
                        {
                          "from": "node",
                          "to": "node_primary_text_onclick_show_edit_text_payload",
                          "as": "position"
                        },
                        { "from": "get_id", "to": "node_primary_text_onclick_show_edit_text_payload", "as": "id" },
                        {
                          "from": "payload_node_value",
                          "to": "node_primary_text_onclick_show_edit_text_payload",
                          "as": "value"
                        },
                        {
                          "from": "node_value",
                          "to": "node_primary_text_onclick_show_edit_text_payload",
                          "as": "property"
                        },
                        { "from": "node", "to": "node_primary_text_onclick_show_edit_text_payload", "as": "node" },
                        {
                          "from": "node_primary_text_onclick_show_edit_text_payload",
                          "to": "node_primary_text_onclick_show_edit_text",
                          "as": "a1"
                        },
                        { "from": "stop_propagation_effect", "to": "node_primary_text_onclick_effects", "as": "a1" },
                        {
                          "from": "node_primary_text_onclick_show_edit_text",
                          "to": "node_primary_text_onclick_effects",
                          "as": "a0"
                        },
                        {
                          "from": "node_primary_text_onclick_effects",
                          "to": "node_primary_text_onclick",
                          "as": "effects"
                        },
                        { "from": "state", "to": "node_primary_text_onclick", "as": "state" },
                        { "from": "node_primary_text_props", "to": "node_primary_text", "as": "props" },
                        { "from": "node_secondary_text_text", "to": "node_secondary_text", "as": "children" },
                        { "from": "node_secondary_text_base_props", "to": "node_secondary_text_props", "as": "a0" },
                        { "from": "node_secondary_text_onclick_props", "to": "node_secondary_text_props", "as": "a1" },
                        { "from": "node", "to": "node_secondary_text_onclick_runnable", "as": "node" },
                        {
                          "from": "node_secondary_text_onclick_runnable",
                          "to": "node_selected_secondary_text_onclick_runnable",
                          "as": "true"
                        },
                        { "from": "arg_selected", "to": "node_selected_secondary_text_onclick_runnable", "as": "pred" },
                        {
                          "from": "node_selected_secondary_text_onclick_runnable",
                          "to": "node_secondary_text_onclick_props",
                          "as": "onclick"
                        },
                        {
                          "from": "node_selected_secondary_text_onclick_runnable",
                          "to": "node_secondary_text_onclick_props",
                          "as": "ontouchstart"
                        },
                        {
                          "from": "node_secondary_text_onclick",
                          "to": "node_secondary_text_onclick_runnable",
                          "as": "fn"
                        },
                        { "from": "show_edit_text", "to": "node_secondary_text_onclick_show_edit_text", "as": "a0" },
                        {
                          "from": "update_node",
                          "to": "node_secondary_text_onclick_show_edit_text_payload",
                          "as": "oneditconfirm"
                        },
                        {
                          "from": "node",
                          "to": "node_secondary_text_onclick_show_edit_text_payload",
                          "as": "position"
                        },
                        { "from": "get_id", "to": "node_secondary_text_onclick_show_edit_text_payload", "as": "id" },
                        {
                          "from": "get_ref",
                          "to": "node_secondary_text_onclick_show_edit_text_payload",
                          "as": "value"
                        },
                        {
                          "from": "node_ref",
                          "to": "node_secondary_text_onclick_show_edit_text_payload",
                          "as": "property"
                        },
                        { "from": "node", "to": "node_secondary_text_onclick_show_edit_text_payload", "as": "node" },
                        {
                          "from": "node_secondary_text_onclick_show_edit_text_payload",
                          "to": "node_secondary_text_onclick_show_edit_text",
                          "as": "a1"
                        },
                        { "from": "stop_propagation_effect", "to": "node_secondary_text_onclick_effects", "as": "a1" },
                        {
                          "from": "node_secondary_text_onclick_show_edit_text",
                          "to": "node_secondary_text_onclick_effects",
                          "as": "a0"
                        },
                        {
                          "from": "node_secondary_text_onclick_effects",
                          "to": "node_secondary_text_onclick",
                          "as": "effects"
                        },
                        { "from": "state", "to": "node_secondary_text_onclick", "as": "state" },
                        { "from": "node_secondary_text_props", "to": "node_secondary_text", "as": "props" },
                        { "from": "tspan_dom_type", "to": "node_primary_text", "as": "dom_type" },
                        { "from": "node_secondary_text", "to": "node_text_children", "as": "secondary" },
                        { "from": "tspan_dom_type", "to": "node_secondary_text", "as": "dom_type" },
                        { "from": "node_text_children", "to": "node_text", "as": "children" },
                        { "from": "node_text_dom_type", "to": "node_text", "as": "dom_type" },
                        { "from": "node_text", "to": "out" }
                      ]
                    },
                    {
                      "id": "fill_rect",
                      "script": "return {dom_type: 'rect', props:{class:{fill: true}, width: '48', 'height': '48'}, children: []}"
                    },
                    { "id": "order", "args": ["shape", "text"], "script": "return [shape.el, text.el, rect]" },
                    { "id": "out" }
                  ],
                  "edges": [
                    { "from": "in", "to": "out", "as": "_" },
                    { "from": "node", "to": "node_shape_attrs", "as": "node" },
                    { "from": "selected_distance", "to": "node_shape_attrs", "as": "selected_distance" },
                    { "from": "error", "to": "node_shape_attrs", "as": "error" },
                    { "from": "default_color", "to": "node_shape_attrs", "as": "color" },
                    { "from": "empty_array", "to": "node_shape", "as": "children" },
                    { "from": "node", "to": "node_shape_dom_type", "as": "node" },
                    { "from": "node_shape_dom_type", "to": "node_shape", "as": "dom_type" },
                    { "from": "node_node", "to": "text" },
                    { "from": "node_shape_attrs", "to": "node_shape", "as": "props" },
                    { "from": "node_shape", "to": "order", "as": "shape" },
                    { "from": "text", "to": "order", "as": "text" },
                    { "from": "fill_rect", "to": "order", "as": "rect" },
                    { "from": "order", "to": "out", "as": "children" }
                  ]
                }
              ],
              "edges": [
                { "from": "selected", "to": "is_selected", "as": "selected" },
                { "from": "selected", "to": "parent_attrs", "as": "selected" },
                { "from": "selected_edge", "to": "parent_attrs", "as": "selected_edge" },
                { "from": "hover", "to": "parent_attrs", "as": "hover" },
                { "from": "get_node", "to": "get_ref" },
                { "from": "get_node", "to": "is_selected", "as": "node" },
                { "from": "is_selected", "to": "children", "as": "selected" },
                { "from": "children", "to": "out" },
                { "from": "show_all", "to": "parent_attrs", "as": "show_all" },
                { "from": "html_id", "to": "parent_attrs", "as": "html_id" },
                { "from": "selected_distance", "to": "parent_attrs", "as": "selected_distance" },
                { "from": "selected_distance", "to": "children", "as": "selected_distance" },
                { "from": "onclick_node", "to": "parent_attrs", "as": "onclick" },
                { "from": "parent_attrs", "to": "out", "as": "props" },
                { "from": "parent_dom_type", "to": "out", "as": "dom_type" },
                { "from": "get_node", "to": "parent_attrs", "as": "node" }
              ]
            },
            {
              "id": "link_layout",
              "script": "const fn = _lib.no.executeGraphNode({graph: _graph, lib: _lib})(link_layout_map); return links.map(link => fn(Object.assign({readonly, show_all, randid, link: Object.assign({edge: display_graph.edges.find(e => link.source.node_id === e.from && link.target.node_id === e.to)}, link), selected_distance: levels.distance_from_selected.get(link.target.node_child_id) !== undefined ? Math.min(levels.distance_from_selected.get(link.target.node_child_id), levels.distance_from_selected.get(link.source.node_child_id)) : undefined, sibling_index_normalized: (levels.siblings.get(link.source.node_id).findIndex(n => n === link.source.node_id) + 1) / (levels.siblings.get(link.source.node_id).length + 1)}, _node_inputs), link.source.node_chld_id))"
            },
            {
              "id": "link_layout_map",
              "nodes": [
                { "id": "in" },
                { "id": "get_link", "ref": "arg", "value": "link" },
                { "id": "get_selected_edge", "ref": "arg", "value": "selected_edge" },
                { "id": "source", "ref": "arg", "value": "link.source" },
                { "id": "target", "ref": "arg", "value": "link.target" },
                { "id": "selected_distance", "ref": "arg", "value": "selected_distance" },
                { "id": "sibling_index_normalized", "ref": "arg", "value": "sibling_index_normalized" },
                { "id": "show_all", "ref": "arg", "value": "show_all" },
                { "id": "edge", "ref": "arg", "value": "link.edge" },
                { "id": "edge_info_el", "ref": "html_element" },
                { "id": "edge_info_el_children", "script": "return [rect.el, edge_as.el, edge_type.el]" },
                { "id": "edge_info_dom_type", "value": "svg" },
                { "id": "onclick_edge", "ref": "onclick_edge" },
                {
                  "id": "edge_info_props",
                  "script": "return ({id: `edge-info-${source.node_child_id}`, key: `edge-info-${source.node_child_id}`, z: selected_edge && source.node_id === selected_edge.from && target.node_id === selected_edge.to ? 100 : 200, opacity: show_all ? 1 : selected_distance !== undefined ? Math.max(0.05, 1 - selected_distance * selected_distance / 2) : 0.1, class: {'edge-info': true, selected: selected_edge && (source.node_id === selected_edge.from + '_' + selected_edge.to || (source.node_id === selected_edge.from && target.node_id === selected_edge.to))}, onclick: (state, payload) => [onclick_edge, {event: payload, edge}], ontouchstart: (state, payload) => [onclick_edge, {event: payload, edge}]})"
                },
                { "id": "edge_info_line_position", "value": 0.5, "min": 0, "max": 1, "step": 0.01 },
                { "id": "edge_info_type_props", "value": { "font-size": 14, "y": 32 } },
                { "id": "edge_info_type_el", "ref": "svg_text" },
                { "id": "edge_info_type_text", "script": "return edge?.type ?? ''" },
                { "id": "edge_info_as_props", "value": { "font-size": 14, "y": 16 } },
                { "id": "edge_info_as_el", "ref": "svg_text" },
                { "id": "readonly", "ref": "arg", "value": "readonly" },
                { "id": "edge_info_as_text", "script": "return edge?.as ?? (readonly ? '' : '*')" },
                { "id": "edge_info_rect_dom_type", "value": "rect" },
                { "id": "edge_info_rect", "ref": "html_element" },
                { "id": "lerp_length", "value": 24 },
                {
                  "id": "line_lerp",
                  "script": "const length_x = Math.abs(source.x - target.x); const length_y = Math.abs(source.y - target.y); const length = Math.sqrt(length_x * length_x + length_y * length_y); return {selected_distance, selected_edge, source: {...source, x: source.x + (target.x - source.x) * lerp_length / length, y: source.y + (target.y - source.y) * lerp_length / length}, target: {...target, x: source.x + (target.x - source.x) * (1 - (lerp_length / length)), y: source.y + (target.y - source.y) * (1 - (lerp_length / length))}}"
                },
                {
                  "id": "line_props",
                  "script": "return ({id: `link-${source.node_child_id}`, key: `link-${source.node_child_id}`, onclick: (state, payload) => [onclick_edge, {event: payload, edge}], class: `link ${selected_edge && (source.node_id === selected_edge.from + '_' + selected_edge.to || (source.node_id === selected_edge.from && target.node_id === selected_edge.to)) ? 'selected' : 'unselected'}`, 'marker-end': 'url(#arrow)', opacity: show_all ? 1 : selected_distance !== undefined ? Math.max(0.05, 1 - selected_distance * selected_distance / 2) : 0.1})"
                },
                { "id": "line_dom_type", "value": "line" },
                { "id": "empty_array", "value": [] },
                { "id": "line", "ref": "html_element" },
                {
                  "id": "insert_node_el",
                  "out": "el",
                  "nodes": [
                    { "id": "link", "ref": "arg", "value": "link" },
                    { "id": "randid", "ref": "arg", "value": "randid" },
                    {
                      "id": "base_props",
                      "value": {
                        "href": "svg/add-circle-outline.svg#icon",
                        "width": "32px",
                        "height": "32px",
                        "class": "insert-node"
                      }
                    },
                    {
                      "id": "position",
                      "script": "return {x: (link.source.x + link.target.x) * 0.5 - 16, y: (link.source.y + link.target.y) * 0.5 - 16, id: `insert-${link.source.node_child_id}`, key: `insert-${link.source.node_child_id}`}"
                    },
                    { "id": "insert_node", "ref": "insert_node" },
                    {
                      "id": "onclick_props",
                      "script": "return {onclick: (s, p) => [s, [insert_node, {edge: link.edge, node: {id: randid}}]], ontouchstart: (s, p) => [s, [insert_node, {edge: link.edge, node: {id: randid}}]]}"
                    },
                    { "id": "props", "ref": "merge_objects" },
                    { "id": "el", "ref": "add_circle_icon" }
                  ],
                  "edges": [
                    { "from": "randid", "to": "onclick_props", "as": "randid" },
                    { "from": "link", "to": "onclick_props", "as": "link" },
                    { "from": "insert_node", "to": "onclick_props", "as": "insert_node" },
                    { "from": "link", "to": "position", "as": "link" },
                    { "from": "base_props", "to": "props", "as": "o0" },
                    { "from": "position", "to": "props", "as": "o1" },
                    { "from": "onclick_props", "to": "props", "as": "o2" },
                    { "from": "props", "to": "el", "as": "props" }
                  ]
                },
                {
                  "id": "out",
                  "args": ["line", "edge_info"],
                  "script": "return [line, edge_info, !readonly && selected_distance < 1 && insert_node]"
                }
              ],
              "edges": [
                { "from": "in", "to": "line_props" },
                { "from": "get_link", "to": "line_lerp" },
                { "from": "show_all", "to": "line_props", "as": "show_all" },
                { "from": "get_selected_edge", "to": "line_props", "as": "selected_edge" },
                { "from": "get_selected_edge", "to": "line_lerp", "as": "selected_edge" },
                { "from": "get_selected_edge", "to": "edge_info_props", "as": "selected_edge" },
                { "from": "selected_distance", "to": "edge_info_props", "as": "selected_distance" },
                { "from": "sibling_index_normalized", "to": "edge_info_props", "as": "sibling_index_normalized" },
                { "from": "show_all", "to": "edge_info_props", "as": "show_all" },
                { "from": "onclick_edge", "to": "edge_info_props", "as": "onclick_edge" },
                { "from": "edge", "to": "line_props", "as": "edge" },
                { "from": "onclick_edge", "to": "line_props", "as": "onclick_edge" },
                { "from": "selected_distance", "to": "line_props", "as": "selected_distance" },
                { "from": "source", "to": "line_lerp", "as": "source" },
                { "from": "target", "to": "line_lerp", "as": "target" },
                { "from": "source", "to": "line_props", "as": "source" },
                { "from": "target", "to": "line_props", "as": "target" },
                { "from": "source", "to": "edge_info_props", "as": "source" },
                { "from": "target", "to": "edge_info_props", "as": "target" },
                { "from": "selected_distance", "to": "line_lerp", "as": "selected_distance" },
                { "from": "line_lerp", "to": "line_props" },
                { "from": "lerp_length", "to": "line_lerp", "as": "lerp_length" },
                { "from": "get_link", "to": "edge_info_props" },
                { "from": "edge", "to": "edge_info_props", "as": "edge" },
                { "from": "readonly", "to": "edge_info_props", "as": "readonly" },
                { "from": "edge", "to": "edge_info_as_text", "as": "edge" },
                { "from": "edge_info_dom_type", "to": "edge_info_el", "as": "dom_type" },
                { "from": "edge_info_props", "to": "edge_info_el", "as": "props" },
                { "from": "edge_info_line_position", "to": "edge_info_props", "as": "line_position" },
                { "from": "edge_info_rect", "to": "edge_info_el_children", "as": "rect" },
                { "from": "edge_info_rect_dom_type", "to": "edge_info_rect", "as": "dom_type" },
                { "from": "edge_info_el_children", "to": "edge_info_el", "as": "children" },
                { "from": "edge_info_el", "to": "out", "as": "edge_info" },
                { "from": "edge_info_type_props", "to": "edge_info_type_el", "as": "props" },
                { "from": "edge", "to": "edge_info_type_text", "as": "edge" },
                { "from": "edge_info_type_text", "to": "edge_info_type_el", "as": "text" },
                { "from": "edge_info_type_el", "to": "edge_info_el_children", "as": "edge_type", "type": "resolve" },
                { "from": "edge_info_as_props", "to": "edge_info_as_el", "as": "props" },
                { "from": "readonly", "to": "edge_info_as_text", "as": "readonly" },
                { "from": "edge_info_as_text", "to": "edge_info_as_el", "as": "text" },
                { "from": "edge_info_as_el", "to": "edge_info_el_children", "as": "edge_as", "type": "resolve" },
                { "from": "line_props", "to": "line", "as": "props" },
                { "from": "line_dom_type", "to": "line", "as": "dom_type" },
                { "from": "empty_array", "to": "line", "as": "children" },
                { "from": "empty_array", "to": "line", "as": "children" },
                { "from": "line", "to": "out", "as": "line" },
                { "from": "selected_distance", "to": "out", "as": "selected_distance" },
                { "from": "readonly", "to": "out", "as": "readonly" },
                { "from": "insert_node_el", "to": "out", "as": "insert_node" }
              ]
            },
            { "id": "line_end", "ref": "html_element" },
            {
              "id": "line_end_props",
              "value": {
                "id": "arrow",
                "refX": 8,
                "refY": 4,
                "markerWidth": 8,
                "markerHeight": 8,
                "markerUnits": "userSpaceOnUse",
                "orient": "auto"
              }
            },
            { "id": "line_end_children", "args": ["children"], "script": "return [children.el]" },
            { "id": "arrow_path", "ref": "html_element" },
            { "id": "arrow_path_props", "value": { "points": "1 1, 8 4, 1 8" } },
            { "id": "arrow_path_dom_type", "value": "polyline" },
            { "id": "fill_filter_flood_dom_type", "value": "feFlood" },
            { "id": "fill_filter_flood_props", "value": { "flood-color": "#000a" } },
            { "id": "fill_filter_flood", "ref": "html_element" },
            {
              "id": "fill_filter_props",
              "value": { "id": "flood-background", "width": 1.2, "height": 1.1, "x": -0.1, "y": -0.05 }
            },
            { "id": "fill_filter_flood_selected_dom_type", "value": "feFlood" },
            { "id": "fill_filter_flood_selected_props", "value": { "flood-color": "red" } },
            { "id": "fill_filter_flood_selected", "ref": "html_element" },
            {
              "id": "fill_filter_selected_props",
              "value": { "id": "selected-flood-background", "width": 1.2, "height": 1.5, "x": -0.1, "y": -0.25 }
            },
            { "id": "fill_filter_composite_props", "value": { "in": "SourceGraphic" } },
            { "id": "fill_filter_composite_dom_type", "value": "feComposite" },
            { "id": "fill_filter_composite", "ref": "html_element" },
            { "id": "fill_filter_children", "script": "return [flood.el, comp.el]" },
            { "id": "fill_filter_selected_children", "script": "return [flood.el, comp.el]" },
            { "id": "fill_filter_dom_type", "value": "filter" },
            { "id": "fill_filter", "ref": "html_element" },
            { "id": "fill_filter_selected", "ref": "html_element" },
            { "id": "marker", "value": "marker" },
            {
              "id": "defs_children",
              "args": ["arrow", "bg_color", "bg_color_selected"],
              "script": "return [bg_color.el, bg_color_selected.el, arrow.el]"
            },
            { "id": "defs", "ref": "html_element" },
            { "id": "defs_dom_type", "value": "defs" },
            { "id": "defs_props", "value": {} },
            {
              "id": "link_selected_distance",
              "args": ["link"],
              "script": "return !link ? [] : link.selected_distance ? link.selected_distance : 10"
            },
            { "id": "filter_links", "ref": "filter_eq" }
          ],
          "edges": [
            { "from": "nodes", "to": "get_nodes", "as": "nodes" },
            { "from": "get_selected", "to": "get_links", "as": "selected" },
            { "from": "links", "to": "get_links", "as": "links" },
            { "from": "node_el_width", "to": "get_nodes", "as": "node_el_width" },
            { "from": "html_id", "to": "node_layout", "as": "html_id" },
            { "from": "hover", "to": "node_layout", "as": "hover" },
            { "from": "error", "to": "node_layout", "as": "error" },
            { "from": "display_graph", "to": "node_layout", "as": "display_graph" },
            { "from": "node_el_width", "to": "node_layout", "as": "node_el_width" },
            { "from": "get_nodes", "to": "node_layout", "as": "nodes" },
            { "from": "node_el_width", "to": "get_links", "as": "node_el_width" },
            { "from": "get_links", "to": "duplicate_nodes", "as": "links" },
            { "from": "get_levels", "to": "duplicate_nodes", "as": "levels" },
            { "from": "get_levels", "to": "node_layout", "as": "levels" },
            { "from": "get_graph", "to": "node_layout", "as": "graph" },
            { "from": "show_all", "to": "link_layout", "as": "show_all" },
            { "from": "randid", "to": "link_layout", "as": "randid" },
            { "from": "readonly", "to": "link_layout", "as": "readonly" },
            { "from": "show_all", "to": "node_layout", "as": "show_all" },
            { "from": "hide_types", "to": "node_layout", "as": "hide_types" },
            { "from": "display_graph", "to": "link_layout", "as": "display_graph" },
            { "from": "get_graph", "to": "link_layout", "as": "graph" },
            { "from": "get_selected", "to": "node_layout", "as": "selected" },
            { "from": "get_links", "to": "link_selected_distance", "as": "link" },
            { "from": "get_selected_edge", "to": "filter_links", "as": "selected_edge" },
            { "from": "get_selected_edge", "to": "node_layout", "as": "selected_edge" },
            { "from": "get_selected_edge", "to": "link_layout", "as": "selected_edge" },
            { "from": "link_selected_distance", "to": "filter_links", "as": "keep" },
            { "from": "get_links", "to": "filter_links" },
            { "from": "get_links", "to": "link_layout", "as": "links" },
            { "from": "get_levels", "to": "link_layout", "as": "levels" },
            { "from": "link_layout_map", "to": "link_layout", "as": "link_layout_map", "type": "ref" },
            { "from": "in", "to": "node_editor_props" },
            { "from": "html_id", "to": "node_editor_props", "as": "html_id" },
            { "from": "readonly", "to": "node_editor_props", "as": "readonly" },
            { "from": "hash", "to": "node_editor_props", "as": "hash" },
            { "from": "html_id", "to": "panzoom_box_props", "as": "html_id" },
            { "from": "get_selected", "to": "get_selected_node", "as": "node_id" },
            { "from": "node_el_width", "to": "node_editor_props", "as": "node_el_width" },
            { "from": "dimensions", "to": "node_editor_props", "as": "dimensions" },
            { "from": "get_nodes", "to": "get_selected_node", "as": "nodes" },
            { "from": "get_selected_node", "to": "node_editor_props", "as": "selected" },
            { "from": "onclick_graph", "to": "node_editor_props", "as": "onclick_graph" },
            { "from": "node_editor_props", "to": "out", "as": "props" },
            { "from": "node_editor_dom_type", "to": "out", "as": "dom_type" },
            { "from": "node_layout_map", "to": "node_layout", "as": "node_layout_map", "type": "ref" },
            { "from": "node_layout", "to": "node_editor_children", "as": "nodes" },
            { "from": "get_selected", "to": "dg_selected", "as": "node_id" },
            { "from": "dg_nodes", "to": "dg_selected", "as": "nodes" },
            { "from": "dg_selected", "to": "node_args", "as": "node" },
            { "from": "dg_nodes", "to": "node_args", "as": "nodes" },
            { "from": "get_selected_node", "to": "dummy_nodes", "as": "selected_node" },
            { "from": "node_args", "to": "dummy_nodes", "as": "args" },
            { "from": "get_selected", "to": "dummy_node_els", "as": "selected" },
            { "from": "dummy_nodes", "to": "dummy_node_els", "as": "nodes" },
            { "from": "dummy_nodes", "to": "dummy_links", "as": "nodes" },
            { "from": "get_selected_node", "to": "dummy_links", "as": "selected_node" },
            { "from": "node_args", "to": "dummy_links", "as": "args" },
            { "from": "dummy_links", "to": "dummy_link_els", "as": "links" },
            { "from": "node_layout_map", "to": "dummy_node_els", "as": "node_layout_map", "type": "ref" },
            { "from": "dummy_node_els", "to": "_node_editor_children", "as": "dummy_nodes" },
            { "from": "link_layout_map", "to": "dummy_link_els", "as": "link_layout_map", "type": "ref" },
            { "from": "dummy_link_els", "to": "_node_editor_children", "as": "dummy_links" },
            { "from": "get_selected_node", "to": "dummy_node_el", "as": "selected_node" },
            { "from": "dummy_node_el", "to": "node_editor_children", "as": "dummy_node" },
            { "from": "get_nodes", "to": "node_editor_children_inputs", "as": "nodes" },
            { "from": "link_layout", "to": "node_editor_children", "as": "links" },
            { "from": "get_links", "to": "node_editor_children_inputs", "as": "links" },
            { "from": "defs", "to": "node_editor_children", "as": "defs" },
            { "from": "marker", "to": "line_end", "as": "dom_type" },
            { "from": "arrow_path_props", "to": "arrow_path", "as": "props" },
            { "from": "arrow_path_dom_type", "to": "arrow_path", "as": "dom_type" },
            { "from": "arrow_path", "to": "line_end", "as": "children" },
            { "from": "line_end_props", "to": "line_end", "as": "props" },
            { "from": "line_end", "to": "defs_children", "as": "arrow" },
            { "from": "fill_filter_flood_props", "to": "fill_filter_flood", "as": "props" },
            { "from": "fill_filter_flood_dom_type", "to": "fill_filter_flood", "as": "dom_type" },
            { "from": "fill_filter_flood", "to": "fill_filter_children", "as": "flood" },
            { "from": "fill_filter_flood_selected_props", "to": "fill_filter_flood_selected", "as": "props" },
            { "from": "fill_filter_flood_selected_dom_type", "to": "fill_filter_flood_selected", "as": "dom_type" },
            { "from": "fill_filter_flood_selected", "to": "fill_filter_selected_children", "as": "flood" },
            { "from": "fill_filter_composite_props", "to": "fill_filter_composite", "as": "props" },
            { "from": "fill_filter_composite_dom_type", "to": "fill_filter_composite", "as": "dom_type" },
            { "from": "fill_filter_composite", "to": "fill_filter_children", "as": "comp" },
            { "from": "fill_filter_children", "to": "fill_filter", "as": "children" },
            { "from": "fill_filter_props", "to": "fill_filter", "as": "props" },
            { "from": "fill_filter_composite", "to": "fill_filter_selected_children", "as": "comp" },
            { "from": "fill_filter_selected_children", "to": "fill_filter_selected", "as": "children" },
            { "from": "fill_filter_selected_props", "to": "fill_filter_selected", "as": "props" },
            { "from": "fill_filter_dom_type", "to": "fill_filter", "as": "dom_type" },
            { "from": "fill_filter_dom_type", "to": "fill_filter_selected", "as": "dom_type" },
            { "from": "fill_filter", "to": "defs_children", "as": "bg_color" },
            { "from": "fill_filter_selected", "to": "defs_children", "as": "bg_color_selected" },
            { "from": "defs_dom_type", "to": "defs", "as": "dom_type" },
            { "from": "defs_props", "to": "defs", "as": "props" },
            { "from": "defs_children", "to": "defs", "as": "children" },
            { "from": "node_editor_children", "to": "panzoom_box", "as": "children" },
            { "from": "panzoom_box_dom_type", "to": "panzoom_box", "as": "dom_type" },
            { "from": "panzoom_box_props", "to": "panzoom_box", "as": "props" },
            { "from": "panzoom_box", "to": "out", "as": "children" },
            { "from": "panzoom_box_arr", "to": "node_editor", "as": "children" }
          ]
        },
        {
          "id": "error_display",
          "script": "return {el: {dom_type: 'div', props: {class:{error: true, main: true}, key: `${html_id}-error_display`}, children: [{dom_type: 'text_value', text: error instanceof AggregateError ? error.errors.map(e => e.toString()).join(\" \") : error?.toString()}]}}"
        },
        { "id": "noop", "script": "return {el: _lib.ha.h.fn('div', {key: 'loading'}, _lib.ha.text.fn('loading...'))}" },
        { "id": "out_input", "script": "return display_graph && graph ? 'hel' : 'noop'" },
        { "id": "out", "ref": "switch" }
      ],
      "edges": [
        { "from": "graph", "to": "out_input", "as": "graph" },
        { "from": "display_graph", "to": "out_input", "as": "display_graph" },
        { "from": "error", "to": "error_display", "as": "error" },
        { "from": "html_id", "to": "error_display", "as": "html_id" },
        { "from": "error", "to": "wrapper_children", "as": "error" },
        { "from": "search", "to": "wrapper_children", "as": "search" },
        { "from": "error_display", "to": "wrapper_children", "as": "error_display" },
        { "from": "readonly", "to": "wrapper_children", "as": "readonly" },
        { "from": "show_result", "to": "wrapper_children", "as": "show_result" },
        { "from": "editing", "to": "wrapper_children", "as": "editing" },
        { "from": "popover_graph", "to": "wrapper_children", "as": "popover_graph" },
        { "from": "args_display", "to": "wrapper_children", "as": "args_display" },
        { "from": "readonly", "to": "node_editor", "as": "readonly" },
        { "from": "graph", "to": "node_editor", "as": "graph" },
        { "from": "node_editor", "to": "wrapper_children", "as": "node_editor" },
        { "from": "edit_text", "to": "wrapper_children", "as": "edit_text" },
        { "from": "menu", "to": "wrapper_children", "as": "menu" },
        { "from": "result_display", "to": "result_wrapper", "as": "run" },
        { "from": "result_display", "to": "wrapper_children", "as": "result_display" },
        { "from": "show_all", "to": "wrapper_children", "as": "show_all" },
        { "from": "styles", "to": "wrapper_children", "as": "styles" },
        { "from": "popover_graph_h", "to": "popover_graph_h_wrapper", "as": "el" },
        { "from": "popover_graph_h_wrapper", "to": "wrapper_children", "as": "popover_graph_h" },
        { "from": "wrapper_children", "to": "wrapper", "as": "children", "type": "resolve" },
        { "from": "wrapper_dom_type", "to": "wrapper", "as": "dom_type" },
        { "from": "wrapper_props", "to": "wrapper", "as": "props", "type": "resolve" },
        { "from": "out_input", "to": "out", "as": "input" },
        { "from": "noop", "to": "out", "as": "noop", "type": "resolve" },
        { "from": "wrapper", "to": "out", "as": "hel" }
      ]
    }
  ],
  "edges": [
    { "from": "editor", "to": "hyperapp_view", "type": "ref", "as": "fn" },
    { "from": "get_graph", "to": "update_sim_fn", "as": "graph" },
    { "from": "error_nodes", "to": "hyperapp_init_state", "as": "error_nodes" },
    { "from": "static", "to": "hyperapp_init_state", "as": "static" },
    { "from": "readonly", "to": "hyperapp_init_state", "as": "readonly" },
    { "from": "norun", "to": "hyperapp_init_state", "as": "norun" },
    { "from": "hash", "to": "hyperapp_init_state", "as": "hash" },
    { "from": "hide_types", "to": "hyperapp_init_state", "as": "hide_types" },
    { "from": "dimensions", "to": "hyperapp_init_state", "as": "dimensions" },
    { "from": "html_id", "to": "hyperapp_init_state", "as": "html_id" },
    { "from": "examples", "to": "hyperapp_init_state", "as": "examples" },
    { "from": "display_graph_out", "to": "init_selected", "as": "a0" },
    { "from": "init_selected", "to": "hyperapp_init_state", "as": "selected" },
    { "from": "update_sim_effect", "to": "hyperapp_init_state", "as": "update_sim_effect" },
    { "from": "sim_to_hyperapp", "to": "hyperapp_init_state", "as": "sim_to_hyperapp" },
    { "from": "get_graph", "to": "onkey_fn", "as": "graph" },
    { "from": "onkey_fn", "to": "initialize_hyperapp_app", "as": "onkey_fn" },
    { "from": "onkey_fn_body", "to": "onkey_fn", "as": "fn", "type": "ref" },
    { "from": "html_id", "to": "render_graph_effect", "as": "html_id" },
    { "from": "update_sim_effect", "to": "render_graph_effect", "as": "update_sim" },
    { "from": "popover_dimensions", "to": "render_graph_effect", "as": "dimensions" },
    { "from": "get_graph", "to": "render_graph_effect", "as": "graph" },
    { "from": "html_id", "to": "initialize_hyperapp_app", "as": "html_id" },
    { "from": "render_graph_effect", "to": "_initialize_hyperapp_app", "as": "render_graph_effect" },
    { "from": "hyperapp_view", "to": "initialize_hyperapp_app", "as": "view" },
    { "from": "update_hyperapp", "to": "update_hyperapp_action", "as": "fn", "type": "ref" },
    { "from": "update_hyperapp_action", "to": "update_hyperapp_effect", "as": "fn" },
    { "from": "update_hyperapp_effect", "to": "initialize_hyperapp_app", "as": "update_hyperapp" },
    { "from": "update_hyperapp_effect", "to": "hyperapp_init_state", "as": "update_hyperapp" },
    { "from": "hyperapp_init_state", "to": "initialize_hyperapp_app", "as": "init" },
    { "from": "get_graph", "to": "hyperapp_view", "as": "graph" },
    { "from": "get_graph", "to": "hyperapp_init_state", "as": "graph" },
    { "from": "get_graph", "to": "update_nodes", "as": "graph" },
    { "from": "get_display_graph", "to": "update_nodes", "as": "display_graph" },
    { "from": "get_display_graph", "to": "hyperapp_init_state", "as": "display_graph" },
    { "from": "display_graph_out", "to": "calculate_levels", "as": "selected" },
    { "from": "get_display_graph", "to": "calculate_levels", "as": "display_graph" },
    { "from": "calculate_levels", "to": "hyperapp_init_state", "as": "levels" },
    { "from": "initial_state", "to": "hyperapp_init_state" },
    { "from": "nodes", "to": "graph_to_simulation", "as": "nodes" },
    { "from": "links", "to": "graph_to_simulation", "as": "links" },
    { "from": "graph_to_simulation", "to": "graph_to_sim_action", "as": "fn", "type": "ref" },
    { "from": "sim_to_hyperapp", "to": "initialize_hyperapp_app", "as": "sim_to_hyperapp_action" },
    { "from": "graph_to_sim_action", "to": "initialize_hyperapp_app", "as": "graph_to_sim_action" },
    { "from": "update_sim_in", "to": "update_sim_fn", "as": "in_node", "type": "ref" },
    { "from": "update_sim_fn", "to": "update_sim_effect", "as": "fn" },
    { "from": "update_sim_effect", "to": "editor", "as": "update_sim" },
    { "from": "update_sim_effect", "to": "initialize_hyperapp_app", "as": "update_sim" },
    { "from": "initialize_hyperapp_app", "to": "out", "type": "resolve" },
    { "from": "get", "to": "object" },
    { "from": "set", "to": "object" },
    { "from": "delete", "to": "object" },
    { "from": "switch", "to": "flow" },
    { "from": "if", "to": "flow" },
    { "from": "html_element", "to": "html" },
    { "from": "input", "to": "html" },
    { "from": "css_styles", "to": "html" },
    { "from": "array", "to": "arrays" },
    { "from": "filter", "to": "arrays" },
    { "from": "append", "to": "arrays" },
    { "from": "map", "to": "arrays" },
    { "from": "log", "to": "utility" },
    { "from": "execute_graph", "to": "utility" },
    { "from": "arg", "to": "utility" },
    { "from": "partial", "to": "utility" },
    { "from": "apply", "to": "utility" },
    { "from": "fetch", "to": "utility" },
    { "from": "merge_objects", "to": "utility" },
    { "from": "sequence", "to": "utility" },
    { "from": "runnable", "to": "utility" },
    { "from": "object_entries", "to": "utility" },
    { "from": "add", "to": "math" },
    { "from": "divide", "to": "math" },
    { "from": "negate", "to": "math" },
    { "from": "mult", "to": "math" },
    { "from": "stringify", "to": "JSON" }
  ]
}
