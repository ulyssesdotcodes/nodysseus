{
    "in": "in",
    "out": "out",
    "nodes": [
        {
            "id": "out",
            "args": [
                "value"
            ],
            "script": "return value;"
        },
        {
            "id": "in"
        },
        {
            "id": "filter",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "keep",
                        "data"
                    ],
                    "script": "return keep ? [data] : []"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "data",
                    "order": 0
                }
            ]
        },
        {
            "id": "delete",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "path"
                    ],
                    "script": "const new_data = Object.assign({}, data); delete new_data[path]; return new_data;"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "order": 1
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "data",
                    "order": 0
                }
            ]
        },
        {
            "id": "default",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "default_value"
                    ],
                    "script": "return data ?? default_value"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "trigger",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "trigger",
                    "args": [
                        "trigger"
                    ],
                    "script": "return trigger ? ['in'] : []"
                },
                {
                    "id": "out",
                    "args": [
                        "data"
                    ],
                    "script": "return data?.data ?? []"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "data"
                },
                {
                    "from": "in",
                    "to": "trigger"
                },
                {
                    "from": "trigger",
                    "to": "out",
                    "type": "inputs"
                }
            ]
        },
        {
            "id": "selected_node",
            "args": [
                "selected",
                "display_graph"
            ],
            "script": "return display_graph.nodes.find(n => n.id === selected[0])"
        },
        {
            "id": "execute_graph",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "args": [
                        "in_node",
                        "out_node",
                        "graph"
                    ],
                    "script": "return (...args) => { res = lib.no.executeGraph({state: new Map([[in_node, args.length > 1 ? [args] : args]]), graph: {...graph, in: in_node, out: out_node}}).get(out_node); return res.length > 1 ? res : res[0]}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "array",
            "args": [],
            "script": "return [inputs.flat()]",
            "name": "array"
        },
        {
            "id": "get",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "fill_default",
                    "args": [
                        "input"
                    ],
                    "script": "return input.default ?? null"
                },
                {
                    "id": "out",
                    "args": [
                        "target",
                        "path",
                        "def"
                    ],
                    "script": "return [lib._.get(target, path) ?? def]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                },
                {
                    "from": "in",
                    "to": "fill_default",
                    "as": "input"
                },
                {
                    "from": "fill_default",
                    "to": "out",
                    "as": "def"
                }
            ]
        },
        {
            "id": "set",
            "args": [
                "target",
                "path",
                "value"
            ],
            "script": "return [lib._.set(target, path, value)]"
        },
        {
            "id": "update_and_run",
            "in": "in",
            "out": "out",
            "args": [
                "display_graph",
                "nodes",
                "selected",
                "update_graph_sim",
                "update",
                "payload"
            ],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "calculate_levels",
                    "args": [
                        "selected",
                        "display_graph"
                    ],
                    "script": "return lib.scripts.calculateLevels(display_graph, selected[0])"
                },
                {
                    "id": "levels",
                    "type": "switch"
                },
                {
                    "id": "levels_inputs",
                    "args": [
                        "selected"
                    ],
                    "script": "return ['levels']"
                },
                {
                    "id": "set_levels",
                    "args": [
                        "state",
                        "levels"
                    ],
                    "script": "state.levels = levels ?? state.levels; return state"
                },
                {
                    "id": "graph_sim",
                    "args": [
                        "display_graph",
                        "nodes",
                        "selected",
                        "levels"
                    ],
                    "script": "return lib.scripts.graphToSimulationNodes({display_graph, nodes, selected, levels});"
                },
                {
                    "id": "new_state_cases",
                    "args": [
                        "update_graph_sim"
                    ],
                    "script": "return [graph_sim && 'graph_sim', 'state']"
                },
                {
                    "id": "new_state",
                    "args": [
                        "graph_sim",
                        "state"
                    ],
                    "script": "return Object.assign({}, state, {nodes: graph_sim?.nodes ?? state.nodes, links: graph_sim?.links ?? state.links, levels: graph_sim?.levels ?? state.levels});"
                },
                {
                    "id": "update",
                    "args": [
                        "editing",
                        "display_graph",
                        "update",
                        "selected",
                        "search"
                    ],
                    "script": "return editing !== false || search !== false ? update : !!display_graph || !!selected"
                },
                {
                    "id": "run",
                    "args": [
                        "state",
                        "payload"
                    ],
                    "script": "try { const result = lib.no.executeGraph({state: new Map([[state.display_graph.in, [{...state, payload}]]]), graph: {...state.display_graph, nodes: state.display_graph.nodes.concat([]), edges: state.display_graph.edges.concat([])}}); return {result, error: undefined}; } catch(e) { return {error: e instanceof AggregateError ? e.errors.map(e => e.toString()).join(\" \") : e.toString()} }"
                },
                {
                    "id": "out",
                    "args": [
                        "state",
                        "fx",
                        "update",
                        "result",
                        "error",
                        "update_graph_sim"
                    ],
                    "script": "return [[{...state, result, error}, (update || update_graph_sim) && [state.update_sim_effect, state]].concat(fx ?? [])]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "new_state",
                    "as": "state"
                },
                {
                    "from": "in",
                    "to": "out"
                },
                {
                    "from": "in",
                    "to": "run"
                },
                {
                    "from": "in",
                    "to": "update"
                },
                {
                    "from": "in",
                    "to": "calculate_levels"
                },
                {
                    "from": "in",
                    "to": "set_levels",
                    "as": "state"
                },
                {
                    "from": "in",
                    "to": "levels_inputs"
                },
                {
                    "from": "calculate_levels",
                    "to": "levels",
                    "as": "levels"
                },
                {
                    "from": "levels",
                    "to": "set_levels",
                    "as": "levels"
                },
                {
                    "from": "set_levels",
                    "to": "graph_sim"
                },
                {
                    "from": "levels_inputs",
                    "to": "levels",
                    "type": "inputs"
                },
                {
                    "from": "graph_sim",
                    "to": "new_state",
                    "as": "graph_sim"
                },
                {
                    "from": "new_state",
                    "to": "run",
                    "as": "state"
                },
                {
                    "from": "update",
                    "to": "out",
                    "as": "update"
                },
                {
                    "from": "new_state",
                    "to": "out",
                    "as": "state"
                },
                {
                    "from": "run",
                    "to": "out"
                }
            ]
        },
        {
            "id": "h",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "fill_children",
                    "args": [
                        "input"
                    ],
                    "script": "return [ input.children === undefined ? [] : (Array.isArray(input.children) ? input.children.map(c => c.el ?? c) : [input.children.el])]"
                },
                {
                    "id": "fill_props",
                    "args": [
                        "input"
                    ],
                    "script": "return input.props ?? {}"
                },
                {
                    "id": "out",
                    "args": [
                        "props",
                        "children",
                        "input"
                    ],
                    "script": "return {el: lib.ha.h(input.dom_type, props, children)}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "fill_children",
                    "as": "input"
                },
                {
                    "from": "in",
                    "to": "fill_props",
                    "as": "input"
                },
                {
                    "from": "fill_children",
                    "to": "out",
                    "as": "children",
                    "order": 1
                },
                {
                    "from": "fill_props",
                    "to": "out",
                    "as": "props"
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "input"
                }
            ]
        },
        {
            "id": "h_text",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "args": [
                        "text"
                    ],
                    "script": "return {el: lib.ha.text(text)}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "default_node_display",
            "name": "default_node_display",
            "in": "6pqqchhnk",
            "out": "tsxlng4gd",
            "nodes": [
                {
                    "id": "tsxlng4gd",
                    "args": [],
                    "type": "h",
                    "name": "default_node_display"
                },
                {
                    "id": "osgrk7ddu",
                    "args": [],
                    "type": "h_text"
                },
                {
                    "id": "hghirvcml",
                    "args": [],
                    "value": "pre"
                },
                {
                    "id": "ha6b5qttf",
                    "args": [],
                    "script": "return JSON.stringify({node: data.node, result: data.result, input_results: data.input_results}, null, 2)"
                },
                {
                    "id": "6pqqchhnk",
                    "args": [],
                    "name": "default_node_display/in"
                }
            ],
            "edges": [
                {
                    "from": "osgrk7ddu",
                    "to": "tsxlng4gd",
                    "as": "children"
                },
                {
                    "from": "hghirvcml",
                    "to": "tsxlng4gd",
                    "as": "dom_type"
                },
                {
                    "from": "ha6b5qttf",
                    "to": "osgrk7ddu",
                    "as": "text"
                },
                {
                    "from": "6pqqchhnk",
                    "to": "ha6b5qttf",
                    "as": "data"
                }
            ]
        },
        {
            "id": "graph_display",
            "name": "graph_display",
            "in": "in",
            "out": "out",
            "nodes": [
                {
                    "id": "out",
                    "type": "h",
                    "name": "graph_display"
                },
                {
                    "id": "ml655hs73",
                    "args": [],
                    "value": "pre"
                },
                {
                    "id": "thsez3hy1",
                    "args": [],
                    "type": "h_text"
                },
                {
                    "id": "stringify",
                    "args": [
                        "data"
                    ],
                    "script": "return JSON.stringify({...data.node, nodes: data.node.nodes.length, edges:data.node.edges.length, result: data.result}, null, 2)"
                },
                {
                    "id": "in"
                }
            ],
            "edges": [
                {
                    "from": "ml655hs73",
                    "to": "out",
                    "as": "dom_type"
                },
                {
                    "from": "thsez3hy1",
                    "to": "out",
                    "as": "children"
                },
                {
                    "from": "stringify",
                    "to": "thsez3hy1",
                    "as": "text"
                },
                {
                    "from": "in",
                    "to": "stringify",
                    "as": "data"
                },
                {
                    "from": "in",
                    "to": "stringify",
                    "as": "data"
                }
            ]
        },
        {
            "id": "default_error_display",
            "in": "in",
            "out": "out",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "stringify",
                    "args": [
                        "data"
                    ],
                    "script": "const e = data.error; return JSON.stringify({error: e instanceof AggregateError ? e.errors.map(e => e.toString()).join(\" \") : e.toString(), data}, null, 2)"
                },
                {
                    "id": "text",
                    "type": "h_text"
                },
                {
                    "id": "out_dom_type",
                    "value": "pre"
                },
                {
                    "id": "out",
                    "type": "h"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "stringify",
                    "as": "data"
                },
                {
                    "from": "stringify",
                    "to": "text",
                    "as": "text"
                },
                {
                    "from": "text",
                    "to": "out",
                    "as": "children"
                },
                {
                    "from": "out_dom_type",
                    "to": "out",
                    "as": "dom_type"
                }
            ]
        },
        {
            "id": "a9vu2hz8k/a9vu2hz8k",
            "args": [],
            "name": "planarity"
        },
        {
            "id": "a9vu2hz8k/jjzfmceck",
            "args": [],
            "name": "split by connectedness",
            "type": "fuse vertices"
        },
        {
            "id": "a9vu2hz8k/xgnuqyvr4",
            "args": [],
            "script": "return graph"
        },
        {
            "id": "switch",
            "name": "switch",
            "in": "in",
            "out": "out",
            "nodes": [
                {
                    "id": "out",
                    "args": [
                        "data",
                        "input"
                    ],
                    "script": "return data[Object.getOwnPropertyNames(data)[0]];",
                    "name": "switch"
                },
                {
                    "id": "in",
                    "name": "switch/in"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "data"
                }
            ]
        },
        {
            "id": "3xwekuk1x",
            "args": [],
            "script": "console.log(input);\n\nreturn input;"
        },
        {
            "id": "odsqtauqb",
            "args": []
        },
        {
            "id": "recurse_subtract",
            "name": "recurse_subtract",
            "in": "eusem35un",
            "out": "dd30l5hk4",
            "nodes": [
                {
                    "id": "dd30l5hk4",
                    "args": [],
                    "name": "recurse_subtract",
                    "type": "switch"
                },
                {
                    "id": "w1175jpep",
                    "args": [],
                    "script": "return val > 0 ? [\"recurse\"] : [\"val\"]"
                },
                {
                    "id": "mxxsuhbk9",
                    "args": [],
                    "type": "recurse_subtract"
                },
                {
                    "id": "0n4tv4oc0",
                    "args": [],
                    "script": "return val - 1;"
                },
                {
                    "id": "k09565v8c",
                    "args": [],
                    "name": "unwrap",
                    "type": "get"
                },
                {
                    "id": "eusem35un",
                    "args": [],
                    "name": "recurse_subtract/in"
                },
                {
                    "id": "97smznst8",
                    "args": [],
                    "value": "val"
                }
            ],
            "edges": [
                {
                    "from": "w1175jpep",
                    "to": "dd30l5hk4",
                    "as": "input",
                    "type": "inputs"
                },
                {
                    "from": "mxxsuhbk9",
                    "to": "dd30l5hk4",
                    "as": "recurse"
                },
                {
                    "from": "0n4tv4oc0",
                    "to": "mxxsuhbk9",
                    "as": "val"
                },
                {
                    "from": "k09565v8c",
                    "to": "dd30l5hk4",
                    "as": "val"
                },
                {
                    "from": "k09565v8c",
                    "to": "w1175jpep",
                    "as": "val"
                },
                {
                    "from": "k09565v8c",
                    "to": "0n4tv4oc0",
                    "as": "val"
                },
                {
                    "from": "eusem35un",
                    "to": "k09565v8c",
                    "as": "target"
                },
                {
                    "from": "97smznst8",
                    "to": "k09565v8c",
                    "as": "path"
                }
            ]
        },
        {
            "id": "jlk9tc1tj",
            "args": [],
            "script": "return display_graph",
            "type": "get"
        },
        {
            "id": "ca0uwa8io",
            "args": [],
            "value": "display_graph"
        },
        {
            "id": "6pzunwby3",
            "args": [],
            "script": "return {...graph, nodes: graph.nodes.map(n => ({id: n.id}))}",
            "name": "remove irrelevant props"
        },
        {
            "id": "w3x4rftkl",
            "args": []
        },
        {
            "id": "otu530hyc",
            "args": [],
            "script": "return fused.nodes"
        },
        {
            "id": "89hf2x0o1",
            "args": [],
            "script": "return [graph.nodes]"
        },
        {
            "id": "fjjiukfck",
            "args": [],
            "script": "return {...node, nodes: (node.nodes ?? []).map(nid => nodes.find(n => n.id === nid)), edges: edges.filter(e => (node.nodes ?? []).includes(e.to))}"
        },
        {
            "id": "number_display/tsxlng4gd",
            "args": [],
            "type": "h",
            "name": "number_display"
        },
        {
            "id": "number_display/hghirvcml",
            "args": [],
            "value": "input"
        },
        {
            "id": "number_display/cd571vftv"
        },
        {
            "id": "number_display/h5xzkeoql",
            "args": [],
            "value": {
                "type": "number"
            }
        },
        {
            "id": "number_display/ltncqmqe9",
            "args": [],
            "type": "get"
        },
        {
            "id": "number_display/9kkegcpi2",
            "args": [],
            "type": "execute_graph"
        },
        {
            "id": "number_display/e96vv0gpq",
            "args": [],
            "value": "node.value"
        },
        {
            "id": "number_display/tw41k3wzg",
            "args": [],
            "type": "get"
        },
        {
            "id": "number_display/u9feks2l9",
            "args": [],
            "type": "update_and_run"
        },
        {
            "id": "number_display/6pqqchhnk",
            "args": [],
            "name": "number_display/in"
        },
        {
            "id": "number_display/yxaspmy5c",
            "args": [],
            "value": "graph"
        },
        {
            "id": "number_display/rhzddw3c6",
            "args": [],
            "type": "set"
        },
        {
            "id": "number_display/8jmaa71ct",
            "args": [],
            "script": "return arg0 !== arg1;"
        },
        {
            "id": "number_display/w5lqhh9qr",
            "args": [],
            "value": "value"
        },
        {
            "id": "number_display/es0e6as0j",
            "args": [],
            "type": "get",
            "name": "get target value"
        },
        {
            "id": "number_display/vnta2m4py",
            "args": [],
            "type": "get"
        },
        {
            "id": "number_display/gh99zvhy2",
            "args": [],
            "value": "1.target.valueAsNumber",
            "name": "target valueasnum"
        },
        {
            "id": "number_display/88f3s3qrq",
            "args": [],
            "value": "value"
        },
        {
            "id": "number_display/fxbdw1jrr",
            "args": [],
            "type": "selected_node"
        },
        {
            "id": "number_display/pkih97fsa",
            "args": [],
            "type": "get",
            "name": "state"
        },
        {
            "id": "number_display/mbbx3d26q",
            "args": []
        },
        {
            "id": "number_display/vbwsmt7jt",
            "args": [],
            "value": 0
        },
        {
            "id": "7dw3h31az",
            "name": "7dw3h31az",
            "in": "in",
            "out": "7dw3h31az",
            "nodes": [
                {
                    "id": "7dw3h31az",
                    "args": [],
                    "type": "get"
                },
                {
                    "id": "cpta4wfkz",
                    "args": [],
                    "value": "edges"
                },
                {
                    "id": "in"
                }
            ],
            "edges": [
                {
                    "from": "cpta4wfkz",
                    "to": "7dw3h31az",
                    "as": "path"
                },
                {
                    "from": "in",
                    "to": "7dw3h31az"
                }
            ]
        },
        {
            "id": "number_display",
            "name": "number_display",
            "in": "6pqqchhnk",
            "out": "tsxlng4gd",
            "nodes": [
                {
                    "id": "tsxlng4gd",
                    "args": [],
                    "type": "h",
                    "name": "number_display"
                },
                {
                    "id": "hghirvcml",
                    "args": [],
                    "value": "input"
                },
                {
                    "id": "cd571vftv"
                },
                {
                    "id": "h5xzkeoql",
                    "args": [],
                    "value": {
                        "type": "number"
                    }
                },
                {
                    "id": "ltncqmqe9",
                    "args": [],
                    "type": "get"
                },
                {
                    "id": "9kkegcpi2",
                    "args": [],
                    "type": "execute_graph"
                },
                {
                    "id": "e96vv0gpq",
                    "args": [],
                    "value": "node.value"
                },
                {
                    "id": "tw41k3wzg",
                    "args": [],
                    "type": "get"
                },
                {
                    "id": "u9feks2l9",
                    "args": [],
                    "type": "update_and_run"
                },
                {
                    "id": "6pqqchhnk",
                    "args": [],
                    "name": "number_display/in"
                },
                {
                    "id": "yxaspmy5c",
                    "args": [],
                    "value": "graph"
                },
                {
                    "id": "rhzddw3c6",
                    "args": [],
                    "type": "set"
                },
                {
                    "id": "8jmaa71ct",
                    "args": [],
                    "script": "return arg0 !== arg1;"
                },
                {
                    "id": "w5lqhh9qr",
                    "args": [],
                    "value": "value"
                },
                {
                    "id": "es0e6as0j",
                    "args": [],
                    "type": "get",
                    "name": "get target value"
                },
                {
                    "id": "vnta2m4py",
                    "args": [],
                    "type": "get"
                },
                {
                    "id": "gh99zvhy2",
                    "args": [],
                    "value": "1.target.valueAsNumber",
                    "name": "target valueasnum"
                },
                {
                    "id": "88f3s3qrq",
                    "args": [],
                    "value": "value"
                },
                {
                    "id": "fxbdw1jrr",
                    "args": [],
                    "type": "selected_node"
                },
                {
                    "id": "pkih97fsa",
                    "args": [],
                    "type": "get",
                    "name": "state"
                },
                {
                    "id": "mbbx3d26q",
                    "args": []
                },
                {
                    "id": "vbwsmt7jt",
                    "args": [],
                    "value": 0
                }
            ],
            "edges": [
                {
                    "from": "hghirvcml",
                    "to": "tsxlng4gd",
                    "as": "dom_type"
                },
                {
                    "from": "cd571vftv",
                    "to": "tsxlng4gd",
                    "as": "props"
                },
                {
                    "from": "h5xzkeoql",
                    "to": "cd571vftv"
                },
                {
                    "from": "ltncqmqe9",
                    "to": "cd571vftv",
                    "as": "value"
                },
                {
                    "from": "9kkegcpi2",
                    "to": "cd571vftv",
                    "as": "oninput"
                },
                {
                    "from": "e96vv0gpq",
                    "to": "ltncqmqe9",
                    "as": "path"
                },
                {
                    "from": "tw41k3wzg",
                    "to": "9kkegcpi2",
                    "as": "graph"
                },
                {
                    "from": "u9feks2l9",
                    "to": "9kkegcpi2",
                    "as": "out_node",
                    "type": "ref"
                },
                {
                    "from": "6pqqchhnk",
                    "to": "ltncqmqe9",
                    "as": "target"
                },
                {
                    "from": "6pqqchhnk",
                    "to": "tw41k3wzg",
                    "as": "target"
                },
                {
                    "from": "yxaspmy5c",
                    "to": "tw41k3wzg",
                    "as": "path"
                },
                {
                    "from": "rhzddw3c6",
                    "to": "u9feks2l9",
                    "as": "node"
                },
                {
                    "from": "8jmaa71ct",
                    "to": "u9feks2l9",
                    "as": "update"
                },
                {
                    "from": "w5lqhh9qr",
                    "to": "rhzddw3c6",
                    "as": "path"
                },
                {
                    "from": "es0e6as0j",
                    "to": "rhzddw3c6",
                    "as": "value"
                },
                {
                    "from": "vnta2m4py",
                    "to": "8jmaa71ct",
                    "as": "arg0"
                },
                {
                    "from": "es0e6as0j",
                    "to": "8jmaa71ct",
                    "as": "arg1"
                },
                {
                    "from": "gh99zvhy2",
                    "to": "es0e6as0j",
                    "as": "path"
                },
                {
                    "from": "88f3s3qrq",
                    "to": "vnta2m4py",
                    "as": "path"
                },
                {
                    "from": "fxbdw1jrr",
                    "to": "rhzddw3c6",
                    "as": "target"
                },
                {
                    "from": "fxbdw1jrr",
                    "to": "vnta2m4py",
                    "as": "target"
                },
                {
                    "from": "mbbx3d26q",
                    "to": "pkih97fsa",
                    "as": "target"
                },
                {
                    "from": "mbbx3d26q",
                    "to": "9kkegcpi2",
                    "as": "in_node",
                    "type": "ref"
                },
                {
                    "from": "mbbx3d26q",
                    "to": "es0e6as0j",
                    "as": "target"
                },
                {
                    "from": "pkih97fsa",
                    "to": "u9feks2l9"
                },
                {
                    "from": "pkih97fsa",
                    "to": "fxbdw1jrr"
                },
                {
                    "from": "vbwsmt7jt",
                    "to": "pkih97fsa",
                    "as": "path"
                }
            ]
        },
        {
            "id": "bkimfi88f",
            "args": [],
            "type": "remove pendant"
        },
        {
            "id": "fuse vertices",
            "name": "fuse vertices",
            "in": "g8mx5sn1u",
            "out": "vnw7d8iaw",
            "nodes": [
                {
                    "id": "vnw7d8iaw",
                    "args": [],
                    "name": "fuse vertices",
                    "type": "switch"
                },
                {
                    "id": "6uzm3ifn3",
                    "args": [],
                    "script": "return graph.edges.length > 0 ? [\"fuse\"] : [\"graph\"]"
                },
                {
                    "id": "p229wzcj5",
                    "args": [],
                    "type": "fuse vertices"
                },
                {
                    "id": "idjoql4db",
                    "args": []
                },
                {
                    "id": "wfld638dn",
                    "args": [],
                    "script": "return [remaining_edges.map(e => ({...e, to: e.to === chosen_edge.to || e.to === chosen_edge.from ? new_id : e.to, from: e.from === chosen_edge.from || e.from === chosen_edge.to ? new_id : e.from}))]"
                },
                {
                    "id": "ungdjbio6",
                    "args": [],
                    "script": "const remaining = graph.nodes\n.filter(n => n.id !== chosen_edge.to && n.id !== chosen_edge.from);\n\nconst from = [...(graph.nodes\n.find(n => n.id === chosen_edge.to).nodes ?? [chosen_edge.to])]\n\nconst to = [...(graph.nodes.find(n => n.id === chosen_edge.from).nodes ?? [chosen_edge.from])];\n\nreturn [remaining\n.concat([{\nid: new_id, \nnodes: [...(new Set(from.concat(to))).keys()],\n}])\n\n];"
                },
                {
                    "id": "mh8lknkfv",
                    "args": [],
                    "script": "return [graph.edges.slice(1)]"
                },
                {
                    "id": "h8bhlzbph",
                    "args": [],
                    "script": "return chosen_edge.to + \"_\" + chosen_edge.from;",
                    "name": "new_id"
                },
                {
                    "id": "1m739wxv9",
                    "args": [],
                    "script": "return graph.edges[0]",
                    "name": "edge"
                },
                {
                    "id": "nznzj5bfn",
                    "args": [],
                    "name": "get graph",
                    "type": "get"
                },
                {
                    "id": "g8mx5sn1u",
                    "args": [],
                    "name": "fuse vertices/in"
                },
                {
                    "id": "tta1nggm4",
                    "args": [],
                    "value": "graph"
                }
            ],
            "edges": [
                {
                    "from": "6uzm3ifn3",
                    "to": "vnw7d8iaw",
                    "as": "arg0",
                    "type": "inputs"
                },
                {
                    "from": "p229wzcj5",
                    "to": "vnw7d8iaw",
                    "as": "fuse"
                },
                {
                    "from": "idjoql4db",
                    "to": "p229wzcj5",
                    "as": "graph"
                },
                {
                    "from": "wfld638dn",
                    "to": "idjoql4db",
                    "as": "edges"
                },
                {
                    "from": "ungdjbio6",
                    "to": "idjoql4db",
                    "as": "nodes"
                },
                {
                    "from": "mh8lknkfv",
                    "to": "wfld638dn",
                    "as": "remaining_edges"
                },
                {
                    "from": "h8bhlzbph",
                    "to": "wfld638dn",
                    "as": "new_id"
                },
                {
                    "from": "1m739wxv9",
                    "to": "wfld638dn",
                    "as": "chosen_edge"
                },
                {
                    "from": "h8bhlzbph",
                    "to": "ungdjbio6",
                    "as": "new_id"
                },
                {
                    "from": "1m739wxv9",
                    "to": "ungdjbio6",
                    "as": "chosen_edge"
                },
                {
                    "from": "nznzj5bfn",
                    "to": "vnw7d8iaw",
                    "as": "graph"
                },
                {
                    "from": "nznzj5bfn",
                    "to": "6uzm3ifn3",
                    "as": "graph"
                },
                {
                    "from": "nznzj5bfn",
                    "to": "ungdjbio6",
                    "as": "graph"
                },
                {
                    "from": "nznzj5bfn",
                    "to": "mh8lknkfv",
                    "as": "graph"
                },
                {
                    "from": "1m739wxv9",
                    "to": "h8bhlzbph",
                    "as": "chosen_edge"
                },
                {
                    "from": "nznzj5bfn",
                    "to": "1m739wxv9",
                    "as": "graph"
                },
                {
                    "from": "g8mx5sn1u",
                    "to": "nznzj5bfn",
                    "as": "target"
                },
                {
                    "from": "tta1nggm4",
                    "to": "nznzj5bfn",
                    "as": "path"
                }
            ]
        },
        {
            "id": "remove pendant",
            "name": "remove pendant",
            "in": "jhykipayt",
            "out": "ay4hfrqw1",
            "nodes": [
                {
                    "id": "ay4hfrqw1",
                    "args": [],
                    "name": "remove pendant",
                    "type": "switch"
                },
                {
                    "id": "r5lka2sj5",
                    "args": [],
                    "script": "return pendants.length > 0 ? [\"remove\"] : [\"graph\"]"
                },
                {
                    "id": "7elx5ekij",
                    "args": [],
                    "type": "remove pendant"
                },
                {
                    "id": "cz08pewa3",
                    "args": []
                },
                {
                    "id": "7n24u6kpt",
                    "args": [
                        "nodes"
                    ],
                    "script": "return [nodes.filter(n => !pendant_edges.includes(n.id))]",
                    "name": "filter out pendants"
                },
                {
                    "id": "cuiccwvbv",
                    "args": [],
                    "script": "return [edges.filter(e => !pendant_edges.includes(e.to) && !pendant_edges.includes(e.from))]",
                    "name": "filter penant"
                },
                {
                    "id": "lgzenfpvl",
                    "args": [],
                    "script": "let accfrom = edges.flatMap(e => [e.from]).reduce((acc, v) => { acc[v] = (acc[v] ?? 0) + 1; return acc}, {});\nlet accto = edges.flatMap(e => [e.to]).reduce((acc, v) => { acc[v] = (acc[v] ?? 0) + 1; return acc}, {});\n\nreturn nodes.map(n => n.id).filter(n => (!isNaN(accfrom[n]) && accfrom[n] <= 1) && !accto[n] );",
                    "name": "pendant edges"
                },
                {
                    "id": "7g81ijcqb",
                    "name": "nodes",
                    "in": "in",
                    "out": "7g81ijcqb",
                    "nodes": [
                        {
                            "id": "7g81ijcqb",
                            "args": [],
                            "type": "get",
                            "name": "nodes"
                        },
                        {
                            "id": "2yshp7jvu",
                            "args": [],
                            "value": "nodes"
                        },
                        {
                            "id": "in"
                        }
                    ],
                    "edges": [
                        {
                            "from": "2yshp7jvu",
                            "to": "7g81ijcqb",
                            "as": "path"
                        },
                        {
                            "from": "in",
                            "to": "7g81ijcqb"
                        }
                    ]
                },
                {
                    "id": "zkg9zpu3e",
                    "name": "edges",
                    "in": "in",
                    "out": "zkg9zpu3e",
                    "nodes": [
                        {
                            "id": "zkg9zpu3e",
                            "args": [],
                            "type": "get",
                            "name": "edges"
                        },
                        {
                            "id": "g18jj6zvq",
                            "args": [],
                            "value": "edges"
                        },
                        {
                            "id": "in"
                        }
                    ],
                    "edges": [
                        {
                            "from": "g18jj6zvq",
                            "to": "zkg9zpu3e",
                            "as": "path"
                        },
                        {
                            "from": "in",
                            "to": "zkg9zpu3e"
                        }
                    ]
                },
                {
                    "id": "bp1cy89hk",
                    "args": [],
                    "type": "get",
                    "name": "graph"
                },
                {
                    "id": "jhykipayt",
                    "args": [],
                    "name": "remove pendant/in"
                },
                {
                    "id": "iqkdwjpuz",
                    "args": [],
                    "value": "graph"
                }
            ],
            "edges": [
                {
                    "from": "r5lka2sj5",
                    "to": "ay4hfrqw1",
                    "as": "arg0",
                    "type": "inputs"
                },
                {
                    "from": "7elx5ekij",
                    "to": "ay4hfrqw1",
                    "as": "remove"
                },
                {
                    "from": "cz08pewa3",
                    "to": "7elx5ekij",
                    "as": "graph"
                },
                {
                    "from": "7n24u6kpt",
                    "to": "cz08pewa3",
                    "as": "nodes"
                },
                {
                    "from": "cuiccwvbv",
                    "to": "cz08pewa3",
                    "as": "edges"
                },
                {
                    "from": "lgzenfpvl",
                    "to": "r5lka2sj5",
                    "as": "pendants",
                    "type": "concat"
                },
                {
                    "from": "lgzenfpvl",
                    "to": "cz08pewa3",
                    "as": "pendants",
                    "type": "concat"
                },
                {
                    "from": "7g81ijcqb",
                    "to": "7n24u6kpt",
                    "as": "nodes"
                },
                {
                    "from": "lgzenfpvl",
                    "to": "7n24u6kpt",
                    "as": "pendant_edges",
                    "type": "concat"
                },
                {
                    "from": "zkg9zpu3e",
                    "to": "7n24u6kpt",
                    "as": "edges",
                    "type": "concat"
                },
                {
                    "from": "lgzenfpvl",
                    "to": "cuiccwvbv",
                    "as": "pendant_edges",
                    "type": "concat"
                },
                {
                    "from": "zkg9zpu3e",
                    "to": "cuiccwvbv",
                    "as": "edges"
                },
                {
                    "from": "zkg9zpu3e",
                    "to": "lgzenfpvl",
                    "as": "edges"
                },
                {
                    "from": "7g81ijcqb",
                    "to": "lgzenfpvl",
                    "as": "nodes"
                },
                {
                    "from": "bp1cy89hk",
                    "to": "ay4hfrqw1",
                    "as": "graph"
                },
                {
                    "from": "bp1cy89hk",
                    "to": "cz08pewa3"
                },
                {
                    "from": "bp1cy89hk",
                    "to": "7g81ijcqb",
                    "as": "target"
                },
                {
                    "from": "bp1cy89hk",
                    "to": "zkg9zpu3e",
                    "as": "target"
                },
                {
                    "from": "jhykipayt",
                    "to": "bp1cy89hk",
                    "as": "target"
                },
                {
                    "from": "iqkdwjpuz",
                    "to": "bp1cy89hk",
                    "as": "path"
                }
            ]
        }
    ],
    "edges": [
        {
            "from": "a9vu2hz8k/a9vu2hz8k",
            "to": "3xwekuk1x",
            "as": "input"
        },
        {
            "from": "3xwekuk1x",
            "to": "out",
            "as": "arg1"
        },
        {
            "from": "odsqtauqb",
            "to": "w3x4rftkl"
        },
        {
            "from": "w3x4rftkl",
            "to": "a9vu2hz8k/a9vu2hz8k",
            "as": "arg1"
        },
        {
            "from": "in",
            "to": "jlk9tc1tj",
            "as": "target"
        },
        {
            "from": "ca0uwa8io",
            "to": "jlk9tc1tj",
            "as": "path"
        },
        {
            "from": "jlk9tc1tj",
            "to": "6pzunwby3",
            "as": "graph"
        },
        {
            "from": "6pzunwby3",
            "to": "a9vu2hz8k/xgnuqyvr4",
            "as": "graph"
        },
        {
            "from": "a9vu2hz8k/xgnuqyvr4",
            "to": "a9vu2hz8k/jjzfmceck",
            "as": "graph"
        },
        {
            "from": "otu530hyc",
            "to": "fjjiukfck",
            "as": "node"
        },
        {
            "from": "fjjiukfck",
            "to": "bkimfi88f",
            "as": "graph"
        },
        {
            "from": "bkimfi88f",
            "to": "w3x4rftkl",
            "as": "nodes",
            "type": "concat"
        },
        {
            "from": "a9vu2hz8k/jjzfmceck",
            "to": "otu530hyc",
            "as": "fused"
        },
        {
            "from": "a9vu2hz8k/xgnuqyvr4",
            "to": "89hf2x0o1",
            "as": "graph"
        },
        {
            "from": "89hf2x0o1",
            "to": "fjjiukfck",
            "as": "nodes"
        },
        {
            "from": "number_display/hghirvcml",
            "to": "number_display/tsxlng4gd",
            "as": "dom_type"
        },
        {
            "from": "number_display/cd571vftv",
            "to": "number_display/tsxlng4gd",
            "as": "props"
        },
        {
            "from": "number_display/h5xzkeoql",
            "to": "number_display/cd571vftv"
        },
        {
            "from": "number_display/ltncqmqe9",
            "to": "number_display/cd571vftv",
            "as": "value"
        },
        {
            "from": "number_display/9kkegcpi2",
            "to": "number_display/cd571vftv",
            "as": "oninput"
        },
        {
            "from": "number_display/e96vv0gpq",
            "to": "number_display/ltncqmqe9",
            "as": "path"
        },
        {
            "from": "number_display/tw41k3wzg",
            "to": "number_display/9kkegcpi2",
            "as": "graph"
        },
        {
            "from": "number_display/u9feks2l9",
            "to": "number_display/9kkegcpi2",
            "as": "out_node",
            "type": "ref"
        },
        {
            "from": "number_display/6pqqchhnk",
            "to": "number_display/ltncqmqe9",
            "as": "target"
        },
        {
            "from": "number_display/6pqqchhnk",
            "to": "number_display/tw41k3wzg",
            "as": "target"
        },
        {
            "from": "number_display/yxaspmy5c",
            "to": "number_display/tw41k3wzg",
            "as": "path"
        },
        {
            "from": "number_display/rhzddw3c6",
            "to": "number_display/u9feks2l9",
            "as": "node"
        },
        {
            "from": "number_display/8jmaa71ct",
            "to": "number_display/u9feks2l9",
            "as": "update"
        },
        {
            "from": "number_display/w5lqhh9qr",
            "to": "number_display/rhzddw3c6",
            "as": "path"
        },
        {
            "from": "number_display/es0e6as0j",
            "to": "number_display/rhzddw3c6",
            "as": "value"
        },
        {
            "from": "number_display/vnta2m4py",
            "to": "number_display/8jmaa71ct",
            "as": "arg0"
        },
        {
            "from": "number_display/es0e6as0j",
            "to": "number_display/8jmaa71ct",
            "as": "arg1"
        },
        {
            "from": "number_display/gh99zvhy2",
            "to": "number_display/es0e6as0j",
            "as": "path"
        },
        {
            "from": "number_display/88f3s3qrq",
            "to": "number_display/vnta2m4py",
            "as": "path"
        },
        {
            "from": "number_display/fxbdw1jrr",
            "to": "number_display/rhzddw3c6",
            "as": "target"
        },
        {
            "from": "number_display/fxbdw1jrr",
            "to": "number_display/vnta2m4py",
            "as": "target"
        },
        {
            "from": "number_display/pkih97fsa",
            "to": "number_display/u9feks2l9"
        },
        {
            "from": "number_display/pkih97fsa",
            "to": "number_display/fxbdw1jrr"
        },
        {
            "from": "number_display/mbbx3d26q",
            "to": "number_display/9kkegcpi2",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "number_display/mbbx3d26q",
            "to": "number_display/es0e6as0j",
            "as": "target"
        },
        {
            "from": "number_display/mbbx3d26q",
            "to": "number_display/pkih97fsa",
            "as": "target"
        },
        {
            "from": "number_display/vbwsmt7jt",
            "to": "number_display/pkih97fsa",
            "as": "path"
        },
        {
            "from": "a9vu2hz8k/xgnuqyvr4",
            "to": "7dw3h31az",
            "as": "target"
        },
        {
            "from": "7dw3h31az",
            "to": "fjjiukfck",
            "as": "edges"
        },
        {
            "from": "a9vu2hz8k/jjzfmceck",
            "to": "a9vu2hz8k/a9vu2hz8k",
            "as": "fused"
        },
        {
            "from": "6pzunwby3",
            "to": "a9vu2hz8k/a9vu2hz8k",
            "as": "original"
        }
    ]
}