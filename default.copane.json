{
  "nodes": {
    "onload": {
      "type": "run",
      "x": 655.2000122070312,
      "y": 18.333332061767578
    },
    "onload_empty_state": {
      "type": "value",
      "nodes": {
        "value": {}
      },
      "x": 48.55833435058594,
      "y": 0.2083335518836975
    },
    "onload_diff_empty": {
      "type": "diff_changes",
      "x": 137.81666564941406,
      "y": 13.208333969116211
    },
    "graph_stringify": {
      "type": "stringify",
      "nodes": {
        "key": "state_graph"
      },
      "x": 512.6583251953125,
      "y": 700.2083129882812
    },
    "load_graph": {
      "type": "load_content",
      "nodes": {
        "key": "graph"
      },
      "x": 673.00830078125,
      "y": 196.2083282470703
    },
    "queue_apply_diff": {
      "type": "last_updated"
    },
    "pop_apply_diff": {
      "type": "filter_last_updated"
    },
    "apply_diff_to_graph": {
      "type": "script",
      "nodes": {
        "script": "if(input.new_diff) { const newGraph = state.lib.clone(state.graph); state.lib.diffApply(newGraph, input.new_diff); state.graph = newGraph; return state.graph; }"
      },
      "x": 158.375,
      "y": 994.2083740234375
    },
    "graph_style_tag": {
      "type": "script",
      "nodes": {
        "script": "return () => state.lib.html`#graph { display:flex; flex-direction: row; flex-grow: 2; justify-content: flex-start; align-content: stretch; } #graph .node { user-select: none } .tooltip { position: absolute; visibility: hidden; max-width: 120px; pointer-events: none; }`"
      },
      "x": 845.8916625976562,
      "y": 96.20833587646484
    },
    "render_graph_style": {
      "type": "render_html",
      "nodes": {
        "target": "document.getElementById('graph_style')"
      },
      "x": 1018.2333374023438,
      "y": 38.20833206176758
    },
    "render_head": {
      "type": "render",
      "nodes": {
        "target": "document.head"
      }
    },
    "render_graph": {
      "type": "render",
      "nodes": {
        "target": "document.querySelector('#graph')"
      },
      "x": 182.35000610351562,
      "y": 73.20833587646484
    },
    "create_svg_base": {
      "type": "script",
      "nodes": {
        "script": "return state.lib.SVG('.root') ?? state.lib.SVG().addTo('#graph').addClass('root')"
      },
      "x": 752.5750122070312,
      "y": 725.2083129882812
    },
    "create_nodes": {
      "type": "script",
      "nodes": {
        "script": "const base = input.create_svg_base; Object.entries(state.graph.nodes).map(([id, n], idx) => (base.findOne(`#${id}`) ??  base.text(id).attr({id, class: 'node'})).move(n.x ?? 100 * (idx % 4), n.y ?? 40 * (idx / 4))); return base;"
      },
      "x": 669.24169921875,
      "y": 486.2083435058594
    },
    "create_lines": {
      "type": "script",
      "nodes": {
        "script": "const base = input.create_svg_base; return state.graph.edges.map(c => (base.findOne(`#${c[0]}-${c[1]}`) ?? base.line().stroke({width: 1, color: '#000'}).attr({id: `${c[0]}-${c[1]}`}) ).plot(state.lib.SVG(`#${c[0]}`)?.cx(), state.lib.SVG(`#${c[0]}`)?.cy(), state.lib.SVG(`#${c[1]}`)?.cx(), state.lib.SVG(`#${c[1]}`)?.cy()))"
      },
      "x": 857.7916259765625,
      "y": 824.2083129882812
    },
    "show_errors": {
      "type": "script",
      "nodes": {
        "script": "for(e of Object.keys(state.graph.nodes)){ state.lib.SVG(`#${e}`)?.css({fill: state.temp.errors.has(e) ? 'red' : 'black'})}"
      },
      "x": 861.441650390625,
      "y": 400.20831298828125
    },
    "register_mouse_listener": {
      "type": "mouse_event",
      "nodes": {
        "trigger": "mouse_trigger"
      },
      "x": 288.5,
      "y": 26.208332061767578
    },
    "mouse_trigger": {
      "type": "run",
      "nodes": {
        "log_node": "mouse_select_target"
      },
      "x": 946.7249755859375,
      "y": 274.20831298828125
    },
    "mouse_stringify": {
      "type": "stringify",
      "x": 31.983333587646484,
      "y": 42.20833206176758
    },
    "mouse_log": {
      "type": "log",
      "x": 129.88333129882812,
      "y": 50.208335876464844
    },
    "mouse_target_changed": {
      "type": "value_changed",
      "nodes": {
        "value": [
          "mouse_trigger",
          "target"
        ]
      },
      "x": 899.36669921875,
      "y": 432.2083435058594
    },
    "mouse_button_changed": {
      "type": "value_changed",
      "nodes": {
        "value": [
          "mouse_trigger",
          "button"
        ]
      },
      "x": 976.9833374023438,
      "y": 187.20834350585938
    },
    "mouse_event_type_changed": {
      "type": "value_changed",
      "nodes": {
        "value": [
          "mouse_trigger",
          "ty"
        ]
      },
      "x": 898.3333740234375,
      "y": 801.2083740234375
    },
    "mouse_dragging": {
      "type": "script",
      "nodes": {
        "script": "return input.mouse_event_type_changed === 'mousemove' ? undefined : (input.mouse_trigger.button === 0 && input.mouse_event_type_changed === 'mousedown')"
      }
    },
    "mouse_select_target": {
      "type": "script",
      "nodes": {
        "script": "return input.mouse_event_type_changed === 'mousedown' ? input.mouse_target_changed : undefined"
      },
      "x": 1031.8082275390625,
      "y": 344.2083435058594
    },
    "hover_state": {
      "type": "script",
      "nodes": {
        "script": "if(!input.mouse_target_changed) {return; } const tt = document.querySelector('.tooltip'); if(input.mouse_event_type_changed !== 'mousemove' || input.mouse_target_changed === 'graph'){ tt.style = `visibility: hidden`;return; } const content = (state.temp.errors.get(input.mouse_target_changed)?.message ?? state.temp.results.get(input.mouse_target_changed)); tt.innerText = typeof content === 'string' ? content : JSON.stringify(content, null, 2); tt.style = `left: ${state.lib.SVG(`#${input.mouse_target_changed}`)?.x() ?? '0'}px; top: ${state.lib.SVG(`#${input.mouse_target_changed}`)?.y() ?? '0'}px; visibility: ${content ? 'visible' : 'hidden'};`;"
      },
      "x": 950.1166381835938,
      "y": 909.2083740234375
    },
    "drag_node": {
      "type": "script",
      "nodes": {
        "script": "if(!input.mouse_dragging || !input.mouse_select_target) { return; } const target = state.lib.SVG(`#${input.mouse_select_target}`); if(target?.center){ target.center(input.mouse_trigger.x, input.mouse_trigger.y); return input.mouse_trigger; }"
      },
      "x": 787.2333374023438,
      "y": 492.2083435058594
    },
    "editor_change_trigger": {
      "type": "run"
    },
    "parse_editor_state_graph": {
      "type": "script",
      "nodes": {
        "script": "const mouse_target = input.parse_editor_content_trigger.parse_editor_content_change.mouse_select_target; return !mouse_target || mouse_target === 'graph' ? JSON.parse(input.parse_editor_content_trigger.parse_editor_content_change.last_editor_content_change) : undefined"
      },
      "x": 1055.8582763671875,
      "y": 708.2083129882812
    },
    "parse_editor_node_script": {
      "type": "script",
      "nodes": {
        "script": "const mouse_target = input.parse_editor_content_trigger.parse_editor_content_change.mouse_select_target; return mouse_target && mouse_target !== 'graph' && state.graph.nodes[mouse_target]?.nodes?.script ? [{op: 'replace', path: ['nodes', mouse_target, 'nodes', 'script'], value: input.parse_editor_content_trigger.parse_editor_content_change.last_editor_content_change}] : undefined"
      },
      "x": 1055.8582763671875,
      "y": 708.2083129882812
    },
    "parse_load_graph": {
      "type": "script",
      "nodes": {
        "script": "if(input.load_graph){ return JSON.parse(input.load_graph) }"
      },
      "x": 454.1000061035156,
      "y": 218.20834350585938
    },
    "editor_content_changes": {
      "type": "last_updated"
    },
    "last_editor_content_change": {
      "type": "filter_last_updated",
      "x": 1033.0167236328125,
      "y": 571.2083740234375
    },
    "set_pending_graph": {
      "type": "last_updated",
      "x": 1070.11669921875,
      "y": 810.2083129882812
    },
    "pending_graph": {
      "type": "filter_last_updated",
      "x": 79.98333740234375,
      "y": 808.2083740234375
    },
    "set_state_graph": {
      "type": "last_updated",
      "x": 266.2249755859375,
      "y": 1047.208251953125
    },
    "state_graph": {
      "type": "filter_last_updated",
      "x": 760.1166381835938,
      "y": 769.2083740234375
    },
    "register_key_listener": {
      "type": "keyboard_event",
      "nodes": {
        "trigger": "key_trigger",
        "prevent_default_keys": [
          {
            "ctrlKey": true,
            "key": "s"
          },
          {
            "ctrlKey": true,
            "key": "e"
          }
        ]
      },
      "x": 294.8416442871094,
      "y": 66.20833587646484
    },
    "key_trigger": {
      "type": "run",
      "nodes": {
        "log_node": "mouse_select_target"
      },
      "x": 186.06666564941406,
      "y": 360.20831298828125
    },
    "save_on_ctrl_s": {
      "type": "save_content",
      "nodes": {
        "save_key": "graph"
      },
      "x": 419,
      "y": 694.2083740234375
    },
    "ctrl_s": {
      "type": "script",
      "nodes": {
        "script": "return input.key_trigger.ctrlKey && input.key_trigger.key === 's'"
      },
      "x": 49.65833282470703,
      "y": 706.2083129882812
    },
    "ctrl_e": {
      "type": "script",
      "nodes": {
        "script": "return input.key_trigger.ctrlKey && input.key_trigger.key === 'e'"
      },
      "x": 1147.22509765625,
      "y": 544.2083129882812
    },
    "get_save_content": {
      "type": "get_value",
      "nodes": {
        "value": [
          "map_save_value_trigger",
          "map_save_value_change",
          "content"
        ]
      }
    },
    "map_save_value_change": {
      "type": "last_updated",
      "x": 423.683349609375,
      "y": 486.2083435058594
    },
    "map_save_value_trigger": {
      "type": "trigger",
      "nodes": {
        "key": [
          "map_save_value_change",
          "key"
        ],
        "trigger": [
          "map_save_value_change",
          "trigger"
        ]
      },
      "x": 423.683349609375,
      "y": 486.2083435058594
    },
    "get_edges_changes": {
      "type": "filter_input",
      "nodes": {
        "filter": "return val.path[0] === 'edges';"
      }
    },
    "diff_graph_changes": {
      "type": "diff_changes",
      "x": 187.60833740234375,
      "y": 935.2083129882812
    },
    "diff_graph_changes_last_updated": {
      "type": "last_updated"
    },
    "diff_graph_changes_filter_pending_changed": {
      "type": "script",
      "nodes": {
        "script": "if(input.diff_graph_changes_last_updated.key === 'pending_graph') { return input.diff_graph_changes_last_updated }"
      }
    },
    "get_diff_graph_changes_next": {
      "type": "get_value",
      "nodes": {
        "value": [
          "diff_graph_changes_filter_pending_changed",
          "pending_graph"
        ]
      }
    },
    "get_diff_graph_changes_current": {
      "type": "get_value",
      "nodes": {
        "value": [
          "diff_graph_changes_filter_pending_changed",
          "state_graph"
        ]
      }
    },
    "set_editor_content": {
      "type": "last_updated",
      "x": 795.875,
      "y": 942.2083129882812
    },
    "editor_content": {
      "type": "filter_last_updated",
      "x": 715.7666625976562,
      "y": 999.2083129882812
    },
    "update_editor_content": {
      "type": "script",
      "nodes": {
        "script": "const newContent = typeof input.editor_content === 'string' ? input.editor_content : JSON.stringify(input.editor_content, null, 2); if(state.editor.state.doc.toString() !== newContent) { state.editor.dispatch({changes: {from: 0, to: state.editor.state.doc.length, insert: newContent }}) }"
      },
      "x": 675.441650390625,
      "y": 1055.2083740234375
    },
    "log_errors": {
      "type": "script",
      "nodes": {
        "script": "state.temp.errors.forEach((id, e) => {console.log(id); console.error(e);})"
      },
      "x": 3.1083335876464844,
      "y": 607.2083129882812
    },
    "log_results": {
      "type": "script",
      "nodes": {
        "script": "console.log(state.temp.results.forEach((v, k) => console.log(`${k}: ${JSON.stringify(v, null, 2)}`)))"
      },
      "x": 27.875,
      "y": 765.2083129882812
    },
    "log_test": {
      "type": "log"
    },
    "set_initial_graph": {
      "type": "last_updated",
      "x": 457.2166748046875,
      "y": 100.20832824707031
    },
    "initial_graph": {
      "type": "filter_last_updated",
      "x": 761.1083374023438,
      "y": 296.2083435058594
    },
    "configure_editor": {
      "type": "script",
      "nodes": {
        "trigger": "editor_change_trigger",
        "script": "\n      const trigger = state.graph.nodes[name].nodes.trigger;\n      state.editor.dispatch({ \n        effects: state.lib.cm.StateEffect.appendConfig.of([\n          state.lib.cm.EditorView.theme({'&': {width: '50vw', height: '95vh'}, '.cm-scroller': { overflow: 'auto' }}),\n          state.lib.cm.EditorView.updateListener.of(\n            update => {\n              if(update.docChanged) {\n                const updated_state = update.state.doc.toString();\n                new AsyncFunction('state', 'name', 'input', state.graph.defaults.run.nodes.script)(state, trigger, updated_state);\n              }\n            }),\n        ])\n      }); \n    "
      },
      "x": 852.625,
      "y": 244.20834350585938
    },
    "drop_node": {
      "type": "script",
      "nodes": {
        "script": "if(input.drop_node_input.key !== 'mouse_dragging' || input.drop_node_input.mouse_dragging || !input.drop_node_input.mouse_select_target || !state.graph.nodes.hasOwnProperty(input.drop_node_input.mouse_select_target)) { return; } const target = state.lib.SVG(`#${input.drop_node_input.mouse_select_target}`); return [{op: (state.graph.nodes[input.drop_node_input.mouse_select_target].x ? 'replace' : 'add'), path: ['nodes', input.drop_node_input.mouse_select_target, 'x'], value: target.x()}, {op: (state.graph.nodes[input.drop_node_input.mouse_select_target].y ? 'replace' : 'add'), path: ['nodes', input.drop_node_input.mouse_select_target, 'y'], value: target.y()}];"
      },
      "x": 581.7833251953125,
      "y": 924.2083129882812
    },
    "drop_node_input": {
      "type": "last_updated",
      "x": 638.316650390625,
      "y": 660.2083129882812
    },
    "selected_node_script": {
      "type": "script",
      "nodes": {
        "script": "return input.state_graph?.nodes[input.mouse_select_target]?.nodes?.script ? input.state_graph.nodes[input.mouse_select_target].nodes?.script : input.state_graph"
      },
      "x": 1099.88330078125,
      "y": 474.2083435058594
    },
    "update_selected_content": {
      "type": "script",
      "nodes": {
        "script": "return JSON.parse(input.selected_node_script)"
      }
    },
    "parse_editor_content_change": {
      "type": "last_updated",
      "x": 1080.49169921875,
      "y": 637.2083129882812
    },
    "parse_editor_content_trigger": {
      "type": "trigger",
      "nodes": {
        "key": [
          "parse_editor_content_change",
          "key"
        ],
        "trigger": [
          "parse_editor_content_change",
          "trigger"
        ]
      },
      "x": 1080.49169921875,
      "y": 637.2083129882812
    }
  },
  "defaults": {
    "run": {
      "type": "script",
      "nodes": {
        "script": "\n      const node = state.graph.nodes[name];\n      const stack = state.graph.edges.filter(c => c[0] === name).map(c => c[1]); \n\n      state.temp.results.set(name, input);\n\n\t\t\tconst log_node = node.nodes?.log_node;\n\n      while(stack.length > 0) { \n        const run = stack.pop(); \n        if(!state.graph.nodes.hasOwnProperty(run)) {\n          throw new Error(\"Unknown node \" + run)\n        }\n        const run_node = {...state.graph.nodes[run]};\n        while(run_node.type && run_node.type !== 'script'){\n          if(!state.graph.defaults.hasOwnProperty(run_node.type)) {\n            throw new Error(\"Unknown node type \" + run_node.type + \" on node \" + run);\n          }\n          run_node.nodes = {...state.graph.defaults[run_node.type].nodes, ...run_node.nodes};\n          run_node.type = state.graph.defaults[run_node.type].type;\n        }\n\n        const input = Object.fromEntries(\n\t\t\t\t\tstate.graph.edges\n\t\t\t\t\t\t.filter(c => c[1] === run)\n\t\t\t\t\t\t.map(c => [c[2] ?? c[0], state.temp.results.get(c[0])])\n\t\t\t\t);\n\n\t\t\t\tif(log_node === run){\n\t\t\t\t\tconsole.log(\"start \" + run + \" with input \");\n\t\t\t\t\tconsole.dir(input);\n\t\t\t\t}\n\n        await Promise.resolve(run_node)\n          .then(node => new AsyncFunction('state', 'name', 'input', node.nodes.script)(state, run, input))\n          .then(result => {\n            state.temp.errors.delete(run);\n            if(result !== undefined) {  \n              state.temp.results.set(run, result); \n              state.graph.edges.filter(c => c[0] === run).forEach(c => stack.unshift(c[1])); \n            }\n\n\t\t\t\t\t\tif(log_node === run){\n\t\t\t\t\t\t\tconsole.log(\"end\" + run + \" with \");\n\t\t\t\t\t\t\tconsole.dir(result);\n\t\t\t\t\t\t}\n\n          })\n          .catch(err => { console.log(\"error running\" + run); console.error(err); state.temp.errors.set(run, err); });\n      }\n\t\t"
      }
    },
    "log": {
      "type": "script",
      "nodes": {
        "script": "console.dir(input)"
      }
    },
    "stringify": {
      "type": "script",
      "nodes": {
        "script": "return JSON.stringify(input[state.graph.nodes[name].nodes.key])"
      }
    },
    "mouse_event": {
      "type": "script",
      "nodes": {
        "script": "\n      const trigger = state.graph.nodes[name].nodes.trigger;\n      const mouseEvent = (ty) => (e) => {\n     const mouse_event = {x: e.x, y: e.y, target: document.elementFromPoint(e.x, e.y).parentElement.id, buttons: e.buttons, button: e.button, ty };\n        new AsyncFunction('state', 'name', 'input', state.graph.defaults.run.nodes.script)(state, trigger, {...mouse_event});\n      };\n\n      document.getElementById('graph').onmousemove = mouseEvent('mousemove');\n      document.getElementById('graph').onmousedown = mouseEvent('mousedown');\n      document.getElementById('graph').onmouseup = mouseEvent('mouseup');\n    "
      }
    },
    "tag": {
      "type": "script",
      "nodes": {
        "script": "return () => state.lib.html`<${state.graph.nodes[name].nodes.tag} ...${state.graph.nodes[name].nodes.attrs}>${new Function(`return ${state.graph.nodes[name].nodes.content}`)()}</${state.graph.nodes[name].nodes.tag}>`"
      }
    },
    "render_html": {
      "type": "script",
      "nodes": {
        "script": "target = new Function(`return ${state.graph.nodes[name].nodes.target}`)(); state.lib.render(state.lib.html`${Object.values(input).map(fn => state.lib.html`<${fn} />`)}`, target)"
      }
    },
    "filter_changed": {
      "type": "script",
      "nodes": {
        "script": "return state.temp.results.get(name) === input.value ? undefined : input.value"
      }
    },
    "save_content": {
      "type": "script",
      "nodes": {
        "script": "return localStorage.setItem(state.graph.nodes[name].nodes.save_key, input.content)"
      }
    },
    "load_content": {
      "type": "script",
      "nodes": {
        "script": "return localStorage.getItem(state.graph.nodes[name].nodes.key)"
      }
    },
    "diff_changes": {
      "type": "script",
      "nodes": {
        "script": "if(input.current === undefined || input.next === undefined){return;} const diff = state.lib.diff(input.current, input.next); return diff.length > 0 ? diff : undefined;"
      }
    },
    "filter_input": {
      "type": "script",
      "nodes": {
        "script": "return Object.fromEntries(Object.entries(input).filter(val => new Function('state', 'name', 'input', 'val', state.graph.nodes[name].nodes.filter)(state, name, input, val)))"
      }
    },
    "get_value": {
      "type": "script",
      "nodes": {
        "script": "return state.lib.get(input, state.graph.nodes[name].nodes.value)"
      }
    },
    "value_changed": {
      "type": "script",
      "nodes": {
        "script": "const value = state.lib.get(input, state.graph.nodes[name].nodes.value); return state.temp.results.get(name) === value ? undefined : value"
      }
    },
    "last_updated": {
      "type": "script",
      "description": "returns the key of the input value that was last updated",
      "nodes": {
        "script": "const previous = state.temp.results.get(name) ?? {}; const key = Object.keys(input).find(k => previous[k] !== input[k]) ?? previous.key; return {key, ...input};"
      }
    },
    "filter_last_updated": {
      "type": "script",
      "nodes": {
        "script": "return input.last_updated[input.last_updated.key]"
      }
    },
    "value": {
      "type": "script",
      "nodes": {
        "script": "return state.graph.nodes[name].nodes.value"
      }
    },
    "keyboard_event": {
      "type": "script",
      "nodes": {
        "script": "\n      const trigger = state.graph.nodes[name].nodes.trigger;\n      const isPrevented = (key_e) =>\n        state.graph.nodes[name].nodes.prevent_default_keys && state.graph.nodes[name].nodes.prevent_default_keys.reduce(\n          (acc, key) => acc || Object.keys(key).reduce((acc, k) => acc && key_e[k] === key[k] , true)\n            , false);\n\n      const keyboardEvent = (ty) => (e) => {\n        const key_e = {event: ty, code: e.code, altKey: e.altKey, ctrlKey: e.ctrlKey, key: e.key, metaKey: e.metaKey};\n        if(isPrevented(key_e)) {\n          e.preventDefault();\n        }\n\n        new AsyncFunction('state', 'name', 'input', state.graph.defaults.run.nodes.script)(state, trigger, key_e);\n      }\n\n  window.addEventListener('keydown', keyboardEvent('keydown'));\n    "
      }
    },
    "trigger": {
      "type": "script",
      "description": "watches for a true on the trigger input to pass the full input through",
      "nodes": {
        "script": "const key = state.graph.nodes[name].nodes.key ?? 'key'; const trigger = state.graph.nodes[name].nodes.trigger ?? 'trigger'; if(state.lib.get(input, key) === 'trigger' && state.lib.get(input, trigger)){ return input }"
      }
    }
  },
  "edges": [
    [
      "state_graph",
      "create_svg_base"
    ],
    [
      "create_svg_base",
      "create_nodes"
    ],
    [
      "create_svg_base",
      "create_lines"
    ],
    [
      "mouse_dragging",
      "drag_node"
    ],
    [
      "mouse_select_target",
      "drag_node"
    ],
    [
      "mouse_trigger",
      "drag_node"
    ],
    [
      "mouse_dragging",
      "drop_node_input"
    ],
    [
      "mouse_select_target",
      "drop_node_input"
    ],
    [
      "mouse_trigger",
      "drop_node_input"
    ],
    [
      "drop_node_input",
      "drop_node"
    ],
    [
      "state_graph",
      "diff_graph_changes_last_updated"
    ],
    [
      "pending_graph",
      "diff_graph_changes_last_updated"
    ],
    [
      "diff_graph_changes_last_updated",
      "diff_graph_changes_filter_pending_changed"
    ],
    [
      "diff_graph_changes_filter_pending_changed",
      "get_diff_graph_changes_next"
    ],
    [
      "diff_graph_changes_filter_pending_changed",
      "get_diff_graph_changes_current"
    ],
    [
      "get_diff_graph_changes_next",
      "diff_graph_changes",
      "next"
    ],
    [
      "get_diff_graph_changes_current",
      "diff_graph_changes",
      "current"
    ],
    [
      "editor_change_trigger",
      "editor_content_changes"
    ],
    [
      "key_trigger",
      "ctrl_s"
    ],
    [
      "key_trigger",
      "ctrl_e"
    ],
    [
      "mouse_event_type_changed",
      "hover_state"
    ],
    [
      "mouse_target_changed",
      "hover_state"
    ],
    [
      "editor_content_changes",
      "last_editor_content_change",
      "last_updated"
    ],
    [
      "initial_graph",
      "load_graph"
    ],
    [
      "ctrl_s",
      "map_save_value_change",
      "trigger"
    ],
    [
      "state_graph",
      "graph_stringify"
    ],
    [
      "graph_stringify",
      "map_save_value_change",
      "content"
    ],
    [
      "map_save_value_change",
      "map_save_value_trigger"
    ],
    [
      "map_save_value_trigger",
      "get_save_content"
    ],
    [
      "get_save_content",
      "save_on_ctrl_s",
      "content"
    ],
    [
      "mouse_trigger",
      "mouse_button_changed"
    ],
    [
      "mouse_trigger",
      "mouse_event_type_changed"
    ],
    [
      "mouse_trigger",
      "mouse_dragging"
    ],
    [
      "mouse_event_type_changed",
      "mouse_dragging"
    ],
    [
      "mouse_event_type_changed",
      "mouse_select_target"
    ],
    [
      "mouse_target_changed",
      "mouse_select_target"
    ],
    [
      "mouse_trigger",
      "mouse_target_changed"
    ],
    [
      "ctrl_e",
      "parse_editor_content_change",
      "trigger"
    ],
    [
      "last_editor_content_change",
      "parse_editor_content_change"
    ],
    [
      "mouse_select_target",
      "parse_editor_content_change"
    ],
    [
      "parse_editor_content_change",
      "parse_editor_content_trigger"
    ],
    [
      "parse_editor_content_trigger",
      "parse_editor_state_graph"
    ],
    [
      "parse_editor_content_trigger",
      "parse_editor_node_script"
    ],
    [
      "parse_editor_node_script",
      "queue_apply_diff"
    ],
    [
      "load_graph",
      "parse_load_graph"
    ],
    [
      "drop_node",
      "queue_apply_diff"
    ],
    [
      "set_pending_graph",
      "pending_graph",
      "last_updated"
    ],
    [
      "diff_graph_changes",
      "queue_apply_diff"
    ],
    [
      "onload",
      "register_key_listener"
    ],
    [
      "onload",
      "register_mouse_listener"
    ],
    [
      "onload",
      "configure_editor"
    ],
    [
      "onload",
      "graph_style_tag"
    ],
    [
      "graph_style_tag",
      "render_graph_style"
    ],
    [
      "create_svg_base",
      "show_errors"
    ],
    [
      "mouse_trigger",
      "show_errors"
    ],
    [
      "parse_editor_state_graph",
      "show_errors"
    ],
    [
      "parse_load_graph",
      "set_pending_graph"
    ],
    [
      "parse_editor_state_graph",
      "set_pending_graph"
    ],
    [
      "set_editor_content",
      "editor_content",
      "last_updated"
    ],
    [
      "editor_content",
      "update_editor_content"
    ],
    [
      "onload",
      "set_initial_graph"
    ],
    [
      "set_initial_graph",
      "initial_graph",
      "last_updated"
    ],
    [
      "initial_graph",
      "set_state_graph"
    ],
    [
      "queue_apply_diff",
      "pop_apply_diff",
      "last_updated"
    ],
    [
      "pop_apply_diff",
      "apply_diff_to_graph",
      "new_diff"
    ],
    [
      "apply_diff_to_graph",
      "set_state_graph"
    ],
    [
      "set_state_graph",
      "state_graph",
      "last_updated"
    ],
    [
      "mouse_select_target",
      "selected_node_script"
    ],
    [
      "state_graph",
      "selected_node_script"
    ],
    [
      "selected_node_script",
      "set_editor_content"
    ]
  ]
}