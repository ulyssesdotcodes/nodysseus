export const isNodeValue = (n) => n && !!n.value;
export const isNodeGraph = (n) => n && !!n.nodes;
export const isNodeScript = (n) => n && !!n?.script;
export const isNodeRef = (n) => n && !!n?.ref;
export const isGraph = (graph) => graph && Object.hasOwn(graph, "nodes");
export const isEdgesInGraph = (graph) => Object.hasOwn(graph, "edges_in");
export const AP = "ap";
export const isApFunction = (a) => a && a.__kind === "apFunction";
export const isApFunctorLike = (a) => !!a && (typeof a === "function" || isApFunction(a) || isApRunnable(a) || isFunctorRunnable(a));
export const CONST = "const";
export const FUNCTOR = "functor";
export const isRunnable = (r) => isValue(r) || isConstRunnable(r) || isApRunnable(r) || isFunctorRunnable(r);
export const isError = (r) => r instanceof Error;
export const isValue = (r) => {
    const result = r;
    return !isError(result) && (result)?.__kind === "result";
};
export const isConstRunnable = (r) => !(r instanceof Error) && r?.__kind == CONST;
export const isApRunnable = (r) => !(r instanceof Error) && r?.__kind == AP;
export const isFunctorRunnable = (r) => !(r instanceof Error) && r?.__kind == FUNCTOR;
export const isInputRunnable = (r) => !Object.hasOwn(r, "__kind") && Object.hasOwn(r, "fn") && Object.hasOwn(r, "graph");
export const getRunnableGraph = (r, lib) => typeof r.graph === "string" ? lib.data.no.runtime.get_ref(r.graph) : r.graph;
export const getRunnableGraphId = (r, lib) => typeof r.graph === "string" ? r.graph : r.graph.id;
export const isLib = (lib) => lib?.__kind === "lib";
export const isEnv = (env) => env?.__kind === "env";
export const isArgs = (args) => typeof args?.get === "function";
export const isTypedArg = (a) => a && (typeof a === "string" || typeof a.type === "string" || typeof a.type === "object");
