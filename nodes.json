
{
    "onload_diff_empty": {
      "type": "diff_changes",
      "x": 137.81666564941406,
      "y": 13.208333969116211
    },
    "graph_stringify": {
      "type": "stringify",
      "nodes": {
        "key": "state_graph"
      },
      "x": 512.6583251953125,
      "y": 700.2083129882812
    },
    "load_graph": {
      "type": "load_content",
      "nodes": {
        "key": "graph"
      },
      "x": 673.00830078125,
      "y": 196.2083282470703
    },
    "queue_apply_diff": {
      "type": "last_updated"
    },
    "pop_apply_diff": {
      "type": "filter_last_updated"
    },
    "apply_diff_to_graph": {
      "type": "script",
      "nodes": {
        "script": "if(input.new_diff) { const newgraph = state.lib.clone(state.graph); state.lib.diffapply(newgraph, input.new_diff); state.graph = newgraph; return state.graph; }"
      },
      "x": 158.375,
      "y": 994.2083740234375
    },
    "graph_style_tag": {
      "type": "script",
      "nodes": {
        "script": "return () => state.lib.html`#graph { display:flex; flex-direction: row; flex-grow: 2; justify-content: flex-start; align-content: stretch; } #graph .node { user-select: none } .tooltip { position: absolute; visibility: hidden; max-width: 120px; pointer-events: none; }`"
      },
      "x": 845.8916625976562,
      "y": 96.20833587646484
    },
    "render_graph_style": {
      "type": "render_html",
      "nodes": {
        "target": "document.getelementbyid('graph_style')"
      },
      "x": 1018.2333374023438,
      "y": 38.20833206176758
    },
    "render_head": {
      "type": "render",
      "nodes": {
        "target": "document.head"
      }
    },
    "render_graph": {
      "type": "render",
      "nodes": {
        "target": "document.queryselector('#graph')"
      },
      "x": 182.35000610351562,
      "y": 73.20833587646484
    },
    "create_svg_base": {
      "type": "script",
      "nodes": {
        "script": "return state.lib.svg('.root') ?? state.lib.svg().addto('#graph').addclass('root')"
      },
      "x": 752.5750122070312,
      "y": 725.2083129882812
    },
    "create_nodes": {
      "type": "script",
      "nodes": {
        "script": "const base = input.create_svg_base; object.entries(state.graph.nodes).map(([id, n], idx) => (base.findone(`#${id}`) ??  base.text(id).attr({id, class: 'node'})).move(n.x ?? 100 * (idx % 4), n.y ?? 40 * (idx / 4))); return base;"
      },
      "x": 669.24169921875,
      "y": 486.2083435058594
    },
    "create_lines": {
      "type": "script",
      "nodes": {
        "script": "const base = input.create_svg_base; return state.graph.edges.map(c => (base.findone(`#${c[0]}-${c[1]}`) ?? base.line().stroke({width: 1, color: '#000'}).attr({id: `${c[0]}-${c[1]}`}) ).plot(state.lib.svg(`#${c[0]}`)?.cx(), state.lib.svg(`#${c[0]}`)?.cy(), state.lib.svg(`#${c[1]}`)?.cx(), state.lib.svg(`#${c[1]}`)?.cy()))"
      },
      "x": 880.7916870117188,
      "y": 834.2083129882812
    },
    "show_errors": {
      "type": "script",
      "nodes": {
        "script": "for(e of object.keys(state.graph.nodes)){ state.lib.svg(`#${e}`)?.css({fill: state.temp.errors.has(e) ? 'red' : 'black'})}"
      },
      "x": 861.441650390625,
      "y": 400.20831298828125
    },
    "register_mouse_listener": {
      "type": "mouse_event",
      "nodes": {
        "trigger": "mouse_trigger"
      },
      "x": 288.5,
      "y": 26.208332061767578
    },
    "mouse_trigger": {
      "type": "run",
      "nodes": {
        "log_node": "mouse_select_target"
      },
      "x": 946.7249755859375,
      "y": 274.20831298828125
    },
    "mouse_stringify": {
      "type": "stringify",
      "x": 31.983333587646484,
      "y": 42.20833206176758
    },
    "mouse_log": {
      "type": "log",
      "x": 129.88333129882812,
      "y": 50.208335876464844
    },
    "mouse_target_changed": {
      "type": "value_changed",
      "nodes": {
        "value": [
          "mouse_trigger",
          "target"
        ]
      },
      "x": 899.36669921875,
      "y": 432.2083435058594
    },
    "mouse_button_changed": {
      "type": "value_changed",
      "nodes": {
        "value": [
          "mouse_trigger",
          "button"
        ]
      },
      "x": 976.9833374023438,
      "y": 187.20834350585938
    },
    "mouse_event_type_changed": {
      "type": "value_changed",
      "nodes": {
        "value": [
          "mouse_trigger",
          "ty"
        ]
      },
      "x": 898.3333740234375,
      "y": 801.2083740234375
    },
    "mouse_dragging": {
      "type": "script",
      "nodes": {
        "script": "return input.mouse_event_type_changed === 'mousemove' ? undefined : (input.mouse_trigger.button === 0 && input.mouse_event_type_changed === 'mousedown')"
      }
    },
    "mouse_select_target": {
      "type": "script",
      "nodes": {
        "script": "return input.mouse_event_type_changed === 'mousedown' ? input.mouse_target_changed : undefined"
      },
      "x": 1031.8082275390625,
      "y": 344.2083435058594
    },
    "hover_state": {
      "type": "script",
      "nodes": {
        "script": "if(!input.mouse_target_changed) {return; } const tt = document.queryselector('.tooltip'); if(input.mouse_event_type_changed !== 'mousemove' || input.mouse_target_changed === 'graph'){ tt.style = `visibility: hidden`;return; } const content = (state.temp.errors.get(input.mouse_target_changed)?.message ?? state.temp.results.get(input.mouse_target_changed)); tt.innertext = typeof content === 'string' ? content : json.stringify(content, null, 2); tt.style = `left: ${state.lib.svg(`#${input.mouse_target_changed}`)?.x() ?? '0'}px; top: ${state.lib.svg(`#${input.mouse_target_changed}`)?.y() ?? '0'}px; visibility: ${content ? 'visible' : 'hidden'};`;"
      },
      "x": 950.1166381835938,
      "y": 909.2083740234375
    },
    "drag_node": {
      "type": "script",
      "nodes": {
        "script": "if(!input.mouse_dragging || !input.mouse_select_target) { return; } const target = state.lib.svg(`#${input.mouse_select_target}`); if(target?.center){ target.center(input.mouse_trigger.x, input.mouse_trigger.y); return input.mouse_trigger; }"
      },
      "x": 787.2333374023438,
      "y": 492.2083435058594
    },
    "editor_change_trigger": {
      "type": "run"
    },
    "parse_editor_state_graph": {
      "type": "script",
      "nodes": {
        "script": "const mouse_target = input.parse_editor_content_trigger.parse_editor_content_change.mouse_select_target; return !mouse_target || mouse_target === 'graph' ? json.parse(input.parse_editor_content_trigger.parse_editor_content_change.last_editor_content_change) : undefined"
      },
      "x": 1055.8582763671875,
      "y": 708.2083129882812
    },
    "parse_editor_node_script": {
      "type": "script",
      "nodes": {
        "script": "const mouse_target = input.parse_editor_content_trigger.parse_editor_content_change.mouse_select_target; return mouse_target && mouse_target !== 'graph' && state.graph.nodes[mouse_target]?.nodes?.script ? [{op: 'replace', path: ['nodes', mouse_target, 'nodes', 'script'], value: input.parse_editor_content_trigger.parse_editor_content_change.last_editor_content_change}] : undefined"
      },
      "x": 1055.8582763671875,
      "y": 708.2083129882812
    },
    "parse_load_graph": {
      "type": "script",
      "nodes": {
        "script": "if(input.load_graph){ return json.parse(input.load_graph) }"
      },
      "x": 454.1000061035156,
      "y": 218.20834350585938
    },
    "editor_content_changes": {
      "type": "last_updated"
    },
    "last_editor_content_change": {
      "type": "filter_last_updated",
      "x": 1033.0167236328125,
      "y": 571.2083740234375
    },
    "set_pending_graph": {
      "type": "last_updated",
      "x": 1070.11669921875,
      "y": 810.2083129882812
    },
    "pending_graph": {
      "type": "filter_last_updated",
      "x": 79.98333740234375,
      "y": 808.2083740234375
    },
    "set_state_graph": {
      "type": "last_updated",
      "x": 266.2249755859375,
      "y": 1047.208251953125
    },
    "state_graph": {
      "type": "filter_last_updated",
      "x": 760.1166381835938,
      "y": 769.2083740234375
    },
    "register_key_listener": {
      "type": "keyboard_event",
      "nodes": {
        "trigger": "key_trigger",
        "prevent_default_keys": [
          {
            "ctrlkey": true,
            "key": "s"
          },
          {
            "ctrlkey": true,
            "key": "e"
          }
        ]
      },
      "x": 294.8416442871094,
      "y": 66.20833587646484
    },
    "key_trigger": {
      "type": "run",
      "nodes": {
        "log_node": "mouse_select_target"
      },
      "x": 186.06666564941406,
      "y": 360.20831298828125
    },
    "save_on_ctrl_s": {
      "type": "save_content",
      "nodes": {
        "save_key": "graph"
      },
      "x": 419,
      "y": 694.2083740234375
    },
    "ctrl_s": {
      "type": "script",
      "nodes": {
        "script": "return input.key_trigger.ctrlkey && input.key_trigger.key === 's'"
      },
      "x": 49.65833282470703,
      "y": 706.2083129882812
    },
    "ctrl_e": {
      "type": "script",
      "nodes": {
        "script": "return input.key_trigger.ctrlkey && input.key_trigger.key === 'e'"
      },
      "x": 1147.22509765625,
      "y": 544.2083129882812
    },
    "get_save_content": {
      "type": "get_value",
      "nodes": {
        "value": [
          "map_save_value_trigger",
          "map_save_value_change",
          "content"
        ]
      }
    },
    "map_save_value_change": {
      "type": "last_updated",
      "x": 423.683349609375,
      "y": 486.2083435058594
    },
    "map_save_value_trigger": {
      "type": "trigger",
      "nodes": {
        "key": [
          "map_save_value_change",
          "key"
        ],
        "trigger": [
          "map_save_value_change",
          "trigger"
        ]
      },
      "x": 423.683349609375,
      "y": 486.2083435058594
    },
    "get_edges_changes": {
      "type": "filter_input",
      "nodes": {
        "filter": "return val.path[0] === 'edges';"
      }
    },
    "diff_graph_changes": {
      "type": "diff_changes",
      "x": 187.60833740234375,
      "y": 935.2083129882812
    },
    "diff_graph_changes_last_updated": {
      "type": "last_updated"
    },
    "diff_graph_changes_filter_pending_changed": {
      "type": "script",
      "nodes": {
        "script": "if(input.diff_graph_changes_last_updated.key === 'pending_graph') { return input.diff_graph_changes_last_updated }"
      }
    },
    "get_diff_graph_changes_next": {
      "type": "get_value",
      "nodes": {
        "value": [
          "diff_graph_changes_filter_pending_changed",
          "pending_graph"
        ]
      }
    },
    "get_diff_graph_changes_current": {
      "type": "get_value",
      "nodes": {
        "value": [
          "diff_graph_changes_filter_pending_changed",
          "state_graph"
        ]
      }
    },
    "set_editor_content": {
      "type": "last_updated",
      "x": 795.875,
      "y": 942.2083129882812
    },
    "editor_content": {
      "type": "filter_last_updated",
      "x": 715.7666625976562,
      "y": 999.2083129882812
    },
    "update_editor_content": {
      "type": "script",
      "nodes": {
        "script": "const newcontent = typeof input.editor_content === 'string' ? input.editor_content : json.stringify(input.editor_content, null, 2); if(state.editor.state.doc.tostring() !== newcontent) { state.editor.dispatch({changes: {from: 0, to: state.editor.state.doc.length, insert: newcontent }}) }"
      },
      "x": 675.441650390625,
      "y": 1055.2083740234375
    },
    "log_errors": {
      "type": "script",
      "nodes": {
        "script": "state.temp.errors.foreach((id, e) => {console.log(id); console.error(e);})"
      },
      "x": 3.1083335876464844,
      "y": 607.2083129882812
    },
    "log_results": {
      "type": "script",
      "nodes": {
        "script": "console.log(state.temp.results.foreach((v, k) => console.log(`${k}: ${json.stringify(v, null, 2)}`)))"
      },
      "x": 27.875,
      "y": 765.2083129882812
    },
    "log_test": {
      "type": "log"
    },
    "set_initial_graph": {
      "type": "last_updated",
      "x": 457.2166748046875,
      "y": 100.20832824707031
    },
    "initial_graph": {
      "type": "filter_last_updated",
      "x": 761.1083374023438,
      "y": 296.2083435058594
    },
    "configure_editor": {
      "type": "script",
      "nodes": {
        "trigger": "editor_change_trigger",
        "script": "\n      const trigger = state.graph.nodes[name].nodes.trigger;\n      state.editor.dispatch({ \n        effects: state.lib.cm.stateeffect.appendconfig.of([\n          state.lib.cm.editorview.theme({'&': {width: '50vw', height: '95vh'}, '.cm-scroller': { overflow: 'auto' }}),\n          state.lib.cm.editorview.updatelistener.of(\n            update => {\n              if(update.docchanged) {\n                const updated_state = update.state.doc.tostring();\n                new asyncfunction('state', 'name', 'input', state.graph.defaults.run.nodes.script)(state, trigger, updated_state);\n              }\n            }),\n        ])\n      }); \n    "
      },
      "x": 852.625,
      "y": 244.20834350585938
    },
    "drop_node": {
      "type": "script",
      "nodes": {
        "script": "if(input.drop_node_input.key !== 'mouse_dragging' || input.drop_node_input.mouse_dragging || !input.drop_node_input.mouse_select_target || !state.graph.nodes.hasownproperty(input.drop_node_input.mouse_select_target)) { return; } const target = state.lib.svg(`#${input.drop_node_input.mouse_select_target}`); return [{op: (state.graph.nodes[input.drop_node_input.mouse_select_target].x ? 'replace' : 'add'), path: ['nodes', input.drop_node_input.mouse_select_target, 'x'], value: target.x()}, {op: (state.graph.nodes[input.drop_node_input.mouse_select_target].y ? 'replace' : 'add'), path: ['nodes', input.drop_node_input.mouse_select_target, 'y'], value: target.y()}];"
      },
      "x": 581.7833251953125,
      "y": 924.2083129882812
    },
    "drop_node_input": {
      "type": "last_updated",
      "x": 638.316650390625,
      "y": 660.2083129882812
    },
    "selected_node_script": {
      "type": "script",
      "nodes": {
        "script": "return input.state_graph?.nodes[input.mouse_select_target]?.nodes?.script ? input.state_graph.nodes[input.mouse_select_target].nodes?.script : input.state_graph"
      },
      "x": 1099.88330078125,
      "y": 474.2083435058594
    },
    "update_selected_content": {
      "type": "script",
      "nodes": {
        "script": "return json.parse(input.selected_node_script)"
      }
    },
    "parse_editor_content_change": {
      "type": "last_updated",
      "x": 1080.49169921875,
      "y": 637.2083129882812
    },
    "parse_editor_content_trigger": {
      "type": "trigger",
      "nodes": {
        "key": [
          "parse_editor_content_change",
          "key"
        ],
        "trigger": [
          "parse_editor_content_change",
          "trigger"
        ]
      },
      "x": 1080.49169921875,
      "y": 637.2083129882812
    }
  }