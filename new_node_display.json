{
    "in": "in",
    "out": "out",
    "nodes": [
        {
            "id": "out",
            "args": [
                "value"
            ],
            "script": "return value;"
        },
        {
            "id": "in"
        },
        {
            "id": "filter",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "keep",
                        "data"
                    ],
                    "script": "return keep ? [data] : []"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "data",
                    "order": 0
                }
            ]
        },
        {
            "id": "delete",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "path"
                    ],
                    "script": "const new_data = Object.assign({}, data); delete new_data[path]; return new_data;"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "order": 1
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "data",
                    "order": 0
                }
            ]
        },
        {
            "id": "default",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "default_value"
                    ],
                    "script": "return data ?? default_value"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "switch",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "input"
                    ],
                    "script": "return data[Object.getOwnPropertyNames(data)[0]];"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "data"
                }
            ]
        },
        {
            "id": "trigger",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "trigger",
                    "args": [
                        "trigger"
                    ],
                    "script": "return trigger ? ['in'] : []"
                },
                {
                    "id": "out",
                    "args": [
                        "data"
                    ],
                    "script": "return data?.data ?? []"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "data"
                },
                {
                    "from": "in",
                    "to": "trigger"
                },
                {
                    "from": "trigger",
                    "to": "out",
                    "type": "inputs"
                }
            ]
        },
        {
            "id": "selected_node",
            "args": [
                "selected",
                "display_graph"
            ],
            "script": "return display_graph.nodes.find(n => n.id === selected[0])"
        },
        {
            "id": "execute_graph",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "args": [
                        "in_node",
                        "out_node",
                        "graph"
                    ],
                    "script": "return (...args) => { res = lib.no.executeGraph({state: new Map([[in_node, args.length > 1 ? [args] : args]]), graph: {...graph, in: in_node, out: out_node}}).get(out_node); return res.length > 1 ? res : res[0]}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "get",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "fill_default",
                    "args": [
                        "input"
                    ],
                    "script": "return input.default ?? null"
                },
                {
                    "id": "out",
                    "args": [
                        "target",
                        "path",
                        "def"
                    ],
                    "script": "return [lib._.get(target, path) ?? def]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                },
                {
                    "from": "in",
                    "to": "fill_default",
                    "as": "input"
                },
                {
                    "from": "fill_default",
                    "to": "out",
                    "as": "def"
                }
            ]
        },
        {
            "id": "set",
            "args": [
                "target",
                "path",
                "value"
            ],
            "script": "return [lib._.set(target, path, value)]"
        },
        {
            "id": "update_and_run",
            "in": "in",
            "out": "out",
            "args": [
                "display_graph",
                "nodes",
                "selected",
                "update_graph_sim",
                "update",
                "payload"
            ],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "calculate_levels",
                    "args": [
                        "selected",
                        "display_graph"
                    ],
                    "script": "return lib.scripts.calculateLevels(display_graph, selected[0])"
                },
                {
                    "id": "levels",
                    "type": "switch"
                },
                {
                    "id": "levels_inputs",
                    "args": [
                        "selected"
                    ],
                    "script": "return ['levels']"
                },
                {
                    "id": "set_levels",
                    "args": [
                        "state",
                        "levels"
                    ],
                    "script": "state.levels = levels ?? state.levels; return state"
                },
                {
                    "id": "graph_sim",
                    "args": [
                        "display_graph",
                        "nodes",
                        "selected",
                        "levels"
                    ],
                    "script": "return lib.scripts.graphToSimulationNodes({display_graph, nodes, selected, levels});"
                },
                {
                    "id": "new_state_cases",
                    "args": [
                        "update_graph_sim"
                    ],
                    "script": "return [graph_sim && 'graph_sim', 'state']"
                },
                {
                    "id": "new_state",
                    "args": [
                        "graph_sim",
                        "state"
                    ],
                    "script": "return Object.assign({}, state, {nodes: graph_sim?.nodes ?? state.nodes, links: graph_sim?.links ?? state.links, levels: graph_sim?.levels ?? state.levels});"
                },
                {
                    "id": "update",
                    "args": [
                        "editing",
                        "display_graph",
                        "update",
                        "selected",
                        "search"
                    ],
                    "script": "return editing !== false || search !== false ? update : !!display_graph || !!selected"
                },
                {
                    "id": "run",
                    "args": [
                        "state",
                        "payload"
                    ],
                    "script": "try { const result = lib.no.executeGraph({state: new Map([[state.display_graph.in, [{...state, payload}]]]), graph: {...state.display_graph, nodes: state.display_graph.nodes.concat([]), edges: state.display_graph.edges.concat([])}}); return {result, error: undefined}; } catch(e) { return {error: e instanceof AggregateError ? e.errors.map(e => e.toString()).join(\" \") : e.toString()} }"
                },
                {
                    "id": "out",
                    "args": [
                        "state",
                        "fx",
                        "update",
                        "result",
                        "error"
                    ],
                    "script": "return [[{...state, result, error}, update && [state.update_sim_effect, state]].concat(fx ?? [])]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "new_state",
                    "as": "state"
                },
                {
                    "from": "in",
                    "to": "out"
                },
                {
                    "from": "in",
                    "to": "run"
                },
                {
                    "from": "in",
                    "to": "update"
                },
                {
                    "from": "in",
                    "to": "calculate_levels"
                },
                {
                    "from": "in",
                    "to": "set_levels",
                    "as": "state"
                },
                {
                    "from": "in",
                    "to": "levels_inputs"
                },
                {
                    "from": "calculate_levels",
                    "to": "levels",
                    "as": "levels"
                },
                {
                    "from": "levels",
                    "to": "set_levels",
                    "as": "levels"
                },
                {
                    "from": "set_levels",
                    "to": "graph_sim"
                },
                {
                    "from": "levels_inputs",
                    "to": "levels",
                    "type": "inputs"
                },
                {
                    "from": "graph_sim",
                    "to": "new_state",
                    "as": "graph_sim"
                },
                {
                    "from": "new_state",
                    "to": "run",
                    "as": "state"
                },
                {
                    "from": "update",
                    "to": "out",
                    "as": "update"
                },
                {
                    "from": "new_state",
                    "to": "out",
                    "as": "state"
                },
                {
                    "from": "run",
                    "to": "out"
                }
            ]
        },
        {
            "id": "h",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "fill_children",
                    "args": [
                        "input"
                    ],
                    "script": "return [ input.children === undefined ? [] : (Array.isArray(input.children) ? input.children.map(c => c.el ?? c) : [input.children.el])]"
                },
                {
                    "id": "fill_props",
                    "args": [
                        "input"
                    ],
                    "script": "return input.props ?? {}"
                },
                {
                    "id": "out",
                    "args": [
                        "props",
                        "children",
                        "input"
                    ],
                    "script": "return {el: lib.ha.h(input.dom_type, props, children)}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "fill_children",
                    "as": "input"
                },
                {
                    "from": "in",
                    "to": "fill_props",
                    "as": "input"
                },
                {
                    "from": "fill_children",
                    "to": "out",
                    "as": "children",
                    "order": 1
                },
                {
                    "from": "fill_props",
                    "to": "out",
                    "as": "props"
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "input"
                }
            ]
        },
        {
            "id": "h_text",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "args": [
                        "text"
                    ],
                    "script": "return {el: lib.ha.text(text)}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "default_node_display",
            "name": "default_node_display",
            "in": "6pqqchhnk",
            "out": "tsxlng4gd",
            "nodes": [
                {
                    "id": "tsxlng4gd",
                    "args": [],
                    "type": "h",
                    "name": "default_node_display"
                },
                {
                    "id": "osgrk7ddu",
                    "args": [],
                    "type": "h_text"
                },
                {
                    "id": "hghirvcml",
                    "args": [],
                    "value": "pre"
                },
                {
                    "id": "ha6b5qttf",
                    "args": [],
                    "script": "return JSON.stringify({node: data.node, result: data.result}, null, 2)"
                },
                {
                    "id": "6pqqchhnk",
                    "args": [],
                    "name": "default_node_display/in"
                }
            ],
            "edges": [
                {
                    "from": "osgrk7ddu",
                    "to": "tsxlng4gd",
                    "as": "children"
                },
                {
                    "from": "hghirvcml",
                    "to": "tsxlng4gd",
                    "as": "dom_type"
                },
                {
                    "from": "ha6b5qttf",
                    "to": "osgrk7ddu",
                    "as": "text"
                },
                {
                    "from": "6pqqchhnk",
                    "to": "ha6b5qttf",
                    "as": "data"
                }
            ]
        },
        {
            "id": "graph_display",
            "name": "graph_display",
            "in": "in",
            "out": "out",
            "nodes": [
                {
                    "id": "out",
                    "type": "h",
                    "name": "graph_display"
                },
                {
                    "id": "ml655hs73",
                    "args": [],
                    "value": "pre"
                },
                {
                    "id": "thsez3hy1",
                    "args": [],
                    "type": "h_text"
                },
                {
                    "id": "stringify",
                    "args": [
                        "data"
                    ],
                    "script": "return JSON.stringify({...data.node, nodes: data.node.nodes.length, edges:data.node.edges.length, result: data.result}, null, 2)"
                },
                {
                    "id": "in"
                }
            ],
            "edges": [
                {
                    "from": "ml655hs73",
                    "to": "out",
                    "as": "dom_type"
                },
                {
                    "from": "thsez3hy1",
                    "to": "out",
                    "as": "children"
                },
                {
                    "from": "stringify",
                    "to": "thsez3hy1",
                    "as": "text"
                },
                {
                    "from": "in",
                    "to": "stringify",
                    "as": "data"
                },
                {
                    "from": "in",
                    "to": "stringify",
                    "as": "data"
                }
            ]
        },
        {
            "id": "number_display",
            "name": "number_display",
            "in": "6pqqchhnk",
            "out": "tsxlng4gd",
            "nodes": [
                {
                    "id": "tsxlng4gd",
                    "args": [],
                    "type": "h",
                    "name": "number_display"
                },
                {
                    "id": "hghirvcml",
                    "args": [],
                    "value": "input"
                },
                {
                    "id": "cd571vftv"
                },
                {
                    "id": "h5xzkeoql",
                    "args": [],
                    "value": {
                        "type": "number"
                    }
                },
                {
                    "id": "ltncqmqe9",
                    "args": [],
                    "type": "get"
                },
                {
                    "id": "9kkegcpi2",
                    "args": [],
                    "type": "execute_graph"
                },
                {
                    "id": "e96vv0gpq",
                    "args": [],
                    "value": "node.value"
                },
                {
                    "id": "tw41k3wzg",
                    "args": [],
                    "type": "get"
                },
                {
                    "id": "u9feks2l9",
                    "args": [],
                    "type": "update_and_run"
                },
                {
                    "id": "6pqqchhnk",
                    "args": [],
                    "name": "number_display/in"
                },
                {
                    "id": "yxaspmy5c",
                    "args": [],
                    "value": "graph"
                },
                {
                    "id": "rhzddw3c6",
                    "args": [],
                    "type": "set"
                },
                {
                    "id": "8jmaa71ct",
                    "args": [],
                    "script": "return arg0 !== arg1;"
                },
                {
                    "id": "w5lqhh9qr",
                    "args": [],
                    "value": "value"
                },
                {
                    "id": "es0e6as0j",
                    "args": [],
                    "type": "get",
                    "name": "get target value"
                },
                {
                    "id": "vnta2m4py",
                    "args": [],
                    "type": "get"
                },
                {
                    "id": "gh99zvhy2",
                    "args": [],
                    "value": "1.target.valueAsNumber",
                    "name": "target valueasnum"
                },
                {
                    "id": "88f3s3qrq",
                    "args": [],
                    "value": "value"
                },
                {
                    "id": "fxbdw1jrr",
                    "args": [],
                    "type": "selected_node"
                },
                {
                    "id": "pkih97fsa",
                    "args": [],
                    "type": "get",
                    "name": "state"
                },
                {
                    "id": "mbbx3d26q",
                    "args": []
                },
                {
                    "id": "vbwsmt7jt",
                    "args": [],
                    "value": 0
                }
            ],
            "edges": [
                {
                    "from": "hghirvcml",
                    "to": "tsxlng4gd",
                    "as": "dom_type"
                },
                {
                    "from": "cd571vftv",
                    "to": "tsxlng4gd",
                    "as": "props"
                },
                {
                    "from": "h5xzkeoql",
                    "to": "cd571vftv"
                },
                {
                    "from": "ltncqmqe9",
                    "to": "cd571vftv",
                    "as": "value"
                },
                {
                    "from": "9kkegcpi2",
                    "to": "cd571vftv",
                    "as": "oninput"
                },
                {
                    "from": "e96vv0gpq",
                    "to": "ltncqmqe9",
                    "as": "path"
                },
                {
                    "from": "tw41k3wzg",
                    "to": "9kkegcpi2",
                    "as": "graph"
                },
                {
                    "from": "u9feks2l9",
                    "to": "9kkegcpi2",
                    "as": "out_node",
                    "type": "ref"
                },
                {
                    "from": "6pqqchhnk",
                    "to": "ltncqmqe9",
                    "as": "target"
                },
                {
                    "from": "6pqqchhnk",
                    "to": "tw41k3wzg",
                    "as": "target"
                },
                {
                    "from": "yxaspmy5c",
                    "to": "tw41k3wzg",
                    "as": "path"
                },
                {
                    "from": "rhzddw3c6",
                    "to": "u9feks2l9",
                    "as": "node"
                },
                {
                    "from": "8jmaa71ct",
                    "to": "u9feks2l9",
                    "as": "update"
                },
                {
                    "from": "w5lqhh9qr",
                    "to": "rhzddw3c6",
                    "as": "path"
                },
                {
                    "from": "es0e6as0j",
                    "to": "rhzddw3c6",
                    "as": "value"
                },
                {
                    "from": "vnta2m4py",
                    "to": "8jmaa71ct",
                    "as": "arg0"
                },
                {
                    "from": "es0e6as0j",
                    "to": "8jmaa71ct",
                    "as": "arg1"
                },
                {
                    "from": "gh99zvhy2",
                    "to": "es0e6as0j",
                    "as": "path"
                },
                {
                    "from": "88f3s3qrq",
                    "to": "vnta2m4py",
                    "as": "path"
                },
                {
                    "from": "fxbdw1jrr",
                    "to": "rhzddw3c6",
                    "as": "target"
                },
                {
                    "from": "fxbdw1jrr",
                    "to": "vnta2m4py",
                    "as": "target"
                },
                {
                    "from": "mbbx3d26q",
                    "to": "pkih97fsa",
                    "as": "target"
                },
                {
                    "from": "mbbx3d26q",
                    "to": "9kkegcpi2",
                    "as": "in_node",
                    "type": "ref"
                },
                {
                    "from": "mbbx3d26q",
                    "to": "es0e6as0j",
                    "as": "target"
                },
                {
                    "from": "pkih97fsa",
                    "to": "u9feks2l9"
                },
                {
                    "from": "pkih97fsa",
                    "to": "fxbdw1jrr"
                },
                {
                    "from": "vbwsmt7jt",
                    "to": "pkih97fsa",
                    "as": "path"
                }
            ]
        },
        {
            "id": "default_error_display",
            "in": "in",
            "out": "out",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "stringify",
                    "args": [
                        "data"
                    ],
                    "script": "const e = data.error; return JSON.stringify({error: e instanceof AggregateError ? e.errors.map(e => e.toString()).join(\" \") : e.toString(), data}, null, 2)"
                },
                {
                    "id": "text",
                    "type": "h_text"
                },
                {
                    "id": "out_dom_type",
                    "value": "pre"
                },
                {
                    "id": "out",
                    "type": "h"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "stringify",
                    "as": "data"
                },
                {
                    "from": "stringify",
                    "to": "text",
                    "as": "text"
                },
                {
                    "from": "text",
                    "to": "out",
                    "as": "children"
                },
                {
                    "from": "out_dom_type",
                    "to": "out",
                    "as": "dom_type"
                }
            ]
        },
        {
            "id": "33etn6ttu",
            "args": [],
            "type": {
                "display_type": "new_node"
            },
            "name": "test_node"
        },
        {
            "id": "array",
            "args": [],
            "script": "return [inputs.flat()]",
            "name": "array"
        },
        {
            "id": "new_node_display",
            "name": "new_node_display",
            "in": "6pqqchhnk",
            "out": "tsxlng4gd",
            "nodes": [
                {
                    "id": "tsxlng4gd",
                    "args": [],
                    "type": "h",
                    "name": "new_node_display"
                },
                {
                    "id": "hghirvcml",
                    "args": [],
                    "value": "div"
                },
                {
                    "id": "jxsn4m6r8",
                    "args": [],
                    "type": "array"
                },
                {
                    "id": "osgrk7ddu",
                    "args": [],
                    "type": "h_text"
                },
                {
                    "id": "t6j7fwptd",
                    "name": "id",
                    "in": "in",
                    "out": "t6j7fwptd",
                    "nodes": [
                        {
                            "id": "t6j7fwptd",
                            "args": [],
                            "type": "h",
                            "name": "id"
                        },
                        {
                            "id": "hoikpxywl",
                            "args": [],
                            "type": "h_text"
                        },
                        {
                            "id": "dx98gmidm",
                            "args": [],
                            "value": "h3"
                        },
                        {
                            "id": "oxovfyo3l",
                            "args": [],
                            "type": "get",
                            "name": "get_id"
                        },
                        {
                            "id": "2iryetx35",
                            "args": [],
                            "value": "id"
                        },
                        {
                            "id": "in",
                            "name": "id/in"
                        }
                    ],
                    "edges": [
                        {
                            "from": "hoikpxywl",
                            "to": "t6j7fwptd",
                            "as": "children"
                        },
                        {
                            "from": "dx98gmidm",
                            "to": "t6j7fwptd",
                            "as": "dom_type"
                        },
                        {
                            "from": "oxovfyo3l",
                            "to": "hoikpxywl",
                            "as": "text"
                        },
                        {
                            "from": "2iryetx35",
                            "to": "oxovfyo3l",
                            "as": "path"
                        },
                        {
                            "from": "in",
                            "to": "oxovfyo3l"
                        }
                    ]
                },
                {
                    "id": "ecm6fh5hf",
                    "args": [],
                    "type": "h",
                    "name": "type dropdown"
                },
                {
                    "id": "ha6b5qttf",
                    "args": [],
                    "script": "return JSON.stringify({node: data.node, result: data.result}, null, 2)"
                },
                {
                    "id": "f1ppsgo9r",
                    "name": "get_node",
                    "in": "in",
                    "out": "f1ppsgo9r",
                    "nodes": [
                        {
                            "id": "f1ppsgo9r",
                            "args": [],
                            "name": "get_node",
                            "type": "get"
                        },
                        {
                            "id": "sm952xr2a",
                            "args": [],
                            "value": "node"
                        },
                        {
                            "id": "in",
                            "name": "get_node/in"
                        }
                    ],
                    "edges": [
                        {
                            "from": "sm952xr2a",
                            "to": "f1ppsgo9r",
                            "as": "path"
                        },
                        {
                            "from": "in",
                            "to": "f1ppsgo9r"
                        }
                    ]
                },
                {
                    "id": "4tsp8ccu9",
                    "args": [],
                    "value": "div"
                },
                {
                    "id": "nvsdm2e97/nvsdm2e97",
                    "args": [],
                    "type": "array",
                    "name": "nvsdm2e97"
                },
                {
                    "id": "6pqqchhnk",
                    "args": [],
                    "name": "new_node_display/in"
                },
                {
                    "id": "nvsdm2e97/yvslv7nej",
                    "name": "label",
                    "out": "yvslv7nej",
                    "nodes": [
                        {
                            "id": "yvslv7nej",
                            "args": [],
                            "type": "h",
                            "name": "label"
                        },
                        {
                            "id": "palgrd55s",
                            "args": [],
                            "value": "label"
                        },
                        {
                            "id": "crqu3vil2",
                            "name": "type:",
                            "out": "crqu3vil2",
                            "nodes": [
                                {
                                    "id": "crqu3vil2",
                                    "args": [],
                                    "type": "h_text"
                                },
                                {
                                    "id": "nvd630tw2",
                                    "args": [],
                                    "value": "Type:"
                                }
                            ],
                            "edges": [
                                {
                                    "from": "nvd630tw2",
                                    "to": "crqu3vil2",
                                    "as": "text"
                                }
                            ]
                        },
                        {
                            "id": "0ja8pws18",
                            "args": []
                        },
                        {
                            "id": "ehxzo76yn",
                            "args": [],
                            "value": "node_type"
                        }
                    ],
                    "edges": [
                        {
                            "from": "palgrd55s",
                            "to": "yvslv7nej",
                            "as": "dom_type"
                        },
                        {
                            "from": "crqu3vil2",
                            "to": "yvslv7nej",
                            "as": "children"
                        },
                        {
                            "from": "0ja8pws18",
                            "to": "yvslv7nej",
                            "as": "props"
                        },
                        {
                            "from": "ehxzo76yn",
                            "to": "0ja8pws18",
                            "as": "for"
                        }
                    ]
                },
                {
                    "id": "dxyl3qoof",
                    "name": "h",
                    "out": "dxyl3qoof",
                    "nodes": [
                        {
                            "id": "dxyl3qoof",
                            "args": [],
                            "name": "h",
                            "type": "h"
                        },
                        {
                            "id": "smnfevveu",
                            "args": [],
                            "value": "input"
                        },
                        {
                            "id": "ixpeat346",
                            "args": []
                        },
                        {
                            "id": "c1e03ehqr",
                            "args": [],
                            "value": "node_type"
                        },
                        {
                            "id": "7c6auch8e",
                            "args": [],
                            "value": "node_types"
                        }
                    ],
                    "edges": [
                        {
                            "from": "smnfevveu",
                            "to": "dxyl3qoof",
                            "as": "dom_type"
                        },
                        {
                            "from": "ixpeat346",
                            "to": "dxyl3qoof",
                            "as": "arg1"
                        },
                        {
                            "from": "c1e03ehqr",
                            "to": "ixpeat346",
                            "as": "id"
                        },
                        {
                            "from": "7c6auch8e",
                            "to": "ixpeat346",
                            "as": "list"
                        }
                    ]
                },
                {
                    "id": "b89ieqqzc",
                    "args": [],
                    "type": "h"
                },
                {
                    "id": "w11f3eqmy",
                    "args": [],
                    "value": "datalist"
                }
            ],
            "edges": [
                {
                    "from": "hghirvcml",
                    "to": "tsxlng4gd",
                    "as": "dom_type"
                },
                {
                    "from": "jxsn4m6r8",
                    "to": "tsxlng4gd",
                    "as": "children"
                },
                {
                    "from": "osgrk7ddu",
                    "to": "jxsn4m6r8",
                    "as": "arg0"
                },
                {
                    "from": "t6j7fwptd",
                    "to": "jxsn4m6r8",
                    "as": "arg1"
                },
                {
                    "from": "ecm6fh5hf",
                    "to": "jxsn4m6r8",
                    "as": "arg2"
                },
                {
                    "from": "ha6b5qttf",
                    "to": "osgrk7ddu",
                    "as": "text"
                },
                {
                    "from": "f1ppsgo9r",
                    "to": "t6j7fwptd",
                    "as": "target"
                },
                {
                    "from": "4tsp8ccu9",
                    "to": "ecm6fh5hf",
                    "as": "dom_type"
                },
                {
                    "from": "nvsdm2e97/nvsdm2e97",
                    "to": "ecm6fh5hf",
                    "as": "children"
                },
                {
                    "from": "6pqqchhnk",
                    "to": "ha6b5qttf",
                    "as": "data"
                },
                {
                    "from": "6pqqchhnk",
                    "to": "f1ppsgo9r",
                    "as": "target"
                },
                {
                    "from": "nvsdm2e97/yvslv7nej",
                    "to": "nvsdm2e97/nvsdm2e97",
                    "as": "label"
                },
                {
                    "from": "dxyl3qoof",
                    "to": "nvsdm2e97/nvsdm2e97",
                    "as": "input"
                },
                {
                    "from": "b89ieqqzc",
                    "to": "nvsdm2e97/nvsdm2e97",
                    "as": "datalist"
                },
                {
                    "from": "w11f3eqmy",
                    "to": "b89ieqqzc",
                    "as": "dom_type"
                }
            ]
        },
        {
            "id": "kib9t8lya",
            "args": [],
            "type": "get"
        },
        {
            "id": "viejp5lm1",
            "args": [],
            "value": "display_graph"
        },
        {
            "id": "fdm4tpygd",
            "args": [],
            "script": "localStorage.setItem(key, data);"
        },
        {
            "id": "zv29xa8m9",
            "args": [],
            "value": "new_node_display"
        },
        {
            "id": "yt4vy03pr",
            "args": [],
            "script": "return JSON.stringify(data);"
        },
        {
            "id": "lq762w147",
            "args": []
        },
        {
            "id": "vlmz9podk",
            "args": [],
            "value": "[['save']]"
        }
    ],
    "edges": [
        {
            "from": "in",
            "to": "kib9t8lya",
            "as": "target"
        },
        {
            "from": "viejp5lm1",
            "to": "kib9t8lya",
            "as": "path"
        },
        {
            "from": "33etn6ttu",
            "to": "out"
        },
        {
            "from": "fdm4tpygd",
            "to": "out",
            "as": "save"
        },
        {
            "from": "zv29xa8m9",
            "to": "fdm4tpygd",
            "as": "key"
        },
        {
            "from": "kib9t8lya",
            "to": "yt4vy03pr",
            "as": "data"
        },
        {
            "from": "yt4vy03pr",
            "to": "fdm4tpygd",
            "as": "data"
        },
        {
            "from": "lq762w147",
            "to": "out",
            "as": "load"
        },
        {
            "from": "vlmz9podk",
            "to": "out",
            "as": "arg3"
        },
        {
            "from": "kib9t8lya",
            "to": "lq762w147",
            "as": "graph"
        }
    ]
}