{
    "description": "function composition",
    "nodes": [
        {
            "id": "in",
            "value": null
        },
        {
            "id": "execute_graph",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "args": [
                        "in_node",
                        "out_node",
                        "graph"
                    ],
                    "script": "return (...args) => (lib.no.executeGraph(new Map([[in_node, args]]), {nodes: graph.nodes.concat([]), edges: graph.edges.concat([])}, out_node))"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "get",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "args": [
                        "target",
                        "path"
                    ],
                    "script": "return lib._.get(target, path)"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "h",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "args": [
                        "props",
                        "children",
                        "dom_type"
                    ],
                    "script": "return {el: lib.ha.h(dom_type, props, children)}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "h_text",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "args": [
                        "text"
                    ],
                    "script": "return {el: lib.ha.text(text)}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "not",
            "args": ["target"],
            "script": "return !target"
        },
        {
            "id": "log",
            "type": "log"
        },
        {
            "id": "debug",
            "type": "debug"
        },
        {
            "id": "data",
            "value": "data"
        },
        {
            "id": "graph",
            "value": "graph"
        },
        {
            "id": "nodes",
            "value": "nodes"
        },
        {
            "id": "graph_nodes",
            "value": [
                [
                    "graph",
                    "nodes"
                ]
            ]
        },
        {
            "id": "get_display_graph",
            "type": "get"
        },
        {
            "id": "initial_state",
            "value": {
                "nodes": [],
                "links": [],
                "selected": []
            }
        },
        {
            "id": "get_graph",
            "type": "get"
        },
        {
            "id": "hyperapp_view",
            "type": "execute_graph"
        },
        {
            "id": "hyperapp",
            "args": [
                "init",
                "view",
                "subscriptions"
            ],
            "script": "return lib.ha.app({init, view: s => view(s)[0].el, node: document.getElementById('node-editor'), subscriptions: () => subscriptions})"
        },
        {
            "id": "hyperapp_view_in",
            "value": "hyperapp_view_in"
        },
        {
            "id": "hyperapp_subscriptions",
            "args": [
                "simulation"
            ],
            "script": "return [[[lib.scripts.d3subscription(simulation)]]]"
        },
        {
            "id": "graph_to_simulation",
            "args": [
                "nodes",
                "graph",
                "links",
                "selected"
            ],
            "script": "return lib.scripts.graphToSimulationNodes({graph, nodes, links, selected})"
        },
        {
            "id": "update_nodes",
            "args": [
                "simulation",
                "nodes",
                "graph",
                "links"
            ],
            "script": "return lib.scripts.updateSimulationNodes({graph, simulation, nodes, links})"
        },
        {
            "id": "d3simulation",
            "args": [],
            "script": "return lib.scripts.d3simulation()"
        },
        {
            "id": "onclick_fn_in",
            "value": null
        },
        {
            "id": "onclick_fn_body",
            "nodes": [
                {"id": "in", "value": null},
                {"id": "get_first", "args": ["args"], "script": "return args[0]"},
                {"id": "merge_args", "args": ["args"], "script": "return Object.assign({}, args[0], {x: args[1].x, y: args[1].y, node_id: args[1].node_id})"},
                {"id": "select","args": ["selected", "node_id"], "script": "return [selected.includes(node_id) ? selected.filter(n => n !== node_id) : selected.concat([node_id])]"},
                {"id": "out", "args": ["input", "selected"],  "script":"return {...input, selected}" }
            ],
            "edges": [
                {"from": "in", "to": "merge_args", "as": "args", "type": "concat"},
                {"from": "merge_args", "to": "select"},
                {"from": "in", "to": "get_first", "as": "args", "type": "concat"},
                {"from": "get_first", "to": "out", "as": "input"},
                {"from": "select", "to": "out", "as": "selected"}
            ]
        },
        {
            "id": "onclick_fn",
            "type": "execute_graph"
        },
        {
            "id": "node_editor",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "type": "h"
                },
                {
                    "id": "get_nodes",
                    "args": [
                        "nodes"
                    ],
                    "script": "return nodes"
                },
                {
                    "id": "get_links",
                    "args": [
                        "links"
                    ],
                    "script": "return links"
                },
                {
                    "id": "get_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected"
                },
                {
                    "id": "get_onclick_fn",
                    "args": [
                        "onclick_fn"
                    ],
                    "script": "return onclick_fn"
                },
                {
                    "id": "node_editor_props",
                    "args": [],
                    "script": "return {width: window.innerWidth, height: window.innerHeight}"
                },
                {
                    "id": "node_editor_dom_type",
                    "value": "svg"
                },
                {
                    "id": "node_editor_children",
                    "args": [
                        "nodes",
                        "links"
                    ],
                    "script": "return [nodes.map(c => c.el).concat(links.map(l => l.el))]"
                },
                {
                    "id": "node_layout",
                    "nodes": [
                        {
                            "id": "in",
                            "value": null
                        },
                        {
                            "id": "get_node",
                            "args": ["node"],
                            "script": "return node"
                        },
                        {
                            "id": "is_selected",
                            "args": ["selected", "node_id"],
                            "script": "return selected.includes(node_id)"
                        },
                        {
                            "id": "out"
                        },
                        {
                            "id": "parent",
                            "type": "h"
                        },
                        {
                            "id": "parent_dom_type",
                            "value": "svg"
                        },
                        {
                            "id": "parent_attrs",
                            "args": [
                                "node_id",
                                "x",
                                "y",
                                "onclick_fn"
                            ],
                            "script": "return ({ x: x - 20, y: y - 20, id: node_id, onclick: (_, payload) => [onclick_fn, {x: payload.x, y: payload.y, node_id, selected: []}], width: 256, height: 64})"
                        },
                        {
                            "id": "children",
                            "nodes": [
                                {
                                    "id": "in",
                                    "value": null
                                },
                                {
                                    "id": "circle_attrs",
                                    "args": ["selected"],
                                    "script": "return ({r: 16, cx: 20, cy: 20, fill: selected ? 'red' : 'blue'})"
                                },
                                {
                                    "id": "default_color",
                                    "value": "blue"
                                },
                                {
                                    "id": "empty_array",
                                    "value": [[]]
                                },
                                {
                                    "id": "circle",
                                    "value": "circle"
                                },
                                {
                                    "id": "node_circle",
                                    "type": "h"
                                },
                                {
                                    "id": "text",
                                    "nodes": [
                                        {
                                            "id": "in",
                                            "value": null
                                        },
                                        {
                                            "id": "out"
                                        },
                                        {
                                            "id": "node_id",
                                            "value": "node_id"
                                        },
                                        {
                                            "id": "get_id",
                                            "type": "get"
                                        },
                                        {
                                            "id": "shorten",
                                            "args": ["text"],
                                            "script": "return text.substring(text.lastIndexOf('/') + 1)"
                                        },
                                        {
                                            "id": "display_name",
                                            "type": "h_text"
                                        },
                                        {
                                            "id": "children_els",
                                            "args": ["el"],
                                            "script": "return [el]"
                                        },
                                        {
                                            "id": "node_text",
                                            "type": "h"
                                        },
                                        {
                                            "id": "node_text_props",
                                            "value": {
                                                "x": 42,
                                                "y": 22,
                                                "font-size": 18
                                            }
                                        },
                                        {
                                            "id": "text",
                                            "value": "text"
                                        }
                                    ],
                                    "edges": [
                                        {
                                            "from": "in",
                                            "to": "get_id",
                                            "as": "target"
                                        },
                                        {
                                            "from": "node_id",
                                            "to": "get_id",
                                            "as": "path"
                                        },
                                        {
                                            "from": "get_id",
                                            "to": "shorten",
                                            "as": "text"
                                        },
                                        {
                                            "from": "text",
                                            "to": "node_text",
                                            "as": "dom_type"
                                        },
                                        {
                                            "from": "node_text_props",
                                            "to": "node_text",
                                            "as": "props"
                                        },
                                        {
                                            "from": "shorten",
                                            "to": "display_name",
                                            "as": "text"
                                        },
                                        {
                                            "from": "display_name",
                                            "to": "children_els"
                                        },
                                        {
                                            "from": "children_els",
                                            "to": "node_text",
                                            "as": "children"
                                        },
                                        {
                                            "from": "node_text",
                                            "to": "out"
                                        }
                                    ]
                                },
                                {
                                    "id": "order",
                                    "args": [
                                        "circle",
                                        "text"
                                    ],
                                    "script": "return [[circle, text]]"
                                },
                                {
                                    "id": "children_els",
                                    "args": ["children"],
                                    "script": "return [children.map(c => c.el)]"
                                },
                                {
                                    "id": "out"
                                }
                            ],
                            "edges": [
                                {
                                    "from": "in",
                                    "to": "circle_attrs"
                                },
                                {
                                    "from": "default_color",
                                    "to": "circle_attrs",
                                    "as": "color"
                                },
                                {
                                    "from": "empty_array",
                                    "to": "node_circle",
                                    "as": "children"
                                },
                                {
                                    "from": "circle",
                                    "to": "node_circle",
                                    "as": "dom_type"
                                },
                                {
                                    "from": "in",
                                    "to": "text"
                                },
                                {
                                    "from": "circle_attrs",
                                    "to": "node_circle",
                                    "as": "props"
                                },
                                {
                                    "from": "node_circle",
                                    "to": "order",
                                    "as": "circle"
                                },
                                {
                                    "from": "text",
                                    "to": "order",
                                    "as": "text"
                                },
                                {
                                    "from": "order",
                                    "to": "children_els",
                                    "as": "children"
                                },
                                {
                                    "from": "children_els",
                                    "to": "out",
                                    "as": "children"
                                }
                            ]
                        }
                    ],
                    "edges": [
                        {"from": "in", "to": "get_node"},
                        {"from": "in", "to": "is_selected"},
                        {"from": "in", "to": "parent_attrs"},
                        {"from": "get_node", "to": "children"},
                        {"from": "get_node", "to": "is_selected"},
                        {"from": "is_selected", "to": "children", "as": "selected"},
                        {"from": "children", "to": "parent"},
                        {"from": "parent_attrs", "to": "parent", "as": "props"},
                        {"from": "parent_dom_type", "to": "parent", "as": "dom_type"},
                        {"from": "get_node", "to": "parent_attrs"},
                        {"from": "parent", "to": "out"}
                    ]
                },
                {
                    "id": "link_layout",
                    "nodes": [
                        {
                            "id": "in",
                            "value": null
                        },
                        {
                            "id": "get_link",
                            "args": ["link"],
                            "script": "return link"
                        },
                        {
                            "id": "attrs",
                            "args": ["source", "target"],
                            "script": "return ({x1: source.x, y1: source.y, x2: target.x, y2: target.y, stroke: 'black'})"
                        },
                        {
                            "id": "line_dom_type",
                            "value": "line"
                        },
                        {
                            "id": "empty_array",
                            "value": [[]]
                        },
                        {
                            "id": "line",
                            "type": "h"
                        },
                        {
                            "id": "out"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "get_link"
                        },
                        {
                            "from": "get_link",
                            "to": "attrs"
                        },
                        {
                            "from": "attrs",
                            "to": "line",
                            "as": "props"
                        },
                        {
                            "from": "line_dom_type",
                            "to": "line",
                            "as": "dom_type"
                        },
                        {
                            "from": "empty_array",
                            "to": "line",
                            "as": "children"
                        },
                        {
                            "from": "line",
                            "to": "out"
                        }
                    ]
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "get_nodes"
                },
                {
                    "from": "in",
                    "to": "get_links"
                },
                {
                    "from": "in",
                    "to": "get_selected"
                },
                {
                    "from": "in",
                    "to": "get_onclick_fn"
                },
                {
                    "from": "get_nodes",
                    "to": "node_layout",
                    "as": "node"
                },
                {
                    "from": "get_onclick_fn",
                    "to": "node_layout",
                    "as": "onclick_fn"
                },
                {
                    "from": "get_selected",
                    "to": "node_layout",
                    "as": "selected",
                    "type": "concat"
                },
                {
                    "from": "get_links",
                    "to": "link_layout",
                    "as": "link"
                },
                {
                    "from": "node_editor_props",
                    "to": "out",
                    "as": "props"
                },
                {
                    "from": "node_editor_dom_type",
                    "to": "out",
                    "as": "dom_type"
                },
                {
                    "from": "node_layout",
                    "to": "node_editor_children",
                    "as": "nodes",
                    "type": "concat"
                },
                {
                    "from": "link_layout",
                    "to": "node_editor_children",
                    "as": "links",
                    "type": "concat"
                },
                {
                    "from": "node_editor_children",
                    "to": "out",
                    "as": "children"
                }
            ]
        }
    ],
    "edges": [
        {
            "from": "in",
            "to": "get_graph",
            "as": "target"
        },
        {
            "from": "graph",
            "to": "get_graph",
            "as": "path"
        },
        {
            "from": "hyperapp_view_in",
            "to": "hyperapp_view",
            "as": "in_node"
        },
        {
            "from": "node_editor",
            "to": "hyperapp_view",
            "type": "ref",
            "as": "out_node"
        },
        {
            "from": "hyperapp_view_in",
            "to": "onclick_fn"
        },
        {
            "from": "onclick_fn",
            "to": "node_editor",
            "as": "onclick_fn"
        },
        {
            "from": "onclick_fn_body",
            "to": "onclick_fn",
            "as": "out_node",
            "type": "ref"
        },
        {
            "from": "onclick_fn_in",
            "to": "onclick_fn_body"
        },
        {
            "from": "onclick_fn_in",
            "to": "onclick_fn",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "hyperapp_view",
            "to": "hyperapp",
            "as": "view"
        },
        {
            "from": "graph_to_simulation",
            "to": "hyperapp",
            "as": "init"
        },
        {
            "from": "get_graph",
            "to": "hyperapp_view",
            "as": "graph"
        },
        {
            "from": "hyperapp_view_in",
            "to": "node_editor"
        },
        {
            "from": "get_graph",
            "to": "update_nodes",
            "as": "graph"
        },
        {
            "from": "get_graph",
            "to": "graph_to_simulation",
            "as": "graph"
        },
        {
            "from": "initial_state",
            "to": "graph_to_simulation"
        },
        {
            "from": "d3simulation",
            "to": "update_nodes"
        },
        {
            "from": "graph_to_simulation",
            "to": "update_nodes"
        },
        {
            "from": "update_nodes",
            "to": "hyperapp"
        },
        {
            "from": "d3simulation",
            "to": "hyperapp_subscriptions"
        },
        {
            "from": "hyperapp_subscriptions",
            "to": "hyperapp",
            "as": "subscriptions"
        }
    ]
}