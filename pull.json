{
    "out": "out",
    "nodes": [
        {
            "id": "in"
        },
        {"id": "array"},
        {"id": "utility"},
        {"id": "flow"},
        {"id": "hyperapp"},
        {"id": "object"},
        {
            "id": "log",
            "args": ["value"],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "value",
                    "ref": "arg",
                    "value": "value"
                },
                {
                    "id": "out",
                    "args": [],
                    "script": "console.log(_node.id); console.log(value); return value"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "input"
                },
                {
                    "from": "value",
                    "to": "out",
                    "as": "value"
                }
            ]
        },
        {
        "id": "text_display",
        "name": "text_display",
        "in": "6pqqchhnk",
        "out": "tsxlng4gd",
        "nodes": [
            {
                "id": "tsxlng4gd",
                "ref": "h",
                "name": "text_display/out"
            },
            {
                "id": "osgrk7ddu",
                "ref": "h_text"
            },
            {
                "id": "wrap_array_text",
                "ref": "wrap_array"
            },
            {
                "id": "hghirvcml",
                "value": "pre"
            },
            {
                "id": "ha6b5qttf",
                "args": ["data"],
                "script": "return JSON.stringify(data.result, null, 2);"
            },
            {
                "id": "6pqqchhnk",
                "name": "text_display/in"
            }
        ],
        "edges": [
            {
                "from": "wrap_array",
                "to": "tsxlng4gd",
                "as": "children"
            },
            {
                "from": "hghirvcml",
                "to": "tsxlng4gd",
                "as": "dom_type"
            },
            {
                "from": "osgrk7ddu",
                "to": "wrap_array_text",
                "as": "value"
            },
            {
                "from": "ha6b5qttf",
                "to": "osgrk7ddu",
                "as": "text"
            },
            {
                "from": "6pqqchhnk",
                "to": "ha6b5qttf",
                "as": "data"
            }
        ]
    },
    {
        "id": "wrap_array",
        "args": ["value"],
        "script": "return [value]"
    },{
        "id": "graph_to_sim_fn",
        "out": "action",
        "nodes": [
            {
                "id": "state",
                "ref": "arg",
                "value": 0
            },
            {
                "id": "payload",
                "ref": "arg",
                "value": 1
            },
            {
                "id": "action",
                "script": "return _lib.scripts.graphToSimulationNodes(state, payload)"
            }
        ],
        "edges": [
            {"from": "state", "to": "action", "as": "state"},
            {"from": "payload", "to": "action", "as": "payload"}
        ]
    },
    {
        "id": "sim_to_hyperapp_action",
        "out": "action",
        "nodes": [
            {
                "id": "state",
                "ref": "arg",
                "value": 0
            },
            {
                "id": "old_nodes",
                "ref": "arg",
                "value": "0.nodes"
            },
            {
                "id": "old_links",
                "ref": "arg",
                "value": "0.links"
            },
            {
                "id": "new_nodes",
                "ref": "arg",
                "value": "1.nodes"
            },
            {
                "id": "new_links",
                "ref": "arg",
                "value": "1.links"
            },
            {
                "id": "selected",
                "ref": "arg",
                "value": "0.selected"
            },
            {
                "id": "display_graph",
                "ref": "arg",
                "value": "0.display_graph"
            },
            {
                "id": "payload",
                "ref": "arg",
                "value": 1
            },
            {
                "id": "calculate_levels",
                "args": [
                    "selected",
                    "display_graph",
                    "fixed_vertices"
                ],
                "script": "return _lib.scripts.calculateLevels(nodes, links, display_graph, selected)"
            },
            {
                "id": "with_levels",
                "script": "return {...state, levels}"
            },
            {
                "id": "graph_topology_change",
                "script": "return !old_nodes || !old_links || old_nodes.length !== new_nodes.length || old_links.length !== new_links.length"
            },
            {
                "id": "if_levels",
                "ref": "if"
            },
            {
                "id": "action",
                "script": "return {...state, nodes: new_nodes, links: new_links, randid: Math.random().toString(36).substring(2, 9)}"
            }
        ],
        "edges": [
            {"from": "old_nodes", "to": "graph_topology_change", "as": "old_nodes"},
            {"from": "new_nodes", "to": "graph_topology_change", "as": "new_nodes"},
            {"from": "new_links", "to": "graph_topology_change", "as": "new_links"},
            {"from": "old_links", "to": "graph_topology_change", "as": "old_links"},
            {"from": "new_nodes", "to": "calculate_levels", "as": "nodes"},
            {"from": "new_links", "to": "calculate_levels", "as": "links"},
            {"from": "selected", "to": "calculate_levels", "as": "selected"},
            {"from": "display_graph", "to": "calculate_levels", "as": "display_graph"},
            {"from": "calculate_levels", "to": "with_levels", "as": "levels"},
            {"from": "state", "to": "with_levels", "as": "state"},
            {"from": "graph_topology_change", "to": "if_levels", "as": "pred"},
            {"from": "with_levels", "to": "if_levels", "as": "true"},
            {"from": "state", "to": "if_levels", "as": "false"},
            {"from": "new_nodes", "to": "action", "as": "new_nodes"},
            {"from": "new_links", "to": "action", "as": "new_links"},
            {"from": "if_levels", "to": "action", "as": "state"}
        ]
    },
        {
            "id": "hyperapp_app",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "init",
                    "ref": "get"
                },
                {
                    "id": "init_key",
                    "value": "init"
                },
                {
                    "id": "view",
                    "ref": "arg",
                    "value": "view"
                },
                {
                    "id": "html_id",
                    "ref": "arg",
                    "value": "html_id"
                },
                {
                    "id": "update_hyperapp",
                    "ref": "arg",
                    "value": "update_hyperapp"
                },
                {
                    "id": "update_sim",
                    "ref": "arg",
                    "value": "update_sim"
                },
                {
                    "id": "sim_to_hyperapp_action",
                    "ref": "arg",
                    "value": "sim_to_hyperapp_action"
                },
                {
                    "id": "render_graph_effect",
                    "ref": "arg",
                    "value": "render_graph_effect"
                },
                {
                    "id": "onkey_fn",
                    "ref": "arg",
                    "value": "onkey_fn"
                },
                {
                    "id": "out",
                    "args": [
                        "init",
                        "view"
                    ],
                    "script": "return {dispatch: _lib.ha.app({dispatch: _lib.no.middleware, init: () => [init, [d => d(update_hyperapp)]], view: s => {if(s instanceof Map){ throw new Error('stop') } return view(s).el}, node: document.getElementById(html_id), subscriptions: s => [[_lib.scripts.d3subscription, {action: sim_to_hyperapp_action, update: update_sim}],  !s.popover_graph && [_lib.scripts.keydownSubscription, {action: onkey_fn}], _lib.scripts.listen('resize', (s, _) => [{...s, dimensions: {x: window.innerWidth, y: window.innerHeight}}, [update_sim, s]])]})}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "resolve_init"
                },
                {
                    "from": "in",
                    "to": "init",
                    "as": "target"
                },
                {
                    "from": "init_key",
                    "to": "init",
                    "as": "path"
                },
                {
                    "from": "init",
                    "to": "resolve_init",
                    "as": "init"
                },
                {
                    "from": "view",
                    "to": "out",
                    "as": "view"
                },
                {
                    "from": "html_id",
                    "to": "out",
                    "as": "html_id"
                },
                {
                    "from": "update_sim",
                    "to": "out",
                    "as": "update_sim"
                },
                {
                    "from": "update_hyperapp",
                    "to": "out",
                    "as": "update_hyperapp"
                },
                {
                    "from": "sim_to_hyperapp_action",
                    "to": "out",
                    "as": "sim_to_hyperapp_action"
                },
                {
                    "from": "onkey_fn",
                    "to": "out",
                    "as": "onkey_fn"
                },
                {
                    "from": "render_graph_effect",
                    "to": "out",
                    "as": "render_graph_effect"
                },
                {
                    "from": "init",
                    "to": "out",
                    "as": "init"
                }
            ]
        },
        {
            "id": "children_els",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "children"
                    ],
                    "script": "return [children.map(c => c.el)]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "append",
            "type": "(array: A[], item: A | A[]) => A[]",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "item",
                        "array"
                    ],
                    "script": "return array.concat(Array.isArray(item) ? item : [item])"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "filter",
            "name": "filter",
            "in": "74n1jfm",
            "out": "lahq5z4",
            "nodes": [
                {
                "id": "lahq5z4",
                "args": [],
                "name": "filter/out",
                "script": "const filter_fn = _lib.no.executeGraphNode({graph: _graph})(fn); return arr.filter(filter_fn)"
                },
                {
                "id": "pfoypo5",
                "args": [],
                "ref": "arg",
                "value": "key"
                },
                {
                "id": "zinx621",
                "args": [],
                "ref": "arg",
                "value": "value"
                },
                {
                "id": "x2sz5kb",
                "args": [],
                "ref": "arg",
                "value": "arr"
                },
                {
                "id": "fn",
                "ref": "arg",
                "value": "fn"
                },
                {
                "id": "74n1jfm",
                "args": [],
                "name": "filter/in"
                }
            ],
            "edges": [
                {
                "from": "pfoypo5",
                "to": "lahq5z4",
                "as": "key"
                },
                {
                "from": "zinx621",
                "to": "lahq5z4",
                "as": "value"
                },
                {
                "from": "x2sz5kb",
                "to": "lahq5z4",
                "as": "arr"
                },
                {
                "from": "74n1jfm",
                "to": "lahq5z4",
                "as": "input"
                },
                {
                "from": "fn",
                "to": "lahq5z4",
                "as": "fn"
                }
            ]
        },
        {
            "id": "filter_eq",
            "name": "filter_eq",
            "in": "74n1jfm",
            "out": "lahq5z4",
            "nodes": [
                {
                "id": "lahq5z4",
                "args": [],
                "name": "filter/out",
                "script": "return arr.filter(v => v[key] === value)"
                },
                {
                "id": "pfoypo5",
                "args": [],
                "ref": "arg",
                "value": "key"
                },
                {
                "id": "zinx621",
                "args": [],
                "ref": "arg",
                "value": "value"
                },
                {
                "id": "x2sz5kb",
                "args": [],
                "ref": "arg",
                "value": "arr"
                },
                {
                "id": "74n1jfm",
                "args": [],
                "name": "filter/in"
                }
            ],
            "edges": [
                {
                "from": "pfoypo5",
                "to": "lahq5z4",
                "as": "key"
                },
                {
                "from": "zinx621",
                "to": "lahq5z4",
                "as": "value"
                },
                {
                "from": "x2sz5kb",
                "to": "lahq5z4",
                "as": "arr"
                },
                {
                "from": "74n1jfm",
                "to": "lahq5z4",
                "as": "input"
                }
            ]
        },
        {
            "id": "default",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "default_value"
                    ],
                    "script": "return data ?? default_value"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "switch",
            "args": ["data", "input"],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "input"
                    ],
                    "script": "return data[input];"
                },
                {
                    "id": "input",
                    "ref": "arg",
                    "value": "input"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "data"
                },
                {
                    "from": "input",
                    "to": "out",
                    "as": "input"
                }
            ]
        },
        {
            "id": "if",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "pred",
                    "ref": "arg",
                    "value": "pred"
                },
                {
                    "id": "out",
                    "script": "return pred ? data['true'] : data['false']"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "data"
                },
                {
                    "from": "pred",
                    "to": "out",
                    "as": "pred"
                }
            ]
        },
        {
            "id": "selected_node",
            "args": [
                "selected",
                "display_graph"
            ],
            "script": "return display_graph.nodes.find(n => n.id === selected)"
        },
        {
            "id": "svg_text",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "el",
                    "ref": "h"
                },
                {
                    "id": "dom_type",
                    "value": "text"
                },
                {
                    "id": "text_el",
                    "ref": "h_text"
                },
                {
                    "id": "children",
                    "args": [
                        "text"
                    ],
                    "script": "return [text.el]"
                },
                {
                    "id": "out"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "text_el"
                },
                {
                    "from": "in",
                    "to": "el"
                },
                {
                    "from": "dom_type",
                    "to": "el",
                    "as": "dom_type"
                },
                {
                    "from": "text_el",
                    "to": "children",
                    "as": "text"
                },
                {
                    "from": "children",
                    "to": "el",
                    "as": "children"
                },
                {
                    "from": "el",
                    "to": "out"
                }
            ]
        },
        {
            "id": "execute_graph",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "fn",
                    "ref": "arg",
                    "value": "fn"
                },
                {
                    "id": "graph",
                    "ref": "arg",
                    "value": "graph"
                },
                {
                    "id": "out",
                    "script": "return (...args) => {res = _lib.no.executeGraphNode({graph})(fn)(args.length === 1 ? args[0] : args); return res;}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "args"
                },
                {"from": "fn", "to": "out", "as": "fn"},
                {"from": "graph", "to": "out", "as": "graph"}
            ]
        },
        {
            "id": "resolve",
            "args": ["data"],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "keys",
                    "args": ["data"],
                    "script": "return [...data.keys()]"
                },
                {
                    "id": "collate"
                },
                {
                    "id": "out",
                    "args": ["data"],
                    "script": "return data"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "keys"
                },
                {
                    "from": "keys",
                    "to": "collate",
                    "as": "input"
                },
                {
                    "from": "in",
                    "to": "collate"
                },
                {
                    "from": "collate",
                    "to": "out",
                    "as": "data"
                }
            ]
        },
        {
            "id": "new_array",
            "script": "return Object.keys(_node_inputs).sort().map(k => _node_inputs[k])",
            "name": "new_array"
        },
        {
            "id": "wrap_effect_fn",
            "args": [
                "fn"
            ],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "fn",
                    "ref": "arg",
                    "value": "fn"
                },
                {
                    "id": "payload",
                    "ref": "arg",
                    "value": "payload"
                },
                {
                    "id": "out",
                    "args": [
                        "fn"
                    ],
                    "script": "return (_, payload) => fn(payload)"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "arg0"
                },
                {
                    "from": "payload",
                    "to": "out",
                    "as": "payload"
                },
                {
                    "from": "fn",
                    "to": "out",
                    "as": "fn"
                }
            ]
        },
        {
            "id": "get",
            "args": ["target", "path"],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "def",
                    "ref": "arg",
                    "value": "def"
                },
                {
                    "id": "target",
                    "ref": "arg",
                    "value": "target"
                },
                {
                    "id": "path",
                    "ref": "arg",
                    "value": "path"
                },
                {
                    "id": "fill_default",
                    "args": [
                        "input"
                    ],
                    "script": "return input?.default ??  null"
                },
                {"id": "get_args", "ref": "new_array"},
                {
                    "id": "out",
                    "extern": "just.get"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "input"
                },
                {
                    "from": "def",
                    "to": "get_args",
                    "as": "a2"
                },
                {
                    "from": "path",
                    "to": "get_args",
                    "as": "a1"
                },
                {
                    "from": "target",
                    "to": "get_args",
                    "as": "a0"
                },
                {"from": "get_args", "to": "out", "as": "args"}
            ]
        },
        {
            "id": "arg",
            "args": ["node_inputs"],
            "script": "return typeof _node.value === 'string' ? _lib.just.get(_node_inputs, _node.value) : _node_inputs[_node.value]"
        },
        {
            "id": "set-mutable",
            "args": [
                "target",
                "path",
                "value"
            ],
            "script": "return _lib.just.set(target, path, value)"
        },
        {
            "id": "set",
            "type": "(target: any, value: any, path: string) => any",
            "script": "const keys = path.split('.'); const check = (o, v, k) => k.length === 1 ? {...o, [k[0]]: v, _needsresolve: true} : o.hasOwnProperty(k[0]) ? {...o, [k[0]]: check(o[k[0]], v, k.slice(1)), _needsresolve: true} : o; return check(target, value, keys)"
        },
        {
            "id": "delete",
            "out": "out",
            "nodes": [
                {"id": "in"},
                {"id": "target", "ref": "arg", "value": "target"},
                {"id": "path", "ref": "arg", "value": "path"},
                {"id": "out", "script": "const new_val = Object.assign({}, target); delete target[path]; return new_val"}
            ],
            "edges": [
                {"from": "in", "to": "out", "as": "args"},
                {"from": "target", "to": "out", "as": "target"},
                {"from": "path", "to": "out", "as": "path"}
            ]
        },
        {
            "id": "fuse vertices",
            "name": "fuse vertices",
            "in": "g8mx5sn1u",
            "out": "vnw7d8iaw",
            "args": ["graph"],
            "nodes": [
                {
                    "id": "vnw7d8iaw",
                    "name": "fuse vertices",
                    "ref": "switch",
                    "args": ["fuse", "graph"]
                },
                {
                    "id": "6uzm3ifn3",
                    "args": ["graph"],
                    "script": "return graph.edges.length > 0 ? \"fuse\" : \"graph\""
                },
                {
                    "id": "p229wzcj5",
                    "ref": "fuse vertices"
                },
                {
                    "id": "idjoql4db"
                },
                {
                    "id": "wfld638dn",
                    "args": ["remaining_edges"],
                    "script": "return [remaining_edges.map(e => ({...e, to: e.to === chosen_edge.to || e.to === chosen_edge.from ? new_id : e.to, from: e.from === chosen_edge.from || e.from === chosen_edge.to ? new_id : e.from}))]"
                },
                {
                    "id": "ungdjbio6",
                    "args": ["graph", "chosen_edge"],
                    "script": "const remaining = graph.nodes\n.filter(n => n.id !== chosen_edge.to && n.id !== chosen_edge.from);\n\nconst from = [...(graph.nodes\n.find(n => n.id === chosen_edge.to).nodes ?? [chosen_edge.to])]\n\nconst to = [...(graph.nodes.find(n => n.id === chosen_edge.from).nodes ?? [chosen_edge.from])];\n\nreturn [remaining\n.concat([{\nid: new_id, \nnodes: [...(new Set(from.concat(to))).keys()],\n}])\n\n];"
                },
                {
                    "id": "mh8lknkfv",
                    "args": ["graph"],
                    "script": "return [graph.edges.slice(1)]"
                },
                {
                    "id": "h8bhlzbph",
                    "args": ["chosen_edge"],
                    "script": "return chosen_edge.to + \"_\" + chosen_edge.from;",
                    "name": "new_id"
                },
                {
                    "id": "1m739wxv9",
                    "args": ["graph"],
                    "script": "return graph.edges[0]",
                    "name": "edge"
                },
                {
                    "id": "nznzj5bfn",
                    "name": "get graph",
                    "ref": "get"
                },
                {
                    "id": "g8mx5sn1u",
                    "name": "fuse vertices/in"
                },
                {
                    "id": "tta1nggm4",
                    "value": "graph"
                }
            ],
            "edges": [
                {
                    "from": "6uzm3ifn3",
                    "to": "vnw7d8iaw",
                    "as": "input"
                },
                {
                    "from": "p229wzcj5",
                    "to": "vnw7d8iaw",
                    "as": "fuse"
                },
                {
                    "from": "idjoql4db",
                    "to": "p229wzcj5",
                    "as": "graph"
                },
                {
                    "from": "wfld638dn",
                    "to": "idjoql4db",
                    "as": "edges"
                },
                {
                    "from": "ungdjbio6",
                    "to": "idjoql4db",
                    "as": "nodes"
                },
                {
                    "from": "mh8lknkfv",
                    "to": "wfld638dn",
                    "as": "remaining_edges"
                },
                {
                    "from": "h8bhlzbph",
                    "to": "wfld638dn",
                    "as": "new_id"
                },
                {
                    "from": "1m739wxv9",
                    "to": "wfld638dn",
                    "as": "chosen_edge"
                },
                {
                    "from": "h8bhlzbph",
                    "to": "ungdjbio6",
                    "as": "new_id"
                },
                {
                    "from": "1m739wxv9",
                    "to": "ungdjbio6",
                    "as": "chosen_edge"
                },
                {
                    "from": "nznzj5bfn",
                    "to": "vnw7d8iaw",
                    "as": "graph"
                },
                {
                    "from": "nznzj5bfn",
                    "to": "6uzm3ifn3",
                    "as": "graph"
                },
                {
                    "from": "nznzj5bfn",
                    "to": "ungdjbio6",
                    "as": "graph"
                },
                {
                    "from": "nznzj5bfn",
                    "to": "mh8lknkfv",
                    "as": "graph"
                },
                {
                    "from": "1m739wxv9",
                    "to": "h8bhlzbph",
                    "as": "chosen_edge"
                },
                {
                    "from": "nznzj5bfn",
                    "to": "1m739wxv9",
                    "as": "graph"
                },
                {
                    "from": "g8mx5sn1u",
                    "to": "nznzj5bfn",
                    "as": "target"
                },
                {
                    "from": "tta1nggm4",
                    "to": "nznzj5bfn",
                    "as": "path"
                }
            ]
        },
        {
            "id": "remove pendant",
            "name": "remove pendant",
            "in": "jhykipayt",
            "out": "ay4hfrqw1",
            "nodes": [
                {
                    "id": "ay4hfrqw1",
                    "args": [],
                    "name": "remove pendant",
                    "ref": "switch"
                },
                {
                    "id": "r5lka2sj5",
                    "args": [],
                    "script": "return pendants.length > 0 ? [\"remove\"] : [\"graph\"]"
                },
                {
                    "id": "7elx5ekij",
                    "args": [],
                    "ref": "remove pendant"
                },
                {
                    "id": "cz08pewa3",
                    "args": []
                },
                {
                    "id": "7n24u6kpt",
                    "args": [
                        "nodes"
                    ],
                    "script": "return [nodes.filter(n => !pendant_edges.includes(n.id))]",
                    "name": "filter out pendants"
                },
                {
                    "id": "cuiccwvbv",
                    "args": [],
                    "script": "return [edges.filter(e => !pendant_edges.includes(e.to) && !pendant_edges.includes(e.from))]",
                    "name": "filter penant"
                },
                {
                    "id": "lgzenfpvl",
                    "args": [],
                    "script": "let accfrom = edges.flatMap(e => [e.from]).reduce((acc, v) => { acc[v] = (acc[v] ?? 0) + 1; return acc}, {});\nlet accto = edges.flatMap(e => [e.to]).reduce((acc, v) => { acc[v] = (acc[v] ?? 0) + 1; return acc}, {});\n\nreturn nodes.map(n => n.id).filter(n => (!isNaN(accfrom[n]) && accfrom[n] <= 1) && !accto[n] );",
                    "name": "pendant edges"
                },
                {
                    "id": "7g81ijcqb",
                    "name": "nodes",
                    "in": "in",
                    "out": "7g81ijcqb",
                    "nodes": [
                        {
                            "id": "7g81ijcqb",
                            "args": [],
                            "ref": "get",
                            "name": "nodes"
                        },
                        {
                            "id": "2yshp7jvu",
                            "args": [],
                            "value": "nodes"
                        },
                        {
                            "id": "in"
                        }
                    ],
                    "edges": [
                        {
                            "from": "2yshp7jvu",
                            "to": "7g81ijcqb",
                            "as": "path"
                        },
                        {
                            "from": "in",
                            "to": "7g81ijcqb"
                        }
                    ]
                },
                {
                    "id": "zkg9zpu3e",
                    "name": "edges",
                    "in": "in",
                    "out": "zkg9zpu3e",
                    "nodes": [
                        {
                            "id": "zkg9zpu3e",
                            "args": [],
                            "ref": "get",
                            "name": "edges"
                        },
                        {
                            "id": "g18jj6zvq",
                            "args": [],
                            "value": "edges"
                        },
                        {
                            "id": "in"
                        }
                    ],
                    "edges": [
                        {
                            "from": "g18jj6zvq",
                            "to": "zkg9zpu3e",
                            "as": "path"
                        },
                        {
                            "from": "in",
                            "to": "zkg9zpu3e"
                        }
                    ]
                },
                {
                    "id": "bp1cy89hk",
                    "args": [],
                    "ref": "get",
                    "name": "graph"
                },
                {
                    "id": "jhykipayt",
                    "args": [],
                    "name": "remove pendant/in"
                },
                {
                    "id": "iqkdwjpuz",
                    "args": [],
                    "value": "graph"
                }
            ],
            "edges": [
                {
                    "from": "r5lka2sj5",
                    "to": "ay4hfrqw1",
                    "as": "input"
                },
                {
                    "from": "7elx5ekij",
                    "to": "ay4hfrqw1",
                    "as": "remove"
                },
                {
                    "from": "cz08pewa3",
                    "to": "7elx5ekij",
                    "as": "graph"
                },
                {
                    "from": "7n24u6kpt",
                    "to": "cz08pewa3",
                    "as": "nodes"
                },
                {
                    "from": "cuiccwvbv",
                    "to": "cz08pewa3",
                    "as": "edges"
                },
                {
                    "from": "lgzenfpvl",
                    "to": "r5lka2sj5",
                    "as": "pendants"
                },
                {
                    "from": "lgzenfpvl",
                    "to": "cz08pewa3",
                    "as": "pendants"
                },
                {
                    "from": "7g81ijcqb",
                    "to": "7n24u6kpt",
                    "as": "nodes"
                },
                {
                    "from": "lgzenfpvl",
                    "to": "7n24u6kpt",
                    "as": "pendant_edges"
                },
                {
                    "from": "zkg9zpu3e",
                    "to": "7n24u6kpt",
                    "as": "edges"
                },
                {
                    "from": "lgzenfpvl",
                    "to": "cuiccwvbv",
                    "as": "pendant_edges"
                },
                {
                    "from": "zkg9zpu3e",
                    "to": "cuiccwvbv",
                    "as": "edges"
                },
                {
                    "from": "zkg9zpu3e",
                    "to": "lgzenfpvl",
                    "as": "edges"
                },
                {
                    "from": "7g81ijcqb",
                    "to": "lgzenfpvl",
                    "as": "nodes"
                },
                {
                    "from": "bp1cy89hk",
                    "to": "ay4hfrqw1",
                    "as": "graph"
                },
                {
                    "from": "bp1cy89hk",
                    "to": "cz08pewa3"
                },
                {
                    "from": "bp1cy89hk",
                    "to": "7g81ijcqb",
                    "as": "target"
                },
                {
                    "from": "bp1cy89hk",
                    "to": "zkg9zpu3e",
                    "as": "target"
                },
                {
                    "from": "jhykipayt",
                    "to": "bp1cy89hk",
                    "as": "target"
                },
                {
                    "from": "iqkdwjpuz",
                    "to": "bp1cy89hk",
                    "as": "path"
                }
            ]
        },
        {
            "id": "hyperapp_action",
            "script": "return {fn, graph: _graph}",
            "script_": "return (state, payload) => {const result = _lib.no.executeGraphNode({graph: _graph})(fn)({state, payload}); return result.state ? [result.state, ...result.effects] : [result.action, result.payload]}"
        },
        {
            "id": "hyperapp_state_action",
            "script": "return {fn, graph: _graph, stateonly: true}",
            "script_": "return (state, _) => {const result = _lib.no.executeGraphNode({graph: _graph})(fn)(state); return result.state ? [result.state, ...result.effects] : result.action ? [result.action, result.payload] : result}" 
        },
        {
            "id": "hyperapp_action_effect",
            "description": "Creates an effect that dispatches the passed-in fn",
            "script": "const action = typeof fn === 'string' ? {fn, graph: _graph} : (typeof fn === 'function' || (typeof fn === 'object' && fn.hasOwnProperty('fn'))) ? fn : undefined; return (dispatch, payload) => dispatch(action, payload)"
        },
        {
            "id": "update_graph_display",
            "in": "in",
            "out": "out",
            "args": [
                "display_graph",
                "nodes",
                "selected",
                "update_graph_sim",
                "update",
                "payload",
                "fixed_vertices"
            ],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "state",
                    "ref": "arg",
                    "value": "state"
                },
                {
                    "id": "update_sim_effect",
                    "ref": "arg",
                    "value": "state.update_sim_effect"
                },
                {
                    "id": "show_result",
                    "ref": "arg",
                    "value": "state.show_result"
                },
                {
                    "id": "state_result",
                    "ref": "arg",
                    "value": "state.result"
                },
                {
                    "id": "error_nodes",
                    "ref": "arg",
                    "value": "state.error_nodes"
                },
                {
                    "id": "update_arg",
                    "ref": "arg",
                    "value": "state.update"
                },
                {
                    "id": "nodes",
                    "ref": "arg",
                    "value": "state.nodes"
                },
                {
                    "id": "links",
                    "ref": "arg",
                    "value": "state.links"
                },
                {
                    "id": "selected",
                    "ref": "arg",
                    "value": "state.selected"
                },
                {
                    "id": "readonly",
                    "ref": "arg",
                    "value": "state.readonly"
                },
                {
                    "id": "html_id",
                    "ref": "arg",
                    "value": "state.html_id"
                },
                {
                    "id": "effects",
                    "ref": "arg",
                    "value": "effects"
                },
                {
                    "id": "display_graph",
                    "ref": "arg",
                    "value": "state.display_graph"
                },
                {
                    "id": "calculate_levels",
                    "args": [
                        "selected",
                        "display_graph",
                        "fixed_vertices"
                    ],
                    "script": "return _lib.scripts.calculateLevels(nodes, links, display_graph, selected, fixed_vertices)"
                },
                {
                    "id": "reduce_graph",
                    "ref": "fuse vertices"
                },
                {
                    "id": "levels",
                    "ref": "switch",
                    "args": ["levels"]
                },
                {
                    "id": "levels_inputs",
                    "args": [
                        "selected"
                    ],
                    "script": "return ['levels']"
                },
                {
                    "id": "set_levels",
                    "args": [
                        "state",
                        "levels"
                    ],
                    "script": "return {...state, levels: levels ?? state.levels}"
                },
                {
                    "id": "graph_sim",
                    "args": [
                        "display_graph",
                        "nodes",
                        "selected",
                        "levels"
                    ],
                    "script": "return undefined;"
                },
                {
                    "id": "new_state_cases",
                    "args": [
                        "update_graph_sim"
                    ],
                    "script": "return [graph_sim && 'graph_sim', 'state']"
                },
                {
                    "id": "new_state",
                    "args": [
                        "graph_sim",
                        "state"
                    ],
                    "script": "return Object.assign({}, state, {nodes: graph_sim?.nodes ?? state.nodes, links: graph_sim?.links ?? state.links, levels: graph_sim?.levels ?? state.levels});"
                },
                {
                    "id": "update",
                    "args": [
                        "editing",
                        "display_graph",
                        "update",
                        "selected",
                        "search"
                    ],
                    "script": "return update || !!display_graph || !!selected"
                },
                {
                    "id": "run",
                    "args": [
                        "state",
                        "payload",
                        "display_graph",
                        "selected"
                    ],
                    "script": "return Promise.resolve({state: prev_result, payload}).then(promise_payload => _lib.no.executeGraphValue({graph: {...display_graph, nodes: display_graph.nodes.map(n => ({...n})), edges: display_graph.edges.map(e => ({...e}))}})(promise_payload)).then(result => {if(result.display && !result.display.el.props.key){ result.display.el.props.key = `${html_id}-result_display` } return {result, error: undefined, error_nodes}; }).catch(e => ({error: e instanceof AggregateError ? e.errors.map(e => (e instanceof _lib.no.NodysseusError ? e.node_id + ': ' : '') + e.toString()).join(\" \") : e.toString(), error_nodes: new Map(e instanceof AggregateError ? e.errors.map(e => e instanceof _lib.no.NodysseusError ? [e.node_id, e] : false).filter(n => n) : e instanceof _lib.no.NodysseusError ? [[e.node_id, e]] : [])}))"
                },
                {
                    "id": "result"
                },
                {
                    "id": "out",
                    "args": [
                        "state",
                        "fx",
                        "update",
                        "result",
                        "error",
                        "update_graph_sim",
                        "payload",
                        "update_sim_effect"
                    ],
                    "script": "return {state, effects: [(!!update || !!update_graph_sim) && [update_sim_effect, state], !readonly && [(d, payload) => payload.run.then(res => res).then(res => d(s => (console.log(res), s.error_nodes.clear(), {...s, result: res.result?.state, error: res.error, error_nodes: res.error_nodes ?? s.error_nodes, result_display: res.result?.display, error: res.error}))), result], ...(effects ?? [])]}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "run"
                },
                {
                    "from": "update_arg",
                    "to": "update",
                    "as": "update"
                },
                {
                    "from": "in",
                    "to": "calculate_levels"
                },
                {
                    "from": "state",
                    "to": "set_levels",
                    "as": "state"
                },
                {
                    "from": "in",
                    "to": "levels_inputs"
                },
                {
                    "from": "in",
                    "to": "graph"
                },
                {
                    "from": "display_graph",
                    "to": "reduce_graph",
                    "as": "graph" 
                },
                {
                    "from": "display_graph",
                    "to": "run",
                    "as": "display_graph" 
                },
                {
                    "from": "html_id",
                    "to": "run",
                    "as": "html_id" 
                },
                {"from": "nodes", "to": "calculate_levels", "as": "nodes"},
                {"from": "links", "to": "calculate_levels", "as": "links"},
                {"from": "selected", "to": "calculate_levels", "as": "selected"},
                {"from": "display_graph", "to": "calculate_levels", "as": "display_graph"},
                {
                    "from": "calculate_levels",
                    "to": "levels",
                    "as": "levels"
                },
                {
                    "from": "levels",
                    "to": "set_levels",
                    "as": "levels"
                },
                {
                    "from": "set_levels",
                    "to": "new_state",
                    "as": "state"
                },
                {
                    "from": "levels_inputs",
                    "to": "levels",
                    "as": "input"
                },
                {
                    "from": "graph_sim",
                    "to": "new_state",
                    "as": "graph_sim"
                },
                {
                    "from": "error_nodes",
                    "to": "run",
                    "as": "error_nodes"
                },
                {
                    "from": "state_result",
                    "to": "run",
                    "as": "prev_result"
                },
                {
                    "from": "run",
                    "to": "result",
                    "as": "run"
                },
                {
                    "from": "show_result",
                    "to": "out",
                    "as": "show_result"
                },
                {
                    "from": "result",
                    "to": "out",
                    "as": "result"
                },
                {
                    "from": "readonly",
                    "to": "out",
                    "as": "readonly"
                },
                {
                    "from": "update",
                    "to": "out",
                    "as": "update"
                },
                {
                    "from": "effects",
                    "to": "out",
                    "as": "effects"
                },
                {
                    "from": "update_sim_effect",
                    "to": "out",
                    "as": "update_sim_effect"
                },
                {
                    "from": "new_state",
                    "to": "out",
                    "as": "state"
                }
            ]
        },
        {
            "id": "h",
            "args": ["children", "props", "dom_type"],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "fill_children",
                    "args": [
                        "children"
                    ],
                    "script": "return children === undefined ? [] : children.length !== undefined ? children.filter(c => !!c).map(c => c.el ?? c) : [children.el ?? children]"
                },
                {
                    "id": "fill_props",
                    "args": [
                        "input"
                    ],
                    "script": "return input.props ?? {}"
                },
                {
                    "id": "dom_type",
                    "ref": "arg",
                    "value": "dom_type"
                },
                {
                    "id": "out",
                    "script": "(children ?? []).forEach(c => {if(!((c.hasOwnProperty('dom_type') && c.hasOwnProperty('props')) || c.hasOwnProperty('text'))){throw new Error('invalid child element');}}); return {el: {dom_type, props, children}}"
                },
                {
                    "id": "_out"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "fill_children"
                },
                {
                    "from": "in",
                    "to": "dom_type"
                },
                {
                    "from": "in",
                    "to": "fill_props",
                    "as": "input"
                },
                {
                    "from": "fill_children",
                    "to": "out",
                    "as": "children",
                    "order": 1
                },
                {
                    "from": "fill_props",
                    "to": "out",
                    "as": "props",
                    "type": "resolve"
                },
                {"from": "dom_type", "to": "out", "as": "dom_type"}
            ]
        },
        {
            "id": "map",
            "in": "in",
            "out": "out",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "run_fn"
                },
                {
                    "id": "iterate",
                    "ref": "map"
                },
                {
                    "id": "out"
                }
            ],
            "edges": [

            ]
        },
        {
            "id": "run_h",
            "in": "in",
            "out": "out",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "dom_type",
                    "ref": "arg",
                    "value": "dom_type"
                },
                {
                    "id": "props",
                    "ref": "arg",
                    "value": "props"
                },
                {
                    "id": "children",
                    "ref": "arg",
                    "value": "children"
                },
                {
                    "id": "graph",
                    "ref": "arg",
                    "value": "graph"
                },
                {
                    "id": "text",
                    "ref": "arg",
                    "value": "text"
                },
                {
                    "id": "out_h",
                    "args": ["dom_type", "children", "props", "graph"],
                    "script": "let run_graph = {...graph, in: 'run_h/in', out: 'run_h'}; const fn = _lib.no.executeGraphValue({graph: run_graph}); const mapped_children = (children ?? []).map(c => ({...c, graph: run_graph})).map(fn).filter(c => c).map(c => c.el); return {el: _lib.ha.h(dom_type, props, mapped_children)};"
                },
                {
                    "id": "extern_h_text_args",
                    "ref": "new_array"
                },
                {
                    "id": "extern_h_text",
                    "extern": "ha.text"
                },
                {
                    "id": "out_text",
                    "args": ["text"],
                    "script": "return {el}"
                },
                {
                    "id": "els"
                },
                {
                    "id": "out_input",
                    "args": ["dom_type"],
                    "script": "return dom_type === 'text_value' ? 'h_text' : 'h'"
                },
                {
                    "id": "out_el",
                    "ref": "switch"
                },
                {
                    "id": "out",
                    "args": ["el"],
                    "script": "return el"
                }
            ],
            "edges": [
                {"from": "dom_type", "to": "out_input", "as": "dom_type"},
                {"from": "dom_type", "to": "out_h", "as": "dom_type"},
                {"from": "children", "to": "out_h", "as": "children"},
                {"from": "props", "to": "out_h", "as": "props"},
                {"from": "graph", "to": "out_h", "as": "graph"},
                {"from": "text", "to": "extern_h_text_args", "as": "arg0"},
                {"from": "extern_h_text_args", "to": "extern_h_text", "as": "args"},
                {"from": "extern_h_text", "to": "out_text", "as": "el"},
                {"from": "out_text", "to": "els", "as": "h_text"},
                {"from": "out_h", "to": "els", "as": "h"},
                {"from": "els", "to": "out_el"},
                {"from": "out_el", "to": "out", "as": "el", "type": "resolve"},
                {"from": "out_input", "to": "out_el", "as": "input"}
            ]
        },
        {
            "id": "h_text",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "text",
                    "ref": "arg",
                    "value": "text"
                },
                {
                    "id": "out",
                    "args": [
                        "text"
                    ],
                    "script": "return {el: {dom_type: 'text_value', text}}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "input"
                },
                {
                    "from": "text",
                    "to": "out",
                    "as": "text",
                    "type": "resolve"
                }
            ]
        },
        {
            "id": "expand_contract",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "dg_selected",
                    "ref": "arg",
                    "value": "selected"
                },
                {
                    "id": "display_graph",
                    "ref": "arg",
                    "value": "display_graph"
                },
                {
                    "id": "node_id",
                    "script": "return selected"
                },
                {
                    "id": "selected_node",
                    "ref": "selected_node"
                },
                {
                    "id": "expand_contract_result_inputs",
                    "args": [
                        "expandable",
                        "contractable"
                    ],
                    "script": "return expandable ? 'expand' : contractable ? 'contract' : undefined"
                },
                {
                    "id": "selected",
                    "args": [
                        "expand",
                        "contract"
                    ],
                    "script": "return [contract] ?? [expand]"
                },
                {
                    "id": "expand_contract_result",
                    "ref": "switch"
                },
                {
                    "id": "get_name",
                    "args": [
                        "node"
                    ],
                    "script": "return node.name"
                },
                {
                    "id": "log",
                    "ref": "log"
                },
                {
                    "id": "expandable_id",
                    "args": [
                        "id",
                        "out"
                    ],
                    "script": "return id ? [id + '/' + out] : []"
                },
                {
                    "id": "contractable_id",
                    "args": [
                        "node_id",
                        "name"
                    ],
                    "script": "node_id = name?.endsWith('/out') ? name : node_id; return !node_id ? [] : node_id.endsWith('/out') ? [node_id.substring(0, node_id.lastIndexOf('/'))] : node_id.lastIndexOf('/') >= 0 ? [node_id.substring(0, node_id.lastIndexOf('/'))] : [node_id]"
                },
                {
                    "id": "expand",
                    "args": [
                        "node_id",
                        "display_graph",
                        "out"
                    ],
                    "script": "return display_graph && node_id ? _lib.scripts.expand_node({display_graph, node_id, out}) : []"
                },
                {
                    "id": "contract",
                    "args": [
                        "node_id",
                        "display_graph",
                        "name"
                    ],
                    "script": "return display_graph && node_id ? _lib.scripts.contract_node({display_graph, node_id, name, node_name}) : []"
                },
                {
                    "id": "has_nodes",
                    "args": [
                        "node_id",
                        "display_graph"
                    ],
                    "script": "return !!display_graph.nodes.find(n => n.id === node_id).nodes"
                },
                {
                    "id": "is_contractable",
                    "args": [
                        "has_nodes"
                    ],
                    "script": "return !has_nodes"
                },
                {
                    "id": "out",
                    "ref": "default"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "contractable_id"
                },
                {
                    "from": "in",
                    "to": "expand"
                },
                {
                    "from": "in",
                    "to": "contract"
                },
                {
                    "from": "dg_selected",
                    "to": "selected_node",
                    "as": "selected"
                },
                {
                    "from": "display_graph",
                    "to": "selected_node",
                    "as": "display_graph"
                },
                {
                    "from": "display_graph",
                    "to": "has_nodes",
                    "as": "display_graph"
                },
                {
                    "from": "dg_selected",
                    "to": "node_id",
                    "as": "selected"
                },
                {
                    "from": "node_id",
                    "to": "has_nodes",
                    "as": "node_id"
                },
                {
                    "from": "node_id",
                    "to": "contract",
                    "as": "node_id"
                },
                {
                    "from": "node_id",
                    "to": "expand",
                    "as": "node_id"
                },
                {
                    "from": "has_nodes",
                    "to": "is_contractable",
                    "as": "has_nodes"
                },
                {
                    "from": "selected_node",
                    "to": "get_name",
                    "as": "node"
                },
                {
                    "from": "selected_node",
                    "to": "expandable_id"
                },
                {
                    "from": "selected_node",
                    "to": "contract"
                },
                {
                    "from": "get_name",
                    "to": "contract",
                    "as": "node_name"
                },
                {
                    "from": "contractable_id",
                    "to": "contract",
                    "as": "name"
                },
                {
                    "from": "get_name",
                    "to": "is_contractable",
                    "as": "name"
                },
                {
                    "from": "get_name",
                    "to": "contractable_id",
                    "as": "name"
                },
                {
                    "from": "contractable_id",
                    "to": "selected",
                    "as": "contract"
                },
                {
                    "from": "expandable_id",
                    "to": "selected",
                    "as": "expand"
                },
                {
                    "from": "has_nodes",
                    "to": "expand_contract_result_inputs",
                    "as": "expandable"
                },
                {
                    "from": "is_contractable",
                    "to": "expand_contract_result_inputs",
                    "as": "contractable"
                },
                {
                    "from": "expand_contract_result_inputs",
                    "to": "selected",
                    "as": "input"
                },
                {
                    "from": "expand_contract_result_inputs",
                    "to": "expand_contract_result",
                    "as": "input"
                },
                {
                    "from": "selected",
                    "to": "expand_contract_result",
                    "as": "selected"
                },
                {
                    "from": "expand",
                    "to": "expand_contract_result",
                    "as": "expand"
                },
                {
                    "from": "contract",
                    "to": "expand_contract_result",
                    "as": "contract"
                },
                {
                    "from": "expand_contract_result",
                    "to": "out",
                    "as": "data"
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "default_value"
                }
            ]
        },
        {
            "id": "default_node_display",
            "name": "default_node_display",
            "in": "6pqqchhnk",
            "out": "tsxlng4gd",
            "nodes": [
                {
                    "id": "tsxlng4gd",
                    "ref": "h",
                    "name": "default_node_display"
                },
                {
                    "id": "osgrk7ddu",
                    "args": [],
                    "ref": "h_text"
                },
                {
                    "id": "hghirvcml",
                    "args": [],
                    "value": "pre"
                },
                {
                    "id": "ha6b5qttf",
                    "args": ["data"],
                    "script": "return JSON.stringify({node: data.node, result: data.result}, null, 2)"
                },
                {
                    "id": "6pqqchhnk",
                    "name": "default_node_display/in"
                }
            ],
            "edges": [
                {
                    "from": "osgrk7ddu",
                    "to": "tsxlng4gd",
                    "as": "children"
                },
                {
                    "from": "hghirvcml",
                    "to": "tsxlng4gd",
                    "as": "dom_type"
                },
                {
                    "from": "ha6b5qttf",
                    "to": "osgrk7ddu",
                    "as": "text"
                },
                {
                    "from": "6pqqchhnk",
                    "to": "ha6b5qttf",
                    "as": "data"
                }
            ]
        },
        {
            "id": "graph_display",
            "name": "graph_display",
            "in": "in",
            "out": "out",
            "nodes": [
                {
                    "id": "out",
                    "ref": "h",
                    "name": "graph_display"
                },
                {
                    "id": "ml655hs73",
                    "args": [],
                    "value": "pre"
                },
                {
                    "id": "thsez3hy1",
                    "args": [],
                    "ref": "h_text"
                },
                {
                    "id": "stringify",
                    "args": [
                        "data"
                    ],
                    "script": "return JSON.stringify({...data.node, nodes: data.node.nodes.length, edges:data.node.edges.length, result: data.result}, null, 2)"
                },
                {
                    "id": "in"
                }
            ],
            "edges": [
                {
                    "from": "ml655hs73",
                    "to": "out",
                    "as": "dom_type"
                },
                {
                    "from": "thsez3hy1",
                    "to": "out",
                    "as": "children"
                },
                {
                    "from": "stringify",
                    "to": "thsez3hy1",
                    "as": "text"
                },
                {
                    "from": "in",
                    "to": "stringify",
                    "as": "data"
                },
                {
                    "from": "in",
                    "to": "stringify",
                    "as": "data"
                }
            ]
        },
        {
            "id": "number_display",
            "name": "number_display",
            "in": "6pqqchhnk",
            "out": "tsxlng4gd",
            "nodes": [
                {
                    "id": "tsxlng4gd",
                    "args": [],
                    "ref": "h",
                    "name": "number_display"
                },
                {
                    "id": "hghirvcml",
                    "args": [],
                    "value": "input"
                },
                {
                    "id": "cd571vftv"
                },
                {
                    "id": "h5xzkeoql",
                    "args": [],
                    "value": {
                        "ref": "number"
                    }
                },
                {
                    "id": "ltncqmqe9",
                    "args": [],
                    "ref": "get"
                },
                {
                    "id": "9kkegcpi2",
                    "args": [],
                    "ref": "execute_graph"
                },
                {
                    "id": "e96vv0gpq",
                    "args": [],
                    "value": "node.value"
                },
                {
                    "id": "tw41k3wzg",
                    "args": [],
                    "ref": "get"
                },
                {
                    "id": "u9feks2l9",
                    "args": [],
                    "ref": "update_graph_display"
                },
                {
                    "id": "6pqqchhnk",
                    "args": [],
                    "name": "number_display/in"
                },
                {
                    "id": "yxaspmy5c",
                    "args": [],
                    "value": "graph"
                },
                {
                    "id": "rhzddw3c6",
                    "args": [],
                    "ref": "set"
                },
                {
                    "id": "8jmaa71ct",
                    "args": [],
                    "script": "return arg0 !== arg1;"
                },
                {
                    "id": "w5lqhh9qr",
                    "args": [],
                    "value": "value"
                },
                {
                    "id": "es0e6as0j",
                    "args": [],
                    "ref": "get",
                    "name": "get target value"
                },
                {
                    "id": "vnta2m4py",
                    "args": [],
                    "ref": "get"
                },
                {
                    "id": "gh99zvhy2",
                    "args": [],
                    "value": "1.target.valueAsNumber",
                    "name": "target valueasnum"
                },
                {
                    "id": "88f3s3qrq",
                    "args": [],
                    "value": "value"
                },
                {
                    "id": "fxbdw1jrr",
                    "args": [],
                    "ref": "selected_node"
                },
                {
                    "id": "pkih97fsa",
                    "args": [],
                    "ref": "get",
                    "name": "state"
                },
                {
                    "id": "mbbx3d26q",
                    "args": []
                },
                {
                    "id": "vbwsmt7jt",
                    "args": [],
                    "value": 0
                }
            ],
            "edges": [
                {
                    "from": "hghirvcml",
                    "to": "tsxlng4gd",
                    "as": "dom_type"
                },
                {
                    "from": "cd571vftv",
                    "to": "tsxlng4gd",
                    "as": "props"
                },
                {
                    "from": "h5xzkeoql",
                    "to": "cd571vftv"
                },
                {
                    "from": "ltncqmqe9",
                    "to": "cd571vftv",
                    "as": "value"
                },
                {
                    "from": "9kkegcpi2",
                    "to": "cd571vftv",
                    "as": "oninput"
                },
                {
                    "from": "e96vv0gpq",
                    "to": "ltncqmqe9",
                    "as": "path"
                },
                {
                    "from": "tw41k3wzg",
                    "to": "9kkegcpi2",
                    "as": "graph"
                },
                {
                    "from": "u9feks2l9",
                    "to": "9kkegcpi2",
                    "as": "fn",
                    "type": "ref"
                },
                {
                    "from": "6pqqchhnk",
                    "to": "ltncqmqe9",
                    "as": "target"
                },
                {
                    "from": "6pqqchhnk",
                    "to": "tw41k3wzg",
                    "as": "target"
                },
                {
                    "from": "yxaspmy5c",
                    "to": "tw41k3wzg",
                    "as": "path"
                },
                {
                    "from": "rhzddw3c6",
                    "to": "u9feks2l9",
                    "as": "node"
                },
                {
                    "from": "8jmaa71ct",
                    "to": "u9feks2l9",
                    "as": "update_graph_display"
                },
                {
                    "from": "w5lqhh9qr",
                    "to": "rhzddw3c6",
                    "as": "path"
                },
                {
                    "from": "es0e6as0j",
                    "to": "rhzddw3c6",
                    "as": "value"
                },
                {
                    "from": "vnta2m4py",
                    "to": "8jmaa71ct",
                    "as": "arg0"
                },
                {
                    "from": "es0e6as0j",
                    "to": "8jmaa71ct",
                    "as": "arg1"
                },
                {
                    "from": "gh99zvhy2",
                    "to": "es0e6as0j",
                    "as": "path"
                },
                {
                    "from": "88f3s3qrq",
                    "to": "vnta2m4py",
                    "as": "path"
                },
                {
                    "from": "fxbdw1jrr",
                    "to": "rhzddw3c6",
                    "as": "target"
                },
                {
                    "from": "fxbdw1jrr",
                    "to": "vnta2m4py",
                    "as": "target"
                },
                {
                    "from": "mbbx3d26q",
                    "to": "pkih97fsa",
                    "as": "target"
                },
                {
                    "from": "mbbx3d26q",
                    "to": "9kkegcpi2",
                    "as": "in_node",
                    "type": "ref"
                },
                {
                    "from": "mbbx3d26q",
                    "to": "es0e6as0j",
                    "as": "target"
                },
                {
                    "from": "pkih97fsa",
                    "to": "u9feks2l9"
                },
                {
                    "from": "pkih97fsa",
                    "to": "fxbdw1jrr"
                },
                {
                    "from": "vbwsmt7jt",
                    "to": "pkih97fsa",
                    "as": "path"
                }
            ]
        },
        {
            "id": "default_error_display",
            "in": "in",
            "out": "out",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "stringify",
                    "args": [
                        "data"
                    ],
                    "script": "const e = data.error; return JSON.stringify({error: e instanceof AggregateError ? e.errors.map(e => e.toString()).join(\" \") : e.toString(), data}, null, 2)"
                },
                {
                    "id": "text",
                    "ref": "h_text"
                },
                {
                    "id": "out_dom_type",
                    "value": "pre" 
                },
                {
                    "id": "out",
                    "ref": "h"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "stringify",
                    "as": "data"
                },
                {
                    "from": "stringify",
                    "to": "text",
                    "as": "text"
                },
                {
                    "from": "text",
                    "to": "out",
                    "as": "children",
                    "type": "resolve"
                },
                {
                    "from": "out_dom_type",
                    "to": "out",
                    "as": "dom_type"
                }
            ]
        },
        {
            "id": "not",
            "args": [
                "target"
            ],
            "script": "return !target"
        },
        {
            "id": "data",
            "value": "data"
        },
        {
            "id": "graph",
            "value": "graph"
        },
        {
            "id": "display_graph",
            "value": "display_graph"
        },
        {
            "id": "nodes",
            "value": "nodes"
        },
        {
            "id": "readonly",
            "ref": "arg",
            "value": "readonly"
        },
        {
            "id": "hide_types",
            "ref": "arg",
            "value": "hide_types"
        },
        {
            "id": "graph_nodes",
            "value": [
                [
                    "graph",
                    "nodes"
                ]
            ]
        },
        {
            "id": "initial_state",
            "value": {
                "nodes": [],
                "links": [],
                "editing": false,
                "search": false,
                "show_all": false,
                "app_state": {},
                "show_result": false,
                "node_el_width": 256,
                "sim_update_alpha": 0.4
            }
        },
        {"id": "dimensions", "ref": "arg", "value": "dimensions"},
        {"id": "error_nodes", "script": "return new Map()"},
        {
            "id": "hyperapp_init_state"
        },
        {
            "id": "calculate_levels",
            "script": "return _lib.scripts.calculateLevels([], [], display_graph, selected)"
        },
        {
            "id": "get_graph",
            "ref": "arg",
            "value": "graph"
        },
        {
            "id": "get_display_graph",
            "ref": "arg",
            "value": "display_graph"
        },
        {
            "id": "display_graph_out",
            "ref": "arg",
            "value": "display_graph.out"
        },
        {
            "id": "init_selected",
            "ref": "new_array"
        },
        {
            "id": "hyperapp_view",
            "ref": "execute_graph"
        },
        {
            "id": "update_hyperapp",
            "ref": "update_graph_display"
        },
        {
            "id": "update_hyperapp_action",
            "ref": "hyperapp_action"
        },
        {
            "id": "html_id",
            "ref": "arg",
            "value": "html_id"
        },
        {
            "id": "initialize_hyperapp_app",
            "ref": "hyperapp_app"
        },
        {
            "id": "out"
        },
        {
            "id": "hyperapp_view_in"
        },
        {
            "id": "nodes",
            "ref": "arg",
            "value": "nodes"
        },
        {
            "id": "links",
            "ref": "arg",
            "value": "links"
        },
        {
            "id": "graph_to_simulation",
            "args": [
                "nodes",
                "links",
                "display_graph",
                "selected",
                "levels"
            ],
            "ref": "graph_to_sim_fn",
            "_script": "return _lib.scripts.graphToSimulationNodes({display_graph, nodes, links, selected, levels})"
        },
        {
            "id": "sim_to_hyperapp",
            "ref": "sim_to_hyperapp_action"
        },
        {
            "id": "sim_to_hyperapp_fn",
            "ref": "execute_graph"
        },
        {
            "id": "graph_to_sim_action",
            "ref": "execute_graph"
        },
        {
            "id": "update_nodes_in"
        },
        {
            "id": "update_nodes",
            "args": [
                "simulation",
                "nodes",
                "display_graph",
                "links",
                "fuse_links",
                "selected",
                "levels",
                "show_all"
            ],
            "script": "return simulation ? _lib.scripts.updateSimulationNodes({display_graph, simulation, nodes, fuse_links, links, selected, levels, show_all, sim_update_alpha}) : undefined"
        },
        {
            "id": "update_nodes_fn",
            "ref": "execute_graph"
        },
        {
            "id": "onkey_fn",
            "ref": "hyperapp_action"
        },
        {
            "id": "eq",
            "script": "return a === b;"
        },
        {
            "id": "neq",
            "script": "return a !== b;"
        },
        {
            "id": "clear_popover_graph",
            "out": "out",
            "nodes": [
                {"id": "in"},
                {"id": "state", "ref": "arg", "value": "state"},
                {"id": "popover_path", "value": "popover_graph"},
                {"id": "false", "value": false},
                {"id": "clear_popover", "ref": "set"},
                {"id": "new_state"},
                {
                    "id": "popover_dispatch",
                    "ref": "arg",
                    "value": "state.popover_dispatch"
                },
                {
                    "id": "clear_popover_hyperapp_effect",
                    "script": "return [[(dispatch, payload) => { payload.dispatch(s => undefined); dispatch(s => ({...s, popover_dispatch: undefined}))}, {dispatch: popover_dispatch}]]"
                },
                {"id": "out", "ref": "hyperapp_action_effect"}
            ],
            "edges": [
                {"from": "in", "to": "new_state", "as": "args"},
                {"from": "state", "to": "clear_popover", "as": "target"},
                {"from": "state", "to": "clear_popover_hyperapp_effect", "as": "state"},
                {"from": "popover_path", "to": "clear_popover", "as": "path"},
                {"from": "false", "to": "clear_popover", "as": "value"},
                {"from": "clear_popover", "to": "new_state", "as": "state"},
                {"from": "popover_dispatch", "to": "clear_popover_hyperapp_effect", "as": "popover_dispatch"},
                {"from": "clear_popover_hyperapp_effect", "to": "new_state", "as": "effects"},
                {"from": "new_state", "to": "out", "as": "fn", "type": "ref"}
            ]
        },
        {
            "id": "show_popover_graph",
            "out": "out",
            "nodes": [
                {"id":"in"},
                {"id": "state", "ref": "arg", "value": "state"},
                {
                    "id": "popover_graph_path",
                    "value": "popover_graph"
                },
                {
                    "id": "graph",
                    "ref": "arg",
                    "value": "state.graph"
                },
                {
                    "id": "selected",
                    "ref": "arg",
                    "value": "state.selected.0"
                },
                {
                    "id": "html_id",
                    "ref": "arg",
                    "value": "state.html_id"
                },
                {
                    "id": "dimensions",
                    "ref": "arg",
                    "value": "state.dimensions"
                },
                {
                    "id": "popover_dispatch",
                    "ref": "arg",
                    "value": "state.popover_dispatch"
                },
                {"id": "set_popover_graph", "ref": "set"},
                {"id": "popover_graph_value", "ref": "arg", "value": "payload.popover_graph" },
                {"id": "render_popover_graph_effector", "ref": "render_popover_graph_effect"},
                {"id": "render_popover_graph_effect_payload"},
                {"id": "render_popover_graph_effect", "ref": "new_array"},
                {"id": "effects", "ref": "new_array"},
                {"id": "new_state"},
                {"id": "out", "ref": "hyperapp_action_effect"}
            ],
            "edges": [
                {"from": "in", "to": "out", "as": "args"},
                {"from": "state", "to": "set_popover_graph", "as": "target"},
                {"from": "popover_graph_value", "to": "set_popover_graph", "as": "value"},
                {"from": "popover_graph_path", "to": "set_popover_graph", "as": "path"},
                {"from": "set_popover_graph", "to": "new_state", "as": "state"},
                {"from": "popover_graph_value", "to": "render_popover_graph_effect_payload", "as": "display_graph"},
                {"from": "graph", "to": "render_popover_graph_effect_payload", "as": "graph"},
                {"from": "html_id", "to": "render_popover_graph_effect_payload", "as": "html_id"},
                {"from": "dimensions", "to": "render_popover_graph_effect_payload", "as": "dimensions"},
                {"from": "popover_dispatch", "to": "render_popover_graph_effect_payload", "as": "popover_dispatch"},
                {"from": "render_popover_graph_effect_payload", "to": "render_popover_graph_effect", "as": "arg1"},
                {"from": "render_popover_graph_effector", "to": "render_popover_graph_effect", "as": "arg0"},
                {"from": "render_popover_graph_effect", "to": "effects", "as": "arg0"},
                {"from": "effects", "to": "new_state", "as": "effects"},
                {"from": "new_state", "to": "out", "as": "fn", "type": "ref"}
            ]
        },
        {
            "id": "expand_contract_effect",
            "out": "out",
            "nodes": [
                {"id": "in"},
                {"id": "state", "ref": "arg", "value": "state"},
                {"id": "display_graph_path", "value": "display_graph"},
                {"id": "selected_path", "value": "selected"},
                {"id": "node_id", "ref": "arg", "value": "payload.id"},
                {"id": "display_graph", "ref": "arg", "value": "state.display_graph"},
                {"id": "expand_contract", "ref": "expand_contract"},
                {"id": "expand_contract_display_graph", "ref": "get"},
                {"id": "expand_contract_selected", "ref": "get"},
                {"id": "set_display_graph", "ref": "set"},
                {"id": "set_selected", "ref": "set"},
                {"id": "update_sim_effector", "ref": "arg", "value": "state.update_sim_effect"},
                {"id": "update_sim_effect", "ref": "new_array"},
                {"id": "effects", "ref": "new_array"},
                {"id": "new_state"},
                {"id": "return_value"},
                {"id": "out", "ref": "hyperapp_action_effect"}
            ],
            "edges": [
                {"from": "in", "to": "out", "ref": "args"},
                {"from": "state", "to": "set_display_graph", "as": "target"},
                {"from": "node_id", "to": "expand_contract", "as": "selected"},
                {"from": "display_graph", "to": "expand_contract", "as": "display_graph"},
                {"from": "expand_contract", "to": "expand_contract_display_graph", "as": "target"},
                {"from": "display_graph_path", "to": "expand_contract_display_graph", "as": "path"},
                {"from": "display_graph_path", "to": "set_display_graph", "as": "path"},
                {"from": "expand_contract_display_graph", "to": "set_display_graph", "as": "value"},
                {"from": "expand_contract", "to": "expand_contract_selected", "as": "target"},
                {"from": "selected_path", "to": "expand_contract_selected", "as": "path"},
                {"from": "expand_contract_selected", "to": "set_selected", "as": "value"},
                {"from": "selected_path", "to": "set_selected", "as": "path"},
                {"from": "set_display_graph", "to": "set_selected", "as": "target"},
                {"from": "expand_contract", "to": "set_selected"},
                {"from": "set_selected", "to": "new_state"},
                {"from": "update_sim_effector", "to": "update_sim_effect", "as": "a0"},
                {"from": "new_state", "to": "update_sim_effect", "as": "a1"},
                {"from": "update_sim_effect", "to": "effects", "as": "a0"},
                {"from": "set_selected", "to": "return_value", "as": "state"},
                {"from": "effects", "to": "return_value", "as": "effects"},
                {"from": "return_value", "to": "out", "as": "fn", "type": "ref"}
            ]
        },
        {
            "id": "delete_node",
            "out": "out",
            "nodes": [
                {"id": "in"},
                {
                    "id": "state",
                    "ref": "arg",
                    "value": "state"
                },
                {
                    "id": "nodes",
                    "ref": "arg",
                    "value": "state.display_graph.nodes"
                },
                {
                    "id": "edges",
                    "ref": "arg",
                    "value": "state.display_graph.edges"
                },
                {
                    "id": "update_sim_effect",
                    "ref": "arg",
                    "value": "state.update_sim_effect"
                },
                {
                    "id": "display_graph_out",
                    "ref": "arg",
                    "value": "state.display_graph.out"
                },
                {
                    "id": "edges_path",
                    "value": "display_graph.edges"
                },
                {
                    "id": "nodes_path",
                    "value": "display_graph.nodes"
                },
                {
                    "id": "selected_path",
                    "value": "selected"
                },
                {
                    "id": "node_id",
                    "ref": "arg",
                    "value": "payload.id"
                },
                {
                    "id": "edge",
                    "ref": "arg",
                    "value": "edge"
                },
                {
                    "id": "node",
                    "ref": "arg",
                    "value": "node"
                },
                {
                    "id": "new_nodes",
                    "script": "return nodes.filter(n => n.id !== node_id)"
                },
                {
                    "id": "edge_filter_fn",
                    "script": "return !(edge.to === node || edge.from === node)"
                },
                {
                    "id": "filterable_edges",
                    "script": "return edges.map(e => ({edge: e, node: node_id}))"
                },
                {
                    "id": "new_filtered_edges",
                    "ref": "filter"
                },
                {
                    "id": "new_edges",
                    "script": "return edges.map(e => e.edge)"
                },
                {
                    "id": "new_selected",
                    "script": "return [edges.find(e => e.from === node_id)?.to ?? out]"
                },
                {
                    "id": "set_selected",
                    "ref": "set"
                },
                {
                    "id": "set_nodes",
                    "ref": "set"
                },
                {
                    "id": "set_edges",
                    "ref": "set"
                },
                {
                    "id": "new_state"
                },
                {
                    "id": "effects",
                    "script": "return [[update_sim_effect, new_state.state]]"
                },
                {"id": "out", "ref": "hyperapp_action_effect"}
            ],
            "edges": [
                {"from": "state", "to": "set_edges", "as": "target"},
                {"from": "node_id", "to": "new_nodes", "as": "node_id"},
                {"from": "nodes", "to": "new_nodes", "as": "nodes"},
                {"from": "node_id", "to": "filterable_edges", "as": "node_id"},
                {"from": "new_nodes", "to": "set_nodes", "as": "value"},
                {"from": "nodes_path", "to": "set_nodes", "as": "path"},
                {"from": "set_nodes", "to": "set_selected", "as": "target"},
                {"from": "edges", "to": "filterable_edges", "as": "edges"},
                {"from": "filterable_edges", "to": "new_filtered_edges", "as": "arr"},
                {"from": "node", "to": "edge_filter_fn", "as": "node"},
                {"from": "edge", "to": "edge_filter_fn", "as": "edge"},
                {"from": "edge_filter_fn", "to": "new_filtered_edges", "as": "fn", "type": "ref"},
                {"from": "edges", "to": "set_edges", "as": "value"},
                {"from": "new_filtered_edges", "to": "new_edges", "as": "edges"},
                {"from": "new_edges", "to": "set_edges", "as": "value"},
                {"from": "edges_path", "to": "set_edges", "as": "path"},
                {"from": "in", "to": "out", "as": "args"},
                {"from": "set_edges", "to": "set_nodes", "as": "target"},
                {"from": "edges", "to": "new_selected", "as": "edges"},
                {"from": "node_id", "to": "new_selected", "as": "node_id"},
                {"from": "display_graph_out", "to": "new_selected", "as": "out"},
                {"from": "new_selected", "to": "set_selected", "as": "value"},
                {"from": "selected_path", "to": "set_selected", "as": "path"},
                {"from": "set_selected", "to": "new_state", "as": "state"},
                {"from": "new_state", "to": "effects", "as": "new_state"},
                {
                    "from": "update_sim_effect",
                    "to": "effects",
                    "as": "update_sim_effect"
                },
                {
                    "from": "effects",
                    "to": "new_state",
                    "as": "effects"
                },
                {"from": "new_state", "to": "out", "as": "fn", "type": "ref"}
            ]
        },
        {
            "id": "add_edge",
            "out": "out",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "add_edge_fn",
                    "out": "out",
                    "nodes":[
                        {
                            "id": "in"
                        },
                        {
                            "id": "payload_edge",
                            "ref": "arg",
                            "value": "payload"
                        },
                        {
                            "id": "state",
                            "ref": "arg",
                            "value": "state"
                        },
                        {
                            "id": "new_edge",
                            "script": "return {...payload_edge, as: `arg${sibling_count}`}"
                        },
                        {
                            "id": "update_sim_effect",
                            "ref": "arg",
                            "value": "state.update_sim_effect"
                        },
                        {
                            "id": "effects",
                            "script": "return [[update_sim_effect, new_state]]"
                        },
                        {
                            "id": "edges",
                            "ref": "arg",
                            "value": "state.display_graph.edges"
                        },
                        {
                            "id": "calculate_sibling_count",
                            "script": "return edges.filter(e => e.to === new_edge.to).length"
                        },
                        {
                            "id": "edges_path",
                            "value": "display_graph.edges"
                        },
                        {
                            "id": "new_edges",
                            "ref": "append"
                        },
                        {
                            "id": "set_new_edges",
                            "ref": "set"
                        },
                        {
                            "id": "out"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "out",
                            "as": "args"
                        },
                        {
                            "from": "edges",
                            "to": "new_edges",
                            "as": "array"
                        },
                        {
                            "from": "edges",
                            "to": "calculate_sibling_count",
                            "as": "edges"
                        },
                        {
                            "from": "payload_edge",
                            "to": "calculate_sibling_count",
                            "as": "new_edge"
                        },
                        {
                            "from": "payload_edge",
                            "to": "new_edge",
                            "as": "payload_edge"
                        },
                        {
                            "from": "calculate_sibling_count",
                            "to": "new_edge",
                            "as": "sibling_count"
                        },
                        {
                            "from": "new_edge",
                            "to": "new_edges",
                            "as": "item"
                        },
                        {
                            "from": "state",
                            "to": "set_new_edges",
                            "as": "target"
                        },
                        {
                            "from" :"edges_path",
                            "to": "set_new_edges",
                            "as": "path"
                        },
                        {
                            "from": "new_edges",
                            "to": "set_new_edges",
                            "as": "value"
                        },
                        {
                            "from": "update_sim_effect",
                            "to": "effects",
                            "as": "update_sim_effect"
                        },
                        {
                            "from": "set_new_edges",
                            "to": "effects",
                            "as": "new_state"
                        },
                        {
                            "from": "set_new_edges",
                            "to": "out",
                            "as": "state"
                        },
                        {
                            "from": "effects",
                            "to": "out",
                            "as": "effects"
                        }
                    ]
                },
                {
                    "id": "out",
                    "ref": "hyperapp_action_effect"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                },
                {
                    "from": "add_edge_fn",
                    "to": "out",
                    "as": "fn",
                    "type": "ref"
                }
            ]
        },
        {
            "id": "save_effect",
            "script": "return (dispatch, payload) => { localStorage.setItem('display_graph', JSON.stringify(payload.display_graph)); localStorage.setItem('display_graph_' + Date.now(), JSON.stringify(payload.display_graph));}"
        },
        {
            "id": "focus_effect",
            "script": "return (dispatch, payload) => requestAnimationFrame(() => document.querySelector(payload.selector).focus())"
        },
        {
            "id": "blur_effect",
            "script": "return (dispatch, payload) => requestAnimationFrame(() => document.querySelector(payload.selector).blur())"
        },
        {
            "id": "update_node_action",
            "out": "out",
            "nodes": [
                {"id": "in"},
                {"id": "state", "ref": "arg", "value": "state"},
                {"id": "nodes", "ref": "arg", "value": "state.display_graph.nodes"},
                {"id": "edges", "ref": "arg", "value": "state.display_graph.edges"},
                {"id": "display_graph_nodes_path", "value": "display_graph.nodes"},
                {"id": "display_graph_edges_path", "value": "display_graph.edges"},
                {"id": "node_id", "ref": "arg", "value": "payload.id"},
                {"id": "node_properties", "ref": "arg", "value": "payload.properties"},
                {"id": "replace_node", "script": "return nodes.map(n => n.id === node_id ? Object.assign({}, n, update) : n)"},
                {"id": "arg_value", "script": "const node = nodes.find(n => n.id === node_id); return node.ref === 'arg' ? node.value : undefined"},
                {"id": "replace_edges", "script": "return arg_value ? edges.map(e => e.from === node_id ? {...e, as: arg_value} : e) : edges"},
                {"id": "display_graph_nodes_path", "value": "display_graph.nodes"},
                {"id": "set_display_graph_nodes", "ref": "set"},
                {"id": "set_display_graph_edges", "ref": "set"},
                {"id": "result"},
                {"id": "out", "ref": "hyperapp_action"}
            ],
            "edges": [
                {"from": "in", "to": "out", "as": "args"},
                {"from": "nodes", "to": "replace_node", "as": "nodes"},
                {"from": "edges", "to": "replace_edges", "as": "edges"},
                {"from": "node_id", "to": "replace_node", "as": "node_id"},
                {"from": "node_properties", "to": "replace_node", "as": "update"},
                {"from": "state", "to": "set_display_graph_nodes", "as": "target"},
                {"from": "display_graph_nodes_path", "to": "set_display_graph_nodes", "as": "path"},
                {"from": "replace_node", "to": "set_display_graph_nodes", "as": "value"},
                {"from": "set_display_graph_nodes", "to": "set_display_graph_edges", "as": "target"},
                {"from": "replace_node", "to": "arg_value", "as": "nodes"},
                {"from": "node_id", "to": "arg_value", "as": "node_id"},
                {"from": "arg_value", "to": "replace_edges", "as": "arg_value"},
                {"from": "node_id", "to": "replace_edges", "as": "node_id"},
                {"from": "replace_edges", "to": "set_display_graph_edges", "as": "value"},
                {"from": "display_graph_edges_path", "to": "set_display_graph_edges", "as": "path"},
                {"from": "set_display_graph_edges", "to": "result", "as": "state"},
                {"from": "result", "to": "out", "as": "fn", "type": "ref"}
            ]
        },
        {
            "id": "update_node",
            "out": "out",
            "nodes": [
                {"id": "in"},
                {"id": "update_node_action", "ref": "update_node_action"},
                {"id": "out", "ref": "hyperapp_action_effect"}
            ],
            "edges": [
                {"from": "in", "to": "out", "as": "args"},
                {"from": "update_node_action", "to": "out", "as": "fn"}
            ]
        },
        {
            "id": "update_edge_action",
            "out": "out",
            "nodes": [
                {"id": "in"},
                {"id": "state", "ref": "arg", "value": "state"},
                {"id": "edges", "ref": "arg", "value": "state.display_graph.edges"},
                {"id": "display_graph_edges_path", "value": "display_graph.edges"},
                {"id": "edge", "ref": "arg", "value": "payload.id"},
                {"id": "properties", "ref": "arg", "value": "payload.properties"},
                {"id": "replace_edge", "script": "return edges.map(e => e.from === edge.from && e.to === edge.to ? Object.assign({}, e, Object.fromEntries(Object.entries(update).map(e => [e[0], e[1] === '' ? undefined : e[1]]))) : e)"},
                {"id": "display_graph_edges_path", "value": "display_graph.edges"},
                {"id": "set_display_graph_edges", "ref": "set"},
                {"id": "result"},
                {"id": "out", "ref": "hyperapp_action"}
            ],
            "edges": [
                {"from": "in", "to": "out", "as": "args"},
                {"from": "edges", "to": "replace_edge", "as": "edges"},
                {"from": "edge", "to": "replace_edge", "as": "edge"},
                {"from": "properties", "to": "replace_edge", "as": "update"},
                {"from": "state", "to": "set_display_graph_edges", "as": "target"},
                {"from": "display_graph_edges_path", "to": "set_display_graph_edges", "as": "path"},
                {"from": "replace_edge", "to": "set_display_graph_edges", "as": "value"},
                {"from": "set_display_graph_edges", "to": "result", "as": "state"},
                {"from": "result", "to": "out", "as": "fn", "type": "ref"}
            ]
        },
        {
            "id": "update_edge",
            "out": "out",
            "nodes": [
                {"id": "in"},
                {"id": "update_edge_action", "ref": "update_edge_action"},
                {"id": "out", "ref": "hyperapp_action_effect"}
            ],
            "edges": [
                {"from": "in", "to": "out", "as": "args"},
                {"from": "update_edge_action", "to": "out", "as": "fn"}
            ]
        },
        {
            "id": "show_edit_text",
            "nodes": [
                {"id": "in"},
                {"id": "state", "ref": "arg", "value": "state"},
                {"id": "display_graph", "ref": "arg", "value": "state.display_graph"},
                {"id": "html_id", "ref": "arg", "value": "state.html_id"},
                {"id": "oneditconfirm", "ref": "arg", "value": "payload.oneditconfirm"},
                {"id": "id", "ref": "arg", "value": "payload.id"},
                {"id": "current_value", "ref": "arg", "value": "payload.value"},
                {"id": "property", "ref": "arg", "value": "payload.property"},
                {"id": "editing_path", "value": "editing"},
                {"id": "edit_value_path", "value": "edit_value"},
                {"id": "edit_id_path", "value": "edit_id"},
                {"id": "edit_onconfirm_path", "value": "oneditconfirm"},
                {"id": "set_editing", "ref": "set"},
                {"id": "set_edit_value", "ref": "set"},
                {"id": "set_edit_onconfirm", "ref": "set"},
                {"id": "set_edit_id", "ref": "set"},
                {"id": "focus_props", "script": "return {'selector': `#${html_id}-edit-value textarea`, focus: true}"},
                {"id": "focus_effector", "ref": "focus_effect"},
                {"id": "focus_effect", "ref": "new_array"},
                {"id": "effects", "ref": "new_array"},
                {"id": "result"},
                {"id": "out", "ref": "hyperapp_action_effect"}
            ],
            "edges": [
                {"from": "in", "to": "out", "as": "args"},
                {"from": "editing_path", "to": "set_editing", "as": "path"},
                {"from": "property", "to": "set_editing", "as": "value"},
                {"from": "state", "to": "set_editing", "as": "target"},
                {"from": "display_graph", "to": "selected_node", "as": "display_graph"},
                {"from": "property", "to": "current_node_value", "as": "path"},
                {"from": "selected_node", "to": "current_node_value", "as": "target"},
                {"from": "set_editing", "to": "set_edit_value", "as": "target"},
                {"from": "edit_value_path", "to": "set_edit_value", "as": "path"},
                {"from": "current_value", "to": "set_edit_value", "as": "value"},
                {"from": "set_edit_value", "to": "set_edit_onconfirm", "as": "target"},
                {"from": "edit_onconfirm_path", "to": "set_edit_onconfirm", "as": "path"},
                {"from": "oneditconfirm", "to": "set_edit_onconfirm", "as": "value"},
                {"from": "set_edit_onconfirm", "to": "set_edit_id", "as": "target"},
                {"from": "edit_id_path", "to": "set_edit_id", "as": "path"},
                {"from": "id", "to": "set_edit_id", "as": "value"},
                {"from": "focus_effector", "to": "focus_effect", "as": "a0"},
                {"from": "html_id", "to": "focus_props", "as": "html_id"},
                {"from": "focus_props", "to": "focus_effect", "as": "a1"},
                {"from": "focus_effect", "to": "effects", "as": "a0"},
                {"from": "set_edit_id", "to": "result", "as": "state"},
                {"from": "effects", "to": "result", "as": "effects"},
                {"from": "result", "to": "out", "as": "fn", "type": "ref"}
            ]
        },
        {
            "id": "confirm_edit_text",
            "nodes": [
                {"id": "in"},
                {"id": "state", "ref": "arg", "value": "state"},
                {"id": "property", "ref": "arg", "value": "state.editing"},
                {"id": "payload_value", "ref": "arg", "value": "state.edit_value"},
                {"id": "id", "ref": "arg", "value": "state.edit_id"},
                {"id": "edit_id_path", "ref": "arg", "value": "edit_id"},
                {"id": "on_change", "ref": "arg", "value": "state.oneditconfirm"},
                {"id": "html_id", "ref": "arg", "value": "state.html_id"},
                {"id": "false", "value": false},
                {"id": "empty_string", "value": ""},
                {"id": "editing_path", "value": "editing"},
                {"id": "edit_value_path", "value": "edit_value"},
                {"id": "set_editing", "ref": "set"},
                {"id": "set_edit_value", "ref": "set"},
                {"id": "set_edit_id", "ref": "delete"},
                {"id": "change_effector", "ref": "hyperapp_action_effect"},
                {"id": "change_effect_payload"},
                {"id": "change_effect", "ref": "new_array"},
                {"id": "blur_payload", "script": "return {selector: `#${html_id}-edit-value textarea`}"},
                {"id": "blur_effector", "ref": "blur_effect"},
                {"id": "blur_effect", "ref": "new_array"},
                {"id": "empty", "value": {}},
                {"id": "new_node_props", "ref": "set"},
                {"id": "effects", "ref": "new_array"},
                {"id": "result"},
                {"id": "out", "ref": "hyperapp_action_effect"}
            ],
            "edges": [
                {"from": "in", "to": "out", "as": "args"},
                {"from": "editing_path", "to": "set_editing", "as": "path"},
                {"from": "false", "to": "set_editing", "as": "value"},
                {"from": "state", "to": "set_editing", "as": "target"},
                {"from": "empty_string", "to": "set_edit_value", "as": "value"},
                {"from": "set_editing", "to": "set_edit_value", "as": "target"},
                {"from": "edit_value_path", "to": "set_edit_value", "as": "path"},
                {"from": "empty", "to": "new_node_props", "as": "target"},
                {"from": "property", "to": "new_node_props", "as": "path"},
                {"from": "payload_value", "to": "new_node_props", "as": "value"},
                {"from": "set_edit_value", "to": "set_edit_id", "as": "target"},
                {"from": "edit_id_path", "to": "set_edit_id", "as": "path"},
                {"from": "set_edit_id", "to": "result", "as": "state"},
                {"from": "new_node_props", "to": "change_effect_payload", "as": "properties"},
                {"from": "id", "to": "change_effect_payload", "as": "id"},
                {"from": "on_change", "to": "change_effector", "as": "fn"},
                {"from": "change_effector", "to": "change_effect", "as": "a0"},
                {"from": "change_effect_payload", "to": "change_effect", "as": "a1"},
                {"from": "change_effect", "to": "effects", "as": "a0"},
                {"from": "html_id", "to": "blur_payload", "as": "html_id"},
                {"from": "blur_payload", "to": "blur_effect", "as": "a1"},
                {"from": "blur_effector", "to": "blur_effect", "as": "a0"},
                {"from": "blur_effect", "to": "effects", "as": "a1"},
                {"from": "effects", "to": "result", "as": "effects"},
                {"from": "result", "to": "out", "as": "fn", "type": "ref"}
            ]
        },
        {
            "id": "open_reference_popover",
            "out": "out",
            "nodes": [
                {"id": "in"},
                {"id": "state", "ref": "arg", "value": "state"},
                {"id": "nodes", "ref": "arg", "value": "state.display_graph.nodes"},
                {"id": "edges", "ref": "arg", "value": "state.display_graph.edges"},
                {"id": "levels", "ref": "arg", "value": "state.levels"},
                {"id": "node_id", "ref": "arg", "value": "payload.id"},
                {"id": "set_popover_graph_path", "value": "popover_graph"},
                {"id": "update_node", "ref": "update_node"},
                {"id": "clear_popover", "ref": "clear_popover_graph"},
                {"id": "valid_nodes", "script": "return nodes.filter(n => !n.ref && !levels.level_by_node.has(n.id))"},
                {"id": "popover_graph_nodes", "script": "return nodes.map(n => ({id: `reference-popover${n.id}`, name: n.name ?? n.id, value: n.hasOwnProperty('script') || n.hasOwnProperty('nodes') ? [[update_node, {id: node_id, properties: {ref: n.id}}], [clear_popover]] : []})).concat([{id: 'out', name: 'reference nodes'}])"},
                {"id": "popover_graph_edges", "script": "return edges.filter(e => !!nodes.find(n => e.to === n.id)).map(e => ({from: `reference-popover${e.from}`, to:  `reference-popover${e.to}`})).concat(nodes.filter(n => edges.filter(e => e.from === n.id).length === 0).map(n => ({from: `reference-popover${n.id}`, to: 'out'})))"},
                {"id": "popover_graph_out", "value": "out"},
                {"id": "popover_graph_value"},
                {"id": "show_popover_graph_payload"},
                {"id": "show_popover_graph", "ref": "show_popover_graph"},
                {"id": "show_popover_graph_effect", "ref": "new_array"},
                {"id": "set_popover_graph", "ref": "set"},
                {"id": "effects", "ref": "new_array"},
                {"id": "result"},
                {"id": "out", "ref": "hyperapp_action_effect"}
            ],
            "edges": [
                {"from": "in", "to": "out", "as": "args"},
                {"from": "nodes", "to": "valid_nodes", "as": "nodes"},
                {"from": "edges", "to": "popover_graph_edges", "as": "edges"},
                {"from": "levels", "to": "valid_nodes", "as": "levels"},
                {"from": "levels", "to": "popover_graph_edges", "as": "levels"},
                {"from": "node_id", "to": "popover_graph_nodes", "as": "node_id"},
                {"from": "clear_popover", "to": "popover_graph_nodes", "as": "clear_popover"},
                {"from": "update_node", "to": "popover_graph_nodes", "as": "update_node"},
                {"from": "valid_nodes", "to": "popover_graph_nodes", "as": "nodes"},
                {"from": "popover_graph_nodes", "to": "popover_graph_value", "as": "nodes"},
                {"from": "valid_nodes", "to": "popover_graph_edges", "as": "nodes"},
                {"from": "popover_graph_edges", "to": "popover_graph_value", "as": "edges"},
                {"from": "popover_graph_out", "to": "popover_graph_value", "as": "out"},
                {"from": "popover_graph_value", "to": "set_popover_graph", "as": "value"},
                {"from": "set_popover_graph_path", "to": "set_popover_graph", "as": "path"},
                {"from": "state", "to": "set_popover_graph", "as": "target"},
                {"from": "show_popover_graph", "to": "show_popover_graph_effect", "as": "a0"},
                {"from": "popover_graph_value", "to": "show_popover_graph_payload", "as": "popover_graph"},
                {"from": "show_popover_graph_payload", "to": "show_popover_graph_effect", "as": "a1"},
                {"from": "show_popover_graph_effect", "to": "effects", "as": "a0"},
                {"from": "effects", "to": "result", "as": "effects"},
                {"from": "state", "to": "result", "as": "state"},
                {"from": "result", "to": "out", "as": "fn", "type": "ref"}
            ]
        },
        {
            "id": "add_node",
            "out": "out",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "add_node_fn",
                    "out": "out",
                    "nodes":[
                        {
                            "id": "in"
                        },
                        {
                            "id": "id",
                            "ref": "arg",
                            "value": "payload.id"
                        },
                        {"id": "payload", "ref": "arg", "value": "payload"},
                        {
                            "id": "id_array",
                            "ref": "new_array"
                        },
                        {
                            "id": "state",
                            "ref": "arg",
                            "value": "state"
                        },
                        {
                            "id": "update_sim_effect",
                            "ref": "arg",
                            "value": "state.update_sim_effect"
                        },
                        {
                            "id": "nodes",
                            "ref": "arg",
                            "value": "state.display_graph.nodes"
                        },
                        {
                            "id": "effects",
                            "script": "return [[update_sim_effect, new_state]]"
                        },
                        {
                            "id": "nodes_path",
                            "value": "display_graph.nodes"
                        },
                        {
                            "id": "selected_path",
                            "value": "selected"
                        },
                        {
                            "id": "new_node"
                        },
                        {
                            "id": "new_nodes",
                            "ref": "append"
                        },
                        {
                            "id": "set_new_nodes",
                            "ref": "set"
                        },
                        {
                            "id": "set_selected",
                            "ref": "set"
                        },
                        {
                            "id": "new_state"
                        },
                        {
                            "id": "out"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "out",
                            "as": "args"
                        },
                        {
                            "from": "payload",
                            "to": "new_node"
                        },
                        {
                            "from": "id",
                            "to": "id_array",
                            "as": "arg0"
                        },
                        {
                            "from": "nodes",
                            "to": "new_nodes",
                            "as": "array"
                        },
                        {
                            "from": "new_node",
                            "to": "new_nodes",
                            "as": "item"
                        },
                        {
                            "from": "state",
                            "to": "set_new_nodes",
                            "as": "target"
                        },
                        {
                            "from" :"nodes_path",
                            "to": "set_new_nodes",
                            "as": "path"
                        },
                        {
                            "from": "new_nodes",
                            "to": "set_new_nodes",
                            "as": "value"
                        },
                        {
                            "from": "update_sim_effect",
                            "to": "effects",
                            "as": "update_sim_effect"
                        },
                        {
                            "from": "set_new_nodes",
                            "to": "set_selected",
                            "as": "target"
                        },
                        {
                            "from": "selected_path",
                            "to": "set_selected",
                            "as": "path"
                        },
                        {
                            "from": "id_array",
                            "to": "set_selected",
                            "as": "value"
                        },
                        {
                            "from": "set_selected",
                            "to": "new_state"
                        },
                        {
                            "from": "new_state",
                            "to": "effects",
                            "as": "new_state"
                        },
                        {
                            "from": "new_state",
                            "to": "out",
                            "as": "state"
                        },
                        {
                            "from": "effects",
                            "to": "out",
                            "as": "effects"
                        }
                    ]
                },
                {
                    "id": "out",
                    "ref": "hyperapp_action_effect"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                },
                {
                    "from": "add_node_fn",
                    "to": "out",
                    "as": "fn",
                    "type": "ref"
                }

            ]
        },
        {
            "id": "onkey_fn_body",
            "args": [
                "args"
            ],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "add_node_effect",
                    "ref": "add_node"
                },
                {
                    "id": "add_edge_effect",
                    "ref": "add_edge"
                },
                {
                    "id": "delete_node_effect",
                    "ref": "delete_node"
                },
                {
                    "id": "key_event",
                    "ref": "arg",
                    "value": "payload"
                },
                {
                    "id": "key",
                    "args": [
                        "ev"
                    ],
                    "script": "return ev.key?.toLowerCase()"
                },
                {
                    "id": "key_inputs",
                    "script": "return (state.editing !== false || state.search !== false) ? ev.key === 'escape' ? ['escape'] : [] : [((ev.ctrlKey ? 'ctrl_' : '') + (ev.shiftKey ? 'shift_' : '') + ev.key.toLowerCase())]"
                },
                {
                    "id": "key_log",
                    "ref": "log"
                },
                {
                    "id": "state",
                    "ref": "arg",
                    "value": "state"
                },
                {
                    "id": "randid",
                    "ref": "arg",
                    "value": "state.randid"
                },
                {
                    "id": "html_id",
                    "ref": "arg",
                    "value": "html_id"
                },
                {
                    "id": "arg_display_graph",
                    "ref": "arg",
                    "value": "state.display_graph"
                },
                {
                    "id": "get_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected[0]"
                },
                {
                    "id": "find_selected"
                },
                {
                    "id": "filter_editing",
                    "args": [
                        "editing"
                    ],
                    "script": "return editing ? [] : {}"
                },
                {
                    "id": "selected_node",
                    "ref": "selected_node"
                },
                {
                    "id": "save_effect",
                    "ref": "save_effect"
                },
                {
                    "id": "save",
                    "script": "return [[save_effect, {display_graph}]]",
                    "script_": "return [key === 's' && ctrlKey === true && [(_, display_graph) => { localStorage.setItem('display_graph', JSON.stringify(display_graph)); localStorage.setItem('display_graph_' + Date.now(), JSON.stringify(display_graph));}, display_graph]]"
                },
                {
                    "id": "down",
                    "args": [
                        "key",
                        "selected",
                        "editing",
                        "display_graph"
                    ],
                    "script": "const next_node_edge = display_graph.edges.find(e => e.from === selected[0]); return next_node_edge ? [next_node_edge.to] : selected"
                },
                {
                    "id": "up",
                    "args": [
                        "key",
                        "selected",
                        "editing",
                        "display_graph",
                        "selected_edge"
                    ],
                    "script": "const next_edges = selected_edge ? selected_edge : display_graph.edges.filter(e => e.to === selected[0]); const next_node_edge = selected_edge ? selected_edge : next_edges[Math.ceil(next_edges.length / 2) - 1]; return next_node_edge ? [next_node_edge.from] : selected"
                },
                {
                    "id": "left",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes",
                        "levels",
                        "dimensions"
                    ],
                    "script": "const current_node = nodes.find(n => n.node_id === selected[0]); const siblings = levels.siblings.get(selected[0]); const next_node = siblings.reduce((dist, sibling) => { const sibling_node = nodes.find(n => n.node_id === sibling); if(!sibling_node){ return dist } const xdist = Math.abs(sibling_node.x - current_node.x); dist = (sibling_node.x < current_node.x) && xdist < dist[0] ? [xdist, sibling_node] : dist; return dist }, [dimensions.x]); return next_node[1] ? [next_node[1].node_id] : selected"
                },
                {
                    "id": "left_edge",
                    "args": [
                        "key",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "nodes",
                        "links"
                    ],
                    "script": "const link = links.find(l => l.source.node_child_id === selected_edge.from + '_' + selected_edge.to); return links.filter(l => l.target.node_id === link.target.node_id).reduce(([current, dist], l) => l.source.x < link.source.x && Math.abs(l.source.x - link.source.x) < dist ? [{from: l.source.node_id, to: l.target.node_id} , Math.abs(l.source.x - link.source.x)] : [current, dist], [selected_edge, 10000])[0]"
                },
                {
                    "id": "right",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes",
                        "levels",
                        "dimensions"
                    ],
                    "script": "const current_node = nodes.find(n => n.node_id === selected[0]); const siblings = levels.siblings.get(selected[0]); const next_node = siblings.reduce((dist, sibling) => { const sibling_node = nodes.find(n => n.node_id === sibling); if(!sibling_node){ return dist } const xdist = Math.abs(sibling_node.x - current_node.x); dist = sibling_node.x > current_node.x && xdist < dist[0] ? [xdist, sibling_node] : dist; return dist }, [dimensions.x]); return next_node[1] ? [next_node[1].node_id] : selected"
                },
                {
                    "id": "right_edge",
                    "args": [
                        "key",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "links"
                    ],
                    "script": "const link = links.find(l => l.source.node_child_id === selected_edge.from + '_' + selected_edge.to); return links.filter(l => l.target.node_id === link.target.node_id).reduce(([current, dist], l) => l.source.x > link.source.x && Math.abs(l.source.x - link.source.x) < dist ? [{from: l.source.node_id, to: l.target.node_id} , Math.abs(l.source.x - link.source.x)] : [current, dist], [{to: link.target.node_id, from: link.source.node_id}, 10000])[0]"
                },
                {
                    "id": "v",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "document.querySelector(`#${html_id}-edit-value textarea`).focus(); return 'value';"
                },
                {
                    "id": "t",
                    "args": [
                        "key",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "document.querySelector(`#${html_id}-edit-value input`).focus(); return 'ref';"
                },
                {
                    "id": "shift_t",
                    "args": [
                        "key",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "const new_node = Object.assign({}, display_graph.nodes.find(n => n.id === selected[0])); new_node.id = new_node.name; return {...display_graph, nodes: display_graph.nodes.map(n => n.id === selected[0] ? {id: n.id, ref: n.name, name: n.name} : n).concat([new_node]), edges: display_graph.edges}"
                },
                {
                    "id": "s",
                    "args": [
                        "key",
                        "ctrlKey",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "if(!(key === 's' && ctrlKey === false && editing === false)){ return [] } document.querySelector(`#${html_id}-edit-value textarea`).focus(); return 'script';"
                },
                {
                    "id": "a",
                    "args": [
                        "key",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "if(!(key === 'a' && editing === false)){ return [] } document.querySelector(`#${html_id}-edit-value textarea`).focus(); return selected_edge ? 'as' : 'args';"
                },
                {
                    "id": "n",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "if(!(key === 'n' && editing === false)){ return [] } document.querySelector(`#${html_id}-edit-value textarea`).focus(); return 'name';"
                },
                {
                    "id": "shift_o",
                    "script": "return [[add_node, {id: randid}], [add_edge, {from: randid, to: selected}]]"
                },
                {
                    "id": "o",
                    "script": "return [[add_node, {id: randid}], [add_edge, {from: selected, to: randid}]]"
                },
                {
                    "id": "o_display_graph",
                    "args": [
                        "display_graph"
                    ],
                    "script": "return display_graph"
                },
                {
                    "id": "o_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected"
                },
                {
                    "id": "o_selected_edge",
                    "args": [
                        "selected_edge"
                    ],
                    "script": "return selected_edge"
                },
                {
                    "id": "o_effects",
                    "script": "return o.effects"
                },
                {
                    "id": "x",
                    "args": [
                        "key",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "display_graph_out"
                    ],
                    "script": "return [[delete_node, {id: selected}]]",
                    "script__": "if(selected_edge){const new_edges = display_graph.edges.filter(e => selected_edge.from === e.from && selected_edge.to === e.to); return {display_graph: {...display_graph, edges: new_edges}, selected, selected_edge: false}; } const new_nodes = display_graph.nodes.filter(n => n.id !== selected[0]); const new_edges = display_graph.edges.filter(e => e.to !== selected[0] && e.from !== selected[0]); const to = display_graph.edges.filter(e => e.to === selected[0]); const from = display_graph.edges.filter(e => e.from === selected[0]); for(let i = 0; i < to.length; i++){for(let j = 0; j < from.length; j++){ if(!display_graph.edges.find(e => e.from === to[i].from && e.to === from[j].to)){ new_edges.push({from: to[i].from, to: from[j].to, as: from[j].as});}}}; return {display_graph: {...display_graph, edges: new_edges, nodes: new_nodes}, selected: [to[0]?.from ?? from[0]?.to ?? display_graph.nodes[0].id] };",
                    "script_": "if(selected_edge){display_graph.edges.splice(display_graph.edges.findIndex(e => selected_edge.from === e.from && selected_edge.to === e.to), 1); return {display_graph, selected, selected_edge: false}; } display_graph.nodes = display_graph.nodes.filter(n => n.id !== selected[0]); const new_edges = []; const to = display_graph.edges.filter(e => e.to === selected[0]); const from = display_graph.edges.filter(e => e.from === selected[0]); for(let i = 0; i < to.length; i++){for(let j = 0; j < from.length; j++){ if(!display_graph.edges.find(e => e.from === to[i].from && e.to === from[j].to)){ display_graph.edges.push({from: to[i].from, to: from[j].to, as: from[j].as});}}}; display_graph.edges = display_graph.edges.filter(e => e.to !== selected[0] && e.from !== selected[0]); display_graph.edges.push(...new_edges); return {display_graph, selected: [to[0]?.from ?? from[0]?.to ?? display_graph.nodes[0].id] };"
                },
                {
                    "id": "x_display_graph",
                    "args": [
                        "display_graph"
                    ],
                    "script": "return display_graph"
                },
                {
                    "id": "x_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected"
                },
                {
                    "id": "enter",
                    "args": [
                        "key",
                        "selected"
                    ],
                    "script": "return key === 'enter'"
                },
                {
                    "id": "e",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "selected_edge"
                    ],
                    "script": "return selected_edge ? null : display_graph.edges.find(e => e.to === selected[0]);"
                },
                {
                    "id": "f",
                    "args": [],
                    "script": "document.querySelector(`#${html_id}-search-input`).focus(); return ''"
                },
                {
                    "id": "i",
                    "script": "return !state.show_result"
                },
                {
                    "id": "y",
                    "args": [
                        "node"
                    ],
                    "script": "return node"
                },
                {
                    "id": "p",
                    "args": [
                        "clipboard",
                        "display_graph",
                        "selected"
                    ],
                    "script": "const id = Math.random().toString(36).substr(2, 9); const new_node = {...clipboard, id, name: clipboard.name?.concat('_copy')}; const new_edges = display_graph.edges.filter(e => e.to === clipboard.id || e.from === clipboard.id).map(e => ({...e, to: e.to === clipboard.id ? id : e.to, from: e.from === clipboard.id ? id : e.from})); return {display_graph: {...display_graph, edges: display_graph.edges.concat(new_edges), nodes: display_graph.nodes.concat([new_node])}, selected: [id]};"
                },
                {
                    "id": "p_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected"
                },
                {
                    "id": "p_display_graph",
                    "args": [
                        "display_graph"
                    ],
                    "script": "return display_graph"
                },
                {
                    "id": "q",
                    "args": ["show_all"],
                    "script": "return !show_all"
                },
                {
                    "id": "pending_edges",
                    "args": [
                        "key",
                        "shiftKey",
                        "state"
                    ],
                    "script": "return {edge_from: key === 'c' && !shiftKey ? state.selected[0] : state.edge_from, edge_to: key === 'c' && shiftKey ? state.selected[0] : state.edge_to}"
                },
                {
                    "id": "set_pending_edges",
                    "args": [
                        "pending_edges",
                        "state"
                    ],
                    "script": "const has_both = pending_edges.edge_to && pending_edges.edge_from; state.edge_to = has_both ? undefined : pending_edges.edge_to; state.edge_from = has_both ? undefined : pending_edges.edge_from; return state;"
                },
                {
                    "id": "make_edge",
                    "args": [
                        "pending_edges",
                        "state"
                    ],
                    "script": "if(pending_edges.edge_from && pending_edges.edge_to){ const start_len = state.display_graph.edges.length;  state.display_graph.edges = state.display_graph.edges.filter(e => !(e.from === pending_edges.edge_from && e.to === pending_edges.edge_to)); if(state.display_graph.edges.length === start_len){ state.display_graph.edges.push({from: pending_edges.edge_from, to: pending_edges.edge_to});}} return state.display_graph;"
                },
                {
                    "id": "expand_contract",
                    "ref": "expand_contract"
                },
                {
                    "id": "expand_contract_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected"
                },
                {
                    "id": "expand_contract_display_graph",
                    "args": [
                        "display_graph"
                    ],
                    "script": "return display_graph"
                },
                {
                    "id": "esc",
                    "args": [
                        "key",
                        "target",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "search"
                    ],
                    "script": "target.blur(); if(search !== false){ target.value = ''; return {search: false} } let new_nodes; let value = target.value === '' ? undefined : target.value; if(selected_edge){ display_graph.edges.find(e => e.to === selected_edge.to && e.from === selected_edge.from)[editing] = value === '' ? undefined : value; } else { let ty; new_nodes = display_graph.nodes.map(n => n.id !== selected[0] ? n : (ty = n.ref, {...n, [editing]: value})); if(editing === 'name' || (editing === 'value' && ty === 'arg' && value)){ display_graph.edges.filter(e => e.from === selected[0] && e.as?.startsWith('arg')).forEach(e => e.as = value) }} return {editing: false, edit_value: null, display_graph: {...display_graph, nodes: new_nodes ?? display_graph.nodes}};" },
                {
                    "id": "esc_editing",
                    "args": [
                        "editing"
                    ],
                    "script": "return editing;"
                },
                {
                    "id": "esc_edit_value",
                    "args": [
                        "edit_value"
                    ],
                    "script": "return edit_value;"
                },
                {
                    "id": "esc_display_graph",
                    "args": [
                        "display_graph"
                    ],
                    "script": "return display_graph;"
                },
                {
                    "id": "esc_search",
                    "args": [
                        "search"
                    ],
                    "script": "return search;"
                },
                {
                    "id": "selected_inputs",
                    "args": [
                        "key",
                        "selected_edge"
                    ],
                    "script": "return selected_edge ? undefined : key"
                },
                {
                    "id": "selected",
                    "ref": "switch"
                },
                {
                    "id": "set_selected",
                    "args": [
                        "selected",
                        "state"
                    ],
                    "script": "if(selected) { document.querySelector(`#${html_id}`).dispatchEvent(new CustomEvent(`selectnode`, {detail: {node: selected[0]}}))} return {...state, selected: selected ?? state.selected}"
                },
                {
                    "id": "show_all",
                    "ref": "switch"
                },
                {
                    "id": "set_show_all",
                    "args": ["show_all", "state"],
                    "script": "state.show_all = show_all ?? state.show_all; return state;"
                },
                {
                    "id": "show_result",
                    "ref": "switch"
                },
                {
                    "id": "set_show_result",
                    "args": [
                        "show_result",
                        "state"
                    ],
                    "script": "return {...state, show_result: show_result ?? state.show_result}"
                },
                {
                    "id": "editing",
                    "ref": "switch"
                },
                {
                    "id": "set_editing",
                    "args": [
                        "editing",
                        "state"
                    ],
                    "script": "state.editing = editing ?? state.editing; return state"
                },
                {
                    "id": "display_graph",
                    "ref": "switch"
                },
                {
                    "id": "set_display_graph",
                    "args": [
                        "display_graph",
                        "state"
                    ],
                    "script": "state.display_graph = display_graph ?? state.display_graph; return state"
                },
                {
                    "id": "edit_value",
                    "ref": "switch"
                },
                {
                    "id": "set_edit_value",
                    "args": [
                        "edit_value",
                        "state"
                    ],
                    "script": "state.edit_value = edit_value !== undefined ? edit_value : state.edit_value; return state"
                },
                {
                    "id": "selected_edge_inputs",
                    "args": [
                        "key",
                        "selected_edge",
                        "editing",
                        "search"
                    ],
                    "script": "return (!!selected_edge && key !== 'e' && editing === false) || (key === 'e' && editing === false && search === false) ? [key] : []"
                },
                {
                    "id": "selected_edge",
                    "ref": "switch"
                },
                {
                    "id": "set_selected_edge",
                    "args": [
                        "selected_edge",
                        "state"
                    ],
                    "script": "state.selected_edge = selected_edge === null ? undefined : selected_edge !== undefined ? selected_edge : state.selected_edge; return state"
                },
                {
                    "id": "clipboard",
                    "ref": "switch"
                },
                {
                    "id": "set_clipboard",
                    "args": [
                        "clipboard",
                        "state"
                    ],
                    "script": "state.clipboard = clipboard ? clipboard : state.clipboard; return state"
                },
                {
                    "id": "search",
                    "ref": "switch"
                },
                {
                    "id": "set_search",
                    "args": [
                        "search",
                        "state"
                    ],
                    "script": "state.search = search ?? state.search; return state;"
                },
                {
                    "id": "effects",
                    "ref": "switch"
                },
                {
                    "id": "update_graph_sim",
                    "args": [
                        "state",
                        "key",
                        "selected",
                        "pending_edges"
                    ],
                    "script": "return (!state.editing && state.search === false && (key === 'enter' || key.toLowerCase() === 'o' || key === 'x' || (key === 't' && shiftKey) || (!!pending_edges.edge_to && !!pending_edges.edge_from))) || key === 'escape' || selected"
                },
                {
                    "id": "update",
                    "args": [
                        "key"
                    ],
                    "script": "return key === 'escape'"
                },
                {
                    "id": "out",
                    "ref": "update_graph_display"
                }
            ],
            "edges": [
                {"from" :"state", "to": "html_id"},
                {
                    "from": "state",
                    "to": "key_inputs",
                    "as": "state"
                },
                {
                    "from": "key_event",
                    "to": "key",
                    "as": "ev"
                },
                {
                    "from": "state",
                    "to": "key_inputs",
                    "as": "state"
                },
                {
                    "from": "key_event",
                    "to": "key_inputs",
                    "as": "ev"
                },
                {
                    "from": "state",
                    "to": "get_selected"
                },
                {
                    "from": "state",
                    "to": "selected_node"
                },
                {
                    "from": "get_selected",
                    "to": "selected_node",
                    "as": "node_id"
                },
                {
                    "from": "selected_edge",
                    "to": "selected_inputs",
                    "as": "selected_edge"
                },
                {
                    "from": "key_inputs",
                    "to": "selected_inputs",
                    "as": "key"
                },
                {
                    "from": "key_event",
                    "to": "run"
                },
                {
                    "from": "selected_inputs",
                    "to": "selected",
                    "as": "input"
                },
                {
                    "from": "key_event",
                    "to": "selected_edge_inputs"
                },
                {
                    "from": "key_inputs",
                    "to": "effects",
                    "as": "input"
                },
                {
                    "from": "state",
                    "to": "selected_edge_inputs"
                },
                {
                    "from": "state",
                    "to": "calculate_levels",
                    "as": "state"
                },
                {
                    "from": "selected",
                    "to": "calculate_levels",
                    "as": "selected"
                },
                {
                    "from": "display_graph",
                    "to": "calculate_levels",
                    "as": "display_graph"
                },
                {
                    "from": "key_inputs",
                    "to": "edit_value",
                    "as": "input"
                },
                {
                    "from": "key_inputs",
                    "to": "editing",
                    "as": "input"
                },
                {
                    "from": "key_inputs",
                    "to": "display_graph",
                    "as": "input"
                },
                {
                    "from": "key_inputs",
                    "to": "search",
                    "as": "input"
                },
                {
                    "from": "key_inputs",
                    "to": "clipboard",
                    "as": "input"
                },
                {
                    "from": "key_inputs",
                    "to": "show_all",
                    "as": "input"
                },
                {
                    "from": "key_inputs",
                    "to": "show_result",
                    "as": "input"
                },
                {
                    "from": "state",
                    "to": "filter_editing"
                },
                {
                    "from": "state",
                    "to": "expand_contract"
                },
                {
                    "from": "get_selected",
                    "to": "expand_contract",
                    "as": "node_id"
                },
                {
                    "from": "state",
                    "to": "enter"
                },
                {
                    "from": "key_event",
                    "to": "enter"
                },
                {
                    "from": "arg_display_graph",
                    "to": "save",
                    "as": "display_graph"
                },
                {
                    "from": "save_effect",
                    "to": "save",
                    "as": "save_effect"
                },
                {
                    "from": "filter_editing",
                    "to": "down"
                },
                {
                    "from": "state",
                    "to": "down"
                },
                {
                    "from": "key_event",
                    "to": "down"
                },
                {
                    "from": "state",
                    "to": "up"
                },
                {
                    "from": "key_event",
                    "to": "up"
                },
                {
                    "from": "filter_editing",
                    "to": "up"
                },
                {
                    "from": "state",
                    "to": "left"
                },
                {
                    "from": "key_event",
                    "to": "left"
                },
                {
                    "from": "filter_editing",
                    "to": "left"
                },
                {
                    "from": "state",
                    "to": "left_edge"
                },
                {
                    "from": "key_event",
                    "to": "left_edge"
                },
                {
                    "from": "state",
                    "to": "right_edge"
                },
                {
                    "from": "key_event",
                    "to": "right_edge"
                },
                {
                    "from": "state",
                    "to": "right"
                },
                {
                    "from": "key_event",
                    "to": "right"
                },
                {
                    "from": "filter_editing",
                    "to": "right"
                },
                {
                    "from": "key_event",
                    "to": "v"
                },
                {
                    "from": "state",
                    "to": "v"
                },
                {
                    "from": "key_event",
                    "to": "t"
                },
                {
                    "from": "state",
                    "to": "t"
                },
                {
                    "from": "key_event",
                    "to": "shift_t"
                },
                {
                    "from": "state",
                    "to": "shift_t"
                },
                {
                    "from": "html_id",
                    "to": "s",
                    "as": "html_id"
                },
                {
                    "from": "html_id",
                    "to": "f",
                    "as": "html_id"
                },
                {
                    "from": "html_id",
                    "to": "a",
                    "as": "html_id"
                },
                {
                    "from": "html_id",
                    "to": "t",
                    "as": "html_id"
                },
                {
                    "from": "html_id",
                    "to": "set_selected",
                    "as": "html_id"
                },
                {
                    "from": "key_event",
                    "to": "s"
                },
                {
                    "from": "state",
                    "to": "s"
                },
                {
                    "from": "state",
                    "to": "p"
                },
                {
                    "from": "state",
                    "to": "q"
                },
                {
                    "from": "key_event",
                    "to": "n"
                },
                {
                    "from": "state",
                    "to": "n"
                },
                {
                    "from": "key_event",
                    "to": "a"
                },
                {
                    "from": "state",
                    "to": "a"
                },
                {
                    "from": "get_selected",
                    "to": "x",
                    "as": "selected"
                },
                {
                    "from": "delete_node_effect",
                    "to": "x",
                    "as": "delete_node"
                },
                {
                    "from": "randid",
                    "to": "o",
                    "as": "randid"
                },
                {
                    "from": "randid",
                    "to": "shift_o",
                    "as": "randid"
                },
                {
                    "from": "get_selected",
                    "to": "o",
                    "as": "selected"
                },
                {
                    "from": "get_selected",
                    "to": "shift_o",
                    "as": "selected"
                },
                {
                    "from": "add_edge_effect",
                    "to": "o",
                    "as": "add_edge"
                },
                {
                    "from": "add_edge_effect",
                    "to": "shift_o",
                    "as": "add_edge"
                },
                {
                    "from": "add_node_effect",
                    "to": "o",
                    "as": "add_node"
                },
                {
                    "from": "add_node_effect",
                    "to": "shift_o",
                    "as": "add_node"
                },
                {
                    "from": "state",
                    "to": "i",
                    "as": "state"
                },
                {
                    "from": "state",
                    "to": "e"
                },
                {
                    "from": "selected_node",
                    "to": "y",
                    "as": "node"
                },
                {
                    "from": "down",
                    "to": "selected",
                    "as": "arrowdown"
                },
                {
                    "from": "down",
                    "to": "selected",
                    "as": "j"
                },
                {
                    "from": "up",
                    "to": "selected",
                    "as": "arrowup"
                },
                {
                    "from": "up",
                    "to": "selected",
                    "as": "k"
                },
                {
                    "from": "left",
                    "to": "selected",
                    "as": "arrowleft"
                },
                {
                    "from": "left",
                    "to": "selected",
                    "as": "h"
                },
                {
                    "from": "right",
                    "to": "selected",
                    "as": "arrowright"
                },
                {
                    "from": "right",
                    "to": "selected",
                    "as": "l"
                },
                {
                    "from": "e",
                    "to": "selected_edge",
                    "as": "e"
                },
                {
                    "from": "selected_edge_inputs",
                    "to": "selected_edge",
                    "as": "input"
                },
                {
                    "from": "left_edge",
                    "to": "selected_edge",
                    "as": "arrowleft"
                },
                {
                    "from": "left_edge",
                    "to": "selected_edge",
                    "as": "h"
                },
                {
                    "from": "right_edge",
                    "to": "selected_edge",
                    "as": "arrowright"
                },
                {
                    "from": "right_edge",
                    "to": "selected_edge",
                    "as": "l"
                },
                {
                    "from": "selected_edge",
                    "to": "set_selected_edge",
                    "as": "selected_edge"
                },
                {
                    "from": "v",
                    "to": "editing",
                    "as": "v"
                },
                {
                    "from": "t",
                    "to": "editing",
                    "as": "t"
                },
                {
                    "from": "s",
                    "to": "editing",
                    "as": "s"
                },
                {
                    "from": "n",
                    "to": "editing",
                    "as": "n"
                },
                {
                    "from": "a",
                    "to": "editing",
                    "as": "a"
                },
                {
                    "from": "state",
                    "to": "pending_edges",
                    "as": "state"
                },
                {
                    "from": "key_event",
                    "to": "pending_edges"
                },
                {
                    "from": "pending_edges",
                    "to": "make_edge",
                    "as": "pending_edges"
                },
                {
                    "from": "pending_edges",
                    "to": "set_pending_edges",
                    "as": "pending_edges"
                },
                {
                    "from": "pending_edges",
                    "to": "update_graph_sim",
                    "as": "pending_edges"
                },
                {
                    "from": "selected",
                    "to": "update_graph_sim",
                    "as": "selected"
                },
                {
                    "from": "state",
                    "to": "update_graph_sim",
                    "as": "state"
                },
                {
                    "from": "state",
                    "to": "make_edge",
                    "as": "state"
                },
                {
                    "from": "shift_t",
                    "to": "display_graph",
                    "as": "shift_t"
                },
                {
                    "from": "p",
                    "to": "p_display_graph"
                },
                {
                    "from": "p_display_graph",
                    "to": "display_graph",
                    "as": "p"
                },
                {
                    "from": "p",
                    "to": "p_selected"
                },
                {
                    "from": "p_selected",
                    "to": "selected",
                    "as": "p"
                },
                {
                    "from": "q",
                    "to": "show_all",
                    "as": "q"
                },
                {
                    "from": "i",
                    "to": "show_result",
                    "as": "i"
                },
                {
                    "from": "state",
                    "to": "esc"
                },
                {
                    "from": "key_event",
                    "to": "esc"
                },
                {
                    "from": "esc",
                    "to": "esc_editing"
                },
                {
                    "from": "esc",
                    "to": "esc_edit_value"
                },
                {
                    "from": "esc",
                    "to": "esc_display_graph"
                },
                {
                    "from": "esc",
                    "to": "esc_search"
                },
                {
                    "from": "esc_editing",
                    "to": "editing",
                    "as": "escape"
                },
                {
                    "from": "esc_edit_value",
                    "to": "edit_value",
                    "as": "escape"
                },
                {
                    "from": "esc_display_graph",
                    "to": "display_graph",
                    "as": "escape"
                },
                {
                    "from": "esc_search",
                    "to": "search",
                    "as": "escape"
                },
                {
                    "from": "expand_contract",
                    "to": "expand_contract_display_graph"
                },
                {
                    "from": "expand_contract_display_graph",
                    "to": "display_graph",
                    "as": "enter"
                },
                {
                    "from": "expand_contract",
                    "to": "expand_contract_selected"
                },
                {
                    "from": "expand_contract_selected",
                    "to": "selected",
                    "as": "enter"
                },
                {
                    "from": "f",
                    "to": "search",
                    "as": "f"
                },
                {
                    "from": "x",
                    "to": "effects",
                    "as": "x"
                },
                {
                    "from": "shift_o",
                    "to": "effects",
                    "as": "shift_o"
                },
                {
                    "from": "o",
                    "to": "effects",
                    "as": "o"
                },
                {
                    "from": "save",
                    "to": "effects",
                    "as": "ctrl_s"
                },
                {
                    "from": "y",
                    "to": "clipboard",
                    "as": "y"
                },
                {
                    "from": "make_edge",
                    "to": "display_graph",
                    "as": "c"
                },
                {
                    "from": "make_edge",
                    "to": "display_graph",
                    "as": "shift_c"
                },
                {
                    "from": "set_display_graph",
                    "to": "graph_sim"
                },
                {
                    "from": "state",
                    "to": "set_selected",
                    "as": "state"
                },
                {
                    "from": "selected",
                    "to": "set_selected",
                    "as": "selected"
                },
                {
                    "from": "set_selected",
                    "to": "set_show_all",
                    "as": "state"
                },
                {
                    "from": "show_all",
                    "to": "set_show_all",
                    "as": "show_all"
                },
                {
                    "from": "set_show_all",
                    "to": "set_clipboard",
                    "as": "state"
                },
                {
                    "from": "clipboard",
                    "to": "set_clipboard",
                    "as": "clipboard"
                },
                {
                    "from": "set_clipboard",
                    "to": "set_selected_edge",
                    "as": "state"
                },
                {
                    "from": "set_selected_edge",
                    "to": "set_search",
                    "as": "state"
                },
                {
                    "from": "search",
                    "to": "set_search",
                    "as": "search"
                },
                {
                    "from": "set_search",
                    "to": "set_edit_value",
                    "as": "state"
                },
                {
                    "from": "edit_value",
                    "to": "set_edit_value",
                    "as": "edit_value"
                },
                {
                    "from": "set_edit_value",
                    "to": "set_editing",
                    "as": "state"
                },
                {
                    "from": "editing",
                    "to": "set_editing",
                    "as": "editing"
                },
                {
                    "from": "set_editing",
                    "to": "set_show_result",
                    "as": "state"
                },
                {
                    "from": "show_result",
                    "to": "set_show_result",
                    "as": "show_result"
                },
                {
                    "from": "set_show_result",
                    "to": "set_pending_edges",
                    "as": "state"
                },
                {
                    "from": "set_pending_edges",
                    "to": "set_display_graph",
                    "as": "state"
                },
                {
                    "from": "display_graph",
                    "to": "set_display_graph",
                    "as": "display_graph"
                },
                {
                    "from": "set_display_graph",
                    "to": "out",
                    "as": "state"
                },
                {
                    "from": "key_event",
                    "to": "update_graph_sim"
                },
                {
                    "from": "key_event",
                    "to": "update"
                },
                {
                    "from": "display_graph",
                    "to": "update",
                    "as": "display_graph"
                },
                {
                    "from": "selected",
                    "to": "update",
                    "as": "selected"
                },
                {
                    "from": "set_display_graph",
                    "to": "update",
                    "as": "state"
                },
                {
                    "from": "key_inputs",
                    "to": "update",
                    "as": "key"
                },
                {
                    "from": "key_event",
                    "to": "out",
                    "as": "payload",
                    "type": "resolve"
                },
                {
                    "from": "update",
                    "to": "out",
                    "as": "update",
                    "type": "resolve"
                },
                {
                    "from": "effects",
                    "to": "out",
                    "as": "effects"
                }

            ]
        },
        {
            "id": "simulation",
            "ref": "arg",
            "value": "simulation"
        },
        {
            "id": "arg_sim_update_alpha",
            "ref": "arg",
            "value": "sim_update_alpha"
        },
        {
            "id": "arg_nodes",
            "ref": "arg",
            "value": "nodes"
        },
        {
            "id": "arg_links",
            "ref": "arg",
            "value": "links"
        },
        {
            "id": "arg_selected",
            "ref": "arg",
            "value": "selected"
        },
        {
            "id": "arg_levels",
            "ref": "arg",
            "value": "levels"
        },
        {
            "id": "update_sim",
            "script": "return !simulation ? undefined : _lib.scripts.updateSimulationNodes({display_graph, nodes, links, simulation, selected, levels, sim_update_alpha})"
        },
        {
            "id": "update_sim_in"
        },
        {
            "id": "update_sim_fn",
            "ref": "execute_graph"
        },
        {
            "id": "update_sim_effect",
            "ref": "wrap_effect_fn"
        },
        {
            "id": "stop_propagation_effect",
            "script": "return (_, payload) => {payload.stopPropagation(); payload.preventDefault();}"
        },
        {
            "id": "dispatch_custom_event_effect",
            "script": "return (_, payload) => document.getElementById(`${payload.html_id}`).dispatchEvent(new CustomEvent(payload.name, {detail: payload.detail}))"
        },
        {
            "id": "create_object_graph",
            "out": "out",
            "nodes": [
                {"id": "in"},
                {"id": "in_obj", "ref": "arg", "value": "obj"},
                {"id": "name", "ref": "arg", "value": "name"},
                {"id": "map_obj", "script": "return _lib.no.objToGraph(obj)"},
                {"id": "out_node_id", "script": "return Object.keys(obj)[0]"},
                {"id": "out"}
            ],
            "edges": [
                {"from": "in_obj", "to": "map_obj", "as": "obj"},
                {"from": "in_obj", "to": "out_node_id", "as": "obj"},
                {"from": "name", "to": "out_node", "as": "name"},
                {"from": "map_obj", "to": "out"},
                {"from": "in", "to": "out", "as": "args", "type": "ref"},
                {"from": "out_node_id", "to": "out", "as": "out"}
            ]
        },
        {
            "id": "create_popover_graph",
            "out": "out",
            "nodes": [
                {"id": "in"},
                {"id": "in_nodes", "ref": "arg", "value": "nodes"},
                {"id": "name", "ref": "arg", "value": "name"},
                {"id": "clear_popover", "ref": "clear_popover_graph"},
                {"id": "out_node", "script": "return {'id': 'out', name, value: [[clear_popover]]}"},
                {"id": "out_node_id", "value": "out"},
                {"id": "edges", "script": "return nodes.map(n => ({from: n.id, to: 'out', _needsresolve: true}))"},
                {"id": "nodes", "ref": "append"},
                {"id": "out"}
            ],
            "edges": [
                {"from": "clear_popover", "to": "out_node", "as": "clear_popover"},
                {"from": "name", "to": "out_node", "as": "name"},
                {"from": "out_node", "to": "nodes", "as": "item"},
                {"from": "in_nodes", "to": "nodes", "as": "array"},
                {"from": "in_nodes", "to": "edges", "as": "nodes"},
                {"from": "in", "to": "out", "as": "args", "type": "ref"},
                {"from": "nodes", "to": "out", "as": "nodes"},
                {"from": "edges", "to": "out", "as": "edges"},
                {"from": "out_node_id", "to": "out", "as": "out"}
            ]
        },
        {
            "id": "onclick_graph_action",
            "nodes": [
                {"id": "in"},
                {"id": "payload", "ref": "arg", "value": "payload"},
                {"id": "state", "ref": "arg", "value": "state"},
                {"id": "name", "ref": "arg", "value": "state.display_graph.id"},
                {"id": "display_graph", "ref": "arg", "value": "state.display_graph"},
                {"id": "readonly", "ref": "arg", "value": "state.readonly"},
                {"id": "html_id", "ref": "arg", "value": "state.html_id"},
                {"id": "event_name", "value": "graphclick"},
                {"id": "clear_popover", "ref": "clear_popover_graph"},
                {"id": "clear_popover_effect", "ref": "new_array"},
                {"id": "save_effector", "ref": "save_effect"},
                {"id": "save_payload"},
                {"id": "log_save_payload", "ref": "log"},
                {"id": "save_effect", "ref": "new_array"},
                {"id": "save_node_effects", "ref": "new_array"},
                {"id": "save_name", "value": "save"},
                {"id": "save_id", "value": "save"},
                {"id": "save_node"},
                {"id": "popover_graph_actions", "ref": "new_array"},
                {"id": "popover_graph", "ref": "create_popover_graph"},
                {"id": "show_popover_effector", "ref": "show_popover_graph"},
                {"id": "show_popover_effect", "ref": "new_array"},
                {"id": "show_popover_payload"},
                {"id": "stop_propagation_effector", "ref": "stop_propagation_effect"},
                {"id": "stop_propagation_effect", "ref": "new_array"},
                {"id": "dispatch_on_graph_click_effector", "ref": "dispatch_custom_event_effect"},
                {"id": "dispatch_on_graph_click_payload"},
                {"id": "dispatch_on_graph_click_effect", "ref": "new_array"},
                {"id": "edit_effects", "ref": "new_array"},
                {"id": "readonly_effects", "ref": "new_array"},
                {"id": "effects", "ref": "if"},
                {"id": "result"},
                {"id": "out", "ref": "hyperapp_action"}
            ],
            "edges": [
                {"from": "in", "to": "out", "as": "args"},
                {"from": "payload", "to": "stop_propagation_effect", "as": "a1"},
                {"from": "display_graph", "to": "save_payload", "as": "display_graph"},
                {"from": "clear_popover", "to": "clear_popover_effect", "as": "a0"},
                {"from": "clear_popover_effect", "to": "save_node_effects", "as": "a1"},
                {"from": "save_effector", "to": "save_effect", "as": "a0"},
                {"from": "save_payload", "to": "save_effect", "as": "a1"},
                {"from": "save_effect", "to": "save_node_effects", "as": "a0"},
                {"from": "save_node_effects", "to": "save_node", "as": "value"},
                {"from": "save_name", "to": "save_node", "as": "name"},
                {"from": "save_id", "to": "save_node", "as": "id"},
                {"from": "save_node", "to": "popover_graph_actions", "as": "a"},
                {"from": "name", "to": "popover_graph", "as": "name"},
                {"from": "popover_graph_actions", "to": "popover_graph", "as": "nodes"},
                {"from": "popover_graph", "to": "show_popover_payload", "as": "popover_graph"},
                {"from": "show_popover_effector", "to": "show_popover_effect", "as": "a0"},
                {"from": "show_popover_payload", "to": "show_popover_effect", "as": "a1"},
                {"from": "show_popover_effect", "to": "edit_effects", "as": "a0"},
                {"from": "stop_propagation_effector", "to": "stop_propagation_effect", "as": "a0"},
                {"from": "payload", "to": "stop_propagation_effect", "as": "a1"},
                {"from": "stop_propagation_effect", "to": "edit_effects", "as": "a1"},
                {"from": "html_id", "to": "dispatch_on_graph_click_payload", "as": "html_id"},
                {"from": "event_name", "to": "dispatch_on_graph_click_payload", "as": "name"},
                {"from": "dispatch_on_graph_click_effector", "to": "dispatch_on_graph_click_effect", "as": "a0"},
                {"from": "dispatch_on_graph_click_payload", "to": "dispatch_on_graph_click_effect", "as": "a1"},
                {"from": "dispatch_on_graph_click_effect", "to": "readonly_effects", "as": "a0"},
                {"from": "edit_effects", "to": "effects", "as": "false"},
                {"from": "readonly_effects", "to": "effects", "as": "true"},
                {"from": "readonly", "to": "effects", "as": "pred"},
                {"from": "effects", "to": "result", "as": "effects"},
                {"from": "state", "to": "result", "as": "state"},
                {"from": "result", "to": "out", "as": "fn", "type": "ref"}
            ]
        },
        {
            "id": "onclick_node",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "state",
                    "ref": "arg",
                    "value": "state"
                },
                {
                    "id": "html_id",
                    "ref": "arg",
                    "value": "html_id"
                },
                {
                    "id": "event",
                    "ref": "arg",
                    "value": "payload.event"
                },
                {
                    "id": "node_id",
                    "ref": "arg",
                    "value": "payload.node_id"
                },
                {
                    "id": "arg_selected",
                    "ref": "arg",
                    "value": "state.selected"
                },
                {
                    "id": "readonly",
                    "ref": "arg",
                    "value": "state.readonly"
                },
                {
                    "id": "arg_display_graph",
                    "ref": "arg",
                    "value": "state.display_graph"
                },
                {
                    "id": "wrapped_node_id",
                    "ref": "wrap_array"
                },
                {
                    "id": "get_selected_node",
                    "args": [
                        "node_id",
                        "nodes"
                    ],
                    "script": "return Object.assign({}, nodes.find(n => n.node_id === node_id), display_graph.nodes.find(n => n.id === node_id))"
                },
                {
                    "id": "set_selected",
                    "args": [
                        "selected",
                        "state"
                    ],
                    "script": "document.querySelector(`#${html_id}`).dispatchEvent(new CustomEvent(`selectnode`, {detail: {node: node_id}})); return {...state, selected: [node_id]}"
                },
                {
                    "id": "display_graph_inputs",
                    "args": [
                        "event",
                        "selected",
                        "node"
                    ],
                    "script": "return event.ty === 'down' && node.node_id === selected[0] ? 'expand_contract' : undefined"
                },
                {
                    "id": "display_graph",
                    "ref": "switch"
                },
                {
                    "id": "set_display_graph",
                    "args": [
                        "display_graph",
                        "state"
                    ],
                    "script": "state.display_graph = display_graph ?? state.display_graph; return state"
                },
                {
                    "id": "false",
                    "value": false
                },
                {
                    "id": "should_show_popover",
                    "script": "return !readonly && node_id === selected[0]"
                },
                {
                    "id": "randid",
                    "ref": "arg",
                    "value": "state.randid"
                },
                {"id": "add_node_effect", "ref": "add_node"},
                {"id": "add_edge_effect", "ref": "add_edge"},
                {"id": "delete_node_effect", "ref": "delete_node"},
                {"id": "expand_contract_effect", "ref": "expand_contract_effect"},
                {"id": "open_reference_popover", "ref": "open_reference_popover"},
                {"id": "show_edit_text", "ref": "show_edit_text"},
                {"id": "clear_popover", "ref": "clear_popover_graph"},
                {"id": "update_node", "ref": "update_node_action"},
                {
                    "id": "popover_graph_obj",
                    "script": "return {[selected.node_id]: {inputs: {create_input: [[add_node, {id: randid}], [add_edge, {from: randid, to: selected.node_id }], [clear_popover]], arg: [[add_node, {id: randid, ref: 'arg'}], [add_edge, {from: randid, to: selected.node_id }], [show_edit_text, {id: randid, property:'value', oneditconfirm: update_node, value: ''}], [clear_popover]]}, structure: {delete: [[delete_node, {id: selected.node_id}], [clear_popover]], expand_contract: [[expand_contract, {id: selected.node_id}], [clear_popover]]}, change: {name: [[show_edit_text, {id: selected.node_id, property:'name', oneditconfirm: update_node, value: selected.name}], [clear_popover]], value: [[show_edit_text, {id: selected.node_id, property:'value', oneditconfirm: update_node, value: selected.value}], [clear_popover]], script: [[show_edit_text, {id: selected.node_id, property:'script', oneditconfirm: update_node, value: selected.script}], [clear_popover]], reference: [[open_reference_popover, {id: selected.node_id}]]}}}",
                    "script_": "return { 'out': 'out', 'nodes': [ {'id': 'create_input', 'name': 'create input', value: [[add_node, {id: randid}], [add_edge, {from: randid, to: selected.node_id }], [clear_popover]]}, {'id': 'delete', 'name': 'delete', value: [[delete_node, {id: selected.node_id}], [clear_popover]]},{id: 'expand_contract', name: 'expand / contract', value: [[expand_contract, {id: selected.node_id}], [clear_popover]]}, {'id': 'out', name: selected.node_id, value: [[clear_popover]]}, {'id': 'change_reference', name: 'change reference', value: [[open_reference_popover, {id: selected.node_id}]]}, {'id': 'change_value', name: 'change value', value: [[show_edit_text, {id: selected.node_id, property:'value', oneditconfirm: update_node, value: selected.value}], [clear_popover]]}, {'id': 'change_name', name: 'change name', value: [[show_edit_text, {id: selected.node_id, property:'name', oneditconfirm: update_node, value: selected.name}], [clear_popover]]}, {'id': 'change_script', name: 'change script', value: [[show_edit_text, {id: selected.node_id, property:'script', oneditconfirm: update_node, value: selected.script}], [clear_popover]]} ], 'edges': [ {'from': 'create_input', 'to': 'out'}, {'from': 'delete', 'to': 'out'}, {'from': 'expand_contract', 'to': 'out'}, {from: 'change_reference', to: 'out'}, {'from': 'change_value', to: 'out'}, {'from': 'change_name', to: 'out'}, {'from': 'change_script', to: 'out'} ] }"
                },
                {"id": "popover_graph_value", "ref": "create_object_graph"},
                {
                    "id": "show_popover_payload"
                },
                {
                    "id": "show_popover_effector",
                    "ref": "show_popover_graph"
                },
                {
                    "id": "show_popover_effect",
                    "ref": "new_array"
                },
                {
                    "id": "stop_propagation_effector",
                    "ref": "stop_propagation_effect"
                },
                {
                    "id": "payload",
                    "ref": "arg",
                    "value": "payload"
                },
                {
                    "id": "stop_propagation_effect",
                    "ref": "new_array"
                },
                {
                    "id": "if_show_popover",
                    "ref": "if"
                },
                {
                    "id": "effects",
                    "ref": "new_array"
                },
                {
                    "id": "out",
                    "ref": "update_graph_display"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "args"
                },
                {
                    "from": "state",
                    "to": "html_id"
                },
                {
                    "from": "node_id",
                    "to": "selected_inputs",
                    "as": "node_id"
                },
                {
                    "from": "node_id",
                    "to": "get_selected_node",
                    "as": "node_id"
                },
                {
                    "from": "arg_display_graph",
                    "to": "get_selected_node",
                    "as": "display_graph"
                },
                {
                    "from": "state",
                    "to": "selected_inputs"
                },
                {
                    "from": "state",
                    "to": "get_selected_node"
                },
                {
                    "from": "get_selected_node",
                    "to": "selected_inputs",
                    "as": "node"
                },
                {
                    "from": "event",
                    "to": "selected_inputs",
                    "as": "event"
                },
                {
                    "from": "node_id",
                    "to": "wrapped_node_id",
                    "as": "value"
                },
                {
                    "from": "wrapped_node_id",
                    "to": "selected",
                    "as": "node_id"
                },
                {
                    "from": "state",
                    "to": "set_selected",
                    "as": "state"
                },
                {
                    "from": "node_id",
                    "to": "set_selected",
                    "as": "node_id"
                },
                {
                    "from": "html_id",
                    "to": "set_selected",
                    "as": "html_id"
                },
                {
                    "from": "set_selected",
                    "to": "set_display_graph",
                    "as": "state"
                },
                {
                    "from": "display_graph",
                    "to": "set_display_graph",
                    "as": "display_graph"
                },
                {
                    "from": "get_selected_node",
                    "to": "display_graph_inputs",
                    "as": "node"
                },
                {
                    "from": "state",
                    "to": "display_graph_inputs"
                },
                {
                    "from": "event",
                    "to": "display_graph_inputs",
                    "as": "event"
                },
                {
                    "from": "display_graph_inputs",
                    "to": "display_graph",
                    "as": "input"
                },
                {
                    "from": "state",
                    "to": "expand_contract"
                },
                {
                    "from": "node_id",
                    "to": "expand_contract",
                    "as": "node_id"
                },
                {
                    "from": "expand_contract",
                    "to": "expand_contract_selected"
                },
                {
                    "from": "expand_contract",
                    "to": "expand_contract_display_graph"
                },
                {
                    "from": "expand_contract_selected",
                    "to": "selected",
                    "as": "expand_contract"
                },
                {
                    "from": "expand_contract_display_graph",
                    "to": "display_graph",
                    "as": "expand_contract"
                },
                {
                    "from": "event",
                    "to": "out",
                    "as": "payload"
                },
                {
                    "from": "show_popover_effector",
                    "to": "show_popover_effect",
                    "as": "arg0"
                },
                {
                    "from": "event",
                    "to": "stop_propagation_effect",
                    "as": "a1"
                },
                {
                    "from": "stop_propagation_effector",
                    "to": "stop_propagation_effect",
                    "as": "a0"
                },
                {"from": "randid", "to": "popover_graph_obj", "as": "randid"},
                {
                    "from": "get_selected_node",
                    "to": "popover_graph_obj",
                    "as": "selected"
                },
                {"from": "add_node_effect", "to": "popover_graph_obj", "as": "add_node"},
                {"from": "add_edge_effect", "to": "popover_graph_obj", "as": "add_edge"},
                {"from": "delete_node_effect", "to": "popover_graph_obj", "as": "delete_node"},
                {"from": "expand_contract_effect", "to": "popover_graph_obj", "as": "expand_contract"},
                {"from": "open_reference_popover", "to": "popover_graph_obj", "as": "open_reference_popover"},
                {"from": "show_edit_text", "to": "popover_graph_obj", "as": "show_edit_text"},
                {"from": "clear_popover", "to": "popover_graph_obj", "as": "clear_popover"},
                {"from": "update_node", "to": "popover_graph_obj", "as": "update_node"},
                {"from": "popover_graph_obj", "to": "popover_graph_value", "as": "obj"},
                {
                    "from": "popover_graph_value",
                    "to": "show_popover_payload",
                    "as": "popover_graph"
                },
                {
                    "from": "show_popover_payload",
                    "to": "show_popover_effect",
                    "as": "arg1"
                },
                {
                    "from": "show_popover_effect",
                    "to": "if_show_popover",
                    "as": "true"
                },
                {
                    "from": "false",
                    "to": "if_show_popover",
                    "as": "false"
                },
                {
                    "from": "node_id",
                    "to": "should_show_popover",
                    "as": "node_id"
                },
                {
                    "from": "readonly",
                    "to": "should_show_popover",
                    "as": "readonly"
                },
                {
                    "from": "arg_selected",
                    "to": "should_show_popover",
                    "as": "selected"
                },
                {
                    "from": "should_show_popover",
                    "to": "if_show_popover",
                    "as": "pred"
                },
                {
                    "from": "if_show_popover",
                    "to": "effects",
                    "as": "a1"
                },
                {
                    "from": "stop_propagation_effect",
                    "to": "effects",
                    "as": "a0"
                },
                {
                    "from": "effects",
                    "to": "out",
                    "as": "effects",
                    "type": "resolve"
                },
                {
                    "from": "set_selected",
                    "to": "out",
                    "as": "state"
                },
                {
                    "from": "set_display_graph",
                    "to": "_out",
                    "as": "state"
                }
            ]
        },
        {
            "id": "onclick_node_action",
            "nodes": [
                {"id": "in"},
                {"id": "onclick_node", "ref": "onclick_node"},
                {"id": "out", "ref": "hyperapp_action"}
            ],
            "edges": [
                {"from": "in", "to": "out", "type": "ref", "as": "args"},
                {"from": "onclick_node", "to": "out", "as": "fn", "type": "ref"}
            ]
        },
        {
            "id": "onclick_edge",
            "out": "out",
            "nodes": [
                {"id": "in"},
                {"id": "edge", "ref": "arg", "value": "payload.edge"},
                {"id": "state", "ref": "arg", "value": "state"},
                {"id": "readonly", "ref": "arg", "value": "state.readonly"},
                {"id": "event", "ref": "arg", "value": "payload.event"},
                {"id": "clear_popover", "ref": "clear_popover_graph"},
                {"id": "clear_popover_type", "ref": "clear_popover_graph"},
                {"id": "update_edge", "ref": "update_edge"},
                {"id": "update_edge_action", "ref": "update_edge_action"},
                {"id": "show_edit_text", "ref": "show_edit_text"},
                {"id": "type_popover", "script": "return {out: 'out', nodes: [{id: 'ref', name: 'ref', value: [[update_edge, {id: edge, properties: {type: 'ref'}}], [clear_popover]]}, {id: 'none', name: 'none', value: [[update_edge, {id: edge, properties: {type: undefined}}], [clear_popover]]}, {id: 'resolve', name: 'resolve', value: [[update_edge, {id: edge, properties: {type: 'resolve'}}], [clear_popover]]}, {id: 'out', name: `edge from ${edge.from} to ${edge.to} type`, value: [[clear_popover]]}], edges: [{'from': 'ref', to: 'out'}, {from: 'none', to: 'out'}, {from: 'resolve', to: 'out'}]}"},
                {"id": "popover_graph", "script": "return {out: 'out', nodes: [{id: 'change_type', name: 'change type', value: [[show_popover_graph, {popover_graph: type_popover}]]}, {id: 'change_as',  name: 'change as', value: [[show_edit_text, {id: edge, property: 'as', value: edge.as, oneditconfirm: update_edge}], [clear_popover]]}, {id: 'out', name: `edge from ${edge.from} to ${edge.to}`, value: [[clear_popover]]}], edges: [{from: 'change_type', to: 'out'}, {from: 'change_as', to: 'out'}]}"},
                {"id": "show_popover_graph_payload"},
                {"id": "show_popover_graph_effector", "ref": "show_popover_graph"},
                {"id": "show_popover_graph", "ref": "new_array"},
                {"id": "stop_propagation_effector", "ref": "stop_propagation_effect"},
                {"id": "stop_propagation", "ref": "new_array"},
                {"id": "editable_effects", "ref": "new_array"},
                {"id": "readonly_effects", "ref": "new_array"},
                {"id": "effects", "ref": "if"},
                {"id": "result"},
                {"id": "out", "ref": "hyperapp_action"}
            ],
            "edges": [
                {"from": "in", "to": "out", "as": "args"},
                {"from": "edge", "to": "type_popover", "as" :"edge"},
                {"from": "clear_popover_type", "to": "type_popover", "as": "clear_popover"},
                {"from": "update_edge", "to": "type_popover", "as": "update_edge"},
                {"from": "update_edge_action", "to": "popover_graph", "as": "update_edge"},
                {"from": "type_popover", "to": "popover_graph", "as": "type_popover"},
                {"from": "edge", "to": "clear_popover", "as" :"edge"},
                {"from": "clear_popover", "to": "popover_graph", "as": "clear_popover"},
                {"from": "edge", "to": "popover_graph", "as" :"edge"},
                {"from": "show_edit_text", "to": "popover_graph", "as": "show_edit_text"},
                {"from": "show_popover_graph_effector", "to": "popover_graph", "as": "show_popover_graph"},
                {"from": "popover_graph", "to": "show_popover_graph_payload", "as": "popover_graph"},
                {"from": "show_popover_graph_effector", "to": "show_popover_graph", "as": "a0"},
                {"from": "show_popover_graph_payload", "to": "show_popover_graph", "as": "a1"},
                {"from": "show_popover_graph", "to": "editable_effects", "as": "a0"},
                {"from": "event", "to": "stop_propagation_payload", "as": "event"},
                {"from": "stop_propagation_effector", "to": "stop_propagation", "as": "a0"},
                {"from": "event", "to": "stop_propagation", "as": "a1"},
                {"from": "stop_propagation", "to": "editable_effects", "as": "a1"},
                {"from": "editable_effects", "to": "effects", "as": "false"},
                {"from": "readonly_effects", "to": "effects", "as": "true"},
                {"from": "readonly", "to": "effects", "as": "pred"},
                {"from": "state", "to": "result", "as": "state"},
                {"from": "effects", "to": "result", "as": "effects"},
                {"from": "result", "to": "out", "as": "fn", "type": "ref"}
            ]
        },
        {
            "id": "editor_dom_type",
            "value": "div"
        },
        {
            "id": "editor_props",
            "value": {"key": "editor"}
        },
        {
            "id": "popover_dimensions",
            "value": {"x": 400, "y": 800}
        },
        {
            "id": "html_id",
            "ref": "arg",
            "value": "html_id"
        },
        {
            "id": "render_popover_graph_effect",
            "script": "return (dispatch, payload) => requestAnimationFrame(() => {payload = _lib.no.resolve(payload); if(payload.popover_dispatch) { payload.popover_dispatch(s => [{...s, display_graph: payload.display_graph, selected: [payload.display_graph.out]}, [s.update_sim_effect, {...s, display_graph: payload.display_graph}]]) } else { const popover_dispatch = _lib.no.executeGraphNode({graph: payload.graph})('initialize_hyperapp_app')({graph: payload.graph, display_graph: payload.display_graph, html_id: `${payload.html_id}-popover`, dimensions: payload.dimensions, readonly: true, hide_types: true, sim_update_alpha: 0.3}).dispatch; dispatch(s => ({...s, popover_dispatch}));}})"
        },
        {
            "id": "handle_popover_event",
            "out": "out",
            "nodes": [
                {"id": "in"},
                {"id": "state", "ref": "arg", "value": "state"},
                {"id": "randid", "ref": "arg", "value": "state.randid"},
                {"id": "selected", "ref": "arg", "value": "state.selected"},
                {"id": "popover_graph", "ref": "arg", "value": "state.popover_graph"},
                {"id": "payload", "ref": "arg", "value": "payload"},
                {"id": "clear_popover_effect", "ref": "clear_popover_graph"},
                {"id": "effects", "script": "return popover_graph.nodes.find(n => n.id === payload.detail.node).value"},
                {"id": "new_state"},
                {"id": "out", "ref": "hyperapp_action"}
            ],
            "edges": [
                {"from": "in", "to": "new_state", "as": "args"},
                {"from": "state", "to": "new_state", "as": "state"},
                {"from": "selected", "to": "effects", "as": "selected"},
                {"from": "popover_graph", "to": "effects", "as": "popover_graph"},
                {"from": "clear_popover_effect", "to": "effects", "as": "clear_popover"},
                {"from": "randid", "to": "effects", "as": "randid"},
                {"from": "payload", "to": "effects", "as": "payload"},
                {"from": "effects", "to": "new_state", "as": "effects"},
                {"from" :"new_state", "to": "out", "as": "fn", "type": "ref"}
            ]
        },
        {
            "id": "editor",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "wrapper",
                    "ref": "run_h"
                },
                {
                    "id": "graph",
                    "ref": "arg",
                    "value": "graph"
                },
                {
                    "id": "display_graph",
                    "ref": "arg",
                    "value": "display_graph"
                },
                {
                    "id": "show_result",
                    "ref": "arg",
                    "value": "show_result"
                },
                {
                    "id": "html_id",
                    "ref": "arg",
                    "value": "html_id"
                },
                {
                    "id": "result_display",
                    "ref": "arg",
                    "value": "result_display"
                },
                {
                    "id": "update_sim",
                    "ref": "arg",
                    "value": "update_sim"
                },
                {
                    "id": "popover_graph",
                    "ref": "arg",
                    "value": "popover_graph"
                },
                {
                    "id": "readonly",
                    "ref": "arg",
                    "value": "readonly"
                },
                {
                    "id": "error",
                    "ref": "arg",
                    "value": "error"
                },
                {
                    "id": "result_wrapper",
                    "ref": "run_h"
                },
                {
                    "id": "wrapper_dom_type",
                    "value": "div"
                },
                {
                    "id": "wrapper_props",
                    "value": {}
                },
                {
                    "id": "wrapper_children",
                    "args": [
                        "node_editor",
                        "edit_text",
                        "search_input",
                        "show_result",
                        "popover_graph",
                        "popover_graph_h"
                    ],
                    "script": "return [node_editor.el, !readonly && edit_text.el, !readonly && popover_graph && popover_graph_h.el.el, !!result_display && result_display.el, !!error && error_display.el].filter(e => e)"
                },
                {
                    "id": "edit_text",
                    "nodes": [
                        {
                            "id": "in"
                        },
                        {
                            "id": "html_id",
                            "ref": "arg",
                            "value": "html_id"
                        },
                        {
                            "id": "edit_text",
                            "ref": "h"
                        },
                        {
                            "id": "edit_text_dom_type",
                            "value": "div"
                        },
                        {
                            "id": "edit_text_input",
                            "ref": "h"
                        },
                        {
                            "id": "edit_text_textarea",
                            "ref": "h"
                        },
                        {
                            "id": "confirm_edit_text",
                            "ref": "confirm_edit_text"
                        },
                        {
                            "id": "edit_text_base_props",
                            "script": "return {id: `${html_id}-edit-value`, class: {'edit-value': true, [editing]: true}, onclick: (s, payload) => (payload.preventDefault(), [s, [confirm_edit_text, payload]])}"
                        },
                        {
                            "id": "edit_text_props"
                        },
                        {
                            "id": "centering_wrapper_children",
                            "args": [
                                "label",
                                "input",
                                "textarea",
                                "types"
                            ],
                            "script": "return [label.el, input.el, textarea.el]"
                        },
                        {
                            "id": "edit_text_textarea_dom_type",
                            "args": ["editing"],
                            "script": "return 'textarea'"
                        },
                        {
                            "id": "edit_text_textarea_props",
                            "args": [
                                "selected",
                                "selected_edge",
                                "display_graph",
                                "editing",
                                "edit_value"
                            ],
                            "script": "const start_value = edit_value ?? (!editing ? '' : (selected_edge ? display_graph.edges.find(e => e.from === selected_edge.from && e.to === selected_edge.to) : display_graph.nodes.find(n => n.id === selected[0]))[editing]); return Object.assign({id: `${html_id}-textarea`, class: 'textarea', onclick: (s, payload) => (payload.stopPropagation(), s), value: typeof(start_value) === 'string' ? start_value : JSON.stringify(start_value), oninput: (s, payload) => ({...s, edit_value: payload.target.value}), onfocus: (s, payload) => [s, [() => payload.target.setSelectionRange(0, payload.target.value.length)]]})"
                        },
                        {
                            "id": "edit_text_input_dom_type",
                            "args": ["editing"],
                            "script": "return 'input'"
                        },
                        {
                            "id": "edit_text_input_props",
                            "args": [
                                "selected",
                                "selected_edge",
                                "display_graph",
                                "editing",
                                "edit_value"
                            ],
                            "script": "const start_value = edit_value ?? (!editing ? '' : (selected_edge ? display_graph.edges.find(e => e.from === selected_edge.from && e.to === selected_edge.to) : display_graph.nodes.find(n => n.id === selected[0]))[editing]); return Object.assign({id: `${html_id}-edit-text`, class: 'input', value: typeof(start_value) === 'string' ? start_value : JSON.stringify(start_value), oninput: (s, payload) => ({...s, edit_value: payload.target.value})}, editing === 'ref' ? {list: 'ref-options', type: 'text'} : {})"
                        },
                        {
                            "id": "edit_text_label",
                            "ref": "h"
                        },
                        {
                            "id": "edit_text_label_dom_type",
                            "value": "label"
                        },
                        {"id":"edit_text_label_props", "script": "return {for: `${html_id}-edit-text`}"},
                        {
                            "id": "edit_text_label_text",
                            "ref": "h_text"
                        },
                        {
                            "id": "editing",
                            "args": [
                                "editing"
                            ],
                            "script": "return editing || 'none'"
                        },
                        {
                            "id": "refs",
                            "ref": "h"
                        },
                        {
                            "id": "refs_dom_type",
                            "value": "datalist"
                        },
                        {
                            "id": "refs_props",
                            "value": {"id": "ref-options"}
                        },
                        {
                            "id": "get_nodes",
                            "ref": "arg",
                            "value": "display_graph.nodes"
                        },
                        {
                            "id": "get_id",
                            "script": "return node.id"
                        },
                        {
                            "id": "id_text",
                            "ref": "h_text"
                        },
                        {
                            "id": "wrap_dom_type",
                            "value": "option"
                        },
                        {
                            "id": "wrap_option",
                            "ref": "h"
                        },
                        {"id": "centering_wrapper_dom_type", "value": "div"},
                        {"id": "centering_wrapper_props", "value": {"class": {"centering": true}}},
                        {
                            "id": "centering_wrapper",
                            "ref": "h"
                        },
                        {
                            "id": "out"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "edit_text_input_props"
                        },
                        {
                            "from": "in",
                            "to": "edit_text_input_dom_type"
                        },
                        {
                            "from": "in",
                            "to": "edit_text_textarea_props"
                        },
                        {
                            "from": "in",
                            "to": "edit_text_textarea_dom_type"
                        },
                        {
                            "from": "edit_text",
                            "to": "out"
                        },
                        {
                            "from": "edit_text_dom_type",
                            "to": "edit_text",
                            "as": "dom_type"
                        },
                        {
                            "from": "html_id",
                            "to": "edit_text_base_props",
                            "as": "html_id"
                        },
                        {
                            "from": "edit_text_base_props",
                            "to": "edit_text_props"
                        },
                        {
                            "from": "edit_text_props",
                            "to": "edit_text",
                            "as": "props"
                        },
                        {
                            "from": "centering_wrapper",
                            "to": "edit_text",
                            "as": "children"
                        },
                        {
                            "from": "edit_text_input",
                            "to": "centering_wrapper_children",
                            "as": "input"
                        },
                        {
                            "from": "html_id",
                            "to": "edit_text_input_props",
                            "as": "html_id"
                        },
                        {
                            "from": "edit_text_input_props",
                            "to": "edit_text_input",
                            "as": "props"
                        },
                        {
                            "from": "edit_text_input_dom_type",
                            "to": "edit_text_input",
                            "as": "dom_type"
                        },
                        {
                            "from": "html_id",
                            "to": "edit_text_textarea_props",
                            "as": "html_id"
                        },
                        {
                            "from": "edit_text_textarea",
                            "to": "centering_wrapper_children",
                            "as": "textarea"
                        },
                        {
                            "from": "edit_text_textarea_props",
                            "to": "edit_text_textarea",
                            "as": "props"
                        },
                        {
                            "from": "edit_text_textarea_dom_type",
                            "to": "edit_text_textarea",
                            "as": "dom_type"
                        },
                        {
                            "from": "html_id",
                            "to": "edit_text_label_props",
                            "as": "html_id"
                        },
                        {
                            "from": "edit_text_label",
                            "to": "centering_wrapper_children",
                            "as": "label"
                        },
                        {
                            "from": "edit_text_label_props",
                            "to": "edit_text_label",
                            "as": "props"
                        },
                        {
                            "from": "edit_text_label_dom_type",
                            "to": "edit_text_label",
                            "as": "dom_type"
                        },
                        {
                            "from": "edit_text_label_text",
                            "to": "edit_text_label",
                            "as": "children"
                        },
                        {
                            "from": "refs_dom_type",
                            "to": "refs",
                            "as": "dom_type" 
                        },
                        {
                            "from": "refs_props",
                            "to": "refs",
                            "as": "props" 
                        },
                        {
                            "from": "wrap_dom_type",
                            "to": "wrap_option",
                            "as": "dom_type"
                        },
                        {
                            "from": "id_text",
                            "to": "wrap_option",
                            "as": "children"
                        },
                        {
                            "from": "wrap_option",
                            "to": "refs",
                            "as": "children"
                        },
                        {
                            "from": "in",
                            "to": "get_nodes"
                        },
                        {
                            "from": "get_nodes",
                            "to": "get_id",
                            "as": "node"
                        },
                        {
                            "from": "get_id",
                            "to": "id_text",
                            "as": "text"
                        },
                        {
                            "from": "in",
                            "to": "editing"
                        },
                        {
                            "from": "editing",
                            "to": "edit_text_label_text",
                            "as": "text"
                        },
                        {
                            "from": "editing",
                            "to": "edit_text_base_props",
                            "as": "editing"
                        },
                        {
                            "from": "confirm_edit_text",
                            "to": "edit_text_base_props",
                            "as": "confirm_edit_text"
                        },
                        {"from": "centering_wrapper_dom_type", "to": "centering_wrapper", "as": "dom_type"},
                        {"from": "centering_wrapper_props", "to": "centering_wrapper", "as": "props"},
                        {"from": "centering_wrapper_children", "to": "centering_wrapper", "as": "children"},
                        {"from": "centering_wrapper", "to": "edit_text", "as": "children"}
                    ]
                },
                {
                    "id": "popover_graph_h",
                    "nodes": [
                        {
                            "id": "html_id",
                            "ref": "arg",
                            "value": "html_id"
                        },
                        {
                            "id": "update_sim",
                            "ref": "arg",
                            "value": "update_sim"
                        },
                        {
                            "id": "randid",
                            "ref": "arg",
                            "value": "randid"
                        },
                        {
                            "id": "handle_popover_event",
                            "ref": "handle_popover_event"
                        },
                        {
                            "id": "clear_popover",
                            "ref": "clear_popover_graph"
                        },
                        {
                            "id": "props",
                            "script": "return {id: `${html_id}-popover`, key:  `${html_id}-popover`, onselectnode: handle_popover_event, ongraphclick: (s, p) => [s, [clear_popover]]}"
                        },
                        {
                            "id": "dom_type",
                            "value": "div"
                        },
                        {"id": "out", "ref": "h"}
                    ],
                    "edges": [
                        {"from": "update_sim", "to": "props", "as": "update_sim"},
                        {"from": "handle_popover_event", "to": "props", "as": "handle_popover_event"},
                        {"from": "clear_popover", "to": "props", "as": "clear_popover"},
                        {"from": "props", "to": "out", "as": "props"},
                        {"from": "html_id", "to": "props", "as": "html_id"},
                        {"from": "dom_type", "to": "out", "as": "dom_type"}
                    ]
                },
                {
                    "id": "popover_graph_h_wrapper"
                },
                {
                    "id": "result",
                    "nodes": [
                        {
                            "id": "in"
                        },
                        {
                            "id": "error",
                            "ref": "arg",
                            "value": "error"
                        },
                        {
                            "id": "html_id",
                            "ref": "arg",
                            "value": "html_id"
                        },
                        {
                            "id": "get_node",
                            "args": [
                                "display_graph",
                                "selected"
                            ],
                            "script": "return display_graph.nodes.find(n => n.id === selected[0])"
                        },
                        {
                            "id": "get_type",
                            "args": [
                                "ref",
                                "script",
                                "value",
                                "nodes"
                            ],
                            "script": "return ref?.display_type ? ref.display_type : typeof value !== 'undefined' && typeof value !== 'object' ? typeof value : ref ? (ref.node_type ?? ref) : nodes ? 'graph' : script ? 'script' : 'passthrough'"
                        },
                        {
                            "id": "get_node_display",
                            "args": [
                                "display_graph",
                                "type"
                            ],
                            "script": "return display_graph.nodes.find(n => n.id === type + '_display') ?? display_graph.nodes.find(n => n.id === 'default_node_display')"
                        },
                        {
                            "id": "get_error_display",
                            "args": [
                                "display_graph",
                                "type"
                            ],
                            "script": "return display_graph.nodes.find(n => n.id === 'default_error_display')"
                        },
                        {
                            "id": "result",
                            "ref": "arg",
                            "value": "result"
                        },
                        {
                            "id": "display_graph",
                            "ref": "arg",
                            "value": "display_graph"
                        },
                        {
                            "id": "run_node_display",
                            "args": [
                                "node",
                                "display",
                                "error",
                                "result",
                                "display_graph",
                                "node_inputs"
                            ],
                        "script": "try { const graph = {...display_graph, nodes: display_graph.nodes.concat([]), edges:display_graph.edges.concat([]), out: display.id, in: display.id + '/' + display.in}; const input = {state: new Map([[display.id + '/' +  display.in, {node, result}]]), graph, cache_id: 'rnd'}; return _lib.no.executeGraph(input)?.el } catch(e){ return {error: e} }"
                        },
                        {
                            "id": "run_error_display",
                            "args": [
                                "node",
                                "error",
                                "error_display",
                                "display_graph"
                            ],
                            "script": "return !error ? undefined : _lib.no.executeGraph({state: new Map([[error_display.id + '/' +  error_display.in, {node, error: error.toString()}]]), graph: {...display_graph, nodes: display_graph.nodes.concat([]), edges:display_graph.edges.concat([]), out: error_display.id, in: error_display.id + '/' + error_display.in}})?.el"
                        },
                        {
                            "id": "container_dom_type",
                            "value": "div"
                        },
                        {
                            "id": "container_props",
                            "args": [
                                "error"
                            ],
                            "script": "return {class: {error: error ? 'error' : '', result: true}, id: `${html_id}-result`}"
                        },
                        {
                            "id": "container_children_inputs",
                            "script": "return error? ['error_display'] : ['display']"
                        },
                        {
                            "id": "container_children",
                            "ref": "switch"
                        },
                        {
                            "id": "container",
                            "ref": "h"
                        },
                        {
                            "id": "text_value",
                            "args": [
                                "result",
                                "error"
                            ],
                            "script": "return error ?? result ?? ''"
                        },
                        {
                            "id": "out"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "container_props"
                        },
                        {
                            "from": "in",
                            "to": "get_node"
                        },
                        {
                            "from": "in",
                            "to": "get_node_display"
                        },
                        {
                            "from": "in",
                            "to": "get_error_display"
                        },
                        {
                            "from": "in",
                            "to": "run_error_display"
                        },
                        {
                            "from": "error",
                            "to": "container_children_inputs",
                            "as": "error"
                        },
                        {
                            "from": "get_node",
                            "to": "get_type"
                        },
                        {
                            "from": "get_type",
                            "to": "get_node_display",
                            "as": "type"
                        },
                        {
                            "from": "get_type",
                            "to": "get_error_display",
                            "as": "type"
                        },
                        {
                            "from": "get_node",
                            "to": "run_node_display",
                            "as": "node"
                        },
                        {
                            "from": "get_node",
                            "to": "run_error_display",
                            "as": "node"
                        },
                        {
                            "from": "get_node_display",
                            "to": "run_node_display",
                            "as": "display"
                        },
                        {
                            "from": "display_graph",
                            "to": "run_node_display",
                            "as": "display_graph"
                        },
                        {
                            "from": "result",
                            "to": "run_node_display",
                            "as": "result"
                        },
                        {
                            "from": "get_error_display",
                            "to": "run_error_display",
                            "as": "error_display"
                        },
                        {
                            "from": "container_children_inputs",
                            "to": "container_children",
                            "as": "input"
                        },
                        {
                            "from": "run_node_display",
                            "to": "container_children",
                            "as": "display"
                        },
                        {
                            "from": "run_error_display",
                            "to": "container_children",
                            "as": "error_display"
                        },
                        {
                            "from": "run_node_display",
                            "to": "run_error_display"
                        },
                        {
                            "from": "container_props",
                            "to": "container",
                            "as": "props"
                        },
                        {
                            "from": "container_children",
                            "to": "container",
                            "as": "children"
                        },
                        {
                            "from": "container_dom_type",
                            "to": "container",
                            "as": "dom_type"
                        },
                        {
                            "from": "container",
                            "to": "out"
                        }
                    ]
                },
                {
                    "id": "search_input",
                    "nodes": [
                        {
                            "id": "in"
                        },
                        {
                            "id": "search_input_dom_type",
                            "value": "input"
                        },
                        {
                            "id": "html_id",
                            "ref": "arg",
                            "value": "html_id"
                        },
                        {
                            "id": "search_input_props",
                            "args": [
                                "search",
                                "display_graph"
                            ],
                            "script": "return {id: `${html_id}-search-input`, class: 'search-input', type: 'text', onkeydown: (s, payload) => { if(payload.key === 'Enter'){ const direction = payload.shiftKey ? -1 : 1; const idx = (s.search_results.length + s.search_index + direction) % s.search_results.length; return {...s, selected: s.search_results.slice(idx, idx + 1), search_index: idx} } else { return s;} }, oninput: (s, payload) => { const search_results = new _lib.Fuse(display_graph.nodes, {keys: ['name', 'id']}).search(payload.target.value).map(r => r.item.id); return {...s, search: payload.target.value, selected: search_results.length > 0 ? search_results.slice(0, 1) : s.selected, search_results, search_index: 0, levels: _lib.scripts.calculateLevels(s.nodes, s.links, display_graph, search_results.length > 0 ? search_results.slice(0, 1) : s.selected)}}}"
                        },
                        {
                            "id": "out",
                            "ref": "h"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "search_input_props"
                        },
                        {
                            "from": "html_id",
                            "to": "search_input_props",
                            "as": "html_id"
                        },
                        {
                            "from": "search_input_dom_type",
                            "to": "out",
                            "as": "dom_type"
                        },
                        {
                            "from": "search_input_props",
                            "to": "out",
                            "as": "props"
                        }
                    ]
                },
                {
                    "id": "node_editor",
                    "nodes": [
                        {
                            "id": "in"
                        },
                        {
                            "id": "log",
                            "ref": "log"
                        },
                        {
                            "id": "out",
                            "ref": "h"
                        },
                        {
                            "id": "html_id",
                            "ref": "arg",
                            "value": "html_id"
                        },
                        {
                            "id": "node_el_width",
                            "ref": "arg",
                            "value": "node_el_width"
                        },
                        {
                            "id": "display_graph",
                            "ref": "arg",
                            "value": "display_graph"
                        },
                        {
                            "id": "readonly",
                            "ref": "arg",
                            "value": "readonly"
                        },
                        {
                            "id": "error_nodes",
                            "ref": "arg",
                            "value": "error_nodes"
                        },
                        {
                            "id": "hide_types",
                            "ref": "arg",
                            "value": "hide_types"
                        },
                        {
                            "id": "get_nodes",
                            "args": [
                                "nodes"
                            ],
                            "script": "return nodes?.map(n => ({...n, x: (n.x - node_el_width * 0.5)})) ?? []"
                        },
                        {
                            "id": "get_links",
                            "args": [
                                "links"
                            ],
                            "script": "return links?.map(l => ({...l, source: {...l.source, x: (l.source.x - node_el_width * 0.5)}, target: {...l.target, x: (l.target.x - node_el_width * 0.5)}})) ?? []"
                        },
                        {
                            "id": "get_selected",
                            "args": [
                                "selected"
                            ],
                            "script": "return selected"
                        },
                        {
                            "id": "get_graph",
                            "args": [
                                "graph"
                            ],
                            "script": "return graph"
                        },
                        {
                            "id": "get_selected_node",
                            "args":["selected", "nodes"],
                            "script": "return nodes.find(n => n.node_id === selected[0])"
                        },
                        {
                            "id": "nodes_box",
                            "args":["nodes"],
                            "script": "const visible_nodes = !selected ? [] : [selected.node_id].concat(levels.children.get(selected.node_id)).concat(levels.parents.get(selected.node_id)).concat(levels.parents.get(selected.node_id).flatMap(p => levels.parents.get(p))); return nodes.filter(n => !selected || visible_nodes.includes(n.node_id)).reduce((acc, n) => ({min: {x: Math.min(acc.min.x, n.x - 24), y: Math.min(acc.min.y, n.y - 24)}, max: {x: Math.max(acc.max.x, n.x + node_el_width * 0.5 - 24), y: Math.max(acc.max.y, n.y + 24)}}), {min: {x: selected ? (selected.x - 96) : dimensions.x, y: selected ? (selected.y - 256) : dimensions.y}, max: {x: selected ? (selected.x + 96) : -dimensions.x, y: selected ? (selected.y + 128) : -dimensions.y}})"
                        },
                        {
                            "id": "get_selected_edge",
                            "args": [
                                "selected_edge"
                            ],
                            "script": "return selected_edge"
                        },
                        {
                            "id": "get_levels",
                            "ref": "arg",
                            "value": "levels"
                        },
                        {
                            "id": "dimensions",
                            "ref": "arg",
                            "value": "dimensions"
                        },
                        {
                            "id": "center",
                            "script": "const nodes_box_center = {x: (nodes_box.max.x + nodes_box.min.x) * 0.5, y: (nodes_box.max.y + nodes_box.min.y) * 0.5}; return !selected ? nodes_box_center : {x: (selected.x + nodes_box_center.x * 3) * 0.25, y: (selected.y + nodes_box_center.y * 3) * 0.25}"
                        },
                        {"id": "onclick_graph", "ref": "onclick_graph_action"},
                        {
                            "id": "node_editor_props",
                            "script": "return {id: `${html_id}-editor`, width: dimensions.x, height: dimensions.y, viewBox: `${Math.floor(center.x - Math.max(dimensions.x * 0.5, Math.min(dimensions.x, (nodes_box.max.x - nodes_box.min.x))) * 0.5 - node_el_width * 0.5)}  ${Math.floor(center.y - Math.max(dimensions.y * 0.5, Math.min(dimensions.y, (nodes_box.max.y - nodes_box.min.y))) * 0.5 - node_el_width * 0.5)} ${Math.floor(Math.max(dimensions.x * 0.5, Math.min(dimensions.x, nodes_box.max.x - nodes_box.min.x)) + node_el_width)} ${Math.floor(Math.max(dimensions.y * 0.5, Math.min(dimensions.y, nodes_box.max.y - nodes_box.min.y)) + node_el_width)}`, onclick: onclick_graph}"
                        },
                        {
                            "id": "node_editor_dom_type",
                            "value": "svg"
                        },
                        {
                            "id": "node_editor_children",
                            "args": [
                                "nodes",
                                "defs",
                                "links"
                            ],
                            "script": "return [defs.el].concat(nodes?.map(c => c.el) ?? []).concat(links?.flatMap(l => l.map(lc => lc.el)) ?? [])"
                        },
                        {
                            "id": "node_layout",
                            "args": ["node_inputs", "node_layout_map", "nodes", "graph", "selected", "selected_edge"],
                            "script": "return nodes.map(n => _lib.no.executeGraphValue({state: new Map(), graph: {...graph, in: '_' + n.node_id, out: node_layout_map, html_id: html_id}, cache_id: '_' + n.node_id})(Object.assign({node: Object.assign({}, n, display_graph.nodes.find(dgn => dgn.id === n.node_id)), hide_types, selected_distance: levels.distance_from_selected.get(n.node_child_id), level: levels.level_by_node.get(n.node_id), error: !error_nodes ? false : [...error_nodes.keys()].filter(k => k.startsWith(n.node_id)).length > 0}, _node_inputs)))"
                        },
                        {
                            "id": "node_layout_map",
                            "nodes": [
                                {
                                    "id": "in"
                                },
                                {
                                    "id": "get_node",
                                    "ref": "arg",
                                    "value": "node"
                                },
                                {
                                    "id": "html_id",
                                    "ref": "arg",
                                    "value": "html_id"
                                },
                                {
                                    "id": "node_el_width",
                                    "ref": "arg",
                                    "value": "node_el_width"
                                },
                                {
                                    "id": "is_selected",
                                    "args": [
                                        "selected",
                                        "node_id"
                                    ],
                                    "script": "return selected.includes(node_id)"
                                },
                                {
                                    "id": "selected_distance",
                                    "ref": "arg",
                                    "value": "selected_distance"
                                },
                                {
                                    "id": "level",
                                    "ref": "arg",
                                    "value": "level"
                                },
                                {
                                    "id": "hide_types",
                                    "ref": "arg",
                                    "value": "hide_types"
                                },
                                {
                                    "id": "error",
                                    "ref": "arg",
                                    "value": "error"
                                },
                                {
                                    "id": "out"
                                },
                                {
                                    "id": "parent",
                                    "ref": "h"
                                },
                                {
                                    "id": "parent_dom_type",
                                    "value": "svg"
                                },
                                {"id": "onclick_node", "ref": "onclick_node_action"},
                                {
                                    "id": "parent_attrs",
                                    "args": [
                                        "node",
                                        "meta"
                                    ],
                                    "script": "return ({onclick: (_, payload) => [onclick, {event: payload, node_id: node.node_id}], width: '256', height: '64', id: html_id + '-' + node.node_child_id, class: `node ${meta.selected[0] === node.node_id ? 'selected': ''}`, opacity: meta.selected_edge?.from === node.node_id ? 1 : selected_distance !== undefined ? Math.max(0.05, 1 - (selected_distance * selected_distance) / 6) : 0.1})"
                                },
                                {
                                    "id": "children",
                                    "nodes": [
                                        {
                                            "id": "in"
                                        },
                                        {
                                            "id": "selected_distance",
                                            "ref": "arg",
                                            "value": "selected_distance"
                                        },
                                        {
                                            "id": "node",
                                            "ref": "arg",
                                            "value": "node.node"
                                        },
                                        {
                                            "id": "error",
                                            "ref": "arg",
                                            "value": "error"
                                        },
                                        {
                                            "id": "node_shape_attrs",
                                            "args": [
                                                "value",
                                                "script",
                                                "ref",
                                                "selected_distance",
                                                "nodes"
                                            ],
                                            "script": "const r = 24; return value !== undefined ? {class: {shape: true, value: true, error}, points: `4,${4 + r} ${4 + r},${4 + r} ${4 + r * 0.5},4`} : script ? {class:{shape: true, script: true, error}, width: r, height: r, x: 10, y: 10} : ref ? {class: {shape: true, ref: true, error}, width: r, height: r, x: 10, y: 10} : nodes ? {class: {shape: true, graph: true, error}, r: r * 0.5, cx: r * 0.5 + 4, cy: r * 0.5 + 4}  : {class: {shape: true, none: true, error}, r: r * 0.5 , cx: r * 0.5 + 4, cy: r * 0.5 + 4}"
                                        },
                                        {
                                            "id": "default_color",
                                            "value": "blue"
                                        },
                                        {
                                            "id": "empty_array",
                                            "value": []
                                        },
                                        {
                                            "id": "node_shape_dom_type",
                                            "args": [
                                                "value",
                                                "script",
                                                "ref",
                                                "nodes"
                                            ],
                                            "script": "return value !== undefined ? 'polygon' : script ? 'rect' : ref ? 'rect' : nodes ? 'circle' : 'circle'"
                                        },
                                        {
                                            "id": "node_shape",
                                            "ref": "h"
                                        },
                                        {
                                            "id": "text",
                                            "nodes": [
                                                {
                                                    "id": "in"
                                                },
                                                {
                                                    "id": "out"
                                                },
                                                {
                                                    "id": "node_id",
                                                    "value": "node_id"
                                                },
                                                {
                                                    "id": "node_ref",
                                                    "value": "ref"
                                                },
                                                {
                                                    "id": "node_name",
                                                    "value": "name"
                                                },
                                                {
                                                    "id": "node_value",
                                                    "value": "value"
                                                },
                                                {
                                                    "id": "get_id",
                                                    "ref": "arg",
                                                    "value": "node.node_id"
                                                },
                                                {
                                                    "id": "get_name",
                                                    "ref": "get"
                                                },
                                                {
                                                    "id": "node",
                                                    "ref": "arg",
                                                    "value": "node"
                                                },
                                                {
                                                    "id": "hide_types",
                                                    "ref": "arg",
                                                    "value": "hide_types"
                                                },
                                                {
                                                    "id": "get_value",
                                                    "args": [
                                                        "target",
                                                        "def"
                                                    ],
                                                    "script": "return target.value !== undefined ? (typeof target.value === 'object' ? JSON.stringify(target.value) : target.value.toString()) : def"
                                                },
                                                {
                                                    "id": "get_type",
                                                    "args": [
                                                        "target"
                                                    ],
                                                    "script": "return (target.ref ? target.ref : target.value !== undefined ? 'value' : target.script ? 'script' : target.nodes ? `graph (${target.nested_node_count}, ${target.nested_edge_count})` : 'passthrough')"
                                                },
                                                {
                                                    "id": "selected_distance",
                                                    "ref": "arg",
                                                    "value": "selected_distance"
                                                },
                                                {
                                                    "id": "shorten",
                                                    "args": [
                                                        "text"
                                                    ],
                                                    "script": "return text.substring(text.lastIndexOf('/') + 1)"
                                                },
                                                {
                                                    "id": "node_primary_text_attrs",
                                                    "value": {
                                                        "class": "primary",
                                                        "dy": ".6em",
                                                        "x": "48"
                                                    }
                                                },
                                                {
                                                    "id": "tspan_dom_type",
                                                    "value": "tspan"
                                                },
                                                {"id": "display_name_input", "script": "return n.name ? 'name' : n.value !== undefined ? 'value' : 'id'"},
                                                {"id": "display_name", "ref": "switch"},
                                                {
                                                    "id": "node_primary_text_text",
                                                    "ref": "h_text"
                                                },
                                                {
                                                    "id": "node_primary_text",
                                                    "ref": "h"
                                                },
                                                {
                                                    "id": "node_secondary_text_attrs",
                                                    "value": {
                                                        "class": "secondary",
                                                        "dy": "1.2em",
                                                        "x": "48"
                                                    }
                                                },
                                                {
                                                    "id": "node_secondary_text_text",
                                                    "ref": "h_text"
                                                },
                                                {
                                                    "id": "node_secondary_text",
                                                    "ref": "h"
                                                },
                                                {
                                                    "id": "node_text_dom_type",
                                                    "value": "text"
                                                },
                                                {
                                                    "id": "node_text",
                                                    "ref": "h"
                                                },
                                                {
                                                    "id": "script",
                                                    "value": "script"
                                                },
                                                {
                                                    "id": "node_text_props",
                                                    "args": [
                                                        "selected_distance"
                                                    ],
                                                    "script": "return { x: 48, y: 12 }"
                                                },
                                                {
                                                    "id": "node_text_children",
                                                    "args": [
                                                        "primary",
                                                        "secondary"
                                                    ],
                                                    "script": "return [primary.el, !hide_types && secondary.el]"
                                                },
                                                {
                                                    "id": "text",
                                                    "value": "text"
                                                }
                                            ],
                                            "edges": [
                                                {
                                                    "from": "node",
                                                    "to": "get_type",
                                                    "as": "target"
                                                },
                                                {
                                                    "from": "node",
                                                    "to": "get_value",
                                                    "as": "target"
                                                },
                                                {
                                                    "from": "node",
                                                    "to": "get_name",
                                                    "as": "target"
                                                },
                                                {
                                                    "from": "get_id",
                                                    "to": "display_nam",
                                                    "as": "id"
                                                },
                                                {
                                                    "from": "get_value",
                                                    "to": "display_name",
                                                    "as": "value"
                                                },
                                                {
                                                    "from": "node_ref",
                                                    "to": "get_type",
                                                    "as": "path"
                                                },
                                                {
                                                    "from": "node_name",
                                                    "to": "get_name",
                                                    "as": "path"
                                                },
                                                {
                                                    "from": "script",
                                                    "to": "get_type",
                                                    "as": "default_value"
                                                },
                                                {
                                                    "from": "get_name",
                                                    "to": "display_name",
                                                    "as": "name"
                                                },
                                                {
                                                    "from": "node",
                                                    "to": "display_name_input",
                                                    "as": "n"
                                                },
                                                {
                                                    "from": "display_name_input",
                                                    "to": "display_name",
                                                    "as": "input"
                                                },
                                                {
                                                    "from": "display_name",
                                                    "to": "node_primary_text_text",
                                                    "as": "text"
                                                },
                                                {
                                                    "from": "get_type",
                                                    "to": "node_secondary_text_text",
                                                    "as": "text"
                                                },
                                                {
                                                    "from": "node_text_props",
                                                    "to": "node_text",
                                                    "as": "props"
                                                },
                                                {
                                                    "from": "node_primary_text_text",
                                                    "to": "node_primary_text",
                                                    "as": "children"
                                                },
                                                {
                                                    "from": "node_primary_text_attrs",
                                                    "to": "node_primary_text",
                                                    "as": "props"
                                                },
                                                {
                                                    "from": "node_primary_text",
                                                    "to": "node_text_children",
                                                    "as": "primary"
                                                },
                                                {
                                                    "from": "hide_types",
                                                    "to": "node_text_children",
                                                    "as": "hide_types"
                                                },
                                                {
                                                    "from": "node_secondary_text_text",
                                                    "to": "node_secondary_text",
                                                    "as": "children"
                                                },
                                                {
                                                    "from": "node_secondary_text_attrs",
                                                    "to": "node_secondary_text",
                                                    "as": "props"
                                                },
                                                {
                                                    "from": "tspan_dom_type",
                                                    "to": "node_primary_text",
                                                    "as": "dom_type"
                                                },
                                                {
                                                    "from": "node_secondary_text",
                                                    "to": "node_text_children",
                                                    "as": "secondary"
                                                },
                                                {
                                                    "from": "tspan_dom_type",
                                                    "to": "node_secondary_text",
                                                    "as": "dom_type"
                                                },
                                                {
                                                    "from": "node_text_children",
                                                    "to": "node_text",
                                                    "as": "children"
                                                },
                                                {
                                                    "from": "node_text_dom_type",
                                                    "to": "node_text",
                                                    "as": "dom_type"
                                                },
                                                {
                                                    "from": "node_text",
                                                    "to": "out"
                                                }
                                            ]
                                        },
                                        {
                                            "id": "fill_rect",
                                            "script": "return {dom_type: 'rect', props:{class:{fill: true}, width: '10', 'height': '48'}, children: []}"
                                        },
                                        {
                                            "id": "order",
                                            "args": [
                                                "shape",
                                                "text"
                                            ],
                                            "script": "return [shape.el, text.el, rect]"
                                        },
                                        {
                                            "id": "out"
                                        }
                                    ],
                                    "edges": [
                                        {
                                            "from": "in",
                                            "to": "node_shape_attrs"
                                        },
                                        {
                                            "from": "in",
                                            "to": "node_shape_dom_type"
                                        },
                                        {
                                            "from": "selected_distance",
                                            "to": "node_shape_attrs",
                                            "as": "selected_distance"
                                        },
                                        {
                                            "from": "error",
                                            "to": "node_shape_attrs",
                                            "as": "error"
                                        },
                                        {
                                            "from": "default_color",
                                            "to": "node_shape_attrs",
                                            "as": "color"
                                        },
                                        {
                                            "from": "empty_array",
                                            "to": "node_shape",
                                            "as": "children"
                                        },
                                        {
                                            "from": "node_shape_dom_type",
                                            "to": "node_shape",
                                            "as": "dom_type"
                                        },
                                        {
                                            "from": "node",
                                            "to": "text"
                                        },
                                        {
                                            "from": "node_shape_attrs",
                                            "to": "node_shape",
                                            "as": "props"
                                        },
                                        {
                                            "from": "node_shape",
                                            "to": "order",
                                            "as": "shape"
                                        },
                                        {
                                            "from": "text",
                                            "to": "order",
                                            "as": "text"
                                        },
                                        {
                                            "from": "fill_rect",
                                            "to": "order",
                                            "as": "rect"
                                        },
                                        {
                                            "from": "order",
                                            "to": "out",
                                            "as": "children"
                                        }
                                    ]
                                }
                            ],
                            "edges": [
                                {
                                    "from": "args_in",
                                    "to": "in"
                                },
                                {
                                    "from": "in",
                                    "to": "is_selected"
                                },
                                {
                                    "from": "in",
                                    "to": "parent_attrs",
                                    "as": "meta"
                                },
                                {
                                    "from": "in",
                                    "to": "get_node_display"
                                },
                                {
                                    "from": "get_node",
                                    "to": "get_ref"
                                },
                                {
                                    "from": "get_node",
                                    "to": "children"
                                },
                                {
                                    "from": "get_node",
                                    "to": "is_selected"
                                },
                                {
                                    "from": "is_selected",
                                    "to": "children",
                                    "as": "selected"
                                },
                                {
                                    "from": "children",
                                    "to": "parent"
                                },
                                {
                                    "from": "html_id",
                                    "to": "parent_attrs",
                                    "as": "html_id"
                                },
                                {
                                    "from": "selected_distance",
                                    "to": "parent_attrs",
                                    "as": "selected_distance"
                                },
                                {
                                    "from": "selected_distance",
                                    "to": "children",
                                    "as": "selected_distance"
                                },
                                {"from": "onclick_node", "to": "parent_attrs", "as": "onclick"},
                                {
                                    "from": "parent_attrs",
                                    "to": "parent",
                                    "as": "props"
                                },
                                {
                                    "from": "parent_dom_type",
                                    "to": "parent",
                                    "as": "dom_type"
                                },
                                {
                                    "from": "get_node",
                                    "to": "parent_attrs",
                                    "as": "node"
                                },
                                {
                                    "from": "parent",
                                    "to": "out"
                                }
                            ]
                        },
                        {
                            "id": "link_layout",
                            "args": ["node_inputs", "link_layout_map", "links", "graph", "selected_edge"],
                            "script": "return links.map(link => _lib.no.executeGraph({state: new Map([['_' + link.source.node_child_id, Object.assign({readonly, link: Object.assign({edge: display_graph.edges.find(e => link.from === e.from && link.to === e.to)}, link), selected_distance: levels.distance_from_selected.get(link.target.node_child_id) !== undefined ? Math.min(levels.distance_from_selected.get(link.target.node_child_id), levels.distance_from_selected.get(link.source.node_child_id)) : undefined, sibling_index_normalized: (levels.siblings.get(link.source.node_id).findIndex(n => n === link.source.node_id) + 1) / (levels.siblings.get(link.source.node_id).length + 1),}, _node_inputs)]]), graph: {...graph, in: '_' + link.source.node_child_id, out: link_layout_map}, cache_id: '_' + link.source.node_child_id + link.target.node_child_id}))"
                        },
                        {
                            "id": "link_layout_map",
                            "nodes": [
                                {
                                    "id": "in"
                                },
                                {
                                    "id": "get_link",
                                    "args": [
                                        "link"
                                    ],
                                    "script": "return link ?? {}"
                                },
                                {
                                    "id": "get_selected_edge",
                                    "ref": "arg",
                                    "value": "selected_edge"
                                },
                                {
                                    "id": "selected_distance",
                                    "ref": "arg",
                                    "value": "selected_distance"
                                },
                                {
                                    "id": "sibling_index_normalized",
                                    "ref": "arg",
                                    "value": "sibling_index_normalized"
                                },
                                {"id": "edge", "ref": "arg", "value": "link.edge"},
                                {
                                    "id": "edge_info_el",
                                    "ref": "h"
                                },
                                {
                                    "id": "edge_info_el_children",
                                    "args": [
                                        "edge_as",
                                        "edge_type",
                                        "rect"
                                    ],
                                    "script": "return [rect.el, edge_as.el, edge_type.el]"
                                },
                                {
                                    "id": "edge_info_dom_type",
                                    "value": "svg"
                                },
                                {"id": "onclick_edge", "ref": "onclick_edge"},
                                {
                                    "id": "edge_info_props",
                                    "args": [
                                        "source",
                                        "target",
                                        "selected_distance",
                                        "sibling_index_normalized",
                                        "selected_edge"
                                    ],
                                    "script": "return ({id: `edge-info-${source.node_child_id}`, z: selected_edge && source.node_id === selected_edge.from && target.node_id === selected_edge.to ? 100 : 200, opacity: selected_distance !== undefined ? Math.max(0.05, 1 - selected_distance * selected_distance / 2) : 0.1, class: {'edge-info': true, selected: selected_edge && (source.node_id === selected_edge.from + '_' + selected_edge.to || (source.node_id === selected_edge.from && target.node_id === selected_edge.to))}, onclick: (state, payload) => [onclick_edge, {event: payload, edge}] })"
                                },
                                {
                                    "id": "edge_info_line_position",
                                    "value": 0.5,
                                    "min": 0,
                                    "max": 1,
                                    "step": 0.01
                                },
                                {
                                    "id": "edge_info_type_props",
                                    "value": {
                                        "font-size": 14,
                                        "y": 32
                                    }
                                },
                                {
                                    "id": "edge_info_type_el",
                                    "ref": "svg_text"
                                },
                                {
                                    "id": "edge_info_type_text",
                                    "args": [
                                        "link"
                                    ],
                                    "script": "return link.edge?.type ?? ''"
                                },
                                {
                                    "id": "edge_info_as_props",
                                    "value": {
                                        "font-size": 14,
                                        "y": 16
                                    }
                                },
                                {
                                    "id": "edge_info_as_el",
                                    "ref": "svg_text"
                                },
                                {"id": "readonly", "ref": "arg", "value": "readonly"},
                                {
                                    "id": "edge_info_as_text",
                                    "args": [
                                        "link"
                                    ],
                                    "script": "return link.edge?.as ?? (readonly ? '' : '*')"
                                },
                                {
                                    "id": "edge_info_rect_dom_type",
                                    "value": "rect"
                                },
                                {
                                    "id": "edge_info_rect",
                                    "ref": "h"
                                },
                                {
                                    "id": "lerp_length",
                                    "value": 24
                                },
                                {
                                    "id": "line_lerp",
                                    "args": [
                                        "source",
                                        "target",
                                        "lerp_length",
                                        "selected_distance",
                                        "selected_edge"
                                    ],
                                    "script": "const length_x = Math.abs(source.x - target.x); const length_y = Math.abs(source.y - target.y); const length = Math.sqrt(length_x * length_x + length_y * length_y); return {selected_distance, selected_edge, source: {...source, x: source.x + (target.x - source.x) * lerp_length / length, y: source.y + (target.y - source.y) * lerp_length / length}, target: {...target, x: source.x + (target.x - source.x) * (1 - (lerp_length / length)), y: source.y + (target.y - source.y) * (1 - (lerp_length / length))}}"
                                },
                                {
                                    "id": "line_props",
                                    "args": [
                                        "source",
                                        "target",
                                        "selected_edge",
                                        "selected_distance"
                                    ],
                                    "script": "return ({id: `link-${source.node_child_id}`, onclick: (state, payload) => [onclick_edge, {event: payload, edge}], class: `link ${selected_edge && (source.node_id === selected_edge.from + '_' + selected_edge.to || (source.node_id === selected_edge.from && target.node_id === selected_edge.to)) ? 'selected' : 'unselected'}`, 'marker-end': 'url(#arrow)', opacity: selected_distance !== undefined ? Math.max(0.05, 1 - selected_distance * selected_distance / 2) : 0.1})"
                                },
                                {
                                    "id": "line_dom_type",
                                    "value": "line"
                                },
                                {
                                    "id": "empty_array",
                                    "value": [
                                    ]
                                },
                                {
                                    "id": "line",
                                    "ref": "h"
                                },
                                {
                                    "id": "out",
                                    "args": [
                                        "line",
                                        "edge_info"
                                    ],
                                    "script": "return [line, edge_info]"
                                }
                            ],
                            "edges": [
                                {
                                    "from": "in",
                                    "to": "get_link"
                                },
                                {
                                    "from": "in",
                                    "to": "line_props"
                                },
                                {
                                    "from": "get_link",
                                    "to": "line_lerp"
                                },
                                {
                                    "from": "get_selected_edge",
                                    "to": "line_props",
                                    "as": "selected_edge"
                                },
                                {
                                    "from": "get_selected_edge",
                                    "to": "line_lerp",
                                    "as": "selected_edge"
                                },
                                {
                                    "from": "selected_distance",
                                    "to": "edge_info_props",
                                    "as": "selected_distance"
                                },
                                {
                                    "from": "sibling_index_normalized",
                                    "to": "edge_info_props",
                                    "as": "sibling_index_normalized"
                                },
                                {
                                    "from": "onclick_edge",
                                    "to": "edge_info_props",
                                    "as": "onclick_edge"
                                },
                                {
                                    "from": "edge",
                                    "to": "line_props",
                                    "as": "edge"
                                },
                                {
                                    "from": "onclick_edge",
                                    "to": "line_props",
                                    "as": "onclick_edge"
                                },
                                {
                                    "from": "selected_distance",
                                    "to": "line_props",
                                    "as": "selected_distance"
                                },
                                {
                                    "from": "selected_distance",
                                    "to": "line_lerp",
                                    "as": "selected_distance"
                                },
                                {
                                    "from": "line_lerp",
                                    "to": "line_props"
                                },
                                {
                                    "from": "lerp_length",
                                    "to": "line_lerp",
                                    "as": "lerp_length"
                                },
                                {
                                    "from": "get_link",
                                    "to": "edge_info_props"
                                },
                                {
                                    "from": "edge",
                                    "to": "edge_info_props",
                                    "as": "edge"
                                },
                                {
                                    "from": "in",
                                    "to": "edge_info_as_text"
                                },
                                {
                                    "from": "in",
                                    "to": "edge_info_type_text"
                                },
                                {
                                    "from": "edge_info_dom_type",
                                    "to": "edge_info_el",
                                    "as": "dom_type"
                                },
                                {
                                    "from": "edge_info_props",
                                    "to": "edge_info_el",
                                    "as": "props"
                                },
                                {
                                    "from": "edge_info_line_position",
                                    "to": "edge_info_props",
                                    "as": "line_position"
                                },
                                {
                                    "from": "edge_info_rect",
                                    "to": "edge_info_el_children",
                                    "as": "rect"
                                },
                                {
                                    "from": "edge_info_rect_dom_type",
                                    "to": "edge_info_rect",
                                    "as": "dom_type"
                                },
                                {
                                    "from": "edge_info_el_children",
                                    "to": "edge_info_el",
                                    "as": "children"
                                },
                                {
                                    "from": "edge_info_el",
                                    "to": "out",
                                    "as": "edge_info"
                                },
                                {
                                    "from": "edge_info_type_props",
                                    "to": "edge_info_type_el",
                                    "as": "props"
                                },
                                {
                                    "from": "edge_info_type_text",
                                    "to": "edge_info_type_el",
                                    "as": "text"
                                },
                                {
                                    "from": "edge_info_type_el",
                                    "to": "edge_info_el_children",
                                    "as": "edge_type"
                                },
                                {
                                    "from": "edge_info_as_props",
                                    "to": "edge_info_as_el",
                                    "as": "props"
                                },
                                {
                                    "from": "readonly",
                                    "to": "edge_info_as_text",
                                    "as": "readonly"
                                },
                                {
                                    "from": "edge_info_as_text",
                                    "to": "edge_info_as_el",
                                    "as": "text"
                                },
                                {
                                    "from": "edge_info_as_el",
                                    "to": "edge_info_el_children",
                                    "as": "edge_as"
                                },
                                {
                                    "from": "line_props",
                                    "to": "line",
                                    "as": "props"
                                },
                                {
                                    "from": "line_dom_type",
                                    "to": "line",
                                    "as": "dom_type"
                                },
                                {
                                    "from": "empty_array",
                                    "to": "line",
                                    "as": "children"
                                },
                                {
                                    "from": "empty_array",
                                    "to": "line",
                                    "as": "children"
                                },
                                {
                                    "from": "line",
                                    "to": "out",
                                    "as": "line"
                                }
                            ]
                        },
                        {
                            "id": "line_end",
                            "ref": "h"
                        },
                        {
                            "id": "line_end_props",
                            "value": {
                                "id": "arrow",
                                "refX": 8,
                                "refY": 4,
                                "markerWidth": 8,
                                "markerHeight": 8,
                                "markerUnits": "userSpaceOnUse",
                                "orient": "auto"
                            }
                        },
                        {
                            "id": "line_end_children",
                            "args": [
                                "children"
                            ],
                            "script": "return [children.el]"
                        },
                        {
                            "id": "arrow_path",
                            "ref": "h"
                        },
                        {
                            "id": "arrow_path_props",
                            "value": {
                                "points": "1 1, 8 4, 1 8"
                            }
                        },
                        {
                            "id": "arrow_path_dom_type",
                            "value": "polyline"
                        },
                        {
                            "id": "fill_filter_flood_dom_type",
                            "value": "feFlood"
                        },
                        {
                            "id": "fill_filter_flood_props",
                            "value": {
                                "flood-color": "black"
                            }
                        },
                        {
                            "id": "fill_filter_flood",
                            "ref": "h"
                        },
                        {
                            "id": "fill_filter_props",
                            "value": {
                                "id": "flood-background",
                                "width": 1,
                                "height": 1,
                                "x": 0,
                                "y": 0
                            }
                        },
                        {
                            "id": "fill_filter_flood_selected_dom_type",
                            "value": "feFlood"
                        },
                        {
                            "id": "fill_filter_flood_selected_props",
                            "value": {
                                "flood-color": "red"
                            }
                        },
                        {
                            "id": "fill_filter_flood_selected",
                            "ref": "h"
                        },
                        {
                            "id": "fill_filter_selected_props",
                            "value": {
                                "id": "selected-flood-background",
                                "width": 1.2,
                                "height": 1.5,
                                "x": -0.1,
                                "y": -0.25
                            }
                        },
                        {
                            "id": "fill_filter_composite_props",
                            "value": {
                                "in": "SourceGraphic"
                            }
                        },
                        {
                            "id": "fill_filter_composite_dom_type",
                            "value": "feComposite"
                        },
                        {
                            "id": "fill_filter_composite",
                            "ref": "h"
                        },
                        {
                            "id": "fill_filter_children",
                            "args": [
                                "comp",
                                "flood"
                            ],
                            "script": "return [flood.el, comp.el]"
                        },
                        {
                            "id": "fill_filter_selected_children",
                            "args": [
                                "comp",
                                "flood"
                            ],
                            "script": "return [flood.el, comp.el]"
                        },
                        {
                            "id": "fill_filter_dom_type",
                            "value": "filter"
                        },
                        {
                            "id": "fill_filter",
                            "ref": "h"
                        },
                        {
                            "id": "fill_filter_selected",
                            "ref": "h"
                        },
                        {
                            "id": "marker",
                            "value": "marker"
                        },
                        {
                            "id": "defs_children",
                            "args": [
                                "arrow",
                                "bg_color",
                                "bg_color_selected"
                            ],
                            "script": "return [bg_color.el, bg_color_selected.el, arrow.el]"
                        },
                        {
                            "id": "defs",
                            "ref": "h"
                        },
                        {
                            "id": "defs_dom_type",
                            "value": "defs"
                        },
                        {
                            "id": "defs_props",
                            "value": {}
                        },
                        {
                            "id": "link_selected_distance",
                            "args": [
                                "link"
                            ],
                            "script": "return !link ? [] : link.selected_distance ? link.selected_distance : 10"
                        },
                        {
                            "id": "filter_links",
                            "ref": "filter_eq"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "get_nodes"
                        },
                        {
                            "from": "in",
                            "to": "log",
                            "as": "input"
                        },
                        {
                            "from": "in",
                            "to": "get_links"
                        },
                        {
                            "from": "in",
                            "to": "get_selected"
                        },
                        {
                            "from": "in",
                            "to": "get_selected_edge"
                        },
                        {
                            "from": "in",
                            "to": "get_levels"
                        },
                        {
                            "from": "node_el_width",
                            "to": "get_nodes",
                            "as": "node_el_width"
                        },
                        {
                            "from": "html_id",
                            "to": "node_layout",
                            "as": "html_id"
                        },
                        {
                            "from": "error_nodes",
                            "to": "node_layout",
                            "as": "error_nodes"
                        },
                        {
                            "from": "display_graph",
                            "to": "node_layout",
                            "as": "display_graph"
                        },
                        {
                            "from": "node_el_width",
                            "to": "node_layout",
                            "as": "node_el_width"
                        },
                        {
                            "from": "get_nodes",
                            "to": "node_layout",
                            "as": "nodes"
                        },
                        {
                            "from": "node_el_width",
                            "to": "get_links",
                            "as": "node_el_width"
                        },
                        {
                            "from": "get_links",
                            "to": "duplicate_nodes",
                            "as": "links"
                        },
                        {
                            "from": "get_levels",
                            "to": "duplicate_nodes",
                            "as": "levels"
                        },
                        {
                            "from": "get_levels",
                            "to": "node_layout",
                            "as": "levels"
                        },
                        {
                            "from": "in",
                            "to": "get_graph"
                        },
                        {
                            "from": "get_graph",
                            "to": "node_layout",
                            "as": "graph"
                        },
                        {
                            "from": "readonly",
                            "to": "link_layout",
                            "as": "readonly"
                        },
                        {
                            "from": "hide_types",
                            "to": "node_layout",
                            "as": "hide_types"
                        },
                        {
                            "from": "display_graph",
                            "to": "link_layout",
                            "as": "display_graph"
                        },
                        {
                            "from": "get_graph",
                            "to": "link_layout",
                            "as": "graph"
                        },
                        {
                            "from": "get_selected",
                            "to": "node_layout",
                            "as": "selected"
                        },
                        {
                            "from": "get_links",
                            "to": "link_selected_distance",
                            "as": "link"
                        },
                        {
                            "from": "get_selected_edge",
                            "to": "filter_links",
                            "as": "selected_edge"
                        },
                        {
                            "from": "get_selected_edge",
                            "to": "node_layout",
                            "as": "selected_edge"
                        },
                        {
                            "from": "get_selected_edge",
                            "to": "link_layout",
                            "as": "selected_edge"
                        },
                        {
                            "from": "link_selected_distance",
                            "to": "filter_links",
                            "as": "keep"
                        },
                        {
                            "from": "get_links",
                            "to": "filter_links"
                        },
                        {
                            "from": "get_links",
                            "to": "link_layout",
                            "as": "links"
                        },
                        {
                            "from": "get_levels",
                            "to": "link_layout",
                            "as": "levels"
                        },
                        {
                            "from": "link_layout_map",
                            "to": "link_layout",
                            "as": "link_layout_map",
                            "type": "ref"
                        },
                        {
                            "from": "in",
                            "to": "node_editor_props"
                        },
                        {
                            "from": "html_id",
                            "to": "node_editor_props",
                            "as": "html_id"
                        },
                        {
                            "from": "get_selected",
                            "to": "get_selected_node",
                            "as": "selected"
                        },
                        {
                            "from": "node_el_width",
                            "to": "node_editor_props",
                            "as": "node_el_width"
                        },
                        {
                            "from": "dimensions",
                            "to": "node_editor_props",
                            "as": "dimensions"
                        },
                        {
                            "from": "get_nodes",
                            "to": "get_selected_node",
                            "as": "nodes"
                        },
                        {
                            "from": "get_selected_node",
                            "to": "node_editor_props",
                            "as": "selected"
                        },
                        {
                            "from": "dimensions",
                            "to": "nodes_box",
                            "as": "dimensions"
                        },
                        {
                            "from": "node_el_width",
                            "to": "nodes_box",
                            "as": "node_el_width"
                        },
                        {
                            "from": "get_nodes",
                            "to": "nodes_box",
                            "as": "nodes"
                        },
                        {
                            "from": "get_selected_node",
                            "to": "nodes_box",
                            "as": "selected"
                        },
                        {
                            "from": "get_levels",
                            "to": "nodes_box",
                            "as": "levels"
                        },
                        {
                            "from": "get_selected_node",
                            "to": "center",
                            "as": "selected"
                        },
                        {
                            "from": "nodes_box",
                            "to": "center",
                            "as": "nodes_box"
                        },
                        {
                            "from": "center",
                            "to": "node_editor_props",
                            "as": "center"
                        },
                        {
                            "from": "nodes_box",
                            "to": "node_editor_props",
                            "as": "nodes_box"
                        },
                        {
                            "from": "onclick_graph",
                            "to": "node_editor_props",
                            "as": "onclick_graph"
                        },
                        {
                            "from": "node_editor_props",
                            "to": "out",
                            "as": "props"
                        },
                        {
                            "from": "node_editor_dom_type",
                            "to": "out",
                            "as": "dom_type"
                        },
                        {
                            "from": "node_layout_map",
                            "to": "node_layout",
                            "as": "node_layout_map",
                            "type": "ref"
                        },
                        {
                            "from": "node_layout",
                            "to": "node_editor_children",
                            "as": "nodes"
                        },
                        {
                            "from": "get_nodes",
                            "to": "node_editor_children_inputs",
                            "as": "nodes"
                        },
                        {
                            "from": "link_layout",
                            "to": "node_editor_children",
                            "as": "links"
                        },
                        {
                            "from": "get_links",
                            "to": "node_editor_children_inputs",
                            "as": "links"
                        },
                        {
                            "from": "defs",
                            "to": "node_editor_children",
                            "as": "defs"
                        },
                        {
                            "from": "marker",
                            "to": "line_end",
                            "as": "dom_type"
                        },
                        {
                            "from": "arrow_path_props",
                            "to": "arrow_path",
                            "as": "props"
                        },
                        {
                            "from": "arrow_path_dom_type",
                            "to": "arrow_path",
                            "as": "dom_type"
                        },
                        {
                            "from": "arrow_path",
                            "to": "line_end",
                            "as": "children"
                        },
                        {
                            "from": "line_end_props",
                            "to": "line_end",
                            "as": "props"
                        },
                        {
                            "from": "line_end",
                            "to": "defs_children",
                            "as": "arrow"
                        },
                        {
                            "from": "fill_filter_flood_props",
                            "to": "fill_filter_flood",
                            "as": "props"
                        },
                        {
                            "from": "fill_filter_flood_dom_type",
                            "to": "fill_filter_flood",
                            "as": "dom_type"
                        },
                        {
                            "from": "fill_filter_flood",
                            "to": "fill_filter_children",
                            "as": "flood"
                        },
                        {
                            "from": "fill_filter_flood_selected_props",
                            "to": "fill_filter_flood_selected",
                            "as": "props"
                        },
                        {
                            "from": "fill_filter_flood_selected_dom_type",
                            "to": "fill_filter_flood_selected",
                            "as": "dom_type"
                        },
                        {
                            "from": "fill_filter_flood_selected",
                            "to": "fill_filter_selected_children",
                            "as": "flood"
                        },
                        {
                            "from": "fill_filter_composite_props",
                            "to": "fill_filter_composite",
                            "as": "props"
                        },
                        {
                            "from": "fill_filter_composite_dom_type",
                            "to": "fill_filter_composite",
                            "as": "dom_type"
                        },
                        {
                            "from": "fill_filter_composite",
                            "to": "fill_filter_children",
                            "as": "comp"
                        },
                        {
                            "from": "fill_filter_children",
                            "to": "fill_filter",
                            "as": "children"
                        },
                        {
                            "from": "fill_filter_props",
                            "to": "fill_filter",
                            "as": "props"
                        },
                        {
                            "from": "fill_filter_composite",
                            "to": "fill_filter_selected_children",
                            "as": "comp"
                        },
                        {
                            "from": "fill_filter_selected_children",
                            "to": "fill_filter_selected",
                            "as": "children"
                        },
                        {
                            "from": "fill_filter_selected_props",
                            "to": "fill_filter_selected",
                            "as": "props"
                        },
                        {
                            "from": "fill_filter_dom_type",
                            "to": "fill_filter",
                            "as": "dom_type"
                        },
                        {
                            "from": "fill_filter_dom_type",
                            "to": "fill_filter_selected",
                            "as": "dom_type"
                        },
                        {
                            "from": "fill_filter",
                            "to": "defs_children",
                            "as": "bg_color"
                        },
                        {
                            "from": "fill_filter_selected",
                            "to": "defs_children",
                            "as": "bg_color_selected"
                        },
                        {
                            "from": "defs_dom_type",
                            "to": "defs",
                            "as": "dom_type"
                        },
                        {
                            "from": "defs_props",
                            "to": "defs",
                            "as": "props"
                        },
                        {
                            "from": "defs_children",
                            "to": "defs",
                            "as": "children"
                        },
                        {
                            "from": "node_editor_children",
                            "to": "out",
                            "as": "children"
                        }
                    ]
                },
                {
                    "id": "error_display",
                    "script": "return {el: {dom_type: 'div', props: {class:{error: true, main: true}, key: `${html_id}-error_display`}, children: [{dom_type: 'text_value', text: error}]}}"
                },
                {
                    "id": "noop",
                    "script": "return {el: _lib.ha.h('div', {}, _lib.ha.text('loading...'))}"
                },
                {
                    "id": "out_input",
                    "script": "return display_graph && graph ? 'hel' : 'noop'"
                },
                {
                    "id": "out",
                    "ref": "switch"
                }
            
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "node_editor"
                },
                {
                    "from": "in",
                    "to": "edit_text"
                },
                {
                    "from": "in",
                    "to": "search_input"
                },
                {
                    "from": "in",
                    "to": "result"
                },
                {
                    "from": "graph",
                    "to": "wrapper",
                    "as": "graph"
                },
                {
                    "from": "graph",
                    "to": "out_input",
                    "as": "graph"
                },
                {
                    "from": "display_graph",
                    "to": "out_input",
                    "as": "display_graph"
                },
                {
                    "from": "error",
                    "to": "error_display",
                    "as": "error"
                },
                {
                    "from": "html_id",
                    "to": "error_display",
                    "as": "html_id"
                },
                {
                    "from": "error",
                    "to": "wrapper_children",
                    "as": "error"
                },
                {
                    "from": "error_display",
                    "to": "wrapper_children",
                    "as": "error_display"
                },
                {
                    "from": "readonly",
                    "to": "wrapper_children",
                    "as": "readonly"
                },
                {
                    "from": "show_result",
                    "to": "wrapper_children",
                    "as": "show_result"
                },
                {
                    "from": "popover_graph",
                    "to": "wrapper_children",
                    "as": "popover_graph"
                },
                {
                    "from": "readonly",
                    "to": "node_editor",
                    "as": "readonly"
                },
                {
                    "from": "node_editor",
                    "to": "wrapper_children",
                    "as": "node_editor"
                },
                {
                    "from": "edit_text",
                    "to": "wrapper_children",
                    "as": "edit_text"
                },
                {
                    "from": "search_input",
                    "to": "wrapper_children",
                    "as": "search_input"
                },
                {
                    "from": "result_display",
                    "to": "result_wrapper",
                    "as": "run"
                },
                {
                    "from": "result_display",
                    "to": "wrapper_children",
                    "as": "result_display"
                },
                {
                    "from": "popover_graph_h",
                    "to": "popover_graph_h_wrapper",
                    "as": "el"
                },
                {
                    "from": "popover_graph_h_wrapper",
                    "to": "wrapper_children",
                    "as": "popover_graph_h"
                },
                {
                    "from": "wrapper_children",
                    "to": "wrapper",
                    "as": "children",
                    "type": "resolve"
                },
                {
                    "from": "wrapper_dom_type",
                    "to": "wrapper",
                    "as": "dom_type"
                },
                {
                    "from": "wrapper_props",
                    "to": "wrapper",
                    "as": "props",
                    "type": "resolve"
                },
                {
                    "from": "out_input",
                    "to": "out",
                    "as": "input"
                },
                {
                    "from": "noop",
                    "to": "out",
                    "as": "noop",
                    "type": "resolve"
                },
                {
                    "from": "wrapper",
                    "to": "out",
                    "as": "hel"
                }
            ]
        }
    ],
    "edges": [
        {
            "from": "editor",
            "to": "hyperapp_view",
            "type": "ref",
            "as": "fn"
        },
        {
            "from": "get_graph",
            "to": "update_sim_fn",
            "as": "graph"
        },
        {
            "from": "simulation",
            "to": "update_sim",
            "as": "simulation"
        },
        {
            "from": "arg_nodes",
            "to": "update_sim",
            "as": "nodes"
        },
        {
            "from": "arg_links",
            "to": "update_sim",
            "as": "links"
        },
        {
            "from": "arg_selected",
            "to": "update_sim",
            "as": "selected"
        },
        {
            "from": "arg_levels",
            "to": "update_sim",
            "as": "levels"
        },
        {
            "from": "arg_sim_update_alpha",
            "to": "update_sim",
            "as": "sim_update_alpha"
        },
        {
            "from": "get_display_graph",
            "to": "update_sim",
            "as": "display_graph"
        },
        {
            "from": "error_nodes",
            "to": "hyperapp_init_state",
            "as": "error_nodes"
        },
        {
            "from": "readonly",
            "to": "hyperapp_init_state",
            "as": "readonly"
        },
        {
            "from": "hide_types",
            "to": "hyperapp_init_state",
            "as": "hide_types"
        },
        {
            "from": "dimensions",
            "to": "hyperapp_init_state",
            "as": "dimensions"
        },
        {
            "from": "html_id",
            "to": "hyperapp_init_state",
            "as": "html_id"
        },
        {
            "from": "display_graph_out",
            "to": "init_selected",
            "as": "a0"
        },
        {
            "from": "init_selected",
            "to": "hyperapp_init_state",
            "as": "selected"
        },
        {
            "from": "update_sim_effect",
            "to": "hyperapp_init_state",
            "as": "update_sim_effect"
        },
        {
            "from": "get_graph",
            "to": "onkey_fn",
            "as": "graph"
        },
        {
            "from": "onkey_fn",
            "to": "initialize_hyperapp_app",
            "as": "onkey_fn"
        },
        {
            "from": "onkey_fn_body",
            "to": "onkey_fn",
            "as": "fn",
            "type": "ref"
        },
        {
            "from": "html_id",
            "to": "render_graph_effect",
            "as": "html_id"
        },
        {
            "from": "update_sim_effect",
            "to": "render_graph_effect",
            "as": "update_sim"
        },
        {
            "from": "dummy_graph",
            "to": "render_graph_effect",
            "as": "display_graph"
        },
        {
            "from": "popover_dimensions",
            "to": "render_graph_effect",
            "as": "dimensions"
        },
        {
            "from": "get_graph",
            "to": "render_graph_effect",
            "as": "graph"
        },
        {
            "from": "html_id",
            "to": "initialize_hyperapp_app",
            "as": "html_id"
        },
        {
            "from": "render_graph_effect",
            "to": "_initialize_hyperapp_app",
            "as": "render_graph_effect"
        },
        {
            "from": "hyperapp_view",
            "to": "initialize_hyperapp_app",
            "as": "view"
        },
        {
            "from": "update_hyperapp",
            "to": "update_hyperapp_action",
            "as": "fn",
            "type": "ref"
        },
        {
            "from": "update_hyperapp_action",
            "to": "initialize_hyperapp_app",
            "as": "update_hyperapp"
        },
        {
            "from": "hyperapp_init_state",
            "to": "initialize_hyperapp_app",
            "as": "init"
        },
        {
            "from": "get_graph",
            "to": "hyperapp_view",
            "as": "graph"
        },
        {
            "from": "get_graph",
            "to": "hyperapp_init_state",
            "as": "graph"
        },
        {
            "from": "get_graph",
            "to": "update_nodes",
            "as": "graph"
        },
        {
            "from": "get_display_graph",
            "to": "update_nodes",
            "as": "display_graph"
        },
        {
            "from": "get_display_graph",
            "to": "hyperapp_init_state",
            "as": "display_graph"
        },
        {
            "from": "display_graph_out",
            "to": "calculate_levels",
            "as": "selected"
        },
        {
            "from": "get_display_graph",
            "to": "calculate_levels",
            "as": "display_graph"
        },
        {
            "from": "calculate_levels",
            "to": "hyperapp_init_state",
            "as": "levels"
        },
        {
            "from": "initial_state",
            "to": "hyperapp_init_state"
        },
        {
            "from": "in",
            "to": "hyperapp_init_state",
            "order": -1
        },
        {
            "from": "nodes",
            "to": "graph_to_simulation",
            "as": "nodes"
        },
        {
            "from": "links",
            "to": "graph_to_simulation",
            "as": "links"
        },
        {
            "from": "graph_to_simulation",
            "to": "graph_to_sim_action",
            "as": "fn",
            "type": "ref"
        },
        {
            "from": "sim_to_hyperapp",
            "to": "sim_to_hyperapp_fn",
            "as": "fn",
            "type": "ref"
        },
        {
            "from": "sim_to_hyperapp_fn",
            "to": "initialize_hyperapp_app",
            "as": "sim_to_hyperapp_action"
        },
        {
            "from": "graph_to_sim_action",
            "to": "initialize_hyperapp_app",
            "as": "graph_to_sim_action"
        },
        {
            "from": "update_sim_in",
            "to": "update_sim_fn",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "update_sim",
            "to": "update_sim_fn",
            "as": "fn",
            "type": "ref"
        },
        {
            "from": "update_sim_fn",
            "to": "update_sim_effect",
            "as": "fn"
        },
        {
            "from": "update_sim_effect",
            "to": "editor",
            "as": "update_sim"
        },
        {
            "from": "update_sim_effect",
            "to": "initialize_hyperapp_app",
            "as": "update_sim"
        },
        {
            "from": "initialize_hyperapp_app",
            "to": "out" 
        },
        {"from": "get", "to": "object"},
        {"from": "set", "to": "object"},
        {"from": "delete", "to": "object"},
        {"from": "switch", "to": "flow"},
        {"from": "if", "to": "flow"},
        {"from": "h", "to": "hyperapp"},
        {"from": "h_text", "to": "hyperapp"},
        {"from": "new_array", "to": "array"},
        {"from": "filter", "to": "array"},
        {"from": "log", "to": "utility"},
        {"from": "execute_graph", "to": "utility"},
        {"from": "arg", "to": "utility"}
    ]
}