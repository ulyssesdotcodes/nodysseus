{
    "description": "function composition",
    "in": "in",
    "out": "out",
    "nodes": [
        {
            "id": "in",
            "value": null
        },
        {
            "id": "log",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "input"
                    ],
                    "script": "console.log(node.id); console.log(input); return {}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "input"
                }
            ]
        },
        {
            "id": "hyperapp",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "init",
                        "view",
                        "subscriptions"
                    ],
                    "script": "return lib.ha.app({init: () => [init, [() => { init.update_sim_effect(null, init) }]], view: s => view(s)[0].el, node: document.getElementById('node-editor'), subscriptions: () => subscriptions})"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "children_els",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "children"
                    ],
                    "script": "return [children.map(c => c.el)]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "append",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "item",
                        "array"
                    ],
                    "script": "return [array.concat(Array.isArray(item) ? item : [item])]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "filter",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "keep",
                        "data"
                    ],
                    "script": "return keep ? [data] : []"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "data",
                    "order": 0
                }
            ]
        },
        {
            "id": "delete",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "path"
                    ],
                    "script": "const new_data = Object.assign({}, data); delete new_data[path]; return new_data;"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "order": 1
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "data",
                    "order": 0
                }
            ]
        },
        {
            "id": "default",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "default_value"
                    ],
                    "script": "return data ?? default_value"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "switch",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "input"
                    ],
                    "script": "return data[Object.getOwnPropertyNames(data)[0]];"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "data"
                }
            ]
        },
        {
            "id": "trigger",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "trigger",
                    "args": [
                        "trigger"
                    ],
                    "script": "return trigger ? ['in'] : []"
                },
                {
                    "id": "out",
                    "args": [
                        "data"
                    ],
                    "script": "return data?.data ?? []"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "data"
                },
                {
                    "from": "in",
                    "to": "trigger"
                },
                {
                    "from": "trigger",
                    "to": "out",
                    "type": "inputs"
                }
            ]
        },
        {
            "id": "svg_text",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "el",
                    "type": "h"
                },
                {
                    "id": "dom_type",
                    "value": "text"
                },
                {
                    "id": "text_el",
                    "type": "h_text"
                },
                {
                    "id": "children",
                    "args": [
                        "text"
                    ],
                    "script": "return [[text.el]]"
                },
                {
                    "id": "out"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "text_el"
                },
                {
                    "from": "in",
                    "to": "el"
                },
                {
                    "from": "dom_type",
                    "to": "el",
                    "as": "dom_type"
                },
                {
                    "from": "text_el",
                    "to": "children",
                    "as": "text"
                },
                {
                    "from": "children",
                    "to": "el",
                    "as": "children"
                },
                {
                    "from": "el",
                    "to": "out"
                }
            ]
        },
        {
            "id": "execute_graph",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "args": [
                        "in_node",
                        "out_node",
                        "graph"
                    ],
                    "script": "return (...args) => (lib.no.executeGraph({state: new Map([[in_node, args]]), graph: {...graph, in: in_node, out: out_node}}).get(out_node))"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "wrap_effect_fn",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "args": [
                        "fn"
                    ],
                    "script": "return [[(_, payload) => fn(payload)]]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "get",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "fill_default",
                    "args": [
                        "input"
                    ],
                    "script": "return input.default ?? null"
                },
                {
                    "id": "out",
                    "args": [
                        "target",
                        "path",
                        "def"
                    ],
                    "script": "return [lib._.get(target, path) ?? def]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                },
                {
                    "from": "in",
                    "to": "fill_default",
                    "as": "input"
                },
                {
                    "from": "fill_default",
                    "to": "out",
                    "as": "def"
                }
            ]
        },
        {
            "id": "h",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "fill_children",
                    "args": [
                        "input"
                    ],
                    "script": "return [ input.children === undefined ? [] : (Array.isArray(input.children) ? input.children.map(c => c.el ?? c) : [input.children.el])]"
                },
                {
                    "id": "fill_props",
                    "args": [
                        "input"
                    ],
                    "script": "return input.props ?? {}"
                },
                {
                    "id": "out",
                    "args": [
                        "props",
                        "children",
                        "input"
                    ],
                    "script": "return {el: lib.ha.h(input.dom_type, props, children)}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "fill_children",
                    "as": "input"
                },
                {
                    "from": "in",
                    "to": "fill_props",
                    "as": "input"
                },
                {
                    "from": "fill_children",
                    "to": "out",
                    "as": "children",
                    "order": 1
                },
                {
                    "from": "fill_props",
                    "to": "out",
                    "as": "props"
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "input"
                }
            ]
        },
        {
            "id": "h_text",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "args": [
                        "text"
                    ],
                    "script": "return {el: lib.ha.text(text)}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "expand_contract",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "selected_node",
                    "args": [
                        "node_id",
                        "display_graph"
                    ],
                    "script": "return display_graph.nodes.find(n => n.id === node_id)"
                },
                {
                    "id": "expand_contract_result_inputs",
                    "args": [
                        "expandable",
                        "contractable"
                    ],
                    "script": "return expandable ? ['expand', 'selected'] : contractable ? ['contract', 'selected'] : []"
                },
                {
                    "id": "selected",
                    "args": [
                        "expand",
                        "contract"
                    ],
                    "script": "return expand ?? contract ?? []"
                },
                {
                    "id": "expand_contract_result",
                    "args": [
                        "expand",
                        "contract",
                        "selected",
                        "display_graph",
                        "node_id"
                    ],
                    "script": "return expand ?? contract ?? {display_graph, selected: node_id}"
                },
                {
                    "id": "get_name",
                    "args": [
                        "node"
                    ],
                    "script": "return node.name"
                },
                {
                    "id": "log",
                    "type": "log"
                },
                {
                    "id": "expandable_id",
                    "args": [
                        "id",
                        "out"
                    ],
                    "script": "return id ? [[id + '/' + out]] : []"
                },
                {
                    "id": "contractable_id",
                    "args": [
                        "node_id",
                        "name"
                    ],
                    "script": "return !node_id ? [] : node_id.endsWith('/out') ? [[node_id.substring(0, node_id.lastIndexOf('/'))]] : node_id.lastIndexOf('/') >= 0 ? [[node_id.substring(0, node_id.lastIndexOf('/'))]] : [[node_id]]"
                },
                {
                    "id": "expand",
                    "args": [
                        "node_id",
                        "display_graph",
                        "out"
                    ],
                    "script": "return display_graph && node_id ? lib.scripts.expand_node({display_graph, node_id, out}) : []"
                },
                {
                    "id": "contract",
                    "args": [
                        "node_id",
                        "display_graph",
                        "name"
                    ],
                    "script": "return display_graph && node_id ? lib.scripts.contract_node({display_graph, node_id, name}) : []"
                },
                {
                    "id": "has_nodes",
                    "args": [
                        "node_id",
                        "display_graph"
                    ],
                    "script": "return !!display_graph.nodes.find(n => n.id === node_id).nodes"
                },
                {
                    "id": "is_contractable",
                    "args": [
                        "has_nodes"
                    ],
                    "script": "return !has_nodes"
                },
                {
                    "id": "out",
                    "type": "default"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "contractable_id"
                },
                {
                    "from": "in",
                    "to": "has_nodes"
                },
                {
                    "from": "in",
                    "to": "expand"
                },
                {
                    "from": "in",
                    "to": "contract"
                },
                {
                    "from": "in",
                    "to": "expand_contract_result"
                },
                {
                    "from": "in",
                    "to": "selected_node"
                },
                {
                    "from": "has_nodes",
                    "to": "is_contractable",
                    "as": "has_nodes"
                },
                {
                    "from": "selected_node",
                    "to": "get_name",
                    "as": "node"
                },
                {
                    "from": "selected_node",
                    "to": "expandable_id"
                },
                {
                    "from": "selected_node",
                    "to": "contract"
                },
                {
                    "from": "get_name",
                    "to": "contract",
                    "as": "name"
                },
                {
                    "from": "get_name",
                    "to": "is_contractable",
                    "as": "name"
                },
                {
                    "from": "get_name",
                    "to": "contractable_id",
                    "as": "name"
                },
                {
                    "from": "contractable_id",
                    "to": "selected",
                    "as": "contract"
                },
                {
                    "from": "expandable_id",
                    "to": "selected",
                    "as": "expand"
                },
                {
                    "from": "has_nodes",
                    "to": "expand_contract_result_inputs",
                    "as": "expandable"
                },
                {
                    "from": "is_contractable",
                    "to": "expand_contract_result_inputs",
                    "as": "contractable"
                },
                {
                    "from": "expand_contract_result_inputs",
                    "to": "selected",
                    "type": "inputs"
                },
                {
                    "from": "expand_contract_result_inputs",
                    "to": "expand_contract_result",
                    "type": "inputs"
                },
                {
                    "from": "selected",
                    "to": "expand_contract_result",
                    "as": "selected"
                },
                {
                    "from": "expand",
                    "to": "expand_contract_result",
                    "as": "expand"
                },
                {
                    "from": "contract",
                    "to": "expand_contract_result",
                    "as": "contract"
                },
                {
                    "from": "expand_contract_result",
                    "to": "out",
                    "as": "data"
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "default_value"
                }
            ]
        },
        {
            "id": "default_node_display",
            "in": "in",
            "out": "out",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "stringify",
                    "args": [
                        "data"
                    ],
                    "script": "return JSON.stringify(data, null, 2)"
                },
                {
                    "id": "out",
                    "type": "h_text"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "stringify",
                    "as": "data"
                },
                {
                    "from": "stringify",
                    "to": "out",
                    "as": "text"
                }
            ]
        },
        {
            "id": "default_error_display",
            "in": "in",
            "out": "out",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "stringify",
                    "args": [
                        "data"
                    ],
                    "script": "return data.error"
                },
                {
                    "id": "out",
                    "type": "h_text"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "stringify",
                    "as": "data"
                },
                {
                    "from": "stringify",
                    "to": "out",
                    "as": "text"
                }
            ]
        },
        {
            "id": "not",
            "args": [
                "target"
            ],
            "script": "return !target"
        },
        {
            "id": "data",
            "value": "data"
        },
        {
            "id": "graph",
            "value": "graph"
        },
        {
            "id": "display_graph",
            "value": "display_graph"
        },
        {
            "id": "nodes",
            "value": "nodes"
        },
        {
            "id": "graph_nodes",
            "value": [
                [
                    "graph",
                    "nodes"
                ]
            ]
        },
        {
            "id": "initial_state",
            "value": {
                "nodes": [],
                "links": [],
                "editing": false,
                "search": false
            }
        },
        {
            "id": "hyperapp_init_state"
        },
        {
            "id": "get_graph",
            "type": "get"
        },
        {
            "id": "get_display_graph",
            "type": "get"
        },
        {
            "id": "display_graph_out",
            "value": "out"
        },
        {
            "id": "get_display_graph_out",
            "type": "get"
        },
        {
            "id": "hyperapp_view",
            "type": "execute_graph"
        },
        {
            "id": "hyperapp_app",
            "type": "hyperapp"
        },
        {
            "id": "out"
        },
        {
            "id": "hyperapp_view_in",
            "value": "hyperapp_view_in"
        },
        {
            "id": "hyperapp_subscriptions",
            "args": [
                "simulation",
                "onkey_fn"
            ],
            "script": "return [[[lib.scripts.d3subscription(simulation)], [lib.scripts.keydownSubscription, {action: onkey_fn}]]]"
        },
        {
            "id": "graph_to_simulation",
            "args": [
                "nodes",
                "display_graph",
                "selected",
                "levels"
            ],
            "script": "return lib.scripts.graphToSimulationNodes({display_graph, nodes, selected, levels})"
        },
        {
            "id": "update_nodes_in"
        },
        {
            "id": "update_nodes",
            "args": [
                "simulation",
                "nodes",
                "display_graph",
                "links",
                "selected",
                "levels"
            ],
            "script": "return lib.scripts.updateSimulationNodes({display_graph, simulation, nodes, links, selected, levels})"
        },
        {
            "id": "update_nodes_fn",
            "type": "execute_graph"
        },
        {
            "id": "d3simulation",
            "args": [],
            "script": "return lib.scripts.d3simulation()"
        },
        {
            "id": "onkey_fn_in",
            "value": null
        },
        {
            "id": "onkey_fn",
            "type": "execute_graph"
        },
        {
            "id": "onkey_fn_body",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "key_event",
                    "args": [
                        "args"
                    ],
                    "script": "return args[1]"
                },
                {
                    "id": "key",
                    "args": [
                        "key"
                    ],
                    "script": "return key.toLowerCase()"
                },
                {
                    "id": "key_inputs",
                    "args": [
                        "key",
                        "state",
                        "ctrlKey",
                        "shiftKey"
                    ],
                    "script": "return (state.editing !== false || state.search !== false) ? key === 'escape' ? ['escape'] : [] : [(ctrlKey ? 'ctrl_' : '') + (shiftKey ? 'shift_' : '') + key.toLowerCase()]"
                },
                {
                    "id": "key_log",
                    "type": "log"
                },
                {
                    "id": "state",
                    "args": [
                        "args"
                    ],
                    "script": "return args[0]"
                },
                {
                    "id": "get_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected[0]"
                },
                {
                    "id": "find_selected"
                },
                {
                    "id": "filter_editing",
                    "args": [
                        "editing"
                    ],
                    "script": "return editing ? [] : {}"
                },
                {
                    "id": "selected_node",
                    "args": [
                        "node_id",
                        "display_graph"
                    ],
                    "script": "return display_graph.nodes.find(n => n.id === node_id)"
                },
                {
                    "id": "save",
                    "args": [
                        "key",
                        "ctrlKey",
                        "display_graph"
                    ],
                    "script": "return key === 's' && ctrlKey === true ? () => { localStorage.setItem('display_graph', JSON.stringify(display_graph)); localStorage.setItem('display_graph_' + Date.now(), JSON.stringify(display_graph));} : () => {}"
                },
                {
                    "id": "down",
                    "args": [
                        "key",
                        "selected",
                        "editing",
                        "display_graph"
                    ],
                    "script": "const next_node_edge = display_graph.edges.find(e => e.from === selected[0]); return next_node_edge ? next_node_edge.to : []"
                },
                {
                    "id": "up",
                    "args": [
                        "key",
                        "selected",
                        "editing",
                        "display_graph"
                    ],
                    "script": "const next_edges = display_graph.edges.filter(e => e.to === selected[0]); const next_node_edge = next_edges[Math.ceil(next_edges.length / 2) - 1]; return next_node_edge ? next_node_edge.from : []"
                },
                {
                    "id": "left",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes",
                        "levels"
                    ],
                    "script": "const current_node = nodes.find(n => n.node_id === selected[0]); const siblings = levels.nodes_by_level[levels.level_by_node.get(selected[0])]; const next_node = siblings.reduce((dist, sibling) => { const sibling_node = nodes.find(n => n.node_id === sibling && n.selected_distance < 3); if(!sibling_node){ return dist } const xdist = Math.abs(sibling_node.x - current_node.x); dist = sibling_node.x < current_node.x && xdist < dist[0] ? [xdist, sibling_node] : dist; return dist }, [window.innerWidth]); return next_node[1] ? next_node[1].node_id : []"
                },
                {
                    "id": "left_edge",
                    "args": [
                        "key",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "links"
                    ],
                    "script": "const link = links.find(l => l.target.node_id === selected_edge.to &&  l.source.node_id === selected_edge.from); return links.filter(l => l.target.node_id === selected[0]).reduce(([current, dist], l) => l.source.x < link.source.x && Math.abs(l.source.x - link.source.x) < dist ? [{from: l.source.node_id, to: l.target.node_id} , Math.abs(l.source.x - link.source.x)] : [current, dist], [{to: link.target.node_id, from: link.source.node_id}, 10000])[0]"
                },
                {
                    "id": "right",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes",
                        "levels"
                    ],
                    "script": "const current_node = nodes.find(n => n.node_id === selected[0]); const siblings = levels.nodes_by_level[levels.level_by_node.get(selected[0])]; const next_node = siblings.reduce((dist, sibling) => { const sibling_node = nodes.find(n => n.node_id === sibling && n.selected_distance < 3); if(!sibling_node){ return dist }  const xdist = Math.abs(sibling_node.x - current_node.x); dist = sibling_node.x > current_node.x && xdist < dist[0] ? [xdist, sibling_node] : dist; return dist }, [window.innerWidth]); return next_node[1] ? next_node[1].node_id : []"
                },
                {
                    "id": "right_edge",
                    "args": [
                        "key",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "links"
                    ],
                    "script": "const link = links.find(l => l.target.node_id === selected_edge.to &&  l.source.node_id === selected_edge.from); return links.filter(l => l.target.node_id === selected[0]).reduce(([current, dist], l) => l.source.x > link.source.x && Math.abs(l.source.x - link.source.x) < dist ? [{from: l.source.node_id, to: l.target.node_id} , Math.abs(l.source.x - link.source.x)] : [current, dist], [{to: link.target.node_id, from: link.source.node_id}, 10000])[0]"
                },
                {
                    "id": "v",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "if(!(key === 'v' && editing === false)){ return [] } document.querySelector('#edit_value .input').focus(); return 'value';"
                },
                {
                    "id": "t",
                    "args": [
                        "key",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "document.querySelector('#edit_value .input').focus(); return 'type';"
                },
                {
                    "id": "shift_t",
                    "args": [
                        "key",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "const new_node = Object.assign({}, display_graph.nodes.find(n => n.id === selected[0])); new_node.id = new_node.name; return {...display_graph, nodes: display_graph.nodes.map(n => n.id === selected[0] ? {id: n.id, type: n.name, name: n.name} : n).concat([new_node]), edges: display_graph.edges}"
                },
                {
                    "id": "s",
                    "args": [
                        "key",
                        "ctrlKey",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "if(!(key === 's' && ctrlKey === false && editing === false)){ return [] } document.querySelector('#edit_value .input').focus(); return 'script';"
                },
                {
                    "id": "a",
                    "args": [
                        "key",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "if(!(key === 'a' && editing === false)){ return [] } document.querySelector('#edit_value .input').focus(); return selected_edge ? 'as' : 'args';"
                },
                {
                    "id": "n",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "if(!(key === 'n' && editing === false)){ return [] } document.querySelector('#edit_value .input').focus(); return 'name';"
                },
                {
                    "id": "o",
                    "args": [
                        "key",
                        "shiftKey",
                        "selected",
                        "display_graph",
                        "editing",
                        "selected_edge"
                    ],
                    "script": "const id = Math.random().toString(36).substr(2, 9); display_graph.nodes.push({id, args: []}); display_graph.edges = display_graph.edges.concat(selected_edge ? [{from: selected_edge.from, to: id}, {from: id, to: selected_edge.to}] : [{from: shiftKey ? id : selected[0], to: shiftKey ? selected[0] : id}]).filter(e => !(selected_edge?.to === e.to && selected_edge?.from === e.from)); return {display_graph, selected: [id], selected_edge: false};"
                },
                {
                    "id": "o_display_graph",
                    "args": [
                        "display_graph"
                    ],
                    "script": "return display_graph"
                },
                {
                    "id": "o_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected"
                },
                {
                    "id": "o_selected_edge",
                    "args": [
                        "selected_edge"
                    ],
                    "script": "return selected_edge"
                },
                {
                    "id": "x",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "display_graph_out"
                    ],
                    "script": "display_graph.nodes = display_graph.nodes.filter(n => n.id !== selected[0]); const new_edges = []; const to = display_graph.edges.filter(e => e.to === selected[0]); const from = display_graph.edges.filter(e => e.from === selected[0]); for(let i = 0; i < to.length; i++){for(let j = 0; j < from.length; j++){ if(!display_graph.edges.find(e => e.from === to[i].from && e.to === from[j].to)){ display_graph.edges.push({from: to[i].from, to: from[j].to});}}}; display_graph.edges = display_graph.edges.filter(e => e.to !== selected[0] && e.from !== selected[0]); display_graph.edges.push(...new_edges); return {display_graph, selected: [to[0]?.from ?? from[0]?.to] };"
                },
                {
                    "id": "x_display_graph",
                    "args": [
                        "display_graph"
                    ],
                    "script": "return display_graph"
                },
                {
                    "id": "x_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected"
                },
                {
                    "id": "enter",
                    "args": [
                        "key",
                        "selected"
                    ],
                    "script": "if(!(key === 'enter')){ return []; } return true;"
                },
                {
                    "id": "e",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "selected_edge"
                    ],
                    "script": "return selected_edge ? null : display_graph.edges.find(e => e.to === selected[0]);"
                },
                {
                    "id": "f",
                    "args": [],
                    "script": "document.querySelector('#search-input').focus(); return ''"
                },
                {
                    "id": "y",
                    "args": [
                        "node"
                    ],
                    "script": "return node"
                },
                {
                    "id": "p",
                    "args": [
                        "clipboard",
                        "display_graph",
                        "selected"
                    ],
                    "script": "const id = Math.random().toString(36).substr(2, 9); display_graph.nodes.push({...clipboard[0], id, name: clipboard.name?.concat('_copy')}); return {display_graph, selected: id};"
                },
                {
                    "id": "p_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected"
                },
                {
                    "id": "p_display_graph",
                    "args": [
                        "display_graph"
                    ],
                    "script": "return display_graph"
                },
                {
                    "id": "pending_edges",
                    "args": [
                        "key",
                        "shiftKey",
                        "state"
                    ],
                    "script": "return {edge_from: key === 'c' && !shiftKey ? state.selected[0] : state.edge_from, edge_to: key === 'c' && shiftKey ? state.selected[0] : state.edge_to}"
                },
                {
                    "id": "set_pending_edges",
                    "args": [
                        "pending_edges",
                        "state"
                    ],
                    "script": "const has_both = pending_edges.edge_to && pending_edges.edge_from; state.edge_to = has_both ? undefined : pending_edges.edge_to; state.edge_from = has_both ? undefined : pending_edges.edge_from; return state;"
                },
                {
                    "id": "make_edge",
                    "args": [
                        "pending_edges",
                        "state"
                    ],
                    "script": "if(pending_edges.edge_from && pending_edges.edge_to){ const start_len = state.display_graph.edges.length;  state.display_graph.edges = state.display_graph.edges.filter(e => !(e.from === pending_edges.edge_from && e.to === pending_edges.edge_to)); if(state.display_graph.edges.length === start_len){ state.display_graph.edges.push({from: pending_edges.edge_from, to: pending_edges.edge_to});}} return state.display_graph;"
                },
                {
                    "id": "trigger_expand_contract",
                    "type": "trigger"
                },
                {
                    "id": "expand_contract",
                    "type": "expand_contract"
                },
                {
                    "id": "expand_contract_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected"
                },
                {
                    "id": "expand_contract_display_graph",
                    "args": [
                        "display_graph"
                    ],
                    "script": "return display_graph"
                },
                {
                    "id": "esc",
                    "args": [
                        "key",
                        "target",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "search"
                    ],
                    "script": "target.blur(); if(search !== false){ target.value = ''; return {search: false} } let value; try { value = JSON.parse(target.value);} catch(e){ value = target.value; } if(selected_edge){ display_graph.edges.find(e => e.to === selected_edge.to && e.from === selected_edge.from)[editing] = value === '' ? undefined : value; } else { const node = display_graph.nodes.find(n => n.id === selected[0]); if(node[editing] !== undefined || value !== ''){ node[editing] = value === '' ? undefined : value;} } return {editing: false, edit_value: null, display_graph};"
                },
                {
                    "id": "esc_editing",
                    "args": [
                        "editing"
                    ],
                    "script": "return editing;"
                },
                {
                    "id": "esc_edit_value",
                    "args": [
                        "edit_value"
                    ],
                    "script": "return edit_value;"
                },
                {
                    "id": "esc_display_graph",
                    "args": [
                        "display_graph"
                    ],
                    "script": "return display_graph;"
                },
                {
                    "id": "esc_search",
                    "args": [
                        "search"
                    ],
                    "script": "return search;"
                },
                {
                    "id": "selected_inputs",
                    "args": [
                        "key",
                        "selected_edge"
                    ],
                    "script": "return selected_edge ? [] : [key]"
                },
                {
                    "id": "selected",
                    "type": "switch"
                },
                {
                    "id": "set_selected",
                    "args": [
                        "selected",
                        "state"
                    ],
                    "script": "state.selected = selected ? [selected] : state.selected; return state"
                },
                {
                    "id": "editing",
                    "type": "switch"
                },
                {
                    "id": "set_editing",
                    "args": [
                        "editing",
                        "state"
                    ],
                    "script": "state.editing = editing ?? state.editing; return state"
                },
                {
                    "id": "display_graph",
                    "type": "switch"
                },
                {
                    "id": "set_display_graph",
                    "args": [
                        "display_graph",
                        "state"
                    ],
                    "script": "state.display_graph = display_graph ?? state.display_graph; return state"
                },
                {
                    "id": "edit_value",
                    "type": "switch"
                },
                {
                    "id": "set_edit_value",
                    "args": [
                        "edit_value",
                        "state"
                    ],
                    "script": "state.edit_value = edit_value !== undefined ? edit_value : state.edit_value; return state"
                },
                {
                    "id": "selected_edge_inputs",
                    "args": [
                        "key",
                        "selected_edge",
                        "editing",
                        "search"
                    ],
                    "script": "return (!!selected_edge && key !== 'e' && editing === false) || (key === 'e' && editing === false && search === false) ? [key] : []"
                },
                {
                    "id": "selected_edge",
                    "type": "switch"
                },
                {
                    "id": "set_selected_edge",
                    "args": [
                        "selected_edge",
                        "state"
                    ],
                    "script": "state.selected_edge = selected_edge === null ? undefined : selected_edge !== undefined ? selected_edge : state.selected_edge; return state"
                },
                {
                    "id": "clipboard",
                    "type": "switch"
                },
                {
                    "id": "set_clipboard",
                    "args": [
                        "clipboard",
                        "state"
                    ],
                    "script": "state.clipboard = clipboard ? [clipboard] : state.clipboard; return state"
                },
                {
                    "id": "search",
                    "type": "switch"
                },
                {
                    "id": "set_search",
                    "args": [
                        "search",
                        "state"
                    ],
                    "script": "state.search = search ?? state.search; return state;"
                },
                {
                    "id": "calculate_levels",
                    "args": [
                        "state",
                        "selected",
                        "display_graph"
                    ],
                    "script": "return lib.scripts.calculateLevels(display_graph ?? state.display_graph, selected ?? state.selected[0])"
                },
                {
                    "id": "levels",
                    "type": "switch"
                },
                {
                    "id": "levels_inputs",
                    "args": [
                        "selected"
                    ],
                    "script": "return ['levels']"
                },
                {
                    "id": "set_levels",
                    "args": [
                        "state",
                        "levels"
                    ],
                    "script": "state.levels = levels ?? state.levels; return state"
                },
                {
                    "id": "new_state_cases",
                    "args": [
                        "key",
                        "pending_edges",
                        "state",
                        "shiftKey",
                        "selected"
                    ],
                    "script": "const graph_sim = (!state.editing && state.search === false && (key === 'enter' || key.toLowerCase() === 'o' || key === 'x' || (key === 't' && shiftKey) || (!!pending_edges.edge_to && !!pending_edges.edge_from))) || key === 'escape' || selected; return [graph_sim && 'graph_sim', 'state']"
                },
                {
                    "id": "new_state",
                    "args": [
                        "graph_sim",
                        "state"
                    ],
                    "script": "return Object.assign({}, state, {nodes: graph_sim?.nodes ?? state.nodes, links: graph_sim?.links ?? state.links, levels: graph_sim?.levels ?? state.levels});"
                },
                {
                    "id": "graph_sim",
                    "args": [
                        "display_graph",
                        "nodes",
                        "selected",
                        "levels"
                    ],
                    "script": "return lib.scripts.graphToSimulationNodes({display_graph, nodes, selected, levels});"
                },
                {
                    "id": "update",
                    "args": [
                        "state",
                        "key",
                        "display_graph",
                        "selected"
                    ],
                    "script": "return state.editing !== false || state.search !== false ? key === 'escape' : !!display_graph || !!selected"
                },
                {
                    "id": "run",
                    "args": [
                        "state",
                        "key",
                        "ctrlKey"
                    ],
                    "script": "try { const result = lib.no.executeGraph({state: new Map([['in', [{...state, key}]]]), graph: {...state.display_graph, nodes: state.display_graph.nodes.concat([]), edges: state.display_graph.edges.concat([])}}); return {result}; } catch(e) { return {error: e instanceof AggregateError ? e.errors.map(e => e.toString()).join(\" \") : e.toString()} }"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "save",
                        "update",
                        "result",
                        "error"
                    ],
                    "script": "return [[{...data, result, error}, [() => save(), {}], update && [data.update_sim_effect, data]]]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "key_event",
                    "as": "args",
                    "type": "concat"
                },
                {
                    "from": "in",
                    "to": "state",
                    "as": "args",
                    "type": "concat"
                },
                {
                    "from": "key_event",
                    "to": "key"
                },
                {
                    "from": "key_event",
                    "to": "key_inputs"
                },
                {
                    "from": "state",
                    "to": "key_inputs",
                    "as": "state"
                },
                {
                    "from": "state",
                    "to": "get_selected"
                },
                {
                    "from": "state",
                    "to": "selected_node"
                },
                {
                    "from": "get_selected",
                    "to": "selected_node",
                    "as": "node_id"
                },
                {
                    "from": "selected_edge",
                    "to": "selected_inputs",
                    "as": "selected_edge"
                },
                {
                    "from": "key_inputs",
                    "to": "selected_inputs",
                    "as": "key"
                },
                {
                    "from": "key_event",
                    "to": "run"
                },
                {
                    "from": "selected_inputs",
                    "to": "selected",
                    "type": "inputs"
                },
                {
                    "from": "key_event",
                    "to": "selected_edge_inputs"
                },
                {
                    "from": "state",
                    "to": "selected_edge_inputs"
                },
                {
                    "from": "state",
                    "to": "calculate_levels",
                    "as": "state"
                },
                {
                    "from": "selected",
                    "to": "calculate_levels",
                    "as": "selected"
                },
                {
                    "from": "display_graph",
                    "to": "calculate_levels",
                    "as": "display_graph"
                },
                {
                    "from": "key_inputs",
                    "to": "edit_value",
                    "type": "inputs"
                },
                {
                    "from": "key_inputs",
                    "to": "editing",
                    "type": "inputs"
                },
                {
                    "from": "key_inputs",
                    "to": "display_graph",
                    "type": "inputs"
                },
                {
                    "from": "key_inputs",
                    "to": "search",
                    "type": "inputs"
                },
                {
                    "from": "key_inputs",
                    "to": "clipboard",
                    "type": "inputs"
                },
                {
                    "from": "state",
                    "to": "filter_editing"
                },
                {
                    "from": "state",
                    "to": "expand_contract"
                },
                {
                    "from": "get_selected",
                    "to": "expand_contract",
                    "as": "node_id"
                },
                {
                    "from": "state",
                    "to": "enter"
                },
                {
                    "from": "key_event",
                    "to": "enter"
                },
                {
                    "from": "state",
                    "to": "save"
                },
                {
                    "from": "filter_editing",
                    "to": "down"
                },
                {
                    "from": "state",
                    "to": "down"
                },
                {
                    "from": "key_event",
                    "to": "down"
                },
                {
                    "from": "state",
                    "to": "up"
                },
                {
                    "from": "key_event",
                    "to": "up"
                },
                {
                    "from": "filter_editing",
                    "to": "up"
                },
                {
                    "from": "state",
                    "to": "left"
                },
                {
                    "from": "key_event",
                    "to": "left"
                },
                {
                    "from": "filter_editing",
                    "to": "left"
                },
                {
                    "from": "state",
                    "to": "left_edge"
                },
                {
                    "from": "key_event",
                    "to": "left_edge"
                },
                {
                    "from": "state",
                    "to": "right_edge"
                },
                {
                    "from": "key_event",
                    "to": "right_edge"
                },
                {
                    "from": "state",
                    "to": "save"
                },
                {
                    "from": "state",
                    "to": "right"
                },
                {
                    "from": "key_event",
                    "to": "right"
                },
                {
                    "from": "filter_editing",
                    "to": "right"
                },
                {
                    "from": "key_event",
                    "to": "v"
                },
                {
                    "from": "state",
                    "to": "v"
                },
                {
                    "from": "key_event",
                    "to": "t"
                },
                {
                    "from": "state",
                    "to": "t"
                },
                {
                    "from": "key_event",
                    "to": "shift_t"
                },
                {
                    "from": "state",
                    "to": "shift_t"
                },
                {
                    "from": "key_event",
                    "to": "s"
                },
                {
                    "from": "state",
                    "to": "s"
                },
                {
                    "from": "state",
                    "to": "p"
                },
                {
                    "from": "key_event",
                    "to": "n"
                },
                {
                    "from": "state",
                    "to": "n"
                },
                {
                    "from": "key_event",
                    "to": "a"
                },
                {
                    "from": "state",
                    "to": "a"
                },
                {
                    "from": "key_event",
                    "to": "o"
                },
                {
                    "from": "state",
                    "to": "o"
                },
                {
                    "from": "key_event",
                    "to": "x"
                },
                {
                    "from": "state",
                    "to": "x"
                },
                {
                    "from": "key_event",
                    "to": "save"
                },
                {
                    "from": "state",
                    "to": "e"
                },
                {
                    "from": "selected_node",
                    "to": "y",
                    "as": "node"
                },
                {
                    "from": "down",
                    "to": "selected",
                    "as": "arrowdown",
                    "type": "concat"
                },
                {
                    "from": "down",
                    "to": "selected",
                    "as": "j",
                    "type": "concat"
                },
                {
                    "from": "up",
                    "to": "selected",
                    "as": "arrowup",
                    "type": "concat"
                },
                {
                    "from": "up",
                    "to": "selected",
                    "as": "k",
                    "type": "concat"
                },
                {
                    "from": "left",
                    "to": "selected",
                    "as": "arrowleft",
                    "type": "concat"
                },
                {
                    "from": "left",
                    "to": "selected",
                    "as": "h",
                    "type": "concat"
                },
                {
                    "from": "right",
                    "to": "selected",
                    "as": "arrowright",
                    "type": "concat"
                },
                {
                    "from": "right",
                    "to": "selected",
                    "as": "l",
                    "type": "concat"
                },
                {
                    "from": "e",
                    "to": "selected_edge",
                    "as": "e",
                    "type": "concat"
                },
                {
                    "from": "selected_edge_inputs",
                    "to": "selected_edge",
                    "type": "inputs"
                },
                {
                    "from": "left_edge",
                    "to": "selected_edge",
                    "as": "arrowleft",
                    "type": "concat"
                },
                {
                    "from": "right_edge",
                    "to": "selected_edge",
                    "as": "arrowright",
                    "type": "concat"
                },
                {
                    "from": "selected_edge",
                    "to": "set_selected_edge",
                    "as": "selected_edge"
                },
                {
                    "from": "v",
                    "to": "editing",
                    "as": "v"
                },
                {
                    "from": "t",
                    "to": "editing",
                    "as": "t"
                },
                {
                    "from": "s",
                    "to": "editing",
                    "as": "s"
                },
                {
                    "from": "n",
                    "to": "editing",
                    "as": "n"
                },
                {
                    "from": "a",
                    "to": "editing",
                    "as": "a"
                },
                {
                    "from": "state",
                    "to": "pending_edges",
                    "as": "state"
                },
                {
                    "from": "key_event",
                    "to": "pending_edges"
                },
                {
                    "from": "pending_edges",
                    "to": "make_edge",
                    "as": "pending_edges"
                },
                {
                    "from": "pending_edges",
                    "to": "set_pending_edges",
                    "as": "pending_edges"
                },
                {
                    "from": "pending_edges",
                    "to": "new_state_cases",
                    "as": "pending_edges"
                },
                {
                    "from": "selected",
                    "to": "new_state_cases",
                    "as": "selected",
                    "type": "concat"
                },
                {
                    "from": "state",
                    "to": "new_state_cases",
                    "as": "state"
                },
                {
                    "from": "state",
                    "to": "make_edge",
                    "as": "state"
                },
                {
                    "from": "shift_t",
                    "to": "display_graph",
                    "as": "shift_t"
                },
                {
                    "from": "p",
                    "to": "p_display_graph"
                },
                {
                    "from": "p_display_graph",
                    "to": "display_graph",
                    "as": "p"
                },
                {
                    "from": "p",
                    "to": "p_selected"
                },
                {
                    "from": "p_selected",
                    "to": "selected",
                    "as": "p"
                },
                {
                    "from": "state",
                    "to": "esc"
                },
                {
                    "from": "key_event",
                    "to": "esc"
                },
                {
                    "from": "esc",
                    "to": "esc_editing"
                },
                {
                    "from": "esc",
                    "to": "esc_edit_value"
                },
                {
                    "from": "esc",
                    "to": "esc_display_graph"
                },
                {
                    "from": "esc",
                    "to": "esc_search"
                },
                {
                    "from": "esc_editing",
                    "to": "editing",
                    "as": "escape"
                },
                {
                    "from": "esc_edit_value",
                    "to": "edit_value",
                    "as": "escape"
                },
                {
                    "from": "esc_display_graph",
                    "to": "display_graph",
                    "as": "escape"
                },
                {
                    "from": "esc_search",
                    "to": "search",
                    "as": "escape"
                },
                {
                    "from": "expand_contract",
                    "to": "expand_contract_display_graph"
                },
                {
                    "from": "expand_contract_display_graph",
                    "to": "display_graph",
                    "as": "enter"
                },
                {
                    "from": "expand_contract",
                    "to": "expand_contract_selected"
                },
                {
                    "from": "expand_contract_selected",
                    "to": "selected",
                    "as": "enter"
                },
                {
                    "from": "f",
                    "to": "search",
                    "as": "f"
                },
                {
                    "from": "o",
                    "to": "o_display_graph"
                },
                {
                    "from": "o",
                    "to": "o_selected"
                },
                {
                    "from": "o",
                    "to": "o_selected_edge"
                },
                {
                    "from": "o_display_graph",
                    "to": "display_graph",
                    "as": "o"
                },
                {
                    "from": "o_display_graph",
                    "to": "display_graph",
                    "as": "shift_o"
                },
                {
                    "from": "o_selected",
                    "to": "selected",
                    "as": "o"
                },
                {
                    "from": "o_selected",
                    "to": "selected",
                    "as": "shift_o"
                },
                {
                    "from": "o_selected_edge",
                    "to": "selected_edge",
                    "as": "o"
                },
                {
                    "from": "x",
                    "to": "x_display_graph"
                },
                {
                    "from": "x",
                    "to": "x_selected"
                },
                {
                    "from": "x_display_graph",
                    "to": "display_graph",
                    "as": "x"
                },
                {
                    "from": "x_selected",
                    "to": "selected",
                    "as": "x"
                },
                {
                    "from": "y",
                    "to": "clipboard",
                    "as": "y"
                },
                {
                    "from": "make_edge",
                    "to": "display_graph",
                    "as": "c"
                },
                {
                    "from": "make_edge",
                    "to": "display_graph",
                    "as": "shift_c"
                },
                {
                    "from": "calculate_levels",
                    "to": "levels",
                    "as": "levels"
                },
                {
                    "from": "levels",
                    "to": "set_levels",
                    "as": "levels"
                },
                {
                    "from": "selected",
                    "to": "levels_inputs",
                    "as": "selected",
                    "type": "concat"
                },
                {
                    "from": "levels_inputs",
                    "to": "levels",
                    "type": "inputs"
                },
                {
                    "from": "set_display_graph",
                    "to": "graph_sim"
                },
                {
                    "from": "state",
                    "to": "set_selected",
                    "as": "state"
                },
                {
                    "from": "selected",
                    "to": "set_selected",
                    "as": "selected"
                },
                {
                    "from": "set_selected",
                    "to": "set_clipboard",
                    "as": "state"
                },
                {
                    "from": "state",
                    "to": "set_clipboard",
                    "as": "state"
                },
                {
                    "from": "clipboard",
                    "to": "set_clipboard",
                    "as": "clipboard"
                },
                {
                    "from": "set_clipboard",
                    "to": "set_selected_edge",
                    "as": "state"
                },
                {
                    "from": "set_selected_edge",
                    "to": "set_search",
                    "as": "state"
                },
                {
                    "from": "search",
                    "to": "set_search",
                    "as": "search"
                },
                {
                    "from": "set_search",
                    "to": "set_edit_value",
                    "as": "state"
                },
                {
                    "from": "edit_value",
                    "to": "set_edit_value",
                    "as": "edit_value"
                },
                {
                    "from": "set_edit_value",
                    "to": "set_editing",
                    "as": "state"
                },
                {
                    "from": "editing",
                    "to": "set_editing",
                    "as": "editing"
                },
                {
                    "from": "set_editing",
                    "to": "set_levels",
                    "as": "state"
                },
                {
                    "from": "set_levels",
                    "to": "set_pending_edges",
                    "as": "state"
                },
                {
                    "from": "set_pending_edges",
                    "to": "set_display_graph",
                    "as": "state"
                },
                {
                    "from": "display_graph",
                    "to": "set_display_graph",
                    "as": "display_graph"
                },
                {
                    "from": "set_display_graph",
                    "to": "new_state",
                    "as": "state"
                },
                {
                    "from": "key_event",
                    "to": "new_state_cases"
                },
                {
                    "from": "new_state_cases",
                    "to": "new_state",
                    "type": "inputs"
                },
                {
                    "from": "graph_sim",
                    "to": "new_state",
                    "as": "graph_sim"
                },
                {
                    "from": "state",
                    "to": "graph_sim",
                    "order": 1
                },
                {
                    "from": "key_event",
                    "to": "update"
                },
                {
                    "from": "display_graph",
                    "to": "update",
                    "as": "display_graph"
                },
                {
                    "from": "selected",
                    "to": "update",
                    "as": "selected",
                    "type": "concat"
                },
                {
                    "from": "state",
                    "to": "update",
                    "as": "state"
                },
                {
                    "from": "key_event",
                    "to": "run"
                },
                {
                    "from": "new_state",
                    "to": "run",
                    "as": "state"
                },
                {
                    "from": "run",
                    "to": "out"
                },
                {
                    "from": "update",
                    "to": "out",
                    "as": "update"
                },
                {
                    "from": "new_state",
                    "to": "out",
                    "as": "data"
                },
                {
                    "from": "save",
                    "to": "out",
                    "as": "save"
                }
            ]
        },
        {
            "id": "update_sim",
            "args": [
                "display_graph",
                "nodes",
                "links",
                "simulation",
                "display_graph_out",
                "selected",
                "levels"
            ],
            "script": "return lib.scripts.updateSimulationNodes({display_graph, nodes, links, simulation, display_graph_out, selected, levels})"
        },
        {
            "id": "update_sim_in"
        },
        {
            "id": "update_sim_fn",
            "type": "execute_graph"
        },
        {
            "id": "update_sim_effect",
            "type": "wrap_effect_fn"
        },
        {
            "id": "onclick_graph_fn_in",
            "value": null
        },
        {
            "id": "onclick_graph_fn_body",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "state",
                    "args": [
                        "args"
                    ],
                    "script": "return args[0]"
                },
                {
                    "id": "mouse_event",
                    "args": [
                        "args"
                    ],
                    "script": "return args[1]"
                },
                {
                    "id": "set_down_xy",
                    "args": [
                        "ev"
                    ],
                    "script": "return ev.ty === 'down' ? {x: ev.x, y: ev.y} : {}"
                },
                {
                    "id": "create_node",
                    "args": [
                        "ev",
                        "state"
                    ],
                    "script": "return ev.ty === 'move' && state.downx !== undefined && state.downy !== undefined && (Math.abs(ev.x - state.downx) > 32 || Math.abs(ev.y - state.downy) > 32)  ? {x: ev.x, y: ev.y, args: [], id: Date.now().toString() } : {}"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "down",
                        "new_node"
                    ],
                    "script": "return {...data, downx: down?.x ?? data.downx, downy: down?.y ?? data.downy}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "mouse_event",
                    "as": "args",
                    "type": "concat"
                },
                {
                    "from": "in",
                    "to": "state",
                    "as": "args",
                    "type": "concat"
                },
                {
                    "from": "mouse_event",
                    "to": "set_down_xy",
                    "as": "ev"
                },
                {
                    "from": "mouse_event",
                    "to": "create_node",
                    "as": "ev"
                },
                {
                    "from": "state",
                    "to": "create_node",
                    "as": "state"
                },
                {
                    "from": "set_down_xy",
                    "to": "out",
                    "as": "down"
                },
                {
                    "from": "create_node",
                    "to": "out",
                    "as": "new_node"
                },
                {
                    "from": "state",
                    "to": "out",
                    "as": "data"
                }
            ]
        },
        {
            "id": "onclick_graph_fn",
            "type": "execute_graph"
        },
        {
            "id": "onclick_node_fn_in",
            "value": null
        },
        {
            "id": "onclick_node_fn_body",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "get_first",
                    "args": [
                        "args"
                    ],
                    "script": "return args[0]"
                },
                {
                    "id": "merge_args",
                    "args": [
                        "args"
                    ],
                    "script": "return Object.assign({}, args[0], {x: args[1].x, y: args[1].y, node_id: args[1].node_id})"
                },
                {
                    "id": "merge_args_no_display_graph",
                    "type": "delete"
                },
                {
                    "id": "select",
                    "type": "append"
                },
                {
                    "id": "display_graph",
                    "value": "display_graph"
                },
                {
                    "id": "false",
                    "value": false
                },
                {
                    "id": "empty_array",
                    "value": []
                },
                {
                    "id": "select_node",
                    "args": [
                        "clicked",
                        "node_id"
                    ],
                    "script": "return clicked.length > 0 ? [] : node_id"
                },
                {
                    "id": "selected",
                    "value": "selected"
                },
                {
                    "id": "get_selected",
                    "type": "get"
                },
                {
                    "id": "node_id",
                    "value": "node_id"
                },
                {
                    "id": "get_node_id",
                    "type": "get"
                },
                {
                    "id": "is_not_clicked",
                    "args": [
                        "node_id",
                        "selected_id"
                    ],
                    "script": "return selected_id !== node_id"
                },
                {
                    "id": "is_clicked",
                    "args": [
                        "node_id",
                        "selected_id"
                    ],
                    "script": "return selected_id === node_id"
                },
                {
                    "id": "not_clicked",
                    "type": "filter"
                },
                {
                    "id": "clicked",
                    "type": "filter"
                },
                {
                    "id": "select_clicked",
                    "type": "default"
                },
                {
                    "id": "expand_contract",
                    "type": "expand_contract"
                },
                {
                    "id": "graph_to_sim",
                    "args": [
                        "display_graph",
                        "nodes",
                        "selected"
                    ],
                    "script": "return lib.scripts.graphToSimulationNodes({display_graph, nodes, selected})"
                },
                {
                    "id": "unmodified_graph"
                },
                {
                    "id": "new_state"
                },
                {
                    "id": "final_graph",
                    "type": "default"
                },
                {
                    "id": "out",
                    "args": [
                        "data"
                    ],
                    "script": "return [[data, ...([[data.update_sim_effect, data]])]]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "merge_args",
                    "as": "args",
                    "type": "concat"
                },
                {
                    "from": "merge_args",
                    "to": "expand"
                },
                {
                    "from": "merge_args",
                    "to": "contract"
                },
                {
                    "from": "merge_args",
                    "to": "get_selected",
                    "as": "target"
                },
                {
                    "from": "selected",
                    "to": "get_selected",
                    "as": "path"
                },
                {
                    "from": "get_selected",
                    "to": "not_clicked"
                },
                {
                    "from": "get_selected",
                    "to": "clicked"
                },
                {
                    "from": "merge_args",
                    "to": "get_node_id",
                    "as": "target"
                },
                {
                    "from": "get_node_id",
                    "to": "is_clicked",
                    "as": "node_id"
                },
                {
                    "from": "get_selected",
                    "to": "is_clicked",
                    "as": "selected_id"
                },
                {
                    "from": "get_node_id",
                    "to": "is_not_clicked",
                    "as": "node_id"
                },
                {
                    "from": "get_selected",
                    "to": "is_not_clicked",
                    "as": "selected_id"
                },
                {
                    "from": "node_id",
                    "to": "get_node_id",
                    "as": "path"
                },
                {
                    "from": "get_node_id",
                    "to": "not_clicked",
                    "as": "node_id"
                },
                {
                    "from": "is_not_clicked",
                    "to": "not_clicked",
                    "as": "keep"
                },
                {
                    "from": "is_clicked",
                    "to": "clicked",
                    "as": "keep"
                },
                {
                    "from": "clicked",
                    "to": "expand_contract",
                    "as": "node_id"
                },
                {
                    "from": "clicked",
                    "to": "expand_contract",
                    "as": "data"
                },
                {
                    "from": "expand_contract",
                    "to": "graph_to_sim",
                    "as": "display_graph"
                },
                {
                    "from": "in",
                    "to": "get_first",
                    "as": "args",
                    "type": "concat"
                },
                {
                    "from": "merge_args",
                    "to": "graph_to_sim"
                },
                {
                    "from": "get_first",
                    "to": "new_state",
                    "as": "input_state"
                },
                {
                    "from": "graph_to_sim",
                    "to": "new_state",
                    "as": "graph_sim"
                },
                {
                    "from": "levels",
                    "to": "graph_sim",
                    "as": "levels"
                },
                {
                    "from": "get_first",
                    "to": "unmodified_graph"
                },
                {
                    "from": "false",
                    "to": "unmodified_graph",
                    "as": "update"
                },
                {
                    "from": "unmodified_graph",
                    "to": "final_graph",
                    "as": "default_value"
                },
                {
                    "from": "new_state",
                    "to": "final_graph",
                    "as": "data",
                    "type": "concat"
                },
                {
                    "from": "empty_array",
                    "to": "select",
                    "as": "array",
                    "type": "concat"
                },
                {
                    "from": "clicked",
                    "to": "select_node",
                    "as": "clicked",
                    "type": "concat"
                },
                {
                    "from": "get_node_id",
                    "to": "select_node",
                    "as": "node_id"
                },
                {
                    "from": "select_node",
                    "to": "select",
                    "as": "item"
                },
                {
                    "from": "select",
                    "to": "new_state",
                    "as": "selected",
                    "type": "concat"
                },
                {
                    "from": "final_graph",
                    "to": "out",
                    "as": "data"
                }
            ]
        },
        {
            "id": "onclick_node_fn",
            "type": "execute_graph"
        },
        {
            "id": "editor_dom_type",
            "value": "div"
        },
        {
            "id": "editor_props",
            "value": {}
        },
        {
            "id": "calculate_levels",
            "args": [
                "display_graph",
                "selected"
            ],
            "script": "return lib.scripts.calculateLevels(display_graph, selected)"
        },
        {
            "id": "editor",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "wrapper",
                    "type": "h"
                },
                {
                    "id": "wrapper_dom_type",
                    "value": "div"
                },
                {
                    "id": "wrapper_props",
                    "value": {}
                },
                {
                    "id": "wrapper_children",
                    "args": [
                        "node_editor",
                        "edit_text",
                        "search_input",
                        "result"
                    ],
                    "script": "return [[node_editor.el, edit_text.el, search_input.el, result.el]]"
                },
                {
                    "id": "edit_text",
                    "nodes": [
                        {
                            "id": "in"
                        },
                        {
                            "id": "edit_text",
                            "type": "h"
                        },
                        {
                            "id": "edit_text_dom_type",
                            "value": "div"
                        },
                        {
                            "id": "edit_text_input",
                            "type": "h"
                        },
                        {
                            "id": "edit_text_base_props",
                            "value": {
                                "id": "edit_value"
                            }
                        },
                        {
                            "id": "edit_text_props"
                        },
                        {
                            "id": "edit_text_children",
                            "args": [
                                "label",
                                "input"
                            ],
                            "script": "return [[label.el, input.el]]"
                        },
                        {
                            "id": "edit_text_input_dom_type",
                            "value": "textarea"
                        },
                        {
                            "id": "edit_text_input_props",
                            "args": [
                                "selected",
                                "selected_edge",
                                "display_graph",
                                "editing",
                                "edit_value"
                            ],
                            "script": "const start_value = edit_value ?? (!editing ? '' : (selected_edge ? display_graph.edges.find(e => e.from === selected_edge.from && e.to === selected_edge.to) : display_graph.nodes.find(n => n.id === selected[0]))[editing]); return {class: 'input', value: typeof(start_value) === 'string' ? start_value : JSON.stringify(start_value), oninput: (s, payload) => ({...s, edit_value: payload.target.value})}"
                        },
                        {
                            "id": "edit_text_label",
                            "type": "h"
                        },
                        {
                            "id": "edit_text_label_dom_type",
                            "value": "p"
                        },
                        {
                            "id": "edit_text_label_text",
                            "type": "h_text"
                        },
                        {
                            "id": "editing",
                            "args": [
                                "editing"
                            ],
                            "script": "return editing || 'none'"
                        },
                        {
                            "id": "out"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "edit_text_input_props"
                        },
                        {
                            "from": "edit_text",
                            "to": "out"
                        },
                        {
                            "from": "edit_text_dom_type",
                            "to": "edit_text",
                            "as": "dom_type"
                        },
                        {
                            "from": "edit_text_base_props",
                            "to": "edit_text_props"
                        },
                        {
                            "from": "edit_text_props",
                            "to": "edit_text",
                            "as": "props"
                        },
                        {
                            "from": "edit_text_children",
                            "to": "edit_text",
                            "as": "children"
                        },
                        {
                            "from": "edit_text_input",
                            "to": "edit_text_children",
                            "as": "input"
                        },
                        {
                            "from": "edit_text_input_props",
                            "to": "edit_text_input",
                            "as": "props"
                        },
                        {
                            "from": "edit_text_input_dom_type",
                            "to": "edit_text_input",
                            "as": "dom_type"
                        },
                        {
                            "from": "edit_text_label",
                            "to": "edit_text_children",
                            "as": "label"
                        },
                        {
                            "from": "edit_text_label_dom_type",
                            "to": "edit_text_label",
                            "as": "dom_type"
                        },
                        {
                            "from": "edit_text_label_text",
                            "to": "edit_text_label",
                            "as": "children"
                        },
                        {
                            "from": "in",
                            "to": "editing"
                        },
                        {
                            "from": "editing",
                            "to": "edit_text_label_text",
                            "as": "text"
                        },
                        {
                            "from": "editing",
                            "to": "edit_text_props",
                            "as": "class"
                        }
                    ]
                },
                {
                    "id": "result",
                    "nodes": [
                        {
                            "id": "in"
                        },
                        {
                            "id": "get_node",
                            "args": [
                                "display_graph",
                                "selected"
                            ],
                            "script": "return display_graph.nodes.find(n => n.id === selected[0])"
                        },
                        {
                            "id": "get_type",
                            "args": [
                                "type",
                                "script",
                                "value",
                                "nodes"
                            ],
                            "script": "return typeof value !== 'undefined' && typeof value !== 'object' ? typeof value : type ? type : nodes ? 'graph' : script ? 'script' : 'passthrough'"
                        },
                        {
                            "id": "get_node_display",
                            "args": [
                                "display_graph",
                                "type"
                            ],
                            "script": "return display_graph.nodes.find(n => n.id === type + '_display') ?? display_graph.nodes.find(n => n.id === 'default_node_display')"
                        },
                        {
                            "id": "get_error_display",
                            "args": [
                                "display_graph",
                                "type"
                            ],
                            "script": "return display_graph.nodes.find(n => n.id === 'default_error_display')"
                        },
                        {
                            "id": "run_node_display",
                            "args": [
                                "node",
                                "display",
                                "error",
                                "result",
                                "display_graph"
                            ],
                            "script": "try { const res = lib.no.executeGraph({state: new Map([[display.id + '/' +  display.in, [{node, result: result?.get(node.id)}]]]), graph: {...display_graph, out: display.id}}); return res.get(display.id)[0]; } catch(e){ return lib.no.executeGraph({state: new Map([[error.id + '/' +  error.in, [{node, error: e.toString()}]]]), graph: {...display_graph, out: error.id}}).get(error.id)[0];}"
                        },
                        {
                            "id": "container_dom_type",
                            "value": "div"
                        },
                        {
                            "id": "container_props",
                            "args": [
                                "error"
                            ],
                            "script": "return {class: error ? 'error' : '', id: 'result'}"
                        },
                        {
                            "id": "container",
                            "type": "h"
                        },
                        {
                            "id": "text_value",
                            "args": [
                                "result",
                                "error"
                            ],
                            "script": "return error ?? result ?? ''"
                        },
                        {
                            "id": "out"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "container_props"
                        },
                        {
                            "from": "in",
                            "to": "get_node"
                        },
                        {
                            "from": "in",
                            "to": "get_node_display"
                        },
                        {
                            "from": "in",
                            "to": "get_error_display"
                        },
                        {
                            "from": "in",
                            "to": "run_node_display"
                        },
                        {
                            "from": "get_node",
                            "to": "get_type"
                        },
                        {
                            "from": "get_type",
                            "to": "get_node_display",
                            "as": "type"
                        },
                        {
                            "from": "get_type",
                            "to": "get_error_display",
                            "as": "type"
                        },
                        {
                            "from": "get_node",
                            "to": "run_node_display",
                            "as": "node"
                        },
                        {
                            "from": "get_node_display",
                            "to": "run_node_display",
                            "as": "display"
                        },
                        {
                            "from": "get_error_display",
                            "to": "run_node_display",
                            "as": "error"
                        },
                        {
                            "from": "run_node_display",
                            "to": "container",
                            "as": "children"
                        },
                        {
                            "from": "container_props",
                            "to": "container",
                            "as": "props"
                        },
                        {
                            "from": "container_dom_type",
                            "to": "container",
                            "as": "dom_type"
                        },
                        {
                            "from": "container",
                            "to": "out"
                        }
                    ]
                },
                {
                    "id": "search_input",
                    "nodes": [
                        {
                            "id": "in"
                        },
                        {
                            "id": "search_input_dom_type",
                            "value": "input"
                        },
                        {
                            "id": "search_input_props",
                            "args": [
                                "search",
                                "display_graph"
                            ],
                            "script": "return {id: `search-input`, class:`${search === false ? 'hidden' : ''}`, type: 'text', oninput: (s, payload) => { const search_results = new lib.Fuse(display_graph.nodes, {keys: ['name', 'id']}).search(payload.target.value); return {...s, search: payload.target.value, selected: search_results.length > 0 ? search_results.map(n => n.item.id) : s.selected}}}"
                        },
                        {
                            "id": "out",
                            "type": "h"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "search_input_props"
                        },
                        {
                            "from": "search_input_dom_type",
                            "to": "out",
                            "as": "dom_type"
                        },
                        {
                            "from": "search_input_props",
                            "to": "out",
                            "as": "props"
                        }
                    ]
                },
                {
                    "id": "node_editor",
                    "nodes": [
                        {
                            "id": "in",
                            "value": null
                        },
                        {
                            "id": "log",
                            "type": "log"
                        },
                        {
                            "id": "out",
                            "type": "h"
                        },
                        {
                            "id": "get_nodes",
                            "args": [
                                "nodes"
                            ],
                            "script": "return nodes"
                        },
                        {
                            "id": "get_links",
                            "args": [
                                "links"
                            ],
                            "script": "return links"
                        },
                        {
                            "id": "get_selected",
                            "args": [
                                "selected"
                            ],
                            "script": "return selected"
                        },
                        {
                            "id": "get_selected_edge",
                            "args": [
                                "selected_edge"
                            ],
                            "script": "return selected_edge"
                        },
                        {
                            "id": "get_onclick_node_fn",
                            "args": [
                                "onclick_node_fn"
                            ],
                            "script": "return onclick_node_fn"
                        },
                        {
                            "id": "node_editor_props",
                            "args": [
                                "onclick_graph_fn"
                            ],
                            "script": "return {width: window.innerWidth, height: window.innerHeight, onmousedown: (_, payload) => [onclick_graph_fn, {x: payload.x, y: payload.y, ty: 'down'}], onmouseup: (_, payload) => [onclick_graph_fn, {x: payload.x, y: payload.y, ty: 'up'}], onmousemove: (_, payload) => [onclick_graph_fn, {x: payload.x, y: payload.y, ty: 'move'}]}"
                        },
                        {
                            "id": "node_editor_dom_type",
                            "value": "svg"
                        },
                        {
                            "id": "node_editor_children_inputs",
                            "args": [
                                "nodes",
                                "links"
                            ],
                            "script": "return ['defs', links.length > 0 && 'links', nodes.length > 0 && 'nodes'].filter(i => i)"
                        },
                        {
                            "id": "node_editor_children",
                            "args": [
                                "nodes",
                                "links",
                                "defs"
                            ],
                            "script": "return [[defs.el].concat(nodes?.map(c => c.el) ?? []).concat(links?.map(l => l.el) ?? [])]"
                        },
                        {
                            "id": "node_layout",
                            "nodes": [
                                {
                                    "id": "in",
                                    "value": null
                                },
                                {
                                    "id": "get_node",
                                    "args": [
                                        "node"
                                    ],
                                    "script": "return node"
                                },
                                {
                                    "id": "is_selected",
                                    "args": [
                                        "selected",
                                        "node_id"
                                    ],
                                    "script": "return selected.includes(node_id)"
                                },
                                {
                                    "id": "out"
                                },
                                {
                                    "id": "parent",
                                    "type": "h"
                                },
                                {
                                    "id": "parent_dom_type",
                                    "value": "svg"
                                },
                                {
                                    "id": "parent_attrs",
                                    "args": [
                                        "node_id",
                                        "x",
                                        "y",
                                        "onclick_node_fn",
                                        "selected",
                                        "selected_distance"
                                    ],
                                    "script": "return ({ key: node_id, x: x - 20, y: y - 20, id: node_id, onclick: (_, payload) => [onclick_node_fn, {x: payload.x, y: payload.y, node_id, selected: [], ty: 'down'}], width: 256, height: 64, id: node_id, class: `node ${selected[0] === node_id ? 'selected': ''}`, opacity: selected_distance !== undefined ? Math.max(0.05, 1 - selected_distance * selected_distance / 2) : 0.1})"
                                },
                                {
                                    "id": "children",
                                    "nodes": [
                                        {
                                            "id": "in",
                                            "value": null
                                        },
                                        {
                                            "id": "node_shape_attrs",
                                            "args": [
                                                "value",
                                                "script",
                                                "type",
                                                "selected_distance",
                                                "nodes"
                                            ],
                                            "script": "const r = 24 / ((Math.min(10, selected_distance ?? 10) * 0.5) + 1); return value !== undefined ? {class: 'shape value', points: `4,${4 + r} ${4 + r},${4 + r} ${4 + r * 0.5},4`} : script ? {class: 'shape script', width: r, height: r, x: 10, y: 10} : type ? {class: 'shape type', width: r, height: r, x: 10, y: 10} : nodes ? {class: 'shape graph', r: r * 0.5, cx: r * 0.5 + 4, cy: r * 0.5 + 4}  : {class: 'shape none', r: r * 0.5 , cx: r * 0.5 + 4, cy: r * 0.5 + 4}"
                                        },
                                        {
                                            "id": "default_color",
                                            "value": "blue"
                                        },
                                        {
                                            "id": "empty_array",
                                            "value": [
                                                []
                                            ]
                                        },
                                        {
                                            "id": "node_shape_dom_type",
                                            "args": [
                                                "value",
                                                "script",
                                                "type",
                                                "nodes"
                                            ],
                                            "script": "return value !== undefined ? 'polygon' : script ? 'rect' : type ? 'rect' : nodes ? 'circle' : 'circle'"
                                        },
                                        {
                                            "id": "node_shape",
                                            "type": "h"
                                        },
                                        {
                                            "id": "text",
                                            "nodes": [
                                                {
                                                    "id": "in",
                                                    "value": null
                                                },
                                                {
                                                    "id": "out"
                                                },
                                                {
                                                    "id": "node_id",
                                                    "value": "node_id"
                                                },
                                                {
                                                    "id": "node_type",
                                                    "value": "type"
                                                },
                                                {
                                                    "id": "node_name",
                                                    "value": "name"
                                                },
                                                {
                                                    "id": "node_value",
                                                    "value": "value"
                                                },
                                                {
                                                    "id": "node_selected_distance",
                                                    "value": "selected_distance"
                                                },
                                                {
                                                    "id": "get_id",
                                                    "type": "get"
                                                },
                                                {
                                                    "id": "get_name",
                                                    "type": "get"
                                                },
                                                {
                                                    "id": "get_value",
                                                    "args": [
                                                        "target",
                                                        "def"
                                                    ],
                                                    "script": "return target.value !== undefined ? (typeof target.value === 'object' ? JSON.stringify(target.value) : target.value.toString()) : def"
                                                },
                                                {
                                                    "id": "get_type",
                                                    "args": [
                                                        "target"
                                                    ],
                                                    "script": "return `type: ` + (target.value !== undefined ? 'value' : target.type ? target.type : target.script ? 'script' : target.nodes ? `graph (${target.nodes.length}, ${target.edges.length})` : 'passthrough')"
                                                },
                                                {
                                                    "id": "get_selected_distance",
                                                    "type": "get"
                                                },
                                                {
                                                    "id": "shorten",
                                                    "args": [
                                                        "text"
                                                    ],
                                                    "script": "return text.substring(text.lastIndexOf('/') + 1)"
                                                },
                                                {
                                                    "id": "node_primary_text_attrs",
                                                    "value": {
                                                        "class": "primary",
                                                        "dy": ".6em",
                                                        "x": "48"
                                                    }
                                                },
                                                {
                                                    "id": "tspan_dom_type",
                                                    "value": "tspan"
                                                },
                                                {
                                                    "id": "node_primary_text_text",
                                                    "type": "h_text"
                                                },
                                                {
                                                    "id": "node_primary_text",
                                                    "type": "h"
                                                },
                                                {
                                                    "id": "node_secondary_text_attrs",
                                                    "value": {
                                                        "class": "secondary",
                                                        "dy": "1.2em",
                                                        "x": "48"
                                                    }
                                                },
                                                {
                                                    "id": "node_secondary_text_text",
                                                    "type": "h_text"
                                                },
                                                {
                                                    "id": "node_secondary_text",
                                                    "type": "h"
                                                },
                                                {
                                                    "id": "node_text_dom_type",
                                                    "value": "text"
                                                },
                                                {
                                                    "id": "node_text",
                                                    "type": "h"
                                                },
                                                {
                                                    "id": "script",
                                                    "value": "script"
                                                },
                                                {
                                                    "id": "node_text_props",
                                                    "args": [
                                                        "selected_distance"
                                                    ],
                                                    "script": "return { x: 48, y: 12 }"
                                                },
                                                {
                                                    "id": "node_text_children",
                                                    "args": [
                                                        "primary",
                                                        "secondary"
                                                    ],
                                                    "script": "return [[primary.el, secondary.el]]"
                                                },
                                                {
                                                    "id": "text",
                                                    "value": "text"
                                                }
                                            ],
                                            "edges": [
                                                {
                                                    "from": "in",
                                                    "to": "get_id",
                                                    "as": "target"
                                                },
                                                {
                                                    "from": "in",
                                                    "to": "get_type",
                                                    "as": "target"
                                                },
                                                {
                                                    "from": "in",
                                                    "to": "get_name",
                                                    "as": "target"
                                                },
                                                {
                                                    "from": "in",
                                                    "to": "get_value",
                                                    "as": "target"
                                                },
                                                {
                                                    "from": "in",
                                                    "to": "get_selected_distance",
                                                    "as": "target"
                                                },
                                                {
                                                    "from": "get_id",
                                                    "to": "get_value",
                                                    "as": "def"
                                                },
                                                {
                                                    "from": "get_value",
                                                    "to": "get_name",
                                                    "as": "default"
                                                },
                                                {
                                                    "from": "node_id",
                                                    "to": "get_id",
                                                    "as": "path"
                                                },
                                                {
                                                    "from": "node_type",
                                                    "to": "get_type",
                                                    "as": "path"
                                                },
                                                {
                                                    "from": "node_name",
                                                    "to": "get_name",
                                                    "as": "path"
                                                },
                                                {
                                                    "from": "node_selected_distance",
                                                    "to": "get_selected_distance",
                                                    "as": "path"
                                                },
                                                {
                                                    "from": "script",
                                                    "to": "get_type",
                                                    "as": "default"
                                                },
                                                {
                                                    "from": "get_name",
                                                    "to": "node_primary_text_text",
                                                    "as": "text"
                                                },
                                                {
                                                    "from": "get_type",
                                                    "to": "node_secondary_text_text",
                                                    "as": "text"
                                                },
                                                {
                                                    "from": "get_selected_distance",
                                                    "to": "node_text_props",
                                                    "as": "selected_distance"
                                                },
                                                {
                                                    "from": "node_text_props",
                                                    "to": "node_text",
                                                    "as": "props"
                                                },
                                                {
                                                    "from": "node_primary_text_text",
                                                    "to": "node_primary_text",
                                                    "as": "children"
                                                },
                                                {
                                                    "from": "node_primary_text_attrs",
                                                    "to": "node_primary_text",
                                                    "as": "props"
                                                },
                                                {
                                                    "from": "node_primary_text",
                                                    "to": "node_text_children",
                                                    "as": "primary"
                                                },
                                                {
                                                    "from": "node_secondary_text_text",
                                                    "to": "node_secondary_text",
                                                    "as": "children"
                                                },
                                                {
                                                    "from": "node_secondary_text_attrs",
                                                    "to": "node_secondary_text",
                                                    "as": "props"
                                                },
                                                {
                                                    "from": "tspan_dom_type",
                                                    "to": "node_primary_text",
                                                    "as": "dom_type"
                                                },
                                                {
                                                    "from": "node_secondary_text",
                                                    "to": "node_text_children",
                                                    "as": "secondary"
                                                },
                                                {
                                                    "from": "tspan_dom_type",
                                                    "to": "node_secondary_text",
                                                    "as": "dom_type"
                                                },
                                                {
                                                    "from": "node_text_children",
                                                    "to": "node_text",
                                                    "as": "children"
                                                },
                                                {
                                                    "from": "node_text_dom_type",
                                                    "to": "node_text",
                                                    "as": "dom_type"
                                                },
                                                {
                                                    "from": "node_text",
                                                    "to": "out"
                                                }
                                            ]
                                        },
                                        {
                                            "id": "order",
                                            "args": [
                                                "shape",
                                                "text"
                                            ],
                                            "script": "return [[shape.el, text.el]]"
                                        },
                                        {
                                            "id": "out"
                                        }
                                    ],
                                    "edges": [
                                        {
                                            "from": "in",
                                            "to": "node_shape_attrs"
                                        },
                                        {
                                            "from": "in",
                                            "to": "node_shape_dom_type"
                                        },
                                        {
                                            "from": "default_color",
                                            "to": "node_shape_attrs",
                                            "as": "color"
                                        },
                                        {
                                            "from": "empty_array",
                                            "to": "node_shape",
                                            "as": "children"
                                        },
                                        {
                                            "from": "node_shape_dom_type",
                                            "to": "node_shape",
                                            "as": "dom_type"
                                        },
                                        {
                                            "from": "in",
                                            "to": "text"
                                        },
                                        {
                                            "from": "node_shape_attrs",
                                            "to": "node_shape",
                                            "as": "props"
                                        },
                                        {
                                            "from": "node_shape",
                                            "to": "order",
                                            "as": "shape"
                                        },
                                        {
                                            "from": "text",
                                            "to": "order",
                                            "as": "text"
                                        },
                                        {
                                            "from": "order",
                                            "to": "out",
                                            "as": "children"
                                        }
                                    ]
                                }
                            ],
                            "edges": [
                                {
                                    "from": "in",
                                    "to": "get_node"
                                },
                                {
                                    "from": "in",
                                    "to": "is_selected"
                                },
                                {
                                    "from": "in",
                                    "to": "parent_attrs"
                                },
                                {
                                    "from": "in",
                                    "to": "get_node_display"
                                },
                                {
                                    "from": "get_node",
                                    "to": "get_type"
                                },
                                {
                                    "from": "get_node",
                                    "to": "children"
                                },
                                {
                                    "from": "get_node",
                                    "to": "is_selected"
                                },
                                {
                                    "from": "is_selected",
                                    "to": "children",
                                    "as": "selected"
                                },
                                {
                                    "from": "children",
                                    "to": "parent"
                                },
                                {
                                    "from": "parent_attrs",
                                    "to": "parent",
                                    "as": "props"
                                },
                                {
                                    "from": "parent_dom_type",
                                    "to": "parent",
                                    "as": "dom_type"
                                },
                                {
                                    "from": "get_node",
                                    "to": "parent_attrs"
                                },
                                {
                                    "from": "parent",
                                    "to": "out"
                                }
                            ]
                        },
                        {
                            "id": "link_layout",
                            "nodes": [
                                {
                                    "id": "in",
                                    "value": null
                                },
                                {
                                    "id": "get_link",
                                    "args": [
                                        "link"
                                    ],
                                    "script": "return link ?? []"
                                },
                                {
                                    "id": "edge_info_el",
                                    "type": "h"
                                },
                                {
                                    "id": "edge_info_el_children",
                                    "args": [
                                        "edge_as",
                                        "edge_type",
                                        "rect"
                                    ],
                                    "script": "return [[rect.el, edge_as.el, edge_type.el]]"
                                },
                                {
                                    "id": "edge_info_dom_type",
                                    "value": "svg"
                                },
                                {
                                    "id": "edge_info_props",
                                    "args": [
                                        "source",
                                        "target",
                                        "selected_distance",
                                        "sibling_index_normalized",
                                        "selected_edge"
                                    ],
                                    "script": "return ({x: Math.floor(sibling_index_normalized * (target.x - source.x) + source.x) + 16, y: Math.floor(sibling_index_normalized * (target.y - source.y) + source.y), opacity: selected_distance !== undefined ? Math.max(0.05, 1 - selected_distance * selected_distance / 2) : 0.1, class: {selected: selected_edge && source.node_id === selected_edge.from && target.node_id === selected_edge.to, edge: true} })"
                                },
                                {
                                    "id": "edge_info_line_position",
                                    "value": 0.5,
                                    "min": 0,
                                    "max": 1,
                                    "step": 0.01
                                },
                                {
                                    "id": "edge_info_type_props",
                                    "value": {
                                        "font-size": 14,
                                        "y": 32
                                    }
                                },
                                {
                                    "id": "edge_info_type_el",
                                    "type": "svg_text"
                                },
                                {
                                    "id": "edge_info_type_text",
                                    "args": [
                                        "link"
                                    ],
                                    "script": "return link.type ?? ''"
                                },
                                {
                                    "id": "edge_info_as_props",
                                    "value": {
                                        "font-size": 14,
                                        "y": 16
                                    }
                                },
                                {
                                    "id": "edge_info_as_el",
                                    "type": "svg_text"
                                },
                                {
                                    "id": "edge_info_as_text",
                                    "args": [
                                        "link"
                                    ],
                                    "script": "return link.as ?? '*'"
                                },
                                {
                                    "id": "edge_info_rect_dom_type",
                                    "value": "rect"
                                },
                                {
                                    "id": "edge_info_rect",
                                    "type": "h"
                                },
                                {
                                    "id": "lerp_length",
                                    "value": 24
                                },
                                {
                                    "id": "line_lerp",
                                    "args": [
                                        "source",
                                        "target",
                                        "lerp_length",
                                        "selected_distance",
                                        "selected_edge"
                                    ],
                                    "script": "const length_x = Math.abs(source.x - target.x); const length_y = Math.abs(source.y - target.y); const length = Math.sqrt(length_x * length_x + length_y * length_y); return {selected_distance, selected_edge, source: {...source, x: source.x + (target.x - source.x) * lerp_length / length, y: source.y + (target.y - source.y) * lerp_length / length}, target: {...target, x: source.x + (target.x - source.x) * (1 - (lerp_length / length)), y: source.y + (target.y - source.y) * (1 - (lerp_length / length))}}"
                                },
                                {
                                    "id": "line_props",
                                    "args": [
                                        "source",
                                        "target",
                                        "selected_edge",
                                        "selected_distance"
                                    ],
                                    "script": "return ({x1: Math.floor(source.x), y1: Math.floor(source.y), x2: Math.floor(target.x), y2: Math.floor(target.y), class: `link ${selected_edge && source.node_id === selected_edge.from && target.node_id === selected_edge.to ? 'selected' : 'unselected'}`, 'marker-end': 'url(#arrow)', opacity: selected_distance !== undefined ? Math.max(0.05, 1 - selected_distance * selected_distance / 2) : 0.1})"
                                },
                                {
                                    "id": "line_dom_type",
                                    "value": "line"
                                },
                                {
                                    "id": "empty_array",
                                    "value": [
                                        []
                                    ]
                                },
                                {
                                    "id": "line",
                                    "type": "h"
                                },
                                {
                                    "id": "out",
                                    "args": [
                                        "line",
                                        "edge_info"
                                    ],
                                    "script": "return [line, edge_info]"
                                }
                            ],
                            "edges": [
                                {
                                    "from": "in",
                                    "to": "get_link"
                                },
                                {
                                    "from": "in",
                                    "to": "line_props"
                                },
                                {
                                    "from": "get_link",
                                    "to": "line_lerp"
                                },
                                {
                                    "from": "line_lerp",
                                    "to": "line_props"
                                },
                                {
                                    "from": "lerp_length",
                                    "to": "line_lerp",
                                    "as": "lerp_length"
                                },
                                {
                                    "from": "get_link",
                                    "to": "edge_info_props"
                                },
                                {
                                    "from": "in",
                                    "to": "edge_info_as_text"
                                },
                                {
                                    "from": "in",
                                    "to": "edge_info_type_text"
                                },
                                {
                                    "from": "edge_info_dom_type",
                                    "to": "edge_info_el",
                                    "as": "dom_type"
                                },
                                {
                                    "from": "edge_info_props",
                                    "to": "edge_info_el",
                                    "as": "props"
                                },
                                {
                                    "from": "edge_info_line_position",
                                    "to": "edge_info_props",
                                    "as": "line_position"
                                },
                                {
                                    "from": "edge_info_rect",
                                    "to": "edge_info_el_children",
                                    "as": "rect"
                                },
                                {
                                    "from": "edge_info_rect_dom_type",
                                    "to": "edge_info_rect",
                                    "as": "dom_type"
                                },
                                {
                                    "from": "edge_info_el_children",
                                    "to": "edge_info_el",
                                    "as": "children"
                                },
                                {
                                    "from": "edge_info_el",
                                    "to": "out",
                                    "as": "edge_info"
                                },
                                {
                                    "from": "edge_info_type_props",
                                    "to": "edge_info_type_el",
                                    "as": "props"
                                },
                                {
                                    "from": "edge_info_type_text",
                                    "to": "edge_info_type_el",
                                    "as": "text"
                                },
                                {
                                    "from": "edge_info_type_el",
                                    "to": "edge_info_el_children",
                                    "as": "edge_type"
                                },
                                {
                                    "from": "edge_info_as_props",
                                    "to": "edge_info_as_el",
                                    "as": "props"
                                },
                                {
                                    "from": "edge_info_as_text",
                                    "to": "edge_info_as_el",
                                    "as": "text"
                                },
                                {
                                    "from": "edge_info_as_el",
                                    "to": "edge_info_el_children",
                                    "as": "edge_as"
                                },
                                {
                                    "from": "line_props",
                                    "to": "line",
                                    "as": "props"
                                },
                                {
                                    "from": "line_dom_type",
                                    "to": "line",
                                    "as": "dom_type"
                                },
                                {
                                    "from": "empty_array",
                                    "to": "line",
                                    "as": "children"
                                },
                                {
                                    "from": "empty_array",
                                    "to": "line",
                                    "as": "children"
                                },
                                {
                                    "from": "line",
                                    "to": "out",
                                    "as": "line"
                                }
                            ]
                        },
                        {
                            "id": "line_end",
                            "type": "h"
                        },
                        {
                            "id": "line_end_props",
                            "value": {
                                "id": "arrow",
                                "refX": 8,
                                "refY": 4,
                                "markerWidth": 8,
                                "markerHeight": 8,
                                "markerUnits": "userSpaceOnUse",
                                "orient": "auto"
                            }
                        },
                        {
                            "id": "line_end_children",
                            "args": [
                                "children"
                            ],
                            "script": "return [[children.el]]"
                        },
                        {
                            "id": "arrow_path",
                            "type": "h"
                        },
                        {
                            "id": "arrow_path_props",
                            "value": {
                                "points": "1 1, 8 4, 1 8"
                            }
                        },
                        {
                            "id": "arrow_path_dom_type",
                            "value": "polyline"
                        },
                        {
                            "id": "fill_filter_flood_dom_type",
                            "value": "feFlood"
                        },
                        {
                            "id": "fill_filter_flood_props",
                            "value": {
                                "flood-color": "black"
                            }
                        },
                        {
                            "id": "fill_filter_flood",
                            "type": "h"
                        },
                        {
                            "id": "fill_filter_props",
                            "value": {
                                "id": "flood-background",
                                "width": 1,
                                "height": 1,
                                "x": 0,
                                "y": 0
                            }
                        },
                        {
                            "id": "fill_filter_composite_props",
                            "value": {
                                "in": "SourceGraphic"
                            }
                        },
                        {
                            "id": "fill_filter_composite_dom_type",
                            "value": "feComposite"
                        },
                        {
                            "id": "fill_filter_composite",
                            "type": "h"
                        },
                        {
                            "id": "fill_filter_children",
                            "args": [
                                "comp",
                                "flood"
                            ],
                            "script": "return [[flood.el, comp.el]]"
                        },
                        {
                            "id": "fill_filter_dom_type",
                            "value": "filter"
                        },
                        {
                            "id": "fill_filter",
                            "type": "h"
                        },
                        {
                            "id": "marker",
                            "value": "marker"
                        },
                        {
                            "id": "defs_children",
                            "args": [
                                "arrow"
                            ],
                            "script": "return [[bg_color.el, arrow.el]]"
                        },
                        {
                            "id": "defs",
                            "type": "h"
                        },
                        {
                            "id": "defs_dom_type",
                            "value": "defs"
                        },
                        {
                            "id": "defs_props",
                            "value": {}
                        },
                        {
                            "id": "link_selected_distance",
                            "args": [
                                "link"
                            ],
                            "script": "return !link ? [] : link.selected_distance ? link.selected_distance : 10"
                        },
                        {
                            "id": "filter_links",
                            "type": "filter"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "get_nodes"
                        },
                        {
                            "from": "in",
                            "to": "log",
                            "as": "input"
                        },
                        {
                            "from": "in",
                            "to": "get_links"
                        },
                        {
                            "from": "in",
                            "to": "get_selected"
                        },
                        {
                            "from": "in",
                            "to": "get_selected_edge"
                        },
                        {
                            "from": "in",
                            "to": "get_onclick_node_fn"
                        },
                        {
                            "from": "get_nodes",
                            "to": "node_layout",
                            "as": "node"
                        },
                        {
                            "from": "in",
                            "to": "node_layout",
                            "as": "graph"
                        },
                        {
                            "from": "get_onclick_node_fn",
                            "to": "node_layout",
                            "as": "onclick_node_fn"
                        },
                        {
                            "from": "get_selected",
                            "to": "node_layout",
                            "as": "selected",
                            "type": "concat"
                        },
                        {
                            "from": "get_links",
                            "to": "link_selected_distance",
                            "as": "link"
                        },
                        {
                            "from": "get_selected_edge",
                            "to": "filter_links",
                            "as": "selected_edge"
                        },
                        {
                            "from": "link_selected_distance",
                            "to": "filter_links",
                            "as": "keep"
                        },
                        {
                            "from": "get_links",
                            "to": "filter_links"
                        },
                        {
                            "from": "filter_links",
                            "to": "link_layout",
                            "as": "link"
                        },
                        {
                            "from": "in",
                            "to": "node_editor_props"
                        },
                        {
                            "from": "node_editor_props",
                            "to": "out",
                            "as": "props"
                        },
                        {
                            "from": "node_editor_dom_type",
                            "to": "out",
                            "as": "dom_type"
                        },
                        {
                            "from": "node_layout",
                            "to": "node_editor_children",
                            "as": "nodes",
                            "type": "concat"
                        },
                        {
                            "from": "get_nodes",
                            "to": "node_editor_children_inputs",
                            "as": "nodes",
                            "type": "concat"
                        },
                        {
                            "from": "link_layout",
                            "to": "node_editor_children",
                            "as": "links",
                            "type": "concat"
                        },
                        {
                            "from": "get_links",
                            "to": "node_editor_children_inputs",
                            "as": "links",
                            "type": "concat"
                        },
                        {
                            "from": "defs",
                            "to": "node_editor_children",
                            "as": "defs"
                        },
                        {
                            "from": "marker",
                            "to": "line_end",
                            "as": "dom_type"
                        },
                        {
                            "from": "arrow_path_props",
                            "to": "arrow_path",
                            "as": "props"
                        },
                        {
                            "from": "arrow_path_dom_type",
                            "to": "arrow_path",
                            "as": "dom_type"
                        },
                        {
                            "from": "arrow_path",
                            "to": "line_end",
                            "as": "children"
                        },
                        {
                            "from": "line_end_props",
                            "to": "line_end",
                            "as": "props"
                        },
                        {
                            "from": "line_end",
                            "to": "defs_children",
                            "as": "arrow"
                        },
                        {
                            "from": "fill_filter_flood_props",
                            "to": "fill_filter_flood",
                            "as": "props"
                        },
                        {
                            "from": "fill_filter_flood_dom_type",
                            "to": "fill_filter_flood",
                            "as": "dom_type"
                        },
                        {
                            "from": "fill_filter_flood",
                            "to": "fill_filter_children",
                            "as": "flood"
                        },
                        {
                            "from": "fill_filter_composite_props",
                            "to": "fill_filter_composite",
                            "as": "props"
                        },
                        {
                            "from": "fill_filter_composite_dom_type",
                            "to": "fill_filter_composite",
                            "as": "dom_type"
                        },
                        {
                            "from": "fill_filter_composite",
                            "to": "fill_filter_children",
                            "as": "comp"
                        },
                        {
                            "from": "fill_filter_children",
                            "to": "fill_filter",
                            "as": "children"
                        },
                        {
                            "from": "fill_filter_props",
                            "to": "fill_filter",
                            "as": "props"
                        },
                        {
                            "from": "fill_filter_dom_type",
                            "to": "fill_filter",
                            "as": "dom_type"
                        },
                        {
                            "from": "fill_filter",
                            "to": "defs_children",
                            "as": "bg_color"
                        },
                        {
                            "from": "defs_dom_type",
                            "to": "defs",
                            "as": "dom_type"
                        },
                        {
                            "from": "defs_props",
                            "to": "defs",
                            "as": "props"
                        },
                        {
                            "from": "defs_children",
                            "to": "defs",
                            "as": "children"
                        },
                        {
                            "from": "node_editor_children_inputs",
                            "to": "node_editor_children",
                            "type": "inputs"
                        },
                        {
                            "from": "node_editor_children",
                            "to": "out",
                            "as": "children"
                        }
                    ]
                },
                {
                    "id": "out"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "node_editor"
                },
                {
                    "from": "in",
                    "to": "edit_text"
                },
                {
                    "from": "in",
                    "to": "search_input"
                },
                {
                    "from": "in",
                    "to": "result"
                },
                {
                    "from": "node_editor",
                    "to": "wrapper_children",
                    "as": "node_editor"
                },
                {
                    "from": "edit_text",
                    "to": "wrapper_children",
                    "as": "edit_text"
                },
                {
                    "from": "search_input",
                    "to": "wrapper_children",
                    "as": "search_input"
                },
                {
                    "from": "result",
                    "to": "wrapper_children",
                    "as": "result"
                },
                {
                    "from": "wrapper_children",
                    "to": "wrapper",
                    "as": "children"
                },
                {
                    "from": "wrapper_dom_type",
                    "to": "wrapper",
                    "as": "dom_type"
                },
                {
                    "from": "wrapper_props",
                    "to": "wrapper",
                    "as": "props"
                },
                {
                    "from": "wrapper",
                    "to": "out"
                }
            ]
        }
    ],
    "edges": [
        {
            "from": "in",
            "to": "get_graph",
            "as": "target"
        },
        {
            "from": "in",
            "to": "get_display_graph",
            "as": "target"
        },
        {
            "from": "get_display_graph",
            "to": "get_display_graph_out",
            "as": "target"
        },
        {
            "from": "graph",
            "to": "get_graph",
            "as": "path"
        },
        {
            "from": "display_graph",
            "to": "get_display_graph",
            "as": "path"
        },
        {
            "from": "display_graph_out",
            "to": "get_display_graph_out",
            "as": "path"
        },
        {
            "from": "hyperapp_view_in",
            "to": "hyperapp_view",
            "as": "in_node"
        },
        {
            "from": "editor",
            "to": "hyperapp_view",
            "type": "ref",
            "as": "out_node"
        },
        {
            "from": "get_graph",
            "to": "update_sim_fn",
            "as": "graph"
        },
        {
            "from": "get_display_graph_out",
            "to": "hyperapp_init_state",
            "as": "selected",
            "type": "concat"
        },
        {
            "from": "update_sim_effect",
            "to": "hyperapp_init_state",
            "as": "update_sim_effect"
        },
        {
            "from": "hyperapp_view_in",
            "to": "onclick_node_fn"
        },
        {
            "from": "onclick_node_fn",
            "to": "editor",
            "as": "onclick_node_fn"
        },
        {
            "from": "onclick_node_fn_body",
            "to": "onclick_node_fn",
            "as": "out_node",
            "type": "ref"
        },
        {
            "from": "onclick_node_fn_in",
            "to": "onclick_node_fn_body"
        },
        {
            "from": "onclick_node_fn_in",
            "to": "onclick_node_fn",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "hyperapp_view_in",
            "to": "onclick_graph_fn"
        },
        {
            "from": "onclick_graph_fn",
            "to": "editor",
            "as": "onclick_graph_fn"
        },
        {
            "from": "onclick_graph_fn_body",
            "to": "onclick_graph_fn",
            "as": "out_node",
            "type": "ref"
        },
        {
            "from": "onclick_graph_fn_in",
            "to": "onclick_graph_fn_body"
        },
        {
            "from": "onclick_graph_fn_in",
            "to": "onclick_graph_fn",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "get_graph",
            "to": "onkey_fn",
            "as": "graph"
        },
        {
            "from": "onkey_fn",
            "to": "hyperapp_subscriptions",
            "as": "onkey_fn"
        },
        {
            "from": "onkey_fn_in",
            "to": "onkey_fn_body"
        },
        {
            "from": "onkey_fn_body",
            "to": "onkey_fn",
            "as": "out_node",
            "type": "ref"
        },
        {
            "from": "onkey_fn_in",
            "to": "onkey_fn",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "hyperapp_view",
            "to": "hyperapp_app",
            "as": "view"
        },
        {
            "from": "hyperapp_init_state",
            "to": "hyperapp_app",
            "as": "init"
        },
        {
            "from": "get_graph",
            "to": "hyperapp_view",
            "as": "graph"
        },
        {
            "from": "get_graph",
            "to": "hyperapp_init_state",
            "as": "graph"
        },
        {
            "from": "hyperapp_view_in",
            "to": "editor"
        },
        {
            "from": "get_graph",
            "to": "update_nodes",
            "as": "graph"
        },
        {
            "from": "get_display_graph",
            "to": "update_nodes",
            "as": "display_graph"
        },
        {
            "from": "get_display_graph",
            "to": "hyperapp_init_state",
            "as": "display_graph"
        },
        {
            "from": "in",
            "to": "update_nodes",
            "order": -1
        },
        {
            "from": "initial_state",
            "to": "update_nodes",
            "order": -1
        },
        {
            "from": "initial_state",
            "to": "graph_to_simulation",
            "order": -1
        },
        {
            "from": "get_display_graph_out",
            "to": "graph_to_simulation",
            "as": "selected"
        },
        {
            "from": "get_display_graph",
            "to": "graph_to_simulation",
            "as": "display_graph"
        },
        {
            "from": "get_display_graph_out",
            "to": "calculate_levels",
            "as": "selected"
        },
        {
            "from": "get_display_graph",
            "to": "calculate_levels",
            "as": "display_graph"
        },
        {
            "from": "calculate_levels",
            "to": "graph_to_simulation",
            "as": "levels"
        },
        {
            "from": "d3simulation",
            "to": "hyperapp_init_state"
        },
        {
            "from": "d3simulation",
            "to": "update_nodes"
        },
        {
            "from": "initial_state",
            "to": "hyperapp_init_state"
        },
        {
            "from": "in",
            "to": "hyperapp_init_state",
            "order": -1
        },
        {
            "from": "graph_to_simulation",
            "to": "hyperapp_init_state"
        },
        {
            "from": "hyperapp_init_state",
            "to": "update_nodes"
        },
        {
            "from": "update_nodes",
            "to": "hyperapp_app"
        },
        {
            "from": "d3simulation",
            "to": "hyperapp_subscriptions"
        },
        {
            "from": "hyperapp_subscriptions",
            "to": "hyperapp_app",
            "as": "subscriptions"
        },
        {
            "from": "update_sim_in",
            "to": "update_sim"
        },
        {
            "from": "update_sim_in",
            "to": "update_sim_fn",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "update_sim",
            "to": "update_sim_fn",
            "as": "out_node",
            "type": "ref"
        },
        {
            "from": "update_sim_fn",
            "to": "update_sim_effect",
            "as": "fn"
        },
        {
            "from": "hyperapp_app",
            "to": "out"
        }
    ]
}