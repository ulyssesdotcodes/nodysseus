{
    "description": "function composition",
    "nodes": [
        {
            "id": "in",
            "value": null
        },
        {
            "id": "log",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "input"
                    ],
                    "script": "console.log(node.id); console.log(input); return {}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "input"
                }
            ]
        },
        {
            "id": "hyperapp",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "init",
                        "view",
                        "subscriptions"
                    ],
                    "script": "return lib.ha.app({init: () => [init, [() => { init.update_sim_effect(null, init) }]], view: s => view(s)[0].el, node: document.getElementById('node-editor'), subscriptions: () => subscriptions})"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "children_els",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "children"
                    ],
                    "script": "return [children.map(c => c.el)]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "append",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "item",
                        "array"
                    ],
                    "script": "return [array.concat(Array.isArray(item) ? item : [item])]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "filter",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "keep",
                        "data"
                    ],
                    "script": "return keep ? [data] : []"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "order": 1
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "data",
                    "order": 0
                }
            ]
        },
        {
            "id": "delete",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "path"
                    ],
                    "script": "const new_data = Object.assign({}, data); delete new_data[path]; return new_data;"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "order": 1
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "data",
                    "order": 0
                }
            ]
        },
        {
            "id": "default",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "default_value"
                    ],
                    "script": "return data.length > 0 ? data : default_value"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "switch",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": ["data", "input"],
                    "script": "return data[Object.getOwnPropertyNames(data)[0]];"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "data"
                }
            ]
        },
        {
            "id": "trigger",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "trigger",
                    "args": ["trigger"],
                    "script": "return trigger ? ['in'] : []"
                },
                {
                    "id": "out",
                    "args": [
                        "data"
                    ],
                    "script": "return data?.data ?? []"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "data"
                },
                {
                    "from": "in",
                    "to": "trigger"
                },
                {
                    "from": "trigger",
                    "to": "out",
                    "type": "inputs"
                }
            ]
        },
        {
            "id": "svg_text",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "el",
                    "type": "h"
                },
                {
                    "id": "dom_type",
                    "value": "text"
                },
                {
                    "id": "text_el",
                    "type": "h_text"
                },
                {
                    "id": "children",
                    "args": [
                        "text"
                    ],
                    "script": "return [[text.el]]"
                },
                {
                    "id": "out"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "text_el"
                },
                {
                    "from": "in",
                    "to": "el"
                },
                {
                    "from": "dom_type",
                    "to": "el",
                    "as": "dom_type"
                },
                {
                    "from": "text_el",
                    "to": "children",
                    "as": "text"
                },
                {
                    "from": "children",
                    "to": "el",
                    "as": "children"
                },
                {
                    "from": "el",
                    "to": "out"
                }
            ]
        },
        {
            "id": "execute_graph",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "args": [
                        "in_node",
                        "out_node",
                        "graph"
                    ],
                    "script": "return (...args) => (lib.no.executeGraph({state: new Map([[in_node, args]]), graph, out: out_node }))"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "wrap_effect_fn",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "args": [
                        "fn"
                    ],
                    "script": "return [[(_, payload) => fn(payload)]]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "get",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "fill_default",
                    "args": [
                        "input"
                    ],
                    "script": "return input.default ?? null"
                },
                {
                    "id": "out",
                    "args": [
                        "target",
                        "path",
                        "def"
                    ],
                    "script": "return [lib._.get(target, path) ?? def]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                },
                {
                    "from": "in",
                    "to": "fill_default",
                    "as": "input"
                },
                {
                    "from": "fill_default",
                    "to": "out",
                    "as": "def"
                }
            ]
        },
        {
            "id": "h",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "fill_children",
                    "args": [
                        "input"
                    ],
                    "script": "return [ input.children === undefined ? [] : (Array.isArray(input.children) ? input.children.map(c => c.el ?? c) : [input.children.el])]"
                },
                {
                    "id": "fill_props",
                    "args": [
                        "input"
                    ],
                    "script": "return input.props ?? {}"
                },
                {
                    "id": "out",
                    "args": [
                        "props",
                        "children",
                        "input"
                    ],
                    "script": "return {el: lib.ha.h(input.dom_type, props, children)}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "fill_children",
                    "as": "input"
                },
                {
                    "from": "in",
                    "to": "fill_props",
                    "as": "input"
                },
                {
                    "from": "fill_children",
                    "to": "out",
                    "as": "children",
                    "order": 1
                },
                {
                    "from": "fill_props",
                    "to": "out",
                    "as": "props"
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "input"
                }
            ]
        },
        {
            "id": "h_text",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "args": [
                        "text"
                    ],
                    "script": "return {el: lib.ha.text(text)}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "expand_contract",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": ["display_graph", "selected"],
                    "script": "return display_graph && selected ? {display_graph, selected} : []"
                },
                {
                    "id": "expandable",
                    "type": "filter"
                },
                {
                    "id": "log",
                    "type": "log"
                },
                {
                    "id": "contractable",
                    "type": "filter"
                },
                {
                    "id": "expandable_id",
                    "args": [
                        "node_id"
                    ],
                    "script": "return node_id ? [[node_id + '/out']] : []"
                },
                {
                    "id": "contractable_id",
                    "args": [
                        "node_id"
                    ],
                    "script": "return node_id ? [[node_id.substring(0, node_id.lastIndexOf('/'))]] : []"
                },
                {
                    "id": "expand",
                    "args": [
                        "node_id",
                        "display_graph"
                    ],
                    "script": "return display_graph && node_id ? lib.scripts.expand_node({display_graph, node_id}) : []"
                },
                {
                    "id": "contract",
                    "args": [
                        "node_id",
                        "display_graph"
                    ],
                    "script": "return display_graph && node_id ? lib.scripts.contract_node({display_graph, node_id}) : []"
                },
                {
                    "id": "has_nodes",
                    "args": [
                        "node_id",
                        "display_graph"
                    ],
                    "script": "return !!display_graph.nodes.find(n => n.id === node_id).nodes"
                },
                {
                    "id": "is_in_or_out",
                    "args": [
                        "node_id"
                    ],
                    "script": "return node_id.endsWith('/in') || node_id.endsWith('/out')"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "expandable"
                },
                {
                    "from": "in",
                    "to": "contractable"
                },
                {
                    "from": "in",
                    "to": "has_nodes"
                },
                {
                    "from": "has_nodes",
                    "to": "expandable",
                    "as": "keep"
                },
                {
                    "from": "in",
                    "to": "is_in_or_out"
                },
                {
                    "from": "is_in_or_out",
                    "to": "contractable",
                    "as": "keep"
                },
                {
                    "from": "in",
                    "to": "has_nodes"
                },
                {
                    "from": "in",
                    "to": "is_in_or_out"
                },
                {
                    "from": "expandable",
                    "to": "expand"
                },
                {
                    "from": "expandable",
                    "to": "expandable_id"
                },
                {
                    "from": "contractable",
                    "to": "contractable_id"
                },
                {
                    "from": "contractable",
                    "to": "contract"
                },
                {
                    "from": "expand",
                    "to": "log"
                },
                {
                    "from": "contractable_id",
                    "to": "out",
                    "as": "selected"
                },
                {
                    "from": "expandable_id",
                    "to": "out",
                    "as": "selected"
                },
                {
                    "from": "expand",
                    "to": "out",
                    "as": "display_graph"
                },
                {
                    "from": "contract",
                    "to": "out",
                    "as": "display_graph"
                }
            ]
        },
        {
            "id": "not",
            "args": [
                "target"
            ],
            "script": "return !target"
        },
        {
            "id": "data",
            "value": "data"
        },
        {
            "id": "graph",
            "value": "graph"
        },
        {
            "id": "display_graph",
            "value": "display_graph"
        },
        {
            "id": "nodes",
            "value": "nodes"
        },
        {
            "id": "graph_nodes",
            "value": [
                [
                    "graph",
                    "nodes"
                ]
            ]
        },
        {
            "id": "initial_state",
            "value": {
                "nodes": [],
                "links": [],
                "editing": false
            }
        },
        {
            "id": "hyperapp_init_state"
        },
        {
            "id": "get_graph",
            "type": "get"
        },
        {
            "id": "get_display_graph",
            "type": "get"
        },
        {
            "id": "display_graph_out",
            "value": "display_graph_out"
        },
        {
            "id": "get_display_graph_out",
            "type": "get"
        },
        {
            "id": "hyperapp_view",
            "type": "execute_graph"
        },
        {
            "id": "hyperapp_app",
            "type": "hyperapp"
        },
        {
            "id": "hyperapp_view_in",
            "value": "hyperapp_view_in"
        },
        {
            "id": "hyperapp_subscriptions",
            "args": [
                "simulation",
                "onkey_fn"
            ],
            "script": "return [[[lib.scripts.d3subscription(simulation)], [lib.scripts.keydownSubscription, {action: onkey_fn}]]]"
        },
        {
            "id": "graph_to_simulation",
            "args": [
                "nodes",
                "display_graph"
            ],
            "script": "return lib.scripts.graphToSimulationNodes({display_graph, nodes})"
        },
        {
            "id": "update_nodes_in"
        },
        {
            "id": "update_nodes",
            "args": [
                "simulation",
                "nodes",
                "display_graph",
                "links",
                "display_graph_out",
                "selected"
            ],
            "script": "return lib.scripts.updateSimulationNodes({display_graph, simulation, nodes, links, display_graph_out, selected})"
        },
        {
            "id": "update_nodes_fn",
            "type": "execute_graph"
        },
        {
            "id": "d3simulation",
            "args": [],
            "script": "return lib.scripts.d3simulation()"
        },
        {
            "id": "onkey_fn_in",
            "value": null
        },
        {
            "id": "onkey_fn",
            "type": "execute_graph"
        },
        {
            "id": "onkey_fn_body",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "key_event",
                    "args": [
                        "args"
                    ],
                    "script": "return args[1]"
                },
                {
                    "id": "key",
                    "args": ["key"],
                    "script": "return key"
                },
                {
                    "id": "key_log",
                    "type": "log"
                },
                {
                    "id": "state",
                    "args": [
                        "args"
                    ],
                    "script": "return args[0]"
                },
                {
                    "id": "get_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected[0]"
                },
                {
                    "id": "find_selected"
                },
                {
                    "id": "selected",
                    "args": ["selected"],
                    "script": "return selected[0]"
                },
                {
                    "id": "display_graph_and_selected",
                    "args": [
                        "display_graph",
                        "selected"
                    ],
                    "script": "return {display_graph, selected, dgs: true}"
                },
                {
                    "id": "filter_editing",
                    "args": [
                        "editing"
                    ],
                    "script": "return editing ? [] : {}"
                },
                {
                    "id": "save",
                    "args": [
                        "key",
                        "ctrlKey",
                        "display_graph"
                    ],
                    "script": "return key === 's' && ctrlKey === true ? () => { localStorage.setItem('display_graph', JSON.stringify(display_graph)); localStorage.setItem('display_graph_' + performance.now(), JSON.stringify(display_graph));} : () => {}"
                },
                {
                    "id": "down",
                    "args": [
                        "key",
                        "selected",
                        "editing",
                        "display_graph"
                    ],
                    "script": "if(!(key === 'j' || key === 'ArrowDown') || editing) { return []; } const next_node_edge = display_graph.edges.find(e => e.from === selected[0]); return next_node_edge ? next_node_edge.to : []"
                },
                {
                    "id": "up",
                    "args": [
                        "key",
                        "selected",
                        "editing",
                        "display_graph"
                    ],
                    "script": "if(!(key === 'k' || key === 'ArrowUp') || editing){ return []; } const next_node_edge = display_graph.edges.find(e => e.to === selected[0]); return next_node_edge ? next_node_edge.from : []"
                },
                {
                    "id": "left",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "if(!(key === 'h' || key === 'ArrowLeft') || editing){ return [] } const current_node = nodes.find(n => n.node_id === selected[0]); const parent_id = display_graph.edges.find(e => e.to === selected[0])?.from; const child_id = display_graph.edges.find(e => e.from === selected[0])?.to; const siblings = display_graph.edges.filter(e => e.from === parent_id && e.to !== selected[0]).map(e => e.to).concat(display_graph.edges.filter(e => e.to === child_id && e.from !== selected[0]).map(e => e.from)); const next_node = siblings.reduce((dist, sibling) => { const sibling_node = nodes.find(n => n.node_id === sibling); const xdist = sibling_node.x - current_node.x; dist[1] = xdist < 0 && xdist < dist[0] ? sibling_node : dist[1]; return dist }, [window.innerWidth]); return next_node[1] ? next_node[1].node_id : []"
                },
                {
                    "id": "right",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "if(!(key === 'l' || key === 'ArrowRight') || editing){ return [] } const current_node = nodes.find(n => n.node_id === selected[0]); const parent_id = display_graph.edges.find(e => e.to === selected[0])?.from; const child_id = display_graph.edges.find(e => e.from === selected[0])?.to; const siblings = display_graph.edges.filter(e => e.from === parent_id && e.to !== selected[0]).map(e => e.to).concat(display_graph.edges.filter(e => e.to === child_id && e.from !== selected[0]).map(e => e.from)); const next_node = siblings.reduce((dist, sibling) => { const sibling_node = nodes.find(n => n.node_id === sibling); const xdist = sibling_node.x - current_node.x; dist[1] = xdist > 0 && xdist < dist[0] ? sibling_node : dist[1]; return dist }, [window.innerWidth]); return next_node[1] ? next_node[1].node_id : []"
                },
                {
                    "id": "v",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "if(!(key === 'v' && editing === false)){ return [] } document.querySelector('#edit_value input').focus(); return 'value';"
                },
                {
                    "id": "t",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "if(!(key === 't' && editing === false)){ return [] } document.querySelector('#edit_value input').focus(); return 'type';"
                },
                {
                    "id": "s",
                    "args": [
                        "key",
                        "ctrlKey",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "if(!(key === 's' && ctrlKey === false && editing === false)){ return [] } document.querySelector('#edit_value input').focus(); return 'script';"
                },
                {
                    "id": "a",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "if(!(key === 'a' && editing === false)){ return [] } document.querySelector('#edit_value input').focus(); return 'args';"
                },
                {
                    "id": "n",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "if(!(key === 'n' && editing === false)){ return [] } document.querySelector('#edit_value input').focus(); return 'name';"
                },
                {
                    "id": "o",
                    "args": [
                        "key",
                        "shiftKey",
                        "selected",
                        "display_graph",
                        "editing"
                    ],
                    "script": "if(!(key.toLowerCase() === 'o' && editing === false)){ return [] } const id = Math.random().toString(36).substr(2, 9); display_graph.nodes.push({id, name: 'new node'}); display_graph.edges.push({from: shiftKey ? id : selected[0], to: shiftKey ? selected[0] : id}); return {display_graph, selected: [id]};"
                },
                {
                    "id": "c",
                    "args": [
                        "key",
                        "selected",
                        "editing",
                        "shiftKey"
                    ],
                    "script": "if(!(key.toLowerCase() === 'c' && editing === false && !shiftKey)){ return [] } return selected[0];"
                },
                {
                    "id": "shift_c",
                    "args": [
                        "key",
                        "shiftKey",
                        "editing",
                        "selected"
                    ],
                    "script": "if(!(key.toLowerCase() === 'c' && editing === false && shiftKey)){ return [] } return selected[0];"
                },
                {
                    "id": "x",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "display_graph_out"
                    ],
                    "script": "if(!(key.toLowerCase() === 'x')){ return [] } display_graph.nodes = display_graph.nodes.filter(n => n.id !== selected[0]); const new_edges = []; const to = display_graph.edges.filter(e => e.to === selected[0]); const from = display_graph.edges.filter(e => e.from === selected[0]); for(let i = 0; i < to.length; i++){for(let j = 0; j < from.length; j++){ new_edges.push({from: to[i].from, to: from[j].to}); }}; display_graph.edges = display_graph.edges.filter(e => e.to !== selected[0] && e.from !== selected[0]); display_graph.edges.push(...new_edges); return {display_graph, selected: [to[0]?.from ?? from[0]?.to ?? display_graph_out] };"
                },
                {
                    "id": "enter",
                    "args": [
                        "key",
                        "selected"
                    ],
                    "script": "if(!(key === 'Enter')){ return []; } return true;"
                },
                {
                    "id": "make_edge",
                    "args": ["edge_to", "edge_from", "display_graph"],
                    "script": "if(edge_from && edge_to){ display_graph.edges.push({from: state.edge_from, to: state.edge_to}); edge_to = null; edge_from = null } return {display_graph, edge_from, edge_to};"
                },
                {
                    "id": "trigger_expand_contract",
                    "type": "trigger"
                },
                {
                    "id": "expand_contract",
                    "type": "expand_contract"
                },
                {
                    "id": "expand_contract_selected",
                    "args": ["selected"],
                    "script": "return selected"
                },
                {
                    "id": "expand_contract_display_graph",
                    "args": ["display_graph"],
                    "script": "return display_graph"
                },
                {
                    "id": "modified_display_graph_inputs",
                    "args": ["key"],
                    "script": "return [key.toLowerCase()]"
                },
                {
                    "id": "modified_display_graph",
                    "type": "switch"
                },
                {
                    "id": "esc",
                    "args": [
                        "key",
                        "target",
                        "selected",
                        "display_graph",
                        "editing"
                    ],
                    "script": "if(!(key === 'Escape' && editing)){ return []; } target.blur(); let value; try { value = JSON.parse(target.value);} catch(e){ value = target.value; } display_graph.nodes.find(n => n.id === selected[0])[editing] = value; return {editing: false, edit_value: null};"
                },
                {
                    "id": "esc_editing",
                    "args": [
                        "editing"
                    ],
                    "script": "return editing;"
                },
                {
                    "id": "selected",
                    "type": "switch"
                },
                {
                    "id": "set_selected",
                    "args": ["selected", "state"],
                    "script": "state.selected = selected ?? state.selected; return state"
                },
                {
                    "id": "editing",
                    "type": "switch"
                },
                {
                    "id": "set_editing",
                    "args": ["editing", "state"],
                    "script": "state.editing = editing ?? state.editing; return state"
                },
                {
                    "id": "display_graph",
                    "type": "switch"
                },
                {
                    "id": "set_display_graph",
                    "args": ["display_graph", "state"],
                    "script": "state.display_graph = display_graph ?? state.display_graph; return state"
                },
                {
                    "id": "new_state_cases",
                    "args": ["key"],
                    "script": "const graph_sim = key === 'Enter'; return [graph_sim && 'graph_sim', 'state']"
                },
                {
                    "id": "new_state",
                    "args": ["graph_sim", "state"],
                    "script": "return Object.assign({}, state, {nodes: graph_sim?.nodes ?? state.nodes, links: graph_sim?.links ?? state.links});"
                },
                {
                    "id": "graph_sim",
                    "args": [
                        "display_graph",
                        "nodes"
                    ],
                    "script": "return lib.scripts.graphToSimulationNodes({display_graph, nodes});"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "save",
                        "update"
                    ],
                    "script": "return [[data, [(_, payload) => { try { lib.no.executeGraph(payload)} catch(e) { console.error(e) }}, {state: new Map([['in', {}]]), graph: {nodes: data.display_graph.nodes.concat([]), edges: data.display_graph.edges.concat([])}, out: data.display_graph_out}], [() => save(), {}], [data.update_sim_effect, data]]]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "key_event",
                    "as": "args",
                    "type": "concat"
                },
                {
                    "from": "in",
                    "to": "state",
                    "as": "args",
                    "type": "concat"
                },
                {
                    "from": "key_event",
                    "to": "key"
                },
                {
                    "from": "state",
                    "to": "get_selected"
                },
                {
                    "from": "key",
                    "to": "selected",
                    "type": "inputs"
                },
                {
                    "from": "key",
                    "to": "display_graph",
                    "type": "inputs"
                },
                {
                    "from": "state",
                    "to": "display_graph_and_selected"
                },
                {
                    "from": "state",
                    "to": "filter_editing"
                },
                {
                    "from": "state",
                    "to": "expand_contract"
                },
                {
                    "from": "get_selected",
                    "to": "expand_contract",
                    "as": "node_id"
                },
                {
                    "from": "state",
                    "to": "enter"
                },
                {
                    "from": "key_event",
                    "to": "enter"
                },
                {
                    "from": "key_event",
                    "to": "ctrl_s"
                },
                {
                    "from": "state",
                    "to": "save"
                },
                {
                    "from": "filter_editing",
                    "to": "down"
                },
                {
                    "from": "state",
                    "to": "down"
                },
                {
                    "from": "key_event",
                    "to": "down"
                },
                {
                    "from": "state",
                    "to": "up"
                },
                {
                    "from": "key_event",
                    "to": "up"
                },
                {
                    "from": "filter_editing",
                    "to": "up"
                },
                {
                    "from": "state",
                    "to": "left"
                },
                {
                    "from": "key_event",
                    "to": "left"
                },
                {
                    "from": "filter_editing",
                    "to": "left"
                },
                {
                    "from": "state",
                    "to": "right"
                },
                {
                    "from": "key_event",
                    "to": "right"
                },
                {
                    "from": "filter_editing",
                    "to": "right"
                },
                {
                    "from": "key_event",
                    "to": "v"
                },
                {
                    "from": "state",
                    "to": "v"
                },
                {
                    "from": "key_event",
                    "to": "t"
                },
                {
                    "from": "state",
                    "to": "t"
                },
                {
                    "from": "key_event",
                    "to": "s"
                },
                {
                    "from": "state",
                    "to": "s"
                },
                {
                    "from": "key_event",
                    "to": "n"
                },
                {
                    "from": "state",
                    "to": "n"
                },
                {
                    "from": "key_event",
                    "to": "a"
                },
                {
                    "from": "state",
                    "to": "a"
                },
                {
                    "from": "key_event",
                    "to": "o"
                },
                {
                    "from": "state",
                    "to": "o"
                },
                {
                    "from": "key_event",
                    "to": "x"
                },
                {
                    "from": "state",
                    "to": "x"
                },
                {
                    "from": "key_event",
                    "to": "c"
                },
                {
                    "from": "state",
                    "to": "c"
                },
                {
                    "from": "key_event",
                    "to": "shift_c"
                },
                {
                    "from": "state",
                    "to": "shift_c"
                },
                {
                    "from": "key_event",
                    "to": "save"
                },
                {
                    "from": "down",
                    "to": "selected",
                    "as": "ArrowDown",
                    "type": "concat"
                },
                {
                    "from": "up",
                    "to": "selected",
                    "as": "ArrowUp",
                    "type": "concat"
                },
                {
                    "from": "left",
                    "to": "selected",
                    "as": "ArrowLeft",
                    "type": "concat"
                },
                {
                    "from": "right",
                    "to": "selected",
                    "as": "ArrowRight",
                    "type": "concat"
                },
                {
                    "from": "v",
                    "to": "editing",
                    "as": "v"
                },
                {
                    "from": "t",
                    "to": "editing",
                    "as": "t"
                },
                {
                    "from": "s",
                    "to": "editing",
                    "as": "s"
                },
                {
                    "from": "n",
                    "to": "editing",
                    "as": "n"
                },
                {
                    "from": "a",
                    "to": "editing",
                    "as": "a"
                },
                {
                    "from": "state",
                    "to": "make_edge"
                },
                {
                    "from": "c",
                    "to": "make_edge",
                    "as": "edge_from"
                },
                {
                    "from": "shift_c",
                    "to": "make_edge",
                    "as": "edge_to"
                },
                {
                    "from": "state",
                    "to": "esc"
                },
                {
                    "from": "key_event",
                    "to": "esc"
                },
                {
                    "from": "state",
                    "to": "esc_state",
                    "order": 0
                },
                {
                    "from": "esc",
                    "to": "esc_editing"
                },
                {
                    "from": "esc_editing",
                    "to": "set_editing",
                    "as": "Escape"
                },
                {
                    "from": "expand_contract",
                    "to": "expand_contract_display_graph"
                },
                {
                    "from": "expand_contract_display_graph",
                    "to": "display_graph",
                    "as": "Enter"
                },
                {
                    "from": "expand_contract",
                    "to": "expand_contract_selected"
                },
                {
                    "from": "expand_contract_selected",
                    "to": "selected",
                    "as": "Enter"
                },
                {
                    "from": "o",
                    "to": "modified_display_graph",
                    "as": "o"
                },
                {
                    "from": "x",
                    "to": "modified_display_graph",
                    "order": 2
                },
                {
                    "from": "display_graph_and_selected",
                    "to": "modified_display_graph",
                    "order": 1
                },
                {
                    "from": "make_edge",
                    "to": "display_graph",
                    "as": "c"
                },
                {
                    "from": "display_graph",
                    "to": "graph_sim",
                    "as": "display_graph"
                },
                {
                    "from": "state",
                    "to": "set_selected",
                    "as": "state"
                },
                {
                    "from": "selected",
                    "to": "set_selected",
                    "as": "selected",
                    "type": "concat"
                },
                {
                    "from": "editing",
                    "to": "set_editing",
                    "as": "editing"
                },
                {
                    "from": "set_selected",
                    "to": "set_editing",
                    "as": "state"
                },
                {
                    "from": "display_graph",
                    "to": "set_display_graph",
                    "as": "display_graph"
                },
                {
                    "from": "set_editing",
                    "to": "set_display_graph",
                    "as": "state"
                },
                {
                    "from": "set_display_graph",
                    "to": "new_state",
                    "as": "state"
                },
                {
                    "from": "key_event",
                    "to": "new_state_cases"
                },
                {
                    "from": "new_state_cases",
                    "to": "new_state",
                    "type": "inputs"
                },
                {
                    "from": "graph_sim",
                    "to": "new_state",
                    "as": "graph_sim"
                },
                {
                    "from": "state",
                    "to": "graph_sim",
                    "order": 1
                },
                {
                    "from": "new_state",
                    "to": "out",
                    "as": "data"
                },
                {
                    "from": "save",
                    "to": "out",
                    "as": "save"
                }
            ]
        },
        {
            "id": "update_sim",
            "args": [
                "display_graph",
                "nodes",
                "links",
                "simulation",
                "display_graph_out",
                "selected"
            ],
            "script": "return lib.scripts.updateSimulationNodes({display_graph, nodes, links, simulation, display_graph_out, selected})"
        },
        {
            "id": "update_sim_in"
        },
        {
            "id": "update_sim_fn",
            "type": "execute_graph"
        },
        {
            "id": "update_sim_effect",
            "type": "wrap_effect_fn"
        },
        {
            "id": "onclick_graph_fn_in",
            "value": null
        },
        {
            "id": "onclick_graph_fn_body",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "state",
                    "args": [
                        "args"
                    ],
                    "script": "return args[0]"
                },
                {
                    "id": "mouse_event",
                    "args": [
                        "args"
                    ],
                    "script": "return args[1]"
                },
                {
                    "id": "set_down_xy",
                    "args": [
                        "ev"
                    ],
                    "script": "return ev.ty === 'down' ? {x: ev.x, y: ev.y} : {}"
                },
                {
                    "id": "create_node",
                    "args": [
                        "ev",
                        "state"
                    ],
                    "script": "return ev.ty === 'move' && state.downx !== undefined && state.downy !== undefined && (Math.abs(ev.x - state.downx) > 32 || Math.abs(ev.y - state.downy) > 32)  ? {x: ev.x, y: ev.y, name: 'new_node', id: Date.now().toString() } : {}"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "down",
                        "new_node"
                    ],
                    "script": "return {...data, downx: down?.x ?? data.downx, downy: down?.y ?? data.downy}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "mouse_event",
                    "as": "args",
                    "type": "concat"
                },
                {
                    "from": "in",
                    "to": "state",
                    "as": "args",
                    "type": "concat"
                },
                {
                    "from": "mouse_event",
                    "to": "set_down_xy",
                    "as": "ev"
                },
                {
                    "from": "mouse_event",
                    "to": "create_node",
                    "as": "ev"
                },
                {
                    "from": "state",
                    "to": "create_node",
                    "as": "state"
                },
                {
                    "from": "set_down_xy",
                    "to": "out",
                    "as": "down"
                },
                {
                    "from": "create_node",
                    "to": "out",
                    "as": "new_node"
                },
                {
                    "from": "state",
                    "to": "out",
                    "as": "data"
                }
            ]
        },
        {
            "id": "onclick_graph_fn",
            "type": "execute_graph"
        },
        {
            "id": "onclick_node_fn_in",
            "value": null
        },
        {
            "id": "onclick_node_fn_body",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "get_first",
                    "args": [
                        "args"
                    ],
                    "script": "return args[0]"
                },
                {
                    "id": "merge_args",
                    "args": [
                        "args"
                    ],
                    "script": "return Object.assign({}, args[0], {x: args[1].x, y: args[1].y, node_id: args[1].node_id})"
                },
                {
                    "id": "merge_args_no_display_graph",
                    "type": "delete"
                },
                {
                    "id": "select",
                    "type": "append"
                },
                {
                    "id": "display_graph",
                    "value": "display_graph"
                },
                {
                    "id": "false",
                    "value": false
                },
                {
                    "id": "empty_array",
                    "value": []
                },
                {
                    "id": "select_node",
                    "args": [
                        "clicked",
                        "node_id"
                    ],
                    "script": "return clicked.length > 0 ? [] : node_id"
                },
                {
                    "id": "selected",
                    "value": "selected"
                },
                {
                    "id": "get_selected",
                    "type": "get"
                },
                {
                    "id": "node_id",
                    "value": "node_id"
                },
                {
                    "id": "get_node_id",
                    "type": "get"
                },
                {
                    "id": "is_not_clicked",
                    "args": [
                        "node_id",
                        "selected_id"
                    ],
                    "script": "return selected_id !== node_id"
                },
                {
                    "id": "is_clicked",
                    "args": [
                        "node_id",
                        "selected_id"
                    ],
                    "script": "return selected_id === node_id"
                },
                {
                    "id": "not_clicked",
                    "type": "filter"
                },
                {
                    "id": "clicked",
                    "type": "filter"
                },
                {
                    "id": "select_clicked",
                    "type": "default"
                },
                {
                    "id": "expand_contract",
                    "type": "expand_contract"
                },
                {
                    "id": "graph_to_sim",
                    "args": [
                        "display_graph",
                        "nodes"
                    ],
                    "script": "return lib.scripts.graphToSimulationNodes({display_graph, nodes})"
                },
                {
                    "id": "unmodified_graph"
                },
                {
                    "id": "new_state"
                },
                {
                    "id": "final_graph",
                    "type": "default"
                },
                {
                    "id": "out",
                    "args": [
                        "data"
                    ],
                    "script": "return [[data, ...([[data.update_sim_effect, data]])]]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "merge_args",
                    "as": "args",
                    "type": "concat"
                },
                {
                    "from": "merge_args",
                    "to": "expand"
                },
                {
                    "from": "merge_args",
                    "to": "contract"
                },
                {
                    "from": "merge_args",
                    "to": "get_selected",
                    "as": "target"
                },
                {
                    "from": "selected",
                    "to": "get_selected",
                    "as": "path"
                },
                {
                    "from": "get_selected",
                    "to": "not_clicked"
                },
                {
                    "from": "get_selected",
                    "to": "clicked",
                    "as": "data"
                },
                {
                    "from": "merge_args",
                    "to": "get_node_id",
                    "as": "target"
                },
                {
                    "from": "get_node_id",
                    "to": "is_clicked",
                    "as": "node_id"
                },
                {
                    "from": "get_selected",
                    "to": "is_clicked",
                    "as": "selected_id"
                },
                {
                    "from": "get_node_id",
                    "to": "is_not_clicked",
                    "as": "node_id"
                },
                {
                    "from": "get_selected",
                    "to": "is_not_clicked",
                    "as": "selected_id"
                },
                {
                    "from": "node_id",
                    "to": "get_node_id",
                    "as": "path"
                },
                {
                    "from": "get_node_id",
                    "to": "not_clicked",
                    "as": "node_id"
                },
                {
                    "from": "is_not_clicked",
                    "to": "not_clicked",
                    "as": "keep"
                },
                {
                    "from": "is_clicked",
                    "to": "clicked",
                    "as": "keep"
                },
                {
                    "from": "clicked",
                    "to": "expand_contract",
                    "as": "node_id"
                },
                {
                    "from": "clicked",
                    "to": "expand_contract",
                    "as": "data"
                },
                {
                    "from": "expand_contract",
                    "to": "graph_to_sim",
                    "as": "display_graph"
                },
                {
                    "from": "in",
                    "to": "get_first",
                    "as": "args",
                    "type": "concat"
                },
                {
                    "from": "merge_args",
                    "to": "graph_to_sim"
                },
                {
                    "from": "get_first",
                    "to": "new_state",
                    "as": "input_state"
                },
                {
                    "from": "graph_to_sim",
                    "to": "new_state",
                    "as": "graph_sim"
                },
                {
                    "from": "get_first",
                    "to": "unmodified_graph"
                },
                {
                    "from": "false",
                    "to": "unmodified_graph",
                    "as": "update"
                },
                {
                    "from": "unmodified_graph",
                    "to": "final_graph",
                    "as": "default_value"
                },
                {
                    "from": "new_state",
                    "to": "final_graph",
                    "as": "data",
                    "type": "concat"
                },
                {
                    "from": "empty_array",
                    "to": "select",
                    "as": "array",
                    "type": "concat"
                },
                {
                    "from": "clicked",
                    "to": "select_node",
                    "as": "clicked",
                    "type": "concat"
                },
                {
                    "from": "get_node_id",
                    "to": "select_node",
                    "as": "node_id"
                },
                {
                    "from": "select_node",
                    "to": "select",
                    "as": "item"
                },
                {
                    "from": "select",
                    "to": "new_state",
                    "as": "selected",
                    "type": "concat"
                },
                {
                    "from": "final_graph",
                    "to": "out",
                    "as": "data"
                }
            ]
        },
        {
            "id": "onclick_node_fn",
            "type": "execute_graph"
        },
        {
            "id": "editor_dom_type",
            "value": "div"
        },
        {
            "id": "editor_props",
            "value": {}
        },
        {
            "id": "editor",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "wrapper",
                    "type": "h"
                },
                {
                    "id": "wrapper_dom_type",
                    "value": "div"
                },
                {
                    "id": "wrapper_props",
                    "value": {}
                },
                {
                    "id": "wrapper_children",
                    "args": [
                        "node_editor",
                        "edit_text"
                    ],
                    "script": "return [[node_editor.el, edit_text.el]]"
                },
                {
                    "id": "edit_text",
                    "nodes": [
                        {
                            "id": "in"
                        },
                        {
                            "id": "edit_text",
                            "type": "h"
                        },
                        {
                            "id": "edit_text_dom_type",
                            "value": "div"
                        },
                        {
                            "id": "edit_text_input",
                            "type": "h"
                        },
                        {
                            "id": "edit_text_base_props",
                            "value": {
                                "id": "edit_value"
                            }
                        },
                        {
                            "id": "edit_text_props"
                        },
                        {
                            "id": "edit_text_children",
                            "args": [
                                "label",
                                "input"
                            ],
                            "script": "return [[label.el, input.el]]"
                        },
                        {
                            "id": "edit_text_input_dom_type",
                            "value": "input"
                        },
                        {
                            "id": "edit_text_input_props",
                            "args": [
                                "selected",
                                "display_graph",
                                "editing",
                                "edit_value"
                            ],
                            "script": "const start_value = edit_value ?? (editing ? display_graph.nodes.find(n => n.id === selected[0])[editing] : ''); return {type: 'text', value: typeof(start_value) === 'string' ? start_value : JSON.stringify(start_value), oninput: (s, payload) => ({...s, edit_value: payload.target.value})}"
                        },
                        {
                            "id": "edit_text_label",
                            "type": "h"
                        },
                        {
                            "id": "edit_text_label_dom_type",
                            "value": "p"
                        },
                        {
                            "id": "edit_text_label_text",
                            "type": "h_text"
                        },
                        {
                            "id": "editing",
                            "args": [
                                "editing"
                            ],
                            "script": "return editing || 'none'"
                        },
                        {
                            "id": "out"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "edit_text_input_props"
                        },
                        {
                            "from": "edit_text",
                            "to": "out"
                        },
                        {
                            "from": "edit_text_dom_type",
                            "to": "edit_text",
                            "as": "dom_type"
                        },
                        {
                            "from": "edit_text_base_props",
                            "to": "edit_text_props"
                        },
                        {
                            "from": "edit_text_props",
                            "to": "edit_text",
                            "as": "props"
                        },
                        {
                            "from": "edit_text_children",
                            "to": "edit_text",
                            "as": "children"
                        },
                        {
                            "from": "edit_text_input",
                            "to": "edit_text_children",
                            "as": "input"
                        },
                        {
                            "from": "edit_text_input_props",
                            "to": "edit_text_input",
                            "as": "props"
                        },
                        {
                            "from": "edit_text_input_dom_type",
                            "to": "edit_text_input",
                            "as": "dom_type"
                        },
                        {
                            "from": "edit_text_label",
                            "to": "edit_text_children",
                            "as": "label"
                        },
                        {
                            "from": "edit_text_label_dom_type",
                            "to": "edit_text_label",
                            "as": "dom_type"
                        },
                        {
                            "from": "edit_text_label_text",
                            "to": "edit_text_label",
                            "as": "children"
                        },
                        {
                            "from": "in",
                            "to": "editing"
                        },
                        {
                            "from": "editing",
                            "to": "edit_text_label_text",
                            "as": "text"
                        },
                        {
                            "from": "editing",
                            "to": "edit_text_props",
                            "as": "class"
                        }
                    ]
                },
                {
                    "id": "node_editor",
                    "nodes": [
                        {
                            "id": "in",
                            "value": null
                        },
                        {
                            "id": "log",
                            "type": "log"
                        },
                        {
                            "id": "out",
                            "type": "h"
                        },
                        {
                            "id": "get_nodes",
                            "args": [
                                "nodes"
                            ],
                            "script": "return nodes"
                        },
                        {
                            "id": "get_links",
                            "args": [
                                "links"
                            ],
                            "script": "return links"
                        },
                        {
                            "id": "get_selected",
                            "args": [
                                "selected"
                            ],
                            "script": "return selected"
                        },
                        {
                            "id": "get_onclick_node_fn",
                            "args": [
                                "onclick_node_fn"
                            ],
                            "script": "return onclick_node_fn"
                        },
                        {
                            "id": "node_editor_props",
                            "args": [
                                "onclick_graph_fn"
                            ],
                            "script": "return {width: window.innerWidth, height: window.innerHeight, onmousedown: (_, payload) => [onclick_graph_fn, {x: payload.x, y: payload.y, ty: 'down'}], onmouseup: (_, payload) => [onclick_graph_fn, {x: payload.x, y: payload.y, ty: 'up'}], onmousemove: (_, payload) => [onclick_graph_fn, {x: payload.x, y: payload.y, ty: 'move'}]}"
                        },
                        {
                            "id": "node_editor_dom_type",
                            "value": "svg"
                        },
                        {
                            "id": "node_editor_children",
                            "args": [
                                "nodes",
                                "links",
                                "defs"
                            ],
                            "script": "return [[defs.el].concat(nodes.map(c => c.el)).concat(links.map(l => l.el))]"
                        },
                        {
                            "id": "node_layout",
                            "nodes": [
                                {
                                    "id": "in",
                                    "value": null
                                },
                                {
                                    "id": "get_node",
                                    "args": [
                                        "node"
                                    ],
                                    "script": "return node"
                                },
                                {
                                    "id": "is_selected",
                                    "args": [
                                        "selected",
                                        "node_id"
                                    ],
                                    "script": "return selected.includes(node_id)"
                                },
                                {
                                    "id": "out"
                                },
                                {
                                    "id": "parent",
                                    "type": "h"
                                },
                                {
                                    "id": "parent_dom_type",
                                    "value": "svg"
                                },
                                {
                                    "id": "parent_attrs",
                                    "args": [
                                        "node_id",
                                        "x",
                                        "y",
                                        "onclick_node_fn"
                                    ],
                                    "script": "return ({ x: x - 20, y: y - 20, id: node_id, onclick: (_, payload) => [onclick_node_fn, {x: payload.x, y: payload.y, node_id, selected: [], ty: 'down'}], width: 256, height: 64})"
                                },
                                {
                                    "id": "children",
                                    "nodes": [
                                        {
                                            "id": "in",
                                            "value": null
                                        },
                                        {
                                            "id": "circle_attrs",
                                            "args": [
                                                "selected"
                                            ],
                                            "script": "return ({r: 16, cx: 20, cy: 20, fill: selected ? 'red' : 'blue'})"
                                        },
                                        {
                                            "id": "default_color",
                                            "value": "blue"
                                        },
                                        {
                                            "id": "empty_array",
                                            "value": [
                                                []
                                            ]
                                        },
                                        {
                                            "id": "circle",
                                            "value": "circle"
                                        },
                                        {
                                            "id": "node_circle",
                                            "type": "h"
                                        },
                                        {
                                            "id": "text",
                                            "nodes": [
                                                {
                                                    "id": "in",
                                                    "value": null
                                                },
                                                {
                                                    "id": "out"
                                                },
                                                {
                                                    "id": "node_id",
                                                    "value": "node_id"
                                                },
                                                {
                                                    "id": "node_type",
                                                    "value": "type"
                                                },
                                                {
                                                    "id": "node_name",
                                                    "value": "name"
                                                },
                                                {
                                                    "id": "get_id",
                                                    "type": "get"
                                                },
                                                {
                                                    "id": "get_name",
                                                    "type": "get"
                                                },
                                                {
                                                    "id": "get_type",
                                                    "args": [
                                                        "target"
                                                    ],
                                                    "script": "return target.type ?? (Array.isArray(target.value) ? [target.value] : target.value) ?? (target.value === null ? target.node_id : target.script ? 'script' : target.nodes ? `graph (${target.nodes.length}, ${target.edges.length})` : target.script ? 'script' : 'unknown')"
                                                },
                                                {
                                                    "id": "shorten",
                                                    "args": [
                                                        "text"
                                                    ],
                                                    "script": "return text.substring(text.lastIndexOf('/') + 1)"
                                                },
                                                {
                                                    "id": "node_text",
                                                    "type": "svg_text"
                                                },
                                                {
                                                    "id": "script",
                                                    "value": "script"
                                                },
                                                {
                                                    "id": "node_text_props",
                                                    "value": {
                                                        "x": 42,
                                                        "y": 22,
                                                        "font-size": 18
                                                    }
                                                },
                                                {
                                                    "id": "text",
                                                    "value": "text"
                                                }
                                            ],
                                            "edges": [
                                                {
                                                    "from": "in",
                                                    "to": "get_id",
                                                    "as": "target"
                                                },
                                                {
                                                    "from": "in",
                                                    "to": "get_type",
                                                    "as": "target"
                                                },
                                                {
                                                    "from": "in",
                                                    "to": "get_name",
                                                    "as": "target"
                                                },
                                                {
                                                    "from": "get_id",
                                                    "to": "get_name",
                                                    "as": "default"
                                                },
                                                {
                                                    "from": "node_id",
                                                    "to": "get_id",
                                                    "as": "path"
                                                },
                                                {
                                                    "from": "node_type",
                                                    "to": "get_type",
                                                    "as": "path"
                                                },
                                                {
                                                    "from": "node_name",
                                                    "to": "get_name",
                                                    "as": "path"
                                                },
                                                {
                                                    "from": "script",
                                                    "to": "get_type",
                                                    "as": "default"
                                                },
                                                {
                                                    "from": "get_name",
                                                    "to": "node_text",
                                                    "as": "text"
                                                },
                                                {
                                                    "from": "node_text_props",
                                                    "to": "node_text",
                                                    "as": "props"
                                                },
                                                {
                                                    "from": "node_text",
                                                    "to": "out"
                                                }
                                            ]
                                        },
                                        {
                                            "id": "order",
                                            "args": [
                                                "circle",
                                                "text"
                                            ],
                                            "script": "return [[circle.el, text.el]]"
                                        },
                                        {
                                            "id": "out"
                                        }
                                    ],
                                    "edges": [
                                        {
                                            "from": "in",
                                            "to": "circle_attrs"
                                        },
                                        {
                                            "from": "default_color",
                                            "to": "circle_attrs",
                                            "as": "color"
                                        },
                                        {
                                            "from": "empty_array",
                                            "to": "node_circle",
                                            "as": "children"
                                        },
                                        {
                                            "from": "circle",
                                            "to": "node_circle",
                                            "as": "dom_type"
                                        },
                                        {
                                            "from": "in",
                                            "to": "text"
                                        },
                                        {
                                            "from": "circle_attrs",
                                            "to": "node_circle",
                                            "as": "props"
                                        },
                                        {
                                            "from": "node_circle",
                                            "to": "order",
                                            "as": "circle"
                                        },
                                        {
                                            "from": "text",
                                            "to": "order",
                                            "as": "text"
                                        },
                                        {
                                            "from": "order",
                                            "to": "out",
                                            "as": "children"
                                        }
                                    ]
                                }
                            ],
                            "edges": [
                                {
                                    "from": "in",
                                    "to": "get_node"
                                },
                                {
                                    "from": "in",
                                    "to": "is_selected"
                                },
                                {
                                    "from": "in",
                                    "to": "parent_attrs"
                                },
                                {
                                    "from": "get_node",
                                    "to": "children"
                                },
                                {
                                    "from": "get_node",
                                    "to": "is_selected"
                                },
                                {
                                    "from": "is_selected",
                                    "to": "children",
                                    "as": "selected"
                                },
                                {
                                    "from": "children",
                                    "to": "parent"
                                },
                                {
                                    "from": "parent_attrs",
                                    "to": "parent",
                                    "as": "props"
                                },
                                {
                                    "from": "parent_dom_type",
                                    "to": "parent",
                                    "as": "dom_type"
                                },
                                {
                                    "from": "get_node",
                                    "to": "parent_attrs"
                                },
                                {
                                    "from": "parent",
                                    "to": "out"
                                }
                            ]
                        },
                        {
                            "id": "link_layout",
                            "nodes": [
                                {
                                    "id": "in",
                                    "value": null
                                },
                                {
                                    "id": "get_link",
                                    "args": [
                                        "link"
                                    ],
                                    "script": "return link"
                                },
                                {
                                    "id": "edge_info_el",
                                    "type": "h"
                                },
                                {
                                    "id": "edge_info_el_children",
                                    "args": [
                                        "edge_as",
                                        "edge_type"
                                    ],
                                    "script": "return [[edge_as.el, edge_type.el]]"
                                },
                                {
                                    "id": "edge_info_dom_type",
                                    "value": "svg"
                                },
                                {
                                    "id": "edge_info_props",
                                    "args": [
                                        "source",
                                        "target",
                                        "line_position"
                                    ],
                                    "script": "return ({x: line_position * (target.x - source.x) + source.x + 16, y: line_position * (target.y - source.y) + source.y })"
                                },
                                {
                                    "id": "edge_info_line_position",
                                    "value": 0.5,
                                    "min": 0,
                                    "max": 1,
                                    "step": 0.01
                                },
                                {
                                    "id": "edge_info_type_props",
                                    "value": {
                                        "font-size": 14,
                                        "y": 32
                                    }
                                },
                                {
                                    "id": "edge_info_type_el",
                                    "type": "svg_text"
                                },
                                {
                                    "id": "edge_info_type_text",
                                    "args": [
                                        "link"
                                    ],
                                    "script": "return link.type ?? ''"
                                },
                                {
                                    "id": "edge_info_as_props",
                                    "value": {
                                        "font-size": 14,
                                        "y": 16
                                    }
                                },
                                {
                                    "id": "edge_info_as_el",
                                    "type": "svg_text"
                                },
                                {
                                    "id": "edge_info_as_text",
                                    "args": [
                                        "link"
                                    ],
                                    "script": "return link.as ?? '*'"
                                },
                                {
                                    "id": "lerp_length",
                                    "value": 24
                                },
                                {
                                    "id": "line_lerp",
                                    "args": [
                                        "source",
                                        "target",
                                        "lerp_length"
                                    ],
                                    "script": "const length_x = Math.abs(source.x - target.x); const length_y = Math.abs(source.y - target.y); const length = Math.sqrt(length_x * length_x + length_y * length_y); return {source: {x: source.x + (target.x - source.x) * lerp_length / length, y: source.y + (target.y - source.y) * lerp_length / length}, target: {x: source.x + (target.x - source.x) * (1 - (lerp_length / length)), y: source.y + (target.y - source.y) * (1 - (lerp_length / length))}}"
                                },
                                {
                                    "id": "line_props",
                                    "args": [
                                        "source",
                                        "target"
                                    ],
                                    "script": "return ({x1: Math.floor(source.x), y1: Math.floor(source.y), x2: Math.floor(target.x), y2: Math.floor(target.y), stroke: 'black', 'marker-end': 'url(#arrow)'})"
                                },
                                {
                                    "id": "line_dom_type",
                                    "value": "line"
                                },
                                {
                                    "id": "empty_array",
                                    "value": [
                                        []
                                    ]
                                },
                                {
                                    "id": "line",
                                    "type": "h"
                                },
                                {
                                    "id": "out",
                                    "args": [
                                        "line",
                                        "edge_info"
                                    ],
                                    "script": "return [line, edge_info]"
                                }
                            ],
                            "edges": [
                                {
                                    "from": "in",
                                    "to": "get_link"
                                },
                                {
                                    "from": "get_link",
                                    "to": "line_lerp"
                                },
                                {
                                    "from": "line_lerp",
                                    "to": "line_props"
                                },
                                {
                                    "from": "lerp_length",
                                    "to": "line_lerp",
                                    "as": "lerp_length"
                                },
                                {
                                    "from": "get_link",
                                    "to": "edge_info_props"
                                },
                                {
                                    "from": "in",
                                    "to": "edge_info_as_text"
                                },
                                {
                                    "from": "in",
                                    "to": "edge_info_type_text"
                                },
                                {
                                    "from": "edge_info_dom_type",
                                    "to": "edge_info_el",
                                    "as": "dom_type"
                                },
                                {
                                    "from": "edge_info_props",
                                    "to": "edge_info_el",
                                    "as": "props"
                                },
                                {
                                    "from": "edge_info_line_position",
                                    "to": "edge_info_props",
                                    "as": "line_position"
                                },
                                {
                                    "from": "edge_info_el_children",
                                    "to": "edge_info_el",
                                    "as": "children"
                                },
                                {
                                    "from": "edge_info_el",
                                    "to": "out",
                                    "as": "edge_info"
                                },
                                {
                                    "from": "edge_info_type_props",
                                    "to": "edge_info_type_el",
                                    "as": "props"
                                },
                                {
                                    "from": "edge_info_type_text",
                                    "to": "edge_info_type_el",
                                    "as": "text"
                                },
                                {
                                    "from": "edge_info_type_el",
                                    "to": "edge_info_el_children",
                                    "as": "edge_type"
                                },
                                {
                                    "from": "edge_info_as_props",
                                    "to": "edge_info_as_el",
                                    "as": "props"
                                },
                                {
                                    "from": "edge_info_as_text",
                                    "to": "edge_info_as_el",
                                    "as": "text"
                                },
                                {
                                    "from": "edge_info_as_el",
                                    "to": "edge_info_el_children",
                                    "as": "edge_as"
                                },
                                {
                                    "from": "line_props",
                                    "to": "line",
                                    "as": "props"
                                },
                                {
                                    "from": "line_dom_type",
                                    "to": "line",
                                    "as": "dom_type"
                                },
                                {
                                    "from": "empty_array",
                                    "to": "line",
                                    "as": "children"
                                },
                                {
                                    "from": "empty_array",
                                    "to": "line",
                                    "as": "children"
                                },
                                {
                                    "from": "line",
                                    "to": "out",
                                    "as": "line"
                                }
                            ]
                        },
                        {
                            "id": "line_end",
                            "type": "h"
                        },
                        {
                            "id": "line_end_props",
                            "value": {
                                "id": "arrow",
                                "refX": 8,
                                "refY": 4,
                                "markerWidth": 8,
                                "markerHeight": 8,
                                "markerUnits": "userSpaceOnUse",
                                "orient": "auto"
                            }
                        },
                        {
                            "id": "line_end_children",
                            "args": [
                                "children"
                            ],
                            "script": "return [[children.el]]"
                        },
                        {
                            "id": "arrow_path",
                            "type": "h"
                        },
                        {
                            "id": "arrow_path_props",
                            "value": {
                                "points": "1 1, 8 4, 1 8",
                                "stroke": "#000",
                                "strokeWidth": 2,
                                "fill": "none"
                            }
                        },
                        {
                            "id": "arrow_path_dom_type",
                            "value": "polyline"
                        },
                        {
                            "id": "marker",
                            "value": "marker"
                        },
                        {
                            "id": "defs_children",
                            "args": [
                                "arrow"
                            ],
                            "script": "return [[arrow.el]]"
                        },
                        {
                            "id": "defs",
                            "type": "h"
                        },
                        {
                            "id": "defs_dom_type",
                            "value": "defs"
                        },
                        {
                            "id": "defs_props",
                            "value": {}
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "get_nodes"
                        },
                                {
                                    "from": "in",
                                    "to": "log",
                                    "as": "input"
                                },
                        {
                            "from": "in",
                            "to": "get_links"
                        },
                        {
                            "from": "in",
                            "to": "get_selected"
                        },
                        {
                            "from": "in",
                            "to": "get_onclick_node_fn"
                        },
                        {
                            "from": "get_nodes",
                            "to": "node_layout",
                            "as": "node"
                        },
                        {
                            "from": "get_onclick_node_fn",
                            "to": "node_layout",
                            "as": "onclick_node_fn"
                        },
                        {
                            "from": "get_selected",
                            "to": "node_layout",
                            "as": "selected",
                            "type": "concat"
                        },
                        {
                            "from": "get_links",
                            "to": "link_layout",
                            "as": "link"
                        },
                        {
                            "from": "in",
                            "to": "node_editor_props"
                        },
                        {
                            "from": "node_editor_props",
                            "to": "out",
                            "as": "props"
                        },
                        {
                            "from": "node_editor_dom_type",
                            "to": "out",
                            "as": "dom_type"
                        },
                        {
                            "from": "node_layout",
                            "to": "node_editor_children",
                            "as": "nodes",
                            "type": "concat"
                        },
                        {
                            "from": "link_layout",
                            "to": "node_editor_children",
                            "as": "links",
                            "type": "concat"
                        },
                        {
                            "from": "defs",
                            "to": "node_editor_children",
                            "as": "defs"
                        },
                        {
                            "from": "marker",
                            "to": "line_end",
                            "as": "dom_type"
                        },
                        {
                            "from": "arrow_path_props",
                            "to": "arrow_path",
                            "as": "props"
                        },
                        {
                            "from": "arrow_path_dom_type",
                            "to": "arrow_path",
                            "as": "dom_type"
                        },
                        {
                            "from": "arrow_path",
                            "to": "line_end",
                            "as": "children"
                        },
                        {
                            "from": "line_end_props",
                            "to": "line_end",
                            "as": "props"
                        },
                        {
                            "from": "line_end",
                            "to": "defs_children",
                            "as": "arrow"
                        },
                        {
                            "from": "defs_dom_type",
                            "to": "defs",
                            "as": "dom_type"
                        },
                        {
                            "from": "defs_props",
                            "to": "defs",
                            "as": "props"
                        },
                        {
                            "from": "defs_children",
                            "to": "defs",
                            "as": "children"
                        },
                        {
                            "from": "node_editor_children",
                            "to": "out",
                            "as": "children"
                        }
                    ]
                },
                {
                    "id": "out"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "node_editor"
                },
                {
                    "from": "in",
                    "to": "edit_text"
                },
                {
                    "from": "node_editor",
                    "to": "wrapper_children",
                    "as": "node_editor"
                },
                {
                    "from": "edit_text",
                    "to": "wrapper_children",
                    "as": "edit_text"
                },
                {
                    "from": "wrapper_children",
                    "to": "wrapper",
                    "as": "children"
                },
                {
                    "from": "wrapper_dom_type",
                    "to": "wrapper",
                    "as": "dom_type"
                },
                {
                    "from": "wrapper_props",
                    "to": "wrapper",
                    "as": "props"
                },
                {
                    "from": "wrapper",
                    "to": "out"
                }
            ]
        }
    ],
    "edges": [
        {
            "from": "in",
            "to": "get_graph",
            "as": "target"
        },
        {
            "from": "in",
            "to": "get_display_graph",
            "as": "target"
        },
        {
            "from": "in",
            "to": "get_display_graph_out",
            "as": "target"
        },
        {
            "from": "graph",
            "to": "get_graph",
            "as": "path"
        },
        {
            "from": "display_graph",
            "to": "get_display_graph",
            "as": "path"
        },
        {
            "from": "display_graph_out",
            "to": "get_display_graph_out",
            "as": "path"
        },
        {
            "from": "hyperapp_view_in",
            "to": "hyperapp_view",
            "as": "in_node"
        },
        {
            "from": "editor",
            "to": "hyperapp_view",
            "type": "ref",
            "as": "out_node"
        },
        {
            "from": "get_graph",
            "to": "update_sim_fn",
            "as": "graph"
        },
        {
            "from": "get_display_graph_out",
            "to": "hyperapp_init_state",
            "as": "selected",
            "type": "concat"
        },
        {
            "from": "update_sim_effect",
            "to": "hyperapp_init_state",
            "as": "update_sim_effect"
        },
        {
            "from": "hyperapp_view_in",
            "to": "onclick_node_fn"
        },
        {
            "from": "onclick_node_fn",
            "to": "editor",
            "as": "onclick_node_fn"
        },
        {
            "from": "onclick_node_fn_body",
            "to": "onclick_node_fn",
            "as": "out_node",
            "type": "ref"
        },
        {
            "from": "onclick_node_fn_in",
            "to": "onclick_node_fn_body"
        },
        {
            "from": "onclick_node_fn_in",
            "to": "onclick_node_fn",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "hyperapp_view_in",
            "to": "onclick_graph_fn"
        },
        {
            "from": "onclick_graph_fn",
            "to": "editor",
            "as": "onclick_graph_fn"
        },
        {
            "from": "onclick_graph_fn_body",
            "to": "onclick_graph_fn",
            "as": "out_node",
            "type": "ref"
        },
        {
            "from": "onclick_graph_fn_in",
            "to": "onclick_graph_fn_body"
        },
        {
            "from": "onclick_graph_fn_in",
            "to": "onclick_graph_fn",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "get_graph",
            "to": "onkey_fn",
            "as": "graph"
        },
        {
            "from": "onkey_fn",
            "to": "hyperapp_subscriptions",
            "as": "onkey_fn"
        },
        {
            "from": "onkey_fn_in",
            "to": "onkey_fn_body"
        },
        {
            "from": "onkey_fn_body",
            "to": "onkey_fn",
            "as": "out_node",
            "type": "ref"
        },
        {
            "from": "onkey_fn_in",
            "to": "onkey_fn",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "hyperapp_view",
            "to": "hyperapp_app",
            "as": "view"
        },
        {
            "from": "hyperapp_init_state",
            "to": "hyperapp_app",
            "as": "init"
        },
        {
            "from": "get_graph",
            "to": "hyperapp_view",
            "as": "graph"
        },
        {
            "from": "get_graph",
            "to": "hyperapp_init_state",
            "as": "graph"
        },
        {
            "from": "hyperapp_view_in",
            "to": "editor"
        },
        {
            "from": "get_graph",
            "to": "update_nodes",
            "as": "graph"
        },
        {
            "from": "get_display_graph",
            "to": "update_nodes",
            "as": "display_graph"
        },
        {
            "from": "get_display_graph",
            "to": "hyperapp_init_state",
            "as": "display_graph"
        },
        {
            "from": "in",
            "to": "update_nodes",
            "order": -1
        },
        {
            "from": "initial_state",
            "to": "update_nodes",
            "order": -1
        },
        {
            "from": "initial_state",
            "to": "graph_to_simulation",
            "order": -1
        },
        {
            "from": "get_display_graph",
            "to": "graph_to_simulation",
            "as": "display_graph"
        },
        {
            "from": "d3simulation",
            "to": "hyperapp_init_state"
        },
        {
            "from": "d3simulation",
            "to": "update_nodes"
        },
        {
            "from": "initial_state",
            "to": "hyperapp_init_state"
        },
        {
            "from": "in",
            "to": "hyperapp_init_state",
            "order": -1
        },
        {
            "from": "graph_to_simulation",
            "to": "hyperapp_init_state"
        },
        {
            "from": "hyperapp_init_state",
            "to": "update_nodes"
        },
        {
            "from": "update_nodes",
            "to": "hyperapp_app"
        },
        {
            "from": "d3simulation",
            "to": "hyperapp_subscriptions"
        },
        {
            "from": "hyperapp_subscriptions",
            "to": "hyperapp_app",
            "as": "subscriptions"
        },
        {
            "from": "update_sim_in",
            "to": "update_sim"
        },
        {
            "from": "update_sim_in",
            "to": "update_sim_fn",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "update_sim",
            "to": "update_sim_fn",
            "as": "out_node",
            "type": "ref"
        },
        {
            "from": "update_sim_fn",
            "to": "update_sim_effect",
            "as": "fn"
        }
    ]
}