{
    "description": "function composition",
    "nodes": [
        {
            "id": "in",
            "value": null
        },
        {
            "id": "hyperapp",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "init",
                        "view",
                        "subscriptions"
                    ],
                    "script": "return lib.ha.app({init, view: s => view(s)[0].el, node: document.getElementById('node-editor'), subscriptions: () => subscriptions})"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "children_els",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "children"
                    ],
                    "script": "return [children.map(c => c.el)]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "append",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "item",
                        "array"
                    ],
                    "script": "return [array.concat(Array.isArray(item) ? item : [item])]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "filter",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "keep",
                        "data"
                    ],
                    "script": "return keep ? [data] : []"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "order": 1
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "data",
                    "order": 0
                }
            ]
        },
        {
            "id": "delete",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "path"
                    ],
                    "script": "const new_data = Object.assign({}, data); delete new_data[path]; return new_data;"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "order": 1
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "data",
                    "order": 0
                }
            ]
        },
        {
            "id": "default",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "default_value"
                    ],
                    "script": "console.log(default_value); return data.length > 0 ? data : default_value"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                },
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "svg_text",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "el",
                    "type": "h"
                },
                {
                    "id": "dom_type",
                    "value": "text"
                },
                {
                    "id": "text_el",
                    "type": "h_text"
                },
                {
                    "id": "children",
                    "args": [
                        "text"
                    ],
                    "script": "return [[text.el]]"
                },
                {
                    "id": "out"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "text_el"
                },
                {
                    "from": "in",
                    "to": "el"
                },
                {
                    "from": "dom_type",
                    "to": "el",
                    "as": "dom_type"
                },
                {
                    "from": "text_el",
                    "to": "children",
                    "as": "text"
                },
                {
                    "from": "children",
                    "to": "el",
                    "as": "children"
                },
                {
                    "from": "el",
                    "to": "out"
                }
            ]
        },
        {
            "id": "execute_graph",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "args": [
                        "in_node",
                        "out_node",
                        "graph"
                    ],
                    "script": "return (...args) => (lib.no.executeGraph({state: new Map([[in_node, args]]), graph: {nodes: (args[0].graph ?? graph).nodes.concat([]), edges: (args[0].graph ?? graph).edges.concat([])}, out: out_node }))"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "wrap_effect_fn",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "args": [
                        "fn"
                    ],
                    "script": "return [[(_, payload) => fn(payload)]]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "get",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "fill_default",
                    "args": [
                        "input"
                    ],
                    "script": "return input.default ?? null"
                },
                {
                    "id": "out",
                    "args": [
                        "target",
                        "path",
                        "def"
                    ],
                    "script": "return [lib._.get(target, path)] ?? [def]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                },
                {
                    "from": "in",
                    "to": "fill_default",
                    "as": "input"
                },
                {
                    "from": "fill_default",
                    "to": "out",
                    "as": "def"
                }
            ]
        },
        {
            "id": "h",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "fill_children",
                    "args": [
                        "input"
                    ],
                    "script": "return [ input.children === undefined ? [] : Array.isArray(input.children) ? input.children[0]?.el ? input.children.map(c => c.el) : input.children : [input.children]]"
                },
                {
                    "id": "fill_props",
                    "args": [
                        "input"
                    ],
                    "script": "return input.props ?? {}"
                },
                {
                    "id": "out",
                    "args": [
                        "props",
                        "children",
                        "dom_type"
                    ],
                    "script": "return {el: lib.ha.h(dom_type, props, children)}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "fill_children",
                    "as": "input"
                },
                {
                    "from": "in",
                    "to": "fill_props",
                    "as": "input"
                },
                {
                    "from": "fill_children",
                    "to": "out",
                    "as": "children"
                },
                {
                    "from": "fill_props",
                    "to": "out",
                    "as": "props"
                },
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "h_text",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "args": [
                        "text"
                    ],
                    "script": "return {el: lib.ha.text(text)}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "not",
            "args": [
                "target"
            ],
            "script": "return !target"
        },
        {
            "id": "log",
            "type": "log"
        },
        {
            "id": "debug",
            "type": "debug"
        },
        {
            "id": "data",
            "value": "data"
        },
        {
            "id": "graph",
            "value": "graph"
        },
        {
            "id": "display_graph",
            "value": "display_graph"
        },
        {
            "id": "nodes",
            "value": "nodes"
        },
        {
            "id": "graph_nodes",
            "value": [
                [
                    "graph",
                    "nodes"
                ]
            ]
        },
        {
            "id": "initial_state",
            "value": {
                "nodes": [],
                "links": [],
                "selected": []
            }
        },
        {
            "id": "get_graph",
            "type": "get"
        },
        {
            "id": "get_display_graph",
            "type": "get"
        },
        {
            "id": "hyperapp_view",
            "type": "execute_graph"
        },
        {
            "id": "hyperapp_app",
            "type": "hyperapp"
        },
        {
            "id": "hyperapp_view_in",
            "value": "hyperapp_view_in"
        },
        {
            "id": "hyperapp_subscriptions",
            "args": [
                "simulation",
                "onkey_fn"
            ],
            "script": "return [[[lib.scripts.d3subscription(simulation)], [lib.scripts.keydownSubscription, {action: onkey_fn}]]]"
        },
        {
            "id": "graph_to_simulation",
            "args": [
                "nodes",
                "graph",
                "display_graph",
                "links",
                "selected",
                "simulation",
                "display_graph_out",
                "update_sim_effect"
            ],
            "script": "return lib.scripts.graphToSimulationNodes({graph, display_graph, nodes, links, selected: [display_graph_out], simulation, display_graph_out, update_sim_effect})"
        },
        {
            "id": "update_nodes_in"
        },
        {
            "id": "update_nodes",
            "args": [
                "simulation",
                "nodes",
                "display_graph",
                "links",
                "display_graph_out",
                "selected"
            ],
            "script": "return lib.scripts.updateSimulationNodes({display_graph, simulation, nodes, links, display_graph_out, selected})"
        },
        {
            "id": "update_nodes_fn",
            "type": "execute_graph"
        },
        {
            "id": "d3simulation",
            "args": [],
            "script": "return lib.scripts.d3simulation()"
        },
        {
            "id": "onkey_fn_in",
            "value": null
        },
        {
            "id": "onkey_fn",
            "type": "execute_graph"
        },
        {
            "id": "onkey_fn_body",
            "nodes": [
                {
                    "id": "merge_args",
                    "args": [
                        "args"
                    ],
                    "script": "return Object.assign({}, args[0], {key: args[1].key, code: args[1].code})"
                },
                {
                    "id": "find_selected"
                },
                {
                    "id": "out",
                    "args": [
                        "data"
                    ],
                    "script": "return [[data, [(_, payload) => { try { lib.no.executeGraph(payload)} catch(e) { console.error(e) }}, {state: new Map([['in', {}]]), graph: data.display_graph, out: data.display_graph_out}]]]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "merge_args",
                    "as": "args",
                    "type": "concat"
                },
                {
                    "from": "merge_args",
                    "to": "find_selected",
                    "as": "data"
                },
                {
                    "from": "find_selected",
                    "to": "out"
                }
            ]
        },
        {
            "id": "update_sim",
            "args": [
                "display_graph",
                "nodes",
                "links",
                "simulation",
                "display_graph_out",
                "selected"
            ],
            "script": "return lib.scripts.updateSimulationNodes({display_graph, nodes, links, simulation, display_graph_out, selected})"
        },
        {
            "id": "update_sim_in"
        },
        {
            "id": "update_sim_fn",
            "type": "execute_graph"
        },
        {
            "id": "update_sim_effect",
            "type": "wrap_effect_fn"
        },
        {
            "id": "onclick_fn_in",
            "value": null
        },
        {
            "id": "onclick_fn_body",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "get_first",
                    "args": [
                        "args"
                    ],
                    "script": "return args[0]"
                },
                {
                    "id": "merge_args",
                    "args": [
                        "args"
                    ],
                    "script": "return Object.assign({}, args[0], {x: args[1].x, y: args[1].y, node_id: args[1].node_id})"
                },
                {
                    "id": "merge_args_no_display_graph",
                    "type": "delete"
                },
                {
                    "id": "select",
                    "type": "append"
                },
                {
                    "id": "display_graph",
                    "value": "display_graph"
                },
                {
                    "id": "false",
                    "value": false
                },
                {
                    "id": "empty_array",
                    "value": []
                },
                {
                    "id": "select_node",
                    "args": [
                        "clicked",
                        "node_id"
                    ],
                    "script": "return clicked.length > 0 ? [] : node_id"
                },
                {
                    "id": "selected",
                    "value": "selected"
                },
                {
                    "id": "get_selected",
                    "type": "get"
                },
                {
                    "id": "node_id",
                    "value": "node_id"
                },
                {
                    "id": "get_node_id",
                    "type": "get"
                },
                {
                    "id": "is_not_clicked",
                    "args": [
                        "node_id",
                        "selected_id"
                    ],
                    "script": "return selected_id !== node_id"
                },
                {
                    "id": "is_clicked",
                    "args": [
                        "node_id",
                        "selected_id"
                    ],
                    "script": "return selected_id === node_id"
                },
                {
                    "id": "not_clicked",
                    "type": "filter"
                },
                {
                    "id": "clicked",
                    "type": "filter"
                },
                {
                    "id": "select_clicked",
                    "type": "default"
                },
                {
                    "id": "has_nodes",
                    "args": [
                        "node_id",
                        "display_graph"
                    ],
                    "script": "return !!display_graph.nodes.find(n => n.id === node_id).nodes"
                },
                {
                    "id": "is_in_or_out",
                    "args": [
                        "node_id"
                    ],
                    "script": "return node_id.endsWith('/in') || node_id.endsWith('/out')"
                },
                {
                    "id": "expandable",
                    "type": "filter"
                },
                {
                    "id": "contractable",
                    "type": "filter"
                },
                {
                    "id": "expand",
                    "args": [
                        "node_id",
                        "display_graph"
                    ],
                    "script": "return lib.scripts.expand_node({display_graph, node_id})"
                },
                {
                    "id": "contract",
                    "args": [
                        "node_id",
                        "display_graph"
                    ],
                    "script": "return lib.scripts.contract_node({display_graph, node_id})"
                },
                {
                    "id": "graph_to_sim",
                    "args": [
                        "display_graph",
                        "nodes",
                        "links",
                        "simulation",
                        "display_graph_out",
                        "graph",
                        "update_sim_effect",
                        "selected"
                    ],
                    "script": "return lib.scripts.graphToSimulationNodes({display_graph, nodes, links, simulation, display_graph_out, graph, update_sim_effect, selected})"
                },
                {
                    "id": "unmodified_graph"
                },
                {
                    "id": "final_graph",
                    "type": "default"
                },
                {
                    "id": "out",
                    "args": [
                        "update_sim_effect",
                        "display_graph",
                        "graph",
                        "nodes",
                        "links",
                        "selected",
                        "simulation",
                        "display_graph_out"
                    ],
                    "script": "const new_state = {display_graph, graph, nodes, links, selected, simulation, display_graph_out, update_sim_effect}; return [[new_state, ...([[update_sim_effect, new_state]])]]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "merge_args",
                    "as": "args",
                    "type": "concat"
                },
                {
                    "from": "merge_args",
                    "to": "expand"
                },
                {
                    "from": "merge_args",
                    "to": "contract"
                },
                {
                    "from": "merge_args",
                    "to": "get_selected",
                    "as": "target"
                },
                {
                    "from": "selected",
                    "to": "get_selected",
                    "as": "path"
                },
                {
                    "from": "get_selected",
                    "to": "not_clicked"
                },
                {
                    "from": "get_selected",
                    "to": "clicked",
                    "as": "data"
                },
                {
                    "from": "merge_args",
                    "to": "get_node_id",
                    "as": "target"
                },
                {
                    "from": "get_node_id",
                    "to": "is_clicked",
                    "as": "node_id"
                },
                {
                    "from": "get_selected",
                    "to": "is_clicked",
                    "as": "selected_id"
                },
                {
                    "from": "get_node_id",
                    "to": "is_not_clicked",
                    "as": "node_id"
                },
                {
                    "from": "get_selected",
                    "to": "is_not_clicked",
                    "as": "selected_id"
                },
                {
                    "from": "node_id",
                    "to": "get_node_id",
                    "as": "path"
                },
                {
                    "from": "get_node_id",
                    "to": "not_clicked",
                    "as": "node_id"
                },
                {
                    "from": "is_not_clicked",
                    "to": "not_clicked",
                    "as": "keep"
                },
                {
                    "from": "is_clicked",
                    "to": "clicked",
                    "as": "keep"
                },
                {
                    "from": "clicked",
                    "to": "has_nodes",
                    "as": "node"
                },
                {
                    "from": "clicked",
                    "to": "is_in_or_out",
                    "as": "node_id"
                },
                {
                    "from": "clicked",
                    "to": "expandable",
                    "as": "node_id"
                },
                {
                    "from": "clicked",
                    "to": "contractable"
                },
                {
                    "from": "merge_args",
                    "to": "has_nodes"
                },
                {
                    "from": "has_nodes",
                    "to": "expandable",
                    "as": "keep"
                },
                {
                    "from": "is_in_or_out",
                    "to": "contractable",
                    "as": "keep"
                },
                {
                    "from": "expandable",
                    "to": "expand"
                },
                {
                    "from": "contractable",
                    "to": "contract"
                },
                {
                    "from": "in",
                    "to": "get_first",
                    "as": "args",
                    "type": "concat"
                },
                {
                    "from": "merge_args",
                    "to": "graph_to_sim"
                },
                {
                    "from": "expand",
                    "to": "graph_to_sim",
                    "as": "display_graph"
                },
                {
                    "from": "contract",
                    "to": "graph_to_sim",
                    "as": "display_graph"
                },
                {
                    "from": "get_first",
                    "to": "unmodified_graph"
                },
                {
                    "from": "false",
                    "to": "unmodified_graph",
                    "as": "update"
                },
                {
                    "from": "unmodified_graph",
                    "to": "final_graph",
                    "as": "default_value"
                },
                {
                    "from": "graph_to_sim",
                    "to": "final_graph",
                    "as": "data",
                    "type": "concat"
                },
                {
                    "from": "empty_array",
                    "to": "select",
                    "as": "array",
                    "type": "concat"
                },
                {
                    "from": "clicked",
                    "to": "select_node",
                    "as": "clicked",
                    "type": "concat"
                },
                {
                    "from": "get_node_id",
                    "to": "select_node",
                    "as": "node_id"
                },
                {
                    "from": "select_node",
                    "to": "select",
                    "as": "item"
                },
                {
                    "from": "select",
                    "to": "graph_to_sim",
                    "as": "selected",
                    "type": "concat"
                },
                {
                    "from": "select",
                    "to": "out",
                    "as": "selected",
                    "type": "concat"
                },
                {
                    "from": "final_graph",
                    "to": "out"
                }
            ]
        },
        {
            "id": "onclick_fn",
            "type": "execute_graph"
        },
        {
            "id": "node_editor",
            "nodes": [
                {
                    "id": "in",
                    "value": null
                },
                {
                    "id": "out",
                    "type": "h"
                },
                {
                    "id": "get_nodes",
                    "args": [
                        "nodes"
                    ],
                    "script": "return nodes"
                },
                {
                    "id": "get_links",
                    "args": [
                        "links"
                    ],
                    "script": "return links"
                },
                {
                    "id": "get_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected"
                },
                {
                    "id": "get_onclick_fn",
                    "args": [
                        "onclick_fn"
                    ],
                    "script": "return onclick_fn"
                },
                {
                    "id": "node_editor_props",
                    "args": [],
                    "script": "return {width: window.innerWidth, height: window.innerHeight}"
                },
                {
                    "id": "node_editor_dom_type",
                    "value": "svg"
                },
                {
                    "id": "node_editor_children",
                    "args": [
                        "nodes",
                        "links",
                        "defs"
                    ],
                    "script": "return [[defs.el].concat(nodes.map(c => c.el)).concat(links.map(l => l.el))]"
                },
                {
                    "id": "node_layout",
                    "nodes": [
                        {
                            "id": "in",
                            "value": null
                        },
                        {
                            "id": "get_node",
                            "args": [
                                "node"
                            ],
                            "script": "return node"
                        },
                        {
                            "id": "is_selected",
                            "args": [
                                "selected",
                                "node_id"
                            ],
                            "script": "return selected.includes(node_id)"
                        },
                        {
                            "id": "out"
                        },
                        {
                            "id": "parent",
                            "type": "h"
                        },
                        {
                            "id": "parent_dom_type",
                            "value": "svg"
                        },
                        {
                            "id": "parent_attrs",
                            "args": [
                                "node_id",
                                "x",
                                "y",
                                "onclick_fn"
                            ],
                            "script": "return ({ x: x - 20, y: y - 20, id: node_id, onclick: (_, payload) => [onclick_fn, {x: payload.x, y: payload.y, node_id, selected: []}], width: 256, height: 64})"
                        },
                        {
                            "id": "children",
                            "nodes": [
                                {
                                    "id": "in",
                                    "value": null
                                },
                                {
                                    "id": "circle_attrs",
                                    "args": [
                                        "selected"
                                    ],
                                    "script": "return ({r: 16, cx: 20, cy: 20, fill: selected ? 'red' : 'blue'})"
                                },
                                {
                                    "id": "default_color",
                                    "value": "blue"
                                },
                                {
                                    "id": "empty_array",
                                    "value": [
                                        []
                                    ]
                                },
                                {
                                    "id": "circle",
                                    "value": "circle"
                                },
                                {
                                    "id": "node_circle",
                                    "type": "h"
                                },
                                {
                                    "id": "text",
                                    "nodes": [
                                        {
                                            "id": "in",
                                            "value": null
                                        },
                                        {
                                            "id": "out"
                                        },
                                        {
                                            "id": "node_id",
                                            "value": "node_id"
                                        },
                                        {
                                            "id": "node_type",
                                            "value": "type"
                                        },
                                        {
                                            "id": "get_id",
                                            "type": "get"
                                        },
                                        {
                                            "id": "get_type",
                                            "args": [
                                                "target"
                                            ],
                                            "script": "return target.type ?? (Array.isArray(target.value) ? [target.value] : target.value) ?? (target.value === null ? target.node_id : target.script ? 'script' : target.nodes ? `graph (${target.nodes.length}, ${target.edges.length})` : target.script ? 'script' : 'unknown')"
                                        },
                                        {
                                            "id": "shorten",
                                            "args": [
                                                "text"
                                            ],
                                            "script": "return text.substring(text.lastIndexOf('/') + 1)"
                                        },
                                        {
                                            "id": "node_text",
                                            "type": "svg_text"
                                        },
                                        {
                                            "id": "script",
                                            "value": "script"
                                        },
                                        {
                                            "id": "node_text_props",
                                            "value": {
                                                "x": 42,
                                                "y": 22,
                                                "font-size": 18
                                            }
                                        },
                                        {
                                            "id": "text",
                                            "value": "text"
                                        }
                                    ],
                                    "edges": [
                                        {
                                            "from": "in",
                                            "to": "get_id",
                                            "as": "target"
                                        },
                                        {
                                            "from": "in",
                                            "to": "get_type",
                                            "as": "target"
                                        },
                                        {
                                            "from": "node_id",
                                            "to": "get_id",
                                            "as": "path"
                                        },
                                        {
                                            "from": "node_type",
                                            "to": "get_type",
                                            "as": "path"
                                        },
                                        {
                                            "from": "script",
                                            "to": "get_type",
                                            "as": "default"
                                        },
                                        {
                                            "from": "get_id",
                                            "to": "node_text",
                                            "as": "text"
                                        },
                                        {
                                            "from": "node_text_props",
                                            "to": "node_text",
                                            "as": "props"
                                        },
                                        {
                                            "from": "node_text",
                                            "to": "out"
                                        }
                                    ]
                                },
                                {
                                    "id": "order",
                                    "args": [
                                        "circle",
                                        "text"
                                    ],
                                    "script": "return [[circle.el, text.el]]"
                                },
                                {
                                    "id": "out"
                                }
                            ],
                            "edges": [
                                {
                                    "from": "in",
                                    "to": "circle_attrs"
                                },
                                {
                                    "from": "default_color",
                                    "to": "circle_attrs",
                                    "as": "color"
                                },
                                {
                                    "from": "empty_array",
                                    "to": "node_circle",
                                    "as": "children"
                                },
                                {
                                    "from": "circle",
                                    "to": "node_circle",
                                    "as": "dom_type"
                                },
                                {
                                    "from": "in",
                                    "to": "text"
                                },
                                {
                                    "from": "circle_attrs",
                                    "to": "node_circle",
                                    "as": "props"
                                },
                                {
                                    "from": "node_circle",
                                    "to": "order",
                                    "as": "circle"
                                },
                                {
                                    "from": "text",
                                    "to": "order",
                                    "as": "text"
                                },
                                {
                                    "from": "order",
                                    "to": "out",
                                    "as": "children"
                                }
                            ]
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "get_node"
                        },
                        {
                            "from": "in",
                            "to": "is_selected"
                        },
                        {
                            "from": "in",
                            "to": "parent_attrs"
                        },
                        {
                            "from": "get_node",
                            "to": "children"
                        },
                        {
                            "from": "get_node",
                            "to": "is_selected"
                        },
                        {
                            "from": "is_selected",
                            "to": "children",
                            "as": "selected"
                        },
                        {
                            "from": "children",
                            "to": "parent"
                        },
                        {
                            "from": "parent_attrs",
                            "to": "parent",
                            "as": "props"
                        },
                        {
                            "from": "parent_dom_type",
                            "to": "parent",
                            "as": "dom_type"
                        },
                        {
                            "from": "get_node",
                            "to": "parent_attrs"
                        },
                        {
                            "from": "parent",
                            "to": "out"
                        }
                    ]
                },
                {
                    "id": "link_layout",
                    "nodes": [
                        {
                            "id": "in",
                            "value": null
                        },
                        {
                            "id": "get_link",
                            "args": [
                                "link"
                            ],
                            "script": "return link"
                        },
                        {
                            "id": "edge_info_el",
                            "type": "h"
                        },
                        {
                            "id": "edge_info_el_children",
                            "args": [
                                "edge_as",
                                "edge_type"
                            ],
                            "script": "return [[edge_as.el, edge_type.el]]"
                        },
                        {
                            "id": "edge_info_dom_type",
                            "value": "svg"
                        },
                        {
                            "id": "edge_info_props",
                            "args": [
                                "source",
                                "target",
                                "line_position"
                            ],
                            "script": "return ({x: line_position * (target.x - source.x) + source.x + 32, y: line_position * (target.y - source.y) + source.y })"
                        },
                        {
                            "id": "edge_info_line_position",
                            "value": 0.5,
                            "min": 0,
                            "max": 1,
                            "step": 0.01
                        },
                        {
                            "id": "edge_info_type_props",
                            "value": {
                                "font-size": 14,
                                "y": 32
                            }
                        },
                        {
                            "id": "edge_info_type_el",
                            "type": "svg_text"
                        },
                        {
                            "id": "edge_info_type_text",
                            "args": [
                                "link"
                            ],
                            "script": "return link.type ?? ''"
                        },
                        {
                            "id": "edge_info_as_props",
                            "value": {
                                "font-size": 14,
                                "y": 16
                            }
                        },
                        {
                            "id": "edge_info_as_el",
                            "type": "svg_text"
                        },
                        {
                            "id": "edge_info_as_text",
                            "args": [
                                "link"
                            ],
                            "script": "return link.as ?? '*'"
                        },
                        {
                            "id": "lerp_length",
                            "value": 24
                        },
                        {
                            "id": "line_lerp",
                            "args": ["source", "target", "lerp_length"],
                            "script": "const length_x = Math.abs(source.x - target.x); const length_y = Math.abs(source.y - target.y); const length = Math.sqrt(length_x * length_x + length_y * length_y); return {source: {x: source.x + (target.x - source.x) * lerp_length / length, y: source.y + (target.y - source.y) * lerp_length / length}, target: {x: source.x + (target.x - source.x) * (1 - (lerp_length / length)), y: source.y + (target.y - source.y) * (1 - (lerp_length / length))}}"
                        },
                        {
                            "id": "line_props",
                            "args": [
                                "source",
                                "target"
                            ],
                            "script": "return ({x1: Math.floor(source.x), y1: Math.floor(source.y), x2: Math.floor(target.x), y2: Math.floor(target.y), stroke: 'black', 'marker-end': 'url(#arrow)'})"
                        },
                        {
                            "id": "line_dom_type",
                            "value": "line"
                        },
                        {
                            "id": "empty_array",
                            "value": [
                                []
                            ]
                        },
                        {
                            "id": "line",
                            "type": "h"
                        },
                        {
                            "id": "out",
                            "args": [
                                "line",
                                "edge_info"
                            ],
                            "script": "return [line, edge_info]"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "get_link"
                        },
                        {
                            "from": "get_link",
                            "to": "line_lerp"
                        },
                        {
                            "from": "line_lerp",
                            "to": "line_props"
                        },
                        {
                            "from": "lerp_length",
                            "to": "line_lerp",
                            "as": "lerp_length"
                        },
                        {
                            "from": "get_link",
                            "to": "edge_info_props"
                        },
                        {
                            "from": "in",
                            "to": "edge_info_as_text"
                        },
                        {
                            "from": "in",
                            "to": "edge_info_type_text"
                        },
                        {
                            "from": "edge_info_dom_type",
                            "to": "edge_info_el",
                            "as": "dom_type"
                        },
                        {
                            "from": "edge_info_props",
                            "to": "edge_info_el",
                            "as": "props"
                        },
                        {
                            "from": "edge_info_line_position",
                            "to": "edge_info_props",
                            "as": "line_position"
                        },
                        {
                            "from": "edge_info_el_children",
                            "to": "edge_info_el",
                            "as": "children"
                        },
                        {
                            "from": "edge_info_el",
                            "to": "out",
                            "as": "edge_info"
                        },
                        {
                            "from": "edge_info_type_props",
                            "to": "edge_info_type_el",
                            "as": "props"
                        },
                        {
                            "from": "edge_info_type_text",
                            "to": "edge_info_type_el",
                            "as": "text"
                        },
                        {
                            "from": "edge_info_type_el",
                            "to": "edge_info_el_children",
                            "as": "edge_type"
                        },
                        {
                            "from": "edge_info_as_props",
                            "to": "edge_info_as_el",
                            "as": "props"
                        },
                        {
                            "from": "edge_info_as_text",
                            "to": "edge_info_as_el",
                            "as": "text"
                        },
                        {
                            "from": "edge_info_as_el",
                            "to": "edge_info_el_children",
                            "as": "edge_as"
                        },
                        {
                            "from": "line_props",
                            "to": "line",
                            "as": "props"
                        },
                        {
                            "from": "line_dom_type",
                            "to": "line",
                            "as": "dom_type"
                        },
                        {
                            "from": "empty_array",
                            "to": "line",
                            "as": "children"
                        },
                        {
                            "from": "empty_array",
                            "to": "line",
                            "as": "children"
                        },
                        {
                            "from": "line",
                            "to": "out",
                            "as": "line"
                        }
                    ]
                },
                {
                    "id": "line_end",
                    "type": "h"
                },
                {
                    "id": "line_end_props",
                    "value": {
                        "id": "arrow",
                        "refX": 8,
                        "refY": 4,
                        "markerWidth": 8,
                        "markerHeight": 8,
                        "markerUnits": "userSpaceOnUse",
                        "orient": "auto"
                    }
                },
                {
                    "id": "arrow_path",
                    "type": "h"
                },
                {
                    "id": "arrow_path_props",
                    "value": {
                        "points": "1 1, 8 4, 1 8",
                        "stroke": "#000",
                        "strokeWidth": 2,
                        "fill": "none"
                    }
                },
                {
                    "id": "arrow_path_dom_type",
                    "value": "polyline"
                },
                {
                    "id": "marker",
                    "value": "marker"
                },
                {
                    "id": "defs_children",
                    "args": [
                        "arrow"
                    ],
                    "script": "return [[arrow]]"
                },
                {
                    "id": "defs",
                    "type": "h"
                },
                {
                    "id": "defs_dom_type",
                    "value": "defs"
                },
                {
                    "id": "defs_props",
                    "value": {}
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "get_nodes"
                },
                {
                    "from": "in",
                    "to": "get_links"
                },
                {
                    "from": "in",
                    "to": "get_selected"
                },
                {
                    "from": "in",
                    "to": "get_onclick_fn"
                },
                {
                    "from": "get_nodes",
                    "to": "node_layout",
                    "as": "node"
                },
                {
                    "from": "get_onclick_fn",
                    "to": "node_layout",
                    "as": "onclick_fn"
                },
                {
                    "from": "get_selected",
                    "to": "node_layout",
                    "as": "selected",
                    "type": "concat"
                },
                {
                    "from": "get_links",
                    "to": "link_layout",
                    "as": "link"
                },
                {
                    "from": "node_editor_props",
                    "to": "out",
                    "as": "props"
                },
                {
                    "from": "node_editor_dom_type",
                    "to": "out",
                    "as": "dom_type"
                },
                {
                    "from": "node_layout",
                    "to": "node_editor_children",
                    "as": "nodes",
                    "type": "concat"
                },
                {
                    "from": "link_layout",
                    "to": "node_editor_children",
                    "as": "links",
                    "type": "concat"
                },
                {
                    "from": "defs",
                    "to": "node_editor_children",
                    "as": "defs"
                },
                {
                    "from": "marker",
                    "to": "line_end",
                    "as": "dom_type"
                },
                {
                    "from": "arrow_path_props",
                    "to": "arrow_path",
                    "as": "props"
                },
                {
                    "from": "arrow_path_dom_type",
                    "to": "arrow_path",
                    "as": "dom_type"
                },
                {
                    "from": "arrow_path",
                    "to": "line_end",
                    "as": "children",
                    "type": "concat"
                },
                {
                    "from": "line_end_props",
                    "to": "line_end",
                    "as": "props"
                },
                {
                    "from": "line_end",
                    "to": "defs_children",
                    "as": "arrow"
                },
                {
                    "from": "defs_dom_type",
                    "to": "defs",
                    "as": "dom_type"
                },
                {
                    "from": "defs_props",
                    "to": "defs",
                    "as": "props"
                },
                {
                    "from": "defs_children",
                    "to": "defs",
                    "as": "children"
                },
                {
                    "from": "node_editor_children",
                    "to": "out",
                    "as": "children"
                }
            ]
        }
    ],
    "edges": [
        {
            "from": "in",
            "to": "get_graph",
            "as": "target"
        },
        {
            "from": "in",
            "to": "get_display_graph",
            "as": "target"
        },
        {
            "from": "graph",
            "to": "get_graph",
            "as": "path"
        },
        {
            "from": "display_graph",
            "to": "get_display_graph",
            "as": "path"
        },
        {
            "from": "hyperapp_view_in",
            "to": "hyperapp_view",
            "as": "in_node"
        },
        {
            "from": "node_editor",
            "to": "hyperapp_view",
            "type": "ref",
            "as": "out_node"
        },
        {
            "from": "get_graph",
            "to": "update_sim_fn",
            "as": "graph"
        },
        {
            "from": "update_sim_effect",
            "to": "graph_to_simulation",
            "as": "update_sim_effect"
        },
        {
            "from": "hyperapp_view_in",
            "to": "onclick_fn"
        },
        {
            "from": "onclick_fn",
            "to": "node_editor",
            "as": "onclick_fn"
        },
        {
            "from": "onclick_fn_body",
            "to": "onclick_fn",
            "as": "out_node",
            "type": "ref"
        },
        {
            "from": "onclick_fn_in",
            "to": "onclick_fn_body"
        },
        {
            "from": "onclick_fn_in",
            "to": "onclick_fn",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "get_graph",
            "to": "onkey_fn",
            "as": "graph"
        },
        {
            "from": "onkey_fn",
            "to": "hyperapp_subscriptions",
            "as": "onkey_fn"
        },
        {
            "from": "onkey_fn_in",
            "to": "onkey_fn_body"
        },
        {
            "from": "onkey_fn_body",
            "to": "onkey_fn",
            "as": "out_node",
            "type": "ref"
        },
        {
            "from": "onkey_fn_in",
            "to": "onkey_fn",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "hyperapp_view",
            "to": "hyperapp_app",
            "as": "view"
        },
        {
            "from": "graph_to_simulation",
            "to": "hyperapp_app",
            "as": "init"
        },
        {
            "from": "get_graph",
            "to": "hyperapp_view",
            "as": "graph"
        },
        {
            "from": "hyperapp_view_in",
            "to": "node_editor"
        },
        {
            "from": "get_display_graph",
            "to": "update_nodes",
            "as": "display_graph"
        },
        {
            "from": "get_display_graph",
            "to": "graph_to_simulation",
            "as": "display_graph"
        },
        {
            "from": "get_graph",
            "to": "graph_to_simulation",
            "as": "graph"
        },
        {
            "from": "in",
            "to": "graph_to_simulation"
        },
        {
            "from": "initial_state",
            "to": "graph_to_simulation"
        },
        {
            "from": "d3simulation",
            "to": "graph_to_simulation"
        },
        {
            "from": "graph_to_simulation",
            "to": "update_nodes"
        },
        {
            "from": "graph_to_simulation",
            "to": "hyperapp_app"
        },
        {
            "from": "update_nodes",
            "to": "hyperapp_app"
        },
        {
            "from": "d3simulation",
            "to": "hyperapp_subscriptions"
        },
        {
            "from": "hyperapp_subscriptions",
            "to": "hyperapp_app",
            "as": "subscriptions"
        },
        {
            "from": "update_sim_in",
            "to": "update_sim"
        },
        {
            "from": "update_sim_in",
            "to": "update_sim_fn",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "update_sim",
            "to": "update_sim_fn",
            "as": "out_node",
            "type": "ref"
        },
        {
            "from": "update_sim_fn",
            "to": "update_sim_effect",
            "as": "fn"
        }
    ]
}