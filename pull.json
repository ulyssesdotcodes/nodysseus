{
    "description": "function composition",
    "in": "in",
    "out": "out",
    "nodes": [
        {
            "id": "in"
        },
        {
            "id": "log",
            "args": ["input"],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "input"
                    ],
                    "script": "console.log(node.id); console.log(input); return {}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "input"
                }
            ]
        },
        {
            "id": "text",
            "name": "text",
            "in": "l54tju5vx",
            "out": "text",
            "nodes": [
                {
                    "id": "text",
                    "args": [],
                    "name": "text/out",
                    "script": "return input"
                },
                {
                    "id": "l54tju5vx",
                    "args": [],
                    "name": "text/in"
                }
            ],
            "edges": [
                {
                    "from": "l54tju5vx",
                    "to": "text",
                    "as": "input"
                }
            ]
        },
        {
        "id": "text_display",
        "name": "text_display",
        "in": "6pqqchhnk",
        "out": "tsxlng4gd",
        "nodes": [
            {
                "id": "tsxlng4gd",
                "type": "h",
                "name": "text_display/out"
            },
            {
                "id": "osgrk7ddu",
                "type": "h_text"
            },
            {
                "id": "wrap_array",
                "args": ["value"],
                "script": "return [value]"
            },
            {
                "id": "hghirvcml",
                "value": "pre"
            },
            {
                "id": "ha6b5qttf",
                "args": ["data"],
                "script": "return JSON.stringify(data.result, null, 2);"
            },
            {
                "id": "6pqqchhnk",
                "name": "text_display/in"
            }
        ],
        "edges": [
            {
                "from": "wrap_array",
                "to": "tsxlng4gd",
                "as": "children"
            },
            {
                "from": "hghirvcml",
                "to": "tsxlng4gd",
                "as": "dom_type"
            },
            {
                "from": "osgrk7ddu",
                "to": "wrap_array",
                "as": "value"
            },
            {
                "from": "ha6b5qttf",
                "to": "osgrk7ddu",
                "as": "text"
            },
            {
                "from": "6pqqchhnk",
                "to": "ha6b5qttf",
                "as": "data"
            }
        ]
    },
        {
            "id": "hyperapp",
            "args": [
                "init",
                "view",
                "subscriptions"
            ],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "init",
                    "type": "get"
                },
                {
                    "id": "init_key",
                    "value": "init"
                },
                {
                    "id": "update_sim_effect",
                    "type": "arg",
                    "value": "update_sim_effect"
                },
                {
                    "id": "other_args",
                    "args": ["view", "subscriptions"],
                    "script": "return {view, subscriptions}"
                },
                {
                    "id": "out",
                    "args": [
                        "init",
                        "view",
                        "subscriptions",
                        "update_sim_effect"
                    ],
                    "script": "return {dispatch: lib.ha.app({init: () => [init, [() => { update_sim_effect(null, init) }]], view: s => {if(s instanceof Map){ throw new Error('stop') } return view(s).el}, node: document.getElementById('node-editor'), subscriptions: () => subscriptions})}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "resolve_init"
                },
                {
                    "from": "in",
                    "to": "init",
                    "as": "target"
                },
                {
                    "from": "init_key",
                    "to": "init",
                    "as": "path"
                },
                {
                    "from": "init",
                    "to": "resolve_init",
                    "as": "init"
                },
                {
                    "from": "init",
                    "to": "update_sim_effect"
                },
                {
                    "from": "in",
                    "to": "other_args"
                },
                {
                    "from": "update_sim_effect",
                    "to": "out",
                    "as": "update_sim_effect"
                },
                {
                    "from": "init",
                    "to": "out",
                    "as": "init"
                },
                {
                    "from": "other_args",
                    "to": "out"
                }
            ]
        },
        {
            "id": "children_els",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "children"
                    ],
                    "script": "return [children.map(c => c.el)]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "append",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "item",
                        "array"
                    ],
                    "script": "return [array.concat(Array.isArray(item) ? item : [item])]"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "filter",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "keep",
                        "data"
                    ],
                    "script": "return keep ? [data] : []"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "data",
                    "order": 0
                }
            ]
        },
        {
            "id": "delete",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "path"
                    ],
                    "script": "const new_data = Object.assign({}, data); delete new_data[path]; return new_data;"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "order": 1
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "data",
                    "order": 0
                }
            ]
        },
        {
            "id": "default",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "default_value"
                    ],
                    "script": "return data ?? default_value"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "switch",
            "args": ["data", "input"],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "input"
                    ],
                    "script": "return data[input];"
                },
                {
                    "id": "input",
                    "type": "arg",
                    "value": "input"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "data"
                },
                {
                    "from": "input",
                    "to": "out",
                    "as": "input"
                }
            ]
        },
        {
            "id": "trigger",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "trigger",
                    "args": [
                        "trigger"
                    ],
                    "script": "return trigger ? ['in'] : []"
                },
                {
                    "id": "out",
                    "args": [
                        "data"
                    ],
                    "script": "return data?.data ?? []"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out",
                    "as": "data"
                },
                {
                    "from": "in",
                    "to": "trigger"
                },
                {
                    "from": "trigger",
                    "to": "out",
                    "as": "input"
                }
            ]
        },
        {
            "id": "selected_node",
            "args": [
                "selected",
                "display_graph"
            ],
            "script": "return display_graph.nodes.find(n => n.id === selected[0])"
        },
        {
            "id": "svg_text",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "el",
                    "type": "h"
                },
                {
                    "id": "dom_type",
                    "value": "text"
                },
                {
                    "id": "text_el",
                    "type": "h_text"
                },
                {
                    "id": "children",
                    "args": [
                        "text"
                    ],
                    "script": "return [text.el]"
                },
                {
                    "id": "out"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "text_el"
                },
                {
                    "from": "in",
                    "to": "el"
                },
                {
                    "from": "dom_type",
                    "to": "el",
                    "as": "dom_type"
                },
                {
                    "from": "text_el",
                    "to": "children",
                    "as": "text"
                },
                {
                    "from": "children",
                    "to": "el",
                    "as": "children"
                },
                {
                    "from": "el",
                    "to": "out"
                }
            ]
        },
        {
            "id": "execute_graph",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "in_node",
                        "out_node",
                        "graph"
                    ],
                    "script": "return (...args) => {res = lib.no.executeGraph({state: new Map([[in_node, args.length === 1 ? args[0] : args]]), graph: {...graph, in: in_node, out: out_node}, cache_id: 'view'}).get(out_node); return res;}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "resolve",
            "args": ["data"],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "keys",
                    "args": ["data"],
                    "script": "return [...data.keys()]"
                },
                {
                    "id": "collate"
                },
                {
                    "id": "out",
                    "args": ["data"],
                    "script": "return data"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "keys"
                },
                {
                    "from": "keys",
                    "to": "collate",
                    "as": "input"
                },
                {
                    "from": "in",
                    "to": "collate"
                },
                {
                    "from": "collate",
                    "to": "out",
                    "as": "data"
                }
            ]
        },
        {
            "id": "array",
            "args": [],
            "script": "return [inputs.flat()]",
            "name": "array"
        },
        {
            "id": "wrap_effect_fn",
            "args": [
                "fn"
            ],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "fn"
                    ],
                    "script": "return (_, payload) => fn(payload)"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "get",
            "args": ["target", "path"],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "fill_default",
                    "args": [
                        "input"
                    ],
                    "script": "return input?.default ??  null"
                },
                {
                    "id": "out",
                    "args": [
                        "target",
                        "path",
                        "def"
                    ],
                    "script": "return lib.just.get(target, path, def)"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                },
                {
                    "from": "in",
                    "to": "fill_default",
                    "as": "input"
                },
                {
                    "from": "fill_default",
                    "to": "out",
                    "as": "def"
                }
            ]
        },
        {
            "id": "arg",
            "args": ["node_inputs"],
            "script": "return node_inputs[node.value]"
        },
        {
            "id": "set",
            "args": [
                "target",
                "path",
                "value"
            ],
            "script": "return [lib.just.set(target, path, value)]"
        },
        {
            "id": "fuse vertices",
            "name": "fuse vertices",
            "in": "g8mx5sn1u",
            "out": "vnw7d8iaw",
            "args": ["graph"],
            "nodes": [
                {
                    "id": "vnw7d8iaw",
                    "name": "fuse vertices",
                    "type": "switch",
                    "args": ["fuse", "graph"]
                },
                {
                    "id": "6uzm3ifn3",
                    "args": ["graph"],
                    "script": "return graph.edges.length > 0 ? \"fuse\" : \"graph\""
                },
                {
                    "id": "p229wzcj5",
                    "type": "fuse vertices"
                },
                {
                    "id": "idjoql4db"
                },
                {
                    "id": "wfld638dn",
                    "args": ["remaining_edges"],
                    "script": "return [remaining_edges.map(e => ({...e, to: e.to === chosen_edge.to || e.to === chosen_edge.from ? new_id : e.to, from: e.from === chosen_edge.from || e.from === chosen_edge.to ? new_id : e.from}))]"
                },
                {
                    "id": "ungdjbio6",
                    "args": ["graph", "chosen_edge"],
                    "script": "const remaining = graph.nodes\n.filter(n => n.id !== chosen_edge.to && n.id !== chosen_edge.from);\n\nconst from = [...(graph.nodes\n.find(n => n.id === chosen_edge.to).nodes ?? [chosen_edge.to])]\n\nconst to = [...(graph.nodes.find(n => n.id === chosen_edge.from).nodes ?? [chosen_edge.from])];\n\nreturn [remaining\n.concat([{\nid: new_id, \nnodes: [...(new Set(from.concat(to))).keys()],\n}])\n\n];"
                },
                {
                    "id": "mh8lknkfv",
                    "args": ["graph"],
                    "script": "return [graph.edges.slice(1)]"
                },
                {
                    "id": "h8bhlzbph",
                    "args": ["chosen_edge"],
                    "script": "return chosen_edge.to + \"_\" + chosen_edge.from;",
                    "name": "new_id"
                },
                {
                    "id": "1m739wxv9",
                    "args": ["graph"],
                    "script": "return graph.edges[0]",
                    "name": "edge"
                },
                {
                    "id": "nznzj5bfn",
                    "name": "get graph",
                    "type": "get"
                },
                {
                    "id": "g8mx5sn1u",
                    "name": "fuse vertices/in"
                },
                {
                    "id": "tta1nggm4",
                    "value": "graph"
                }
            ],
            "edges": [
                {
                    "from": "6uzm3ifn3",
                    "to": "vnw7d8iaw",
                    "as": "input"
                },
                {
                    "from": "p229wzcj5",
                    "to": "vnw7d8iaw",
                    "as": "fuse"
                },
                {
                    "from": "idjoql4db",
                    "to": "p229wzcj5",
                    "as": "graph"
                },
                {
                    "from": "wfld638dn",
                    "to": "idjoql4db",
                    "as": "edges"
                },
                {
                    "from": "ungdjbio6",
                    "to": "idjoql4db",
                    "as": "nodes"
                },
                {
                    "from": "mh8lknkfv",
                    "to": "wfld638dn",
                    "as": "remaining_edges"
                },
                {
                    "from": "h8bhlzbph",
                    "to": "wfld638dn",
                    "as": "new_id"
                },
                {
                    "from": "1m739wxv9",
                    "to": "wfld638dn",
                    "as": "chosen_edge"
                },
                {
                    "from": "h8bhlzbph",
                    "to": "ungdjbio6",
                    "as": "new_id"
                },
                {
                    "from": "1m739wxv9",
                    "to": "ungdjbio6",
                    "as": "chosen_edge"
                },
                {
                    "from": "nznzj5bfn",
                    "to": "vnw7d8iaw",
                    "as": "graph"
                },
                {
                    "from": "nznzj5bfn",
                    "to": "6uzm3ifn3",
                    "as": "graph"
                },
                {
                    "from": "nznzj5bfn",
                    "to": "ungdjbio6",
                    "as": "graph"
                },
                {
                    "from": "nznzj5bfn",
                    "to": "mh8lknkfv",
                    "as": "graph"
                },
                {
                    "from": "1m739wxv9",
                    "to": "h8bhlzbph",
                    "as": "chosen_edge"
                },
                {
                    "from": "nznzj5bfn",
                    "to": "1m739wxv9",
                    "as": "graph"
                },
                {
                    "from": "g8mx5sn1u",
                    "to": "nznzj5bfn",
                    "as": "target"
                },
                {
                    "from": "tta1nggm4",
                    "to": "nznzj5bfn",
                    "as": "path"
                }
            ]
        },
        {
            "id": "remove pendant",
            "name": "remove pendant",
            "in": "jhykipayt",
            "out": "ay4hfrqw1",
            "nodes": [
                {
                    "id": "ay4hfrqw1",
                    "args": [],
                    "name": "remove pendant",
                    "type": "switch"
                },
                {
                    "id": "r5lka2sj5",
                    "args": [],
                    "script": "return pendants.length > 0 ? [\"remove\"] : [\"graph\"]"
                },
                {
                    "id": "7elx5ekij",
                    "args": [],
                    "type": "remove pendant"
                },
                {
                    "id": "cz08pewa3",
                    "args": []
                },
                {
                    "id": "7n24u6kpt",
                    "args": [
                        "nodes"
                    ],
                    "script": "return [nodes.filter(n => !pendant_edges.includes(n.id))]",
                    "name": "filter out pendants"
                },
                {
                    "id": "cuiccwvbv",
                    "args": [],
                    "script": "return [edges.filter(e => !pendant_edges.includes(e.to) && !pendant_edges.includes(e.from))]",
                    "name": "filter penant"
                },
                {
                    "id": "lgzenfpvl",
                    "args": [],
                    "script": "let accfrom = edges.flatMap(e => [e.from]).reduce((acc, v) => { acc[v] = (acc[v] ?? 0) + 1; return acc}, {});\nlet accto = edges.flatMap(e => [e.to]).reduce((acc, v) => { acc[v] = (acc[v] ?? 0) + 1; return acc}, {});\n\nreturn nodes.map(n => n.id).filter(n => (!isNaN(accfrom[n]) && accfrom[n] <= 1) && !accto[n] );",
                    "name": "pendant edges"
                },
                {
                    "id": "7g81ijcqb",
                    "name": "nodes",
                    "in": "in",
                    "out": "7g81ijcqb",
                    "nodes": [
                        {
                            "id": "7g81ijcqb",
                            "args": [],
                            "type": "get",
                            "name": "nodes"
                        },
                        {
                            "id": "2yshp7jvu",
                            "args": [],
                            "value": "nodes"
                        },
                        {
                            "id": "in"
                        }
                    ],
                    "edges": [
                        {
                            "from": "2yshp7jvu",
                            "to": "7g81ijcqb",
                            "as": "path"
                        },
                        {
                            "from": "in",
                            "to": "7g81ijcqb"
                        }
                    ]
                },
                {
                    "id": "zkg9zpu3e",
                    "name": "edges",
                    "in": "in",
                    "out": "zkg9zpu3e",
                    "nodes": [
                        {
                            "id": "zkg9zpu3e",
                            "args": [],
                            "type": "get",
                            "name": "edges"
                        },
                        {
                            "id": "g18jj6zvq",
                            "args": [],
                            "value": "edges"
                        },
                        {
                            "id": "in"
                        }
                    ],
                    "edges": [
                        {
                            "from": "g18jj6zvq",
                            "to": "zkg9zpu3e",
                            "as": "path"
                        },
                        {
                            "from": "in",
                            "to": "zkg9zpu3e"
                        }
                    ]
                },
                {
                    "id": "bp1cy89hk",
                    "args": [],
                    "type": "get",
                    "name": "graph"
                },
                {
                    "id": "jhykipayt",
                    "args": [],
                    "name": "remove pendant/in"
                },
                {
                    "id": "iqkdwjpuz",
                    "args": [],
                    "value": "graph"
                }
            ],
            "edges": [
                {
                    "from": "r5lka2sj5",
                    "to": "ay4hfrqw1",
                    "as": "input"
                },
                {
                    "from": "7elx5ekij",
                    "to": "ay4hfrqw1",
                    "as": "remove"
                },
                {
                    "from": "cz08pewa3",
                    "to": "7elx5ekij",
                    "as": "graph"
                },
                {
                    "from": "7n24u6kpt",
                    "to": "cz08pewa3",
                    "as": "nodes"
                },
                {
                    "from": "cuiccwvbv",
                    "to": "cz08pewa3",
                    "as": "edges"
                },
                {
                    "from": "lgzenfpvl",
                    "to": "r5lka2sj5",
                    "as": "pendants"
                },
                {
                    "from": "lgzenfpvl",
                    "to": "cz08pewa3",
                    "as": "pendants"
                },
                {
                    "from": "7g81ijcqb",
                    "to": "7n24u6kpt",
                    "as": "nodes"
                },
                {
                    "from": "lgzenfpvl",
                    "to": "7n24u6kpt",
                    "as": "pendant_edges"
                },
                {
                    "from": "zkg9zpu3e",
                    "to": "7n24u6kpt",
                    "as": "edges"
                },
                {
                    "from": "lgzenfpvl",
                    "to": "cuiccwvbv",
                    "as": "pendant_edges"
                },
                {
                    "from": "zkg9zpu3e",
                    "to": "cuiccwvbv",
                    "as": "edges"
                },
                {
                    "from": "zkg9zpu3e",
                    "to": "lgzenfpvl",
                    "as": "edges"
                },
                {
                    "from": "7g81ijcqb",
                    "to": "lgzenfpvl",
                    "as": "nodes"
                },
                {
                    "from": "bp1cy89hk",
                    "to": "ay4hfrqw1",
                    "as": "graph"
                },
                {
                    "from": "bp1cy89hk",
                    "to": "cz08pewa3"
                },
                {
                    "from": "bp1cy89hk",
                    "to": "7g81ijcqb",
                    "as": "target"
                },
                {
                    "from": "bp1cy89hk",
                    "to": "zkg9zpu3e",
                    "as": "target"
                },
                {
                    "from": "jhykipayt",
                    "to": "bp1cy89hk",
                    "as": "target"
                },
                {
                    "from": "iqkdwjpuz",
                    "to": "bp1cy89hk",
                    "as": "path"
                }
            ]
        },
        {
            "id": "update_and_run",
            "in": "in",
            "out": "out",
            "args": [
                "display_graph",
                "nodes",
                "selected",
                "update_graph_sim",
                "update",
                "payload",
                "fixed_vertices"
            ],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "update_sim_effect",
                    "type": "arg",
                    "value": "update_sim_effect"
                },
                {
                    "id": "calculate_levels",
                    "args": [
                        "selected",
                        "display_graph",
                        "fixed_vertices"
                    ],
                    "script": "return lib.scripts.calculateLevels(display_graph, selected, fixed_vertices)"
                },
                {
                    "id": "reduce_graph",
                    "type": "fuse vertices"
                },
                {
                    "id": "graph",
                    "args": ["display_graph"],
                    "script": "return display_graph"
                },
                {
                    "id": "levels",
                    "type": "switch",
                    "args": ["levels"]
                },
                {
                    "id": "levels_inputs",
                    "args": [
                        "selected"
                    ],
                    "script": "return ['levels']"
                },
                {
                    "id": "set_levels",
                    "args": [
                        "state",
                        "levels"
                    ],
                    "script": "state.levels = levels ?? state.levels; return state"
                },
                {
                    "id": "graph_sim",
                    "args": [
                        "display_graph",
                        "nodes",
                        "selected",
                        "levels"
                    ],
                    "script": "return lib.scripts.graphToSimulationNodes({display_graph, nodes, selected, levels});"
                },
                {
                    "id": "new_state_cases",
                    "args": [
                        "update_graph_sim"
                    ],
                    "script": "return [graph_sim && 'graph_sim', 'state']"
                },
                {
                    "id": "new_state",
                    "args": [
                        "graph_sim",
                        "state"
                    ],
                    "script": "return Object.assign({}, state, {nodes: graph_sim?.nodes ?? state.nodes, links: graph_sim?.links ?? state.links, levels: graph_sim?.levels ?? state.levels});"
                },
                {
                    "id": "update",
                    "args": [
                        "editing",
                        "display_graph",
                        "update",
                        "selected",
                        "search"
                    ],
                    "script": "return update || !!display_graph || !!selected"
                },
                {
                    "id": "run",
                    "args": [
                        "state",
                        "payload",
                        "display_graph",
                        "selected"
                    ],
                    "script": "try { const result = lib.no.executeGraph({state: new Map([[display_graph.in, {...state, payload}]]), graph: {...display_graph, nodes: display_graph.nodes.concat([]), edges: display_graph.edges.concat([]), out: selected[0]}}); return {result, error: undefined}; } catch(e) { return {error: e instanceof AggregateError ? e.errors.map(e => e.toString()).join(\" \") : e.toString()} }"
                },
                {
                    "id": "out",
                    "args": [
                        "state",
                        "fx",
                        "update",
                        "result",
                        "error",
                        "update_graph_sim",
                        "payload",
                        "update_sim_effect"
                    ],
                    "script": "return [{...state, result, error}, (update || update_graph_sim) && [update_sim_effect, state]].concat(fx ?? [])"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "new_state",
                    "as": "state"
                },
                {
                    "from": "in",
                    "to": "out"
                },
                {
                    "from": "in",
                    "to": "run"
                },
                {
                    "from": "in",
                    "to": "update"
                },
                {
                    "from": "in",
                    "to": "calculate_levels"
                },
                {
                    "from": "in",
                    "to": "set_levels",
                    "as": "state"
                },
                {
                    "from": "in",
                    "to": "levels_inputs"
                },
                {
                    "from": "in",
                    "to": "graph"
                },
                {
                    "from": "graph",
                    "to": "reduce_graph",
                    "as": "graph" 
                },
                {
                    "from": "graph",
                    "to": "run",
                    "as": "display_graph" 
                },
                {
                    "from": "reduce_graph",
                    "to": "calculate_levels",
                    "as": "fixed_vertices" 
                },
                {
                    "from": "calculate_levels",
                    "to": "levels",
                    "as": "levels"
                },
                {
                    "from": "levels",
                    "to": "set_levels",
                    "as": "levels"
                },
                {
                    "from": "set_levels",
                    "to": "graph_sim"
                },
                {
                    "from": "levels_inputs",
                    "to": "levels",
                    "as": "input"
                },
                {
                    "from": "graph_sim",
                    "to": "new_state",
                    "as": "graph_sim"
                },
                {
                    "from": "new_state",
                    "to": "run",
                    "as": "state"
                },
                {
                    "from": "update",
                    "to": "out",
                    "as": "update"
                },
                {
                    "from": "update_sim_effect",
                    "to": "out",
                    "as": "update_sim_effect"
                },
                {
                    "from": "new_state",
                    "to": "out",
                    "as": "state"
                },
                {
                    "from": "run",
                    "to": "out"
                }
            ]
        },
        {
            "id": "h",
            "args": ["children", "props", "dom_type"],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "fill_children",
                    "args": [
                        "children"
                    ],
                    "script": "return children === undefined ? [] : (Array.isArray(children) ? children.map(c => c.el ?? c) : [children.el ?? children])"
                },
                {
                    "id": "fill_props",
                    "args": [
                        "input"
                    ],
                    "script": "return input.props ?? {}"
                },
                {
                    "id": "dom_type",
                    "type": "arg",
                    "value": "dom_type"
                },
                {
                    "id": "out",
                    "args": [
                        "props",
                        "children",
                        "dom_type"
                    ],
                    "script": "return {el: {dom_type, props, children}}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "fill_children"
                },
                {
                    "from": "in",
                    "to": "dom_type"
                },
                {
                    "from": "in",
                    "to": "fill_props",
                    "as": "input"
                },
                {
                    "from": "fill_children",
                    "to": "out",
                    "as": "children",
                    "order": 1
                },
                {
                    "from": "fill_props",
                    "to": "out",
                    "as": "props",
                    "type": "resolve"
                },
                {"from": "dom_type", "to": "out", "as": "dom_type"}
            ]
        },
        {
            "id": "map",
            "in": "in",
            "out": "out",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "run_fn"
                },
                {
                    "id": "iterate",
                    "type": "map"
                },
                {
                    "id": "out"
                }
            ],
            "edges": [

            ]
        },
        {
            "id": "run_h",
            "in": "in",
            "out": "out",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "dom_type",
                    "type": "arg",
                    "value": "dom_type"
                },
                {
                    "id": "props",
                    "type": "arg",
                    "value": "props"
                },
                {
                    "id": "children",
                    "type": "arg",
                    "value": "children"
                },
                {
                    "id": "graph",
                    "type": "arg",
                    "value": "graph"
                },
                {
                    "id": "text",
                    "type": "arg",
                    "value": "text"
                },
                {
                    "id": "out_h",
                    "args": ["dom_type", "children", "props", "graph"],
                    "script_": "return {el: lib.ha.h('div', {}, [])}",
                    "script": "const mapped_children = (children ?? []).map(c => lib.no.executeGraph({state: new Map([['run_h/in', {...c, graph}]]), graph: {...graph, in: 'run_h/in', out: 'run_h'}}).get('run_h').el); return {el: lib.ha.h(dom_type, props, mapped_children)};"
                },
                {
                    "id": "out_text",
                    "args": ["text"],
                    "script": "return {el: lib.ha.text(text)}"
                },
                {
                    "id": "els"
                },
                {
                    "id": "out_input",
                    "args": ["dom_type"],
                    "script": "return dom_type === 'text_value' ? 'h_text' : 'h'"
                },
                {
                    "id": "out_el",
                    "type": "switch"
                },
                {
                    "id": "out",
                    "args": ["el"],
                    "script": "return el"
                }
            ],
            "edges": [
                {"from": "dom_type", "to": "out_input", "as": "dom_type"},
                {"from": "dom_type", "to": "out_h", "as": "dom_type"},
                {"from": "children", "to": "out_h", "as": "children"},
                {"from": "props", "to": "out_h", "as": "props"},
                {"from": "graph", "to": "out_h", "as": "graph"},
                {"from": "text", "to": "out_text", "as": "text"},
                {"from": "out_text", "to": "els", "as": "h_text"},
                {"from": "out_h", "to": "els", "as": "h"},
                {"from": "els", "to": "out_el"},
                {"from": "out_el", "to": "out", "as": "el"},
                {"from": "out_input", "to": "out_el", "as": "input"}
            ]
        },
        {
            "id": "h_text",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "out",
                    "args": [
                        "text"
                    ],
                    "script": "return {el: {dom_type: 'text_value', text}}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "out"
                }
            ]
        },
        {
            "id": "expand_contract",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "selected_node",
                    "type": "selected_node"
                },
                {
                    "id": "expand_contract_result_inputs",
                    "args": [
                        "expandable",
                        "contractable"
                    ],
                    "script": "return expandable ? 'expand' : contractable ? 'contract' : undefined"
                },
                {
                    "id": "selected",
                    "args": [
                        "expand",
                        "contract"
                    ],
                    "script": "return expand ?? contract ?? []"
                },
                {
                    "id": "expand_contract_result",
                    "type": "switch"
                },
                {
                    "id": "get_name",
                    "args": [
                        "node"
                    ],
                    "script": "return node.name"
                },
                {
                    "id": "log",
                    "type": "log"
                },
                {
                    "id": "expandable_id",
                    "args": [
                        "id",
                        "out"
                    ],
                    "script": "return id ? [id + '/' + out] : []"
                },
                {
                    "id": "contractable_id",
                    "args": [
                        "node_id",
                        "name"
                    ],
                    "script": "node_id = name?.endsWith('/out') ? name : node_id; return !node_id ? [] : node_id.endsWith('/out') ? [node_id.substring(0, node_id.lastIndexOf('/'))] : node_id.lastIndexOf('/') >= 0 ? [node_id.substring(0, node_id.lastIndexOf('/'))] : [node_id]"
                },
                {
                    "id": "expand",
                    "args": [
                        "node_id",
                        "display_graph",
                        "out"
                    ],
                    "script": "return display_graph && node_id ? lib.scripts.expand_node({display_graph, node_id, out}) : []"
                },
                {
                    "id": "contract",
                    "args": [
                        "node_id",
                        "display_graph",
                        "name"
                    ],
                    "script": "return display_graph && node_id ? lib.scripts.contract_node({display_graph, node_id, name}) : []"
                },
                {
                    "id": "has_nodes",
                    "args": [
                        "node_id",
                        "display_graph"
                    ],
                    "script": "return !!display_graph.nodes.find(n => n.id === node_id).nodes"
                },
                {
                    "id": "is_contractable",
                    "args": [
                        "has_nodes"
                    ],
                    "script": "return !has_nodes"
                },
                {
                    "id": "out",
                    "type": "default"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "contractable_id"
                },
                {
                    "from": "in",
                    "to": "has_nodes"
                },
                {
                    "from": "in",
                    "to": "expand"
                },
                {
                    "from": "in",
                    "to": "contract"
                },
                {
                    "from": "in",
                    "to": "selected_node"
                },
                {
                    "from": "has_nodes",
                    "to": "is_contractable",
                    "as": "has_nodes"
                },
                {
                    "from": "selected_node",
                    "to": "get_name",
                    "as": "node"
                },
                {
                    "from": "selected_node",
                    "to": "expandable_id"
                },
                {
                    "from": "selected_node",
                    "to": "contract"
                },
                {
                    "from": "contractable_id",
                    "to": "contract",
                    "as": "name"
                },
                {
                    "from": "get_name",
                    "to": "is_contractable",
                    "as": "name"
                },
                {
                    "from": "get_name",
                    "to": "contractable_id",
                    "as": "name"
                },
                {
                    "from": "contractable_id",
                    "to": "selected",
                    "as": "contract"
                },
                {
                    "from": "expandable_id",
                    "to": "selected",
                    "as": "expand"
                },
                {
                    "from": "has_nodes",
                    "to": "expand_contract_result_inputs",
                    "as": "expandable"
                },
                {
                    "from": "is_contractable",
                    "to": "expand_contract_result_inputs",
                    "as": "contractable"
                },
                {
                    "from": "expand_contract_result_inputs",
                    "to": "selected",
                    "as": "input"
                },
                {
                    "from": "expand_contract_result_inputs",
                    "to": "expand_contract_result",
                    "as": "input"
                },
                {
                    "from": "selected",
                    "to": "expand_contract_result",
                    "as": "selected"
                },
                {
                    "from": "expand",
                    "to": "expand_contract_result",
                    "as": "expand"
                },
                {
                    "from": "contract",
                    "to": "expand_contract_result",
                    "as": "contract"
                },
                {
                    "from": "expand_contract_result",
                    "to": "out",
                    "as": "data"
                },
                {
                    "from": "in",
                    "to": "out",
                    "as": "default_value"
                }
            ]
        },
        {
            "id": "default_node_display",
            "name": "default_node_display",
            "in": "6pqqchhnk",
            "out": "tsxlng4gd",
            "nodes": [
                {
                    "id": "tsxlng4gd",
                    "type": "h",
                    "name": "default_node_display"
                },
                {
                    "id": "osgrk7ddu",
                    "args": [],
                    "type": "h_text"
                },
                {
                    "id": "hghirvcml",
                    "args": [],
                    "value": "pre"
                },
                {
                    "id": "ha6b5qttf",
                    "args": ["data"],
                    "script": "return JSON.stringify({node: data.node, result: data.result}, null, 2)"
                },
                {
                    "id": "6pqqchhnk",
                    "name": "default_node_display/in"
                }
            ],
            "edges": [
                {
                    "from": "osgrk7ddu",
                    "to": "tsxlng4gd",
                    "as": "children"
                },
                {
                    "from": "hghirvcml",
                    "to": "tsxlng4gd",
                    "as": "dom_type"
                },
                {
                    "from": "ha6b5qttf",
                    "to": "osgrk7ddu",
                    "as": "text"
                },
                {
                    "from": "6pqqchhnk",
                    "to": "ha6b5qttf",
                    "as": "data"
                }
            ]
        },
        {
            "id": "graph_display",
            "name": "graph_display",
            "in": "in",
            "out": "out",
            "nodes": [
                {
                    "id": "out",
                    "type": "h",
                    "name": "graph_display"
                },
                {
                    "id": "ml655hs73",
                    "args": [],
                    "value": "pre"
                },
                {
                    "id": "thsez3hy1",
                    "args": [],
                    "type": "h_text"
                },
                {
                    "id": "stringify",
                    "args": [
                        "data"
                    ],
                    "script": "return JSON.stringify({...data.node, nodes: data.node.nodes.length, edges:data.node.edges.length, result: data.result}, null, 2)"
                },
                {
                    "id": "in"
                }
            ],
            "edges": [
                {
                    "from": "ml655hs73",
                    "to": "out",
                    "as": "dom_type"
                },
                {
                    "from": "thsez3hy1",
                    "to": "out",
                    "as": "children"
                },
                {
                    "from": "stringify",
                    "to": "thsez3hy1",
                    "as": "text"
                },
                {
                    "from": "in",
                    "to": "stringify",
                    "as": "data"
                },
                {
                    "from": "in",
                    "to": "stringify",
                    "as": "data"
                }
            ]
        },
        {
            "id": "number_display",
            "name": "number_display",
            "in": "6pqqchhnk",
            "out": "tsxlng4gd",
            "nodes": [
                {
                    "id": "tsxlng4gd",
                    "args": [],
                    "type": "h",
                    "name": "number_display"
                },
                {
                    "id": "hghirvcml",
                    "args": [],
                    "value": "input"
                },
                {
                    "id": "cd571vftv"
                },
                {
                    "id": "h5xzkeoql",
                    "args": [],
                    "value": {
                        "type": "number"
                    }
                },
                {
                    "id": "ltncqmqe9",
                    "args": [],
                    "type": "get"
                },
                {
                    "id": "9kkegcpi2",
                    "args": [],
                    "type": "execute_graph"
                },
                {
                    "id": "e96vv0gpq",
                    "args": [],
                    "value": "node.value"
                },
                {
                    "id": "tw41k3wzg",
                    "args": [],
                    "type": "get"
                },
                {
                    "id": "u9feks2l9",
                    "args": [],
                    "type": "update_and_run"
                },
                {
                    "id": "6pqqchhnk",
                    "args": [],
                    "name": "number_display/in"
                },
                {
                    "id": "yxaspmy5c",
                    "args": [],
                    "value": "graph"
                },
                {
                    "id": "rhzddw3c6",
                    "args": [],
                    "type": "set"
                },
                {
                    "id": "8jmaa71ct",
                    "args": [],
                    "script": "return arg0 !== arg1;"
                },
                {
                    "id": "w5lqhh9qr",
                    "args": [],
                    "value": "value"
                },
                {
                    "id": "es0e6as0j",
                    "args": [],
                    "type": "get",
                    "name": "get target value"
                },
                {
                    "id": "vnta2m4py",
                    "args": [],
                    "type": "get"
                },
                {
                    "id": "gh99zvhy2",
                    "args": [],
                    "value": "1.target.valueAsNumber",
                    "name": "target valueasnum"
                },
                {
                    "id": "88f3s3qrq",
                    "args": [],
                    "value": "value"
                },
                {
                    "id": "fxbdw1jrr",
                    "args": [],
                    "type": "selected_node"
                },
                {
                    "id": "pkih97fsa",
                    "args": [],
                    "type": "get",
                    "name": "state"
                },
                {
                    "id": "mbbx3d26q",
                    "args": []
                },
                {
                    "id": "vbwsmt7jt",
                    "args": [],
                    "value": 0
                }
            ],
            "edges": [
                {
                    "from": "hghirvcml",
                    "to": "tsxlng4gd",
                    "as": "dom_type"
                },
                {
                    "from": "cd571vftv",
                    "to": "tsxlng4gd",
                    "as": "props"
                },
                {
                    "from": "h5xzkeoql",
                    "to": "cd571vftv"
                },
                {
                    "from": "ltncqmqe9",
                    "to": "cd571vftv",
                    "as": "value"
                },
                {
                    "from": "9kkegcpi2",
                    "to": "cd571vftv",
                    "as": "oninput"
                },
                {
                    "from": "e96vv0gpq",
                    "to": "ltncqmqe9",
                    "as": "path"
                },
                {
                    "from": "tw41k3wzg",
                    "to": "9kkegcpi2",
                    "as": "graph"
                },
                {
                    "from": "u9feks2l9",
                    "to": "9kkegcpi2",
                    "as": "out_node",
                    "type": "ref"
                },
                {
                    "from": "6pqqchhnk",
                    "to": "ltncqmqe9",
                    "as": "target"
                },
                {
                    "from": "6pqqchhnk",
                    "to": "tw41k3wzg",
                    "as": "target"
                },
                {
                    "from": "yxaspmy5c",
                    "to": "tw41k3wzg",
                    "as": "path"
                },
                {
                    "from": "rhzddw3c6",
                    "to": "u9feks2l9",
                    "as": "node"
                },
                {
                    "from": "8jmaa71ct",
                    "to": "u9feks2l9",
                    "as": "update"
                },
                {
                    "from": "w5lqhh9qr",
                    "to": "rhzddw3c6",
                    "as": "path"
                },
                {
                    "from": "es0e6as0j",
                    "to": "rhzddw3c6",
                    "as": "value"
                },
                {
                    "from": "vnta2m4py",
                    "to": "8jmaa71ct",
                    "as": "arg0"
                },
                {
                    "from": "es0e6as0j",
                    "to": "8jmaa71ct",
                    "as": "arg1"
                },
                {
                    "from": "gh99zvhy2",
                    "to": "es0e6as0j",
                    "as": "path"
                },
                {
                    "from": "88f3s3qrq",
                    "to": "vnta2m4py",
                    "as": "path"
                },
                {
                    "from": "fxbdw1jrr",
                    "to": "rhzddw3c6",
                    "as": "target"
                },
                {
                    "from": "fxbdw1jrr",
                    "to": "vnta2m4py",
                    "as": "target"
                },
                {
                    "from": "mbbx3d26q",
                    "to": "pkih97fsa",
                    "as": "target"
                },
                {
                    "from": "mbbx3d26q",
                    "to": "9kkegcpi2",
                    "as": "in_node",
                    "type": "ref"
                },
                {
                    "from": "mbbx3d26q",
                    "to": "es0e6as0j",
                    "as": "target"
                },
                {
                    "from": "pkih97fsa",
                    "to": "u9feks2l9"
                },
                {
                    "from": "pkih97fsa",
                    "to": "fxbdw1jrr"
                },
                {
                    "from": "vbwsmt7jt",
                    "to": "pkih97fsa",
                    "as": "path"
                }
            ]
        },
        {
            "id": "default_error_display",
            "in": "in",
            "out": "out",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "stringify",
                    "args": [
                        "data"
                    ],
                    "script": "const e = data.error; return JSON.stringify({error: e instanceof AggregateError ? e.errors.map(e => e.toString()).join(\" \") : e.toString(), data}, null, 2)"
                },
                {
                    "id": "text",
                    "type": "h_text"
                },
                {
                    "id": "out_dom_type",
                    "value": "pre" 
                },
                {
                    "id": "out",
                    "type": "h"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "stringify",
                    "as": "data"
                },
                {
                    "from": "stringify",
                    "to": "text",
                    "as": "text"
                },
                {
                    "from": "text",
                    "to": "out",
                    "as": "children"
                },
                {
                    "from": "out_dom_type",
                    "to": "out",
                    "as": "dom_type"
                }
            ]
        },
        {
            "id": "not",
            "args": [
                "target"
            ],
            "script": "return !target"
        },
        {
            "id": "data",
            "value": "data"
        },
        {
            "id": "graph",
            "value": "graph"
        },
        {
            "id": "display_graph",
            "value": "display_graph"
        },
        {
            "id": "nodes",
            "value": "nodes"
        },
        {
            "id": "graph_nodes",
            "value": [
                [
                    "graph",
                    "nodes"
                ]
            ]
        },
        {
            "id": "initial_state",
            "value": {
                "nodes": [],
                "links": [],
                "editing": false,
                "search": false,
                "show_all": false,
                "app_state": {}
            }
        },
        {
            "id": "hyperapp_init_state"
        },
        {
            "id": "get_graph",
            "type": "get"
        },
        {
            "id": "get_display_graph",
            "type": "get"
        },
        {
            "id": "display_graph_out",
            "value": "out"
        },
        {
            "id": "get_display_graph_out",
            "args": ["target", "path"],
            "script": "return [lib.just.get(target, path)]"
        },
        {
            "id": "hyperapp_view",
            "type": "execute_graph"
        },
        {
            "id": "hyperapp_app",
            "type": "hyperapp"
        },
        {
            "id": "out"
        },
        {
            "id": "hyperapp_view_in"
        },
        {
            "id": "hyperapp_subscriptions",
            "args": [
                "simulation",
                "onkey_fn"
            ],
            "script": "return [[lib.scripts.d3subscription(simulation)], [lib.scripts.keydownSubscription, {action: onkey_fn}]]"
        },
        {
            "id": "graph_to_simulation",
            "args": [
                "nodes",
                "display_graph",
                "selected",
                "levels"
            ],
            "script": "return lib.scripts.graphToSimulationNodes({display_graph, nodes, selected, levels})"
        },
        {
            "id": "update_nodes_in"
        },
        {
            "id": "update_nodes",
            "args": [
                "simulation",
                "nodes",
                "display_graph",
                "links",
                "fuse_links",
                "selected",
                "levels",
                "show_all"
            ],
            "script": "return lib.scripts.updateSimulationNodes({display_graph, simulation, nodes, fuse_links, links, selected, levels, show_all})"
        },
        {
            "id": "update_nodes_fn",
            "type": "execute_graph"
        },
        {
            "id": "d3simulation",
            "args": [],
            "script": "return lib.scripts.d3simulation()"
        },
        {
            "id": "onkey_fn_in"
        },
        {
            "id": "onkey_fn",
            "type": "execute_graph"
        },
        {
            "id": "onkey_fn_body",
            "args": [
                "args"
            ],
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "key_event",
                    "args": [
                        "args"
                    ],
                    "script": "return args[1]"
                },
                {
                    "id": "key",
                    "args": [
                        "ev"
                    ],
                    "script": "return ev.key?.toLowerCase()"
                },
                {
                    "id": "key_inputs",
                    "args": [
                        "key",
                        "state",
                        "ctrlKey",
                        "shiftKey"
                    ],
                    "script": "return (state.editing !== false || state.search !== false) ? key === 'escape' ? ['escape'] : [] : [((ctrlKey ? 'ctrl_' : '') + (shiftKey ? 'shift_' : '') + key.toLowerCase())]"
                },
                {
                    "id": "key_log",
                    "type": "log"
                },
                {
                    "id": "state",
                    "args": [
                        "args"
                    ],
                    "script": "return args[0]"
                },
                {
                    "id": "get_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected[0]"
                },
                {
                    "id": "find_selected"
                },
                {
                    "id": "filter_editing",
                    "args": [
                        "editing"
                    ],
                    "script": "return editing ? [] : {}"
                },
                {
                    "id": "selected_node",
                    "type": "selected_node"
                },
                {
                    "id": "save",
                    "args": [
                        "key",
                        "ctrlKey",
                        "display_graph"
                    ],
                    "script": "return [key === 's' && ctrlKey === true && [(_, display_graph) => { localStorage.setItem('display_graph', JSON.stringify(display_graph)); localStorage.setItem('display_graph_' + Date.now(), JSON.stringify(display_graph));}, display_graph]]"
                },
                {
                    "id": "down",
                    "args": [
                        "key",
                        "selected",
                        "editing",
                        "display_graph"
                    ],
                    "script": "const next_node_edge = display_graph.edges.find(e => e.from === selected[0]); return next_node_edge ? [next_node_edge.to] : selected"
                },
                {
                    "id": "up",
                    "args": [
                        "key",
                        "selected",
                        "editing",
                        "display_graph",
                        "selected_edge"
                    ],
                    "script": "const next_edges = selected_edge ? selected_edge : display_graph.edges.filter(e => e.to === selected[0]); const next_node_edge = next_edges[Math.ceil(next_edges.length / 2) - 1]; return next_node_edge ? [next_node_edge.from] : selected"
                },
                {
                    "id": "left",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes",
                        "levels"
                    ],
                    "script": "const current_node = nodes.find(n => n.node_id === selected[0]); const siblings = levels.nodes_by_level[levels.level_by_node.get(selected[0])].concat(levels.siblings.get(selected[0])); const next_node = siblings.reduce((dist, sibling) => { const sibling_node = nodes.find(n => n.node_id === sibling && n.selected_distance < 3); if(!sibling_node){ return dist } const xdist = Math.abs(sibling_node.x - current_node.x); dist = sibling_node.x < current_node.x && xdist < dist[0] ? [xdist, sibling_node] : dist; return dist }, [window.innerWidth]); return next_node[1] ? [next_node[1].node_id] : selected"
                },
                {
                    "id": "left_edge",
                    "args": [
                        "key",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "nodes",
                        "links"
                    ],
                    "script": "const link = links.find(l => l.source.node_child_id === selected_edge.from + '_' + selected_edge.to); return links.filter(l => l.target.node_id === link.target.node_id).reduce(([current, dist], l) => l.source.x < link.source.x && Math.abs(l.source.x - link.source.x) < dist ? [{from: l.source.node_id, to: l.target.node_id} , Math.abs(l.source.x - link.source.x)] : [current, dist], [selected_edge, 10000])[0]"
                },
                {
                    "id": "right",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes",
                        "levels"
                    ],
                    "script": "const current_node = nodes.find(n => n.node_id === selected[0]); const siblings = levels.nodes_by_level[levels.level_by_node.get(selected[0])].concat(levels.siblings.get(selected[0])); const next_node = siblings.reduce((dist, sibling) => { const sibling_node = nodes.find(n => n.node_id === sibling && n.selected_distance < 3); if(!sibling_node){ return dist }  const xdist = Math.abs(sibling_node.x - current_node.x); dist = sibling_node.x > current_node.x && xdist < dist[0] ? [xdist, sibling_node] : dist; return dist }, [window.innerWidth]); return next_node[1] ? [next_node[1].node_id] : selected"
                },
                {
                    "id": "right_edge",
                    "args": [
                        "key",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "links"
                    ],
                    "script": "const link = links.find(l => l.source.node_child_id === selected_edge.from + '_' + selected_edge.to); return links.filter(l => l.target.node_id === link.target.node_id).reduce(([current, dist], l) => l.source.x > link.source.x && Math.abs(l.source.x - link.source.x) < dist ? [{from: l.source.node_id, to: l.target.node_id} , Math.abs(l.source.x - link.source.x)] : [current, dist], [{to: link.target.node_id, from: link.source.node_id}, 10000])[0]"
                },
                {
                    "id": "v",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "document.querySelector('#edit_value textarea').focus(); return 'value';"
                },
                {
                    "id": "t",
                    "args": [
                        "key",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "document.querySelector('#edit_value input').focus(); return 'type';"
                },
                {
                    "id": "shift_t",
                    "args": [
                        "key",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "const new_node = Object.assign({}, display_graph.nodes.find(n => n.id === selected[0])); new_node.id = new_node.name; return {...display_graph, nodes: display_graph.nodes.map(n => n.id === selected[0] ? {id: n.id, type: n.name, name: n.name} : n).concat([new_node]), edges: display_graph.edges}"
                },
                {
                    "id": "s",
                    "args": [
                        "key",
                        "ctrlKey",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "if(!(key === 's' && ctrlKey === false && editing === false)){ return [] } document.querySelector('#edit_value textarea').focus(); return 'script';"
                },
                {
                    "id": "a",
                    "args": [
                        "key",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "if(!(key === 'a' && editing === false)){ return [] } document.querySelector('#edit_value textarea').focus(); return selected_edge ? 'as' : 'args';"
                },
                {
                    "id": "n",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "editing",
                        "nodes"
                    ],
                    "script": "if(!(key === 'n' && editing === false)){ return [] } document.querySelector('#edit_value textarea').focus(); return 'name';"
                },
                {
                    "id": "o",
                    "args": [
                        "key",
                        "shiftKey",
                        "selected",
                        "display_graph",
                        "editing",
                        "selected_edge",
                        "levels"
                    ],
                    "script": "const id = Math.random().toString(36).substr(2, 9); display_graph.nodes.push({id, args: []}); const edgeIdx = display_graph.edges.findIndex(e => selected_edge?.to === e.to && selected_edge?.from === e.from); display_graph.edges.splice(selected_edge ? edgeIdx : display_graph.edges.length, selected_edge ? 1 : 0, ...(selected_edge ? [{from: selected_edge.from, to: id}, {from: id, to: selected_edge.to, as: display_graph.edges[edgeIdx].as}] : [{from: shiftKey ? id : selected[0], to: shiftKey ? selected[0] : id, as: `arg${levels.parents.get(selected[0]).length}`}])); return {display_graph, selected: [id], selected_edge: false};"
                },
                {
                    "id": "o_display_graph",
                    "args": [
                        "display_graph"
                    ],
                    "script": "return display_graph"
                },
                {
                    "id": "o_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected"
                },
                {
                    "id": "o_selected_edge",
                    "args": [
                        "selected_edge"
                    ],
                    "script": "return selected_edge"
                },
                {
                    "id": "x",
                    "args": [
                        "key",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "display_graph_out"
                    ],
                    "script": "if(selected_edge){display_graph.edges.splice(display_graph.edges.findIndex(e => selected_edge.from === e.from && selected_edge.to === e.to), 1); return {display_graph, selected, selected_edge: false}; } display_graph.nodes = display_graph.nodes.filter(n => n.id !== selected[0]); const new_edges = []; const to = display_graph.edges.filter(e => e.to === selected[0]); const from = display_graph.edges.filter(e => e.from === selected[0]); for(let i = 0; i < to.length; i++){for(let j = 0; j < from.length; j++){ if(!display_graph.edges.find(e => e.from === to[i].from && e.to === from[j].to)){ display_graph.edges.push({from: to[i].from, to: from[j].to, as: from[j].as});}}}; display_graph.edges = display_graph.edges.filter(e => e.to !== selected[0] && e.from !== selected[0]); display_graph.edges.push(...new_edges); return {display_graph, selected: [to[0]?.from ?? from[0]?.to ?? display_graph.nodes[0].id] };"
                },
                {
                    "id": "x_display_graph",
                    "args": [
                        "display_graph"
                    ],
                    "script": "return display_graph"
                },
                {
                    "id": "x_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected"
                },
                {
                    "id": "enter",
                    "args": [
                        "key",
                        "selected"
                    ],
                    "script": "return key === 'enter'"
                },
                {
                    "id": "e",
                    "args": [
                        "key",
                        "selected",
                        "display_graph",
                        "selected_edge"
                    ],
                    "script": "return selected_edge ? null : display_graph.edges.find(e => e.to === selected[0]);"
                },
                {
                    "id": "f",
                    "args": [],
                    "script": "document.querySelector('#search-input').focus(); return ''"
                },
                {
                    "id": "y",
                    "args": [
                        "node"
                    ],
                    "script": "return node"
                },
                {
                    "id": "p",
                    "args": [
                        "clipboard",
                        "display_graph",
                        "selected"
                    ],
                    "script": "const id = Math.random().toString(36).substr(2, 9); display_graph.nodes.push({...clipboard[0], id, name: clipboard.name?.concat('_copy')}); return {display_graph, selected: id};"
                },
                {
                    "id": "p_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected"
                },
                {
                    "id": "p_display_graph",
                    "args": [
                        "display_graph"
                    ],
                    "script": "return display_graph"
                },
                {
                    "id": "q",
                    "args": ["show_all"],
                    "script": "return !show_all"
                },
                {
                    "id": "pending_edges",
                    "args": [
                        "key",
                        "shiftKey",
                        "state"
                    ],
                    "script": "return {edge_from: key === 'c' && !shiftKey ? state.selected[0] : state.edge_from, edge_to: key === 'c' && shiftKey ? state.selected[0] : state.edge_to}"
                },
                {
                    "id": "set_pending_edges",
                    "args": [
                        "pending_edges",
                        "state"
                    ],
                    "script": "const has_both = pending_edges.edge_to && pending_edges.edge_from; state.edge_to = has_both ? undefined : pending_edges.edge_to; state.edge_from = has_both ? undefined : pending_edges.edge_from; return state;"
                },
                {
                    "id": "make_edge",
                    "args": [
                        "pending_edges",
                        "state"
                    ],
                    "script": "if(pending_edges.edge_from && pending_edges.edge_to){ const start_len = state.display_graph.edges.length;  state.display_graph.edges = state.display_graph.edges.filter(e => !(e.from === pending_edges.edge_from && e.to === pending_edges.edge_to)); if(state.display_graph.edges.length === start_len){ state.display_graph.edges.push({from: pending_edges.edge_from, to: pending_edges.edge_to});}} return state.display_graph;"
                },
                {
                    "id": "trigger_expand_contract",
                    "type": "trigger"
                },
                {
                    "id": "expand_contract",
                    "type": "expand_contract"
                },
                {
                    "id": "expand_contract_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected"
                },
                {
                    "id": "expand_contract_display_graph",
                    "args": [
                        "display_graph"
                    ],
                    "script": "return display_graph"
                },
                {
                    "id": "esc",
                    "args": [
                        "key",
                        "target",
                        "selected",
                        "selected_edge",
                        "display_graph",
                        "editing",
                        "search"
                    ],
                    "script": "target.blur(); if(search !== false){ target.value = ''; return {search: false} } let value; try { value = JSON.parse(target.value);} catch(e){ value = target.value; } if(selected_edge){ display_graph.edges.find(e => e.to === selected_edge.to && e.from === selected_edge.from)[editing] = value === '' ? undefined : value; } else { const node = display_graph.nodes.find(n => n.id === selected[0]); if(node[editing] !== undefined || value !== ''){ node[editing] = value === '' ? undefined : value; if(editing === 'name' || (editing === 'value' && node.type === 'arg')){ display_graph.edges.filter(e => e.from === node.id).forEach(e => e.as = value) }} } return {editing: false, edit_value: null, display_graph};" },
                {
                    "id": "esc_editing",
                    "args": [
                        "editing"
                    ],
                    "script": "return editing;"
                },
                {
                    "id": "esc_edit_value",
                    "args": [
                        "edit_value"
                    ],
                    "script": "return edit_value;"
                },
                {
                    "id": "esc_display_graph",
                    "args": [
                        "display_graph"
                    ],
                    "script": "return display_graph;"
                },
                {
                    "id": "esc_search",
                    "args": [
                        "search"
                    ],
                    "script": "return search;"
                },
                {
                    "id": "selected_inputs",
                    "args": [
                        "key",
                        "selected_edge"
                    ],
                    "script": "return selected_edge ? [] : key"
                },
                {
                    "id": "selected",
                    "type": "switch"
                },
                {
                    "id": "set_selected",
                    "args": [
                        "selected",
                        "state"
                    ],
                    "script": "state.selected = selected ? selected : state.selected; return state"
                },
                {
                    "id": "show_all",
                    "type": "switch"
                },
                {
                    "id": "set_show_all",
                    "args": ["show_all", "state"],
                    "script": "state.show_all = show_all ?? state.show_all; return state;"
                },
                {
                    "id": "editing",
                    "type": "switch"
                },
                {
                    "id": "set_editing",
                    "args": [
                        "editing",
                        "state"
                    ],
                    "script": "state.editing = editing ?? state.editing; return state"
                },
                {
                    "id": "display_graph",
                    "type": "switch"
                },
                {
                    "id": "set_display_graph",
                    "args": [
                        "display_graph",
                        "state"
                    ],
                    "script": "state.display_graph = display_graph ?? state.display_graph; return state"
                },
                {
                    "id": "edit_value",
                    "type": "switch"
                },
                {
                    "id": "set_edit_value",
                    "args": [
                        "edit_value",
                        "state"
                    ],
                    "script": "state.edit_value = edit_value !== undefined ? edit_value : state.edit_value; return state"
                },
                {
                    "id": "selected_edge_inputs",
                    "args": [
                        "key",
                        "selected_edge",
                        "editing",
                        "search"
                    ],
                    "script": "return (!!selected_edge && key !== 'e' && editing === false) || (key === 'e' && editing === false && search === false) ? [key] : []"
                },
                {
                    "id": "selected_edge",
                    "type": "switch"
                },
                {
                    "id": "set_selected_edge",
                    "args": [
                        "selected_edge",
                        "state"
                    ],
                    "script": "state.selected_edge = selected_edge === null ? undefined : selected_edge !== undefined ? selected_edge : state.selected_edge; return state"
                },
                {
                    "id": "clipboard",
                    "type": "switch"
                },
                {
                    "id": "set_clipboard",
                    "args": [
                        "clipboard",
                        "state"
                    ],
                    "script": "state.clipboard = clipboard ? [clipboard] : state.clipboard; return state"
                },
                {
                    "id": "search",
                    "type": "switch"
                },
                {
                    "id": "set_search",
                    "args": [
                        "search",
                        "state"
                    ],
                    "script": "state.search = search ?? state.search; return state;"
                },
                {
                    "id": "update_graph_sim",
                    "args": [
                        "state",
                        "key",
                        "selected",
                        "pending_edges"
                    ],
                    "script": "return (!state.editing && state.search === false && (key === 'enter' || key.toLowerCase() === 'o' || key === 'x' || (key === 't' && shiftKey) || (!!pending_edges.edge_to && !!pending_edges.edge_from))) || key === 'escape' || selected"
                },
                {
                    "id": "update",
                    "args": [
                        "key"
                    ],
                    "script": "return key === 'escape'"
                },
                {
                    "id": "out",
                    "type": "update_and_run"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "key_event",
                    "as": "args"
                },
                {
                    "from": "in",
                    "to": "state",
                    "as": "args"
                },
                {
                    "from": "key_event",
                    "to": "key",
                    "as": "ev"
                },
                {
                    "from": "key_event",
                    "to": "key_inputs"
                },
                {
                    "from": "state",
                    "to": "key_inputs",
                    "as": "state"
                },
                {
                    "from": "state",
                    "to": "get_selected"
                },
                {
                    "from": "state",
                    "to": "selected_node"
                },
                {
                    "from": "get_selected",
                    "to": "selected_node",
                    "as": "node_id"
                },
                {
                    "from": "selected_edge",
                    "to": "selected_inputs",
                    "as": "selected_edge"
                },
                {
                    "from": "key_inputs",
                    "to": "selected_inputs",
                    "as": "key"
                },
                {
                    "from": "key_event",
                    "to": "run"
                },
                {
                    "from": "selected_inputs",
                    "to": "selected",
                    "as": "input"
                },
                {
                    "from": "key_event",
                    "to": "selected_edge_inputs"
                },
                {
                    "from": "state",
                    "to": "selected_edge_inputs"
                },
                {
                    "from": "state",
                    "to": "calculate_levels",
                    "as": "state"
                },
                {
                    "from": "selected",
                    "to": "calculate_levels",
                    "as": "selected"
                },
                {
                    "from": "display_graph",
                    "to": "calculate_levels",
                    "as": "display_graph"
                },
                {
                    "from": "key_inputs",
                    "to": "edit_value",
                    "as": "input"
                },
                {
                    "from": "key_inputs",
                    "to": "editing",
                    "as": "input"
                },
                {
                    "from": "key_inputs",
                    "to": "display_graph",
                    "as": "input"
                },
                {
                    "from": "key_inputs",
                    "to": "search",
                    "as": "input"
                },
                {
                    "from": "key_inputs",
                    "to": "clipboard",
                    "as": "input"
                },
                {
                    "from": "key_inputs",
                    "to": "show_all",
                    "as": "input"
                },
                {
                    "from": "state",
                    "to": "filter_editing"
                },
                {
                    "from": "state",
                    "to": "expand_contract"
                },
                {
                    "from": "get_selected",
                    "to": "expand_contract",
                    "as": "node_id"
                },
                {
                    "from": "state",
                    "to": "enter"
                },
                {
                    "from": "key_event",
                    "to": "enter"
                },
                {
                    "from": "state",
                    "to": "save"
                },
                {
                    "from": "filter_editing",
                    "to": "down"
                },
                {
                    "from": "state",
                    "to": "down"
                },
                {
                    "from": "key_event",
                    "to": "down"
                },
                {
                    "from": "state",
                    "to": "up"
                },
                {
                    "from": "key_event",
                    "to": "up"
                },
                {
                    "from": "filter_editing",
                    "to": "up"
                },
                {
                    "from": "state",
                    "to": "left"
                },
                {
                    "from": "key_event",
                    "to": "left"
                },
                {
                    "from": "filter_editing",
                    "to": "left"
                },
                {
                    "from": "state",
                    "to": "left_edge"
                },
                {
                    "from": "key_event",
                    "to": "left_edge"
                },
                {
                    "from": "state",
                    "to": "right_edge"
                },
                {
                    "from": "key_event",
                    "to": "right_edge"
                },
                {
                    "from": "state",
                    "to": "save"
                },
                {
                    "from": "state",
                    "to": "right"
                },
                {
                    "from": "key_event",
                    "to": "right"
                },
                {
                    "from": "filter_editing",
                    "to": "right"
                },
                {
                    "from": "key_event",
                    "to": "v"
                },
                {
                    "from": "state",
                    "to": "v"
                },
                {
                    "from": "key_event",
                    "to": "t"
                },
                {
                    "from": "state",
                    "to": "t"
                },
                {
                    "from": "key_event",
                    "to": "shift_t"
                },
                {
                    "from": "state",
                    "to": "shift_t"
                },
                {
                    "from": "key_event",
                    "to": "s"
                },
                {
                    "from": "state",
                    "to": "s"
                },
                {
                    "from": "state",
                    "to": "p"
                },
                {
                    "from": "state",
                    "to": "q"
                },
                {
                    "from": "key_event",
                    "to": "n"
                },
                {
                    "from": "state",
                    "to": "n"
                },
                {
                    "from": "key_event",
                    "to": "a"
                },
                {
                    "from": "state",
                    "to": "a"
                },
                {
                    "from": "key_event",
                    "to": "o"
                },
                {
                    "from": "state",
                    "to": "o"
                },
                {
                    "from": "key_event",
                    "to": "x"
                },
                {
                    "from": "state",
                    "to": "x"
                },
                {
                    "from": "key_event",
                    "to": "save"
                },
                {
                    "from": "state",
                    "to": "e"
                },
                {
                    "from": "selected_node",
                    "to": "y",
                    "as": "node"
                },
                {
                    "from": "down",
                    "to": "selected",
                    "as": "arrowdown"
                },
                {
                    "from": "down",
                    "to": "selected",
                    "as": "j"
                },
                {
                    "from": "up",
                    "to": "selected",
                    "as": "arrowup"
                },
                {
                    "from": "up",
                    "to": "selected",
                    "as": "k"
                },
                {
                    "from": "left",
                    "to": "selected",
                    "as": "arrowleft"
                },
                {
                    "from": "left",
                    "to": "selected",
                    "as": "h"
                },
                {
                    "from": "right",
                    "to": "selected",
                    "as": "arrowright"
                },
                {
                    "from": "right",
                    "to": "selected",
                    "as": "l"
                },
                {
                    "from": "e",
                    "to": "selected_edge",
                    "as": "e"
                },
                {
                    "from": "selected_edge_inputs",
                    "to": "selected_edge",
                    "as": "input"
                },
                {
                    "from": "left_edge",
                    "to": "selected_edge",
                    "as": "arrowleft"
                },
                {
                    "from": "left_edge",
                    "to": "selected_edge",
                    "as": "h"
                },
                {
                    "from": "right_edge",
                    "to": "selected_edge",
                    "as": "arrowright"
                },
                {
                    "from": "right_edge",
                    "to": "selected_edge",
                    "as": "l"
                },
                {
                    "from": "selected_edge",
                    "to": "set_selected_edge",
                    "as": "selected_edge"
                },
                {
                    "from": "v",
                    "to": "editing",
                    "as": "v"
                },
                {
                    "from": "t",
                    "to": "editing",
                    "as": "t"
                },
                {
                    "from": "s",
                    "to": "editing",
                    "as": "s"
                },
                {
                    "from": "n",
                    "to": "editing",
                    "as": "n"
                },
                {
                    "from": "a",
                    "to": "editing",
                    "as": "a"
                },
                {
                    "from": "state",
                    "to": "pending_edges",
                    "as": "state"
                },
                {
                    "from": "key_event",
                    "to": "pending_edges"
                },
                {
                    "from": "pending_edges",
                    "to": "make_edge",
                    "as": "pending_edges"
                },
                {
                    "from": "pending_edges",
                    "to": "set_pending_edges",
                    "as": "pending_edges"
                },
                {
                    "from": "pending_edges",
                    "to": "update_graph_sim",
                    "as": "pending_edges"
                },
                {
                    "from": "selected",
                    "to": "update_graph_sim",
                    "as": "selected"
                },
                {
                    "from": "state",
                    "to": "update_graph_sim",
                    "as": "state"
                },
                {
                    "from": "state",
                    "to": "make_edge",
                    "as": "state"
                },
                {
                    "from": "shift_t",
                    "to": "display_graph",
                    "as": "shift_t"
                },
                {
                    "from": "p",
                    "to": "p_display_graph"
                },
                {
                    "from": "p_display_graph",
                    "to": "display_graph",
                    "as": "p"
                },
                {
                    "from": "p",
                    "to": "p_selected"
                },
                {
                    "from": "p_selected",
                    "to": "selected",
                    "as": "p"
                },
                {
                    "from": "q",
                    "to": "show_all",
                    "as": "q"
                },
                {
                    "from": "state",
                    "to": "esc"
                },
                {
                    "from": "key_event",
                    "to": "esc"
                },
                {
                    "from": "esc",
                    "to": "esc_editing"
                },
                {
                    "from": "esc",
                    "to": "esc_edit_value"
                },
                {
                    "from": "esc",
                    "to": "esc_display_graph"
                },
                {
                    "from": "esc",
                    "to": "esc_search"
                },
                {
                    "from": "esc_editing",
                    "to": "editing",
                    "as": "escape"
                },
                {
                    "from": "esc_edit_value",
                    "to": "edit_value",
                    "as": "escape"
                },
                {
                    "from": "esc_display_graph",
                    "to": "display_graph",
                    "as": "escape"
                },
                {
                    "from": "esc_search",
                    "to": "search",
                    "as": "escape"
                },
                {
                    "from": "expand_contract",
                    "to": "expand_contract_display_graph"
                },
                {
                    "from": "expand_contract_display_graph",
                    "to": "display_graph",
                    "as": "enter"
                },
                {
                    "from": "expand_contract",
                    "to": "expand_contract_selected"
                },
                {
                    "from": "expand_contract_selected",
                    "to": "selected",
                    "as": "enter"
                },
                {
                    "from": "f",
                    "to": "search",
                    "as": "f"
                },
                {
                    "from": "o",
                    "to": "o_display_graph"
                },
                {
                    "from": "o",
                    "to": "o_selected"
                },
                {
                    "from": "o",
                    "to": "o_selected_edge"
                },
                {
                    "from": "o_display_graph",
                    "to": "display_graph",
                    "as": "o"
                },
                {
                    "from": "o_display_graph",
                    "to": "display_graph",
                    "as": "shift_o"
                },
                {
                    "from": "o_selected",
                    "to": "selected",
                    "as": "o"
                },
                {
                    "from": "o_selected",
                    "to": "selected",
                    "as": "shift_o"
                },
                {
                    "from": "o_selected_edge",
                    "to": "selected_edge",
                    "as": "o"
                },
                {
                    "from": "x",
                    "to": "x_display_graph"
                },
                {
                    "from": "x",
                    "to": "x_selected"
                },
                {
                    "from": "x",
                    "to": "x_selected_edge"
                },
                {
                    "from": "x_display_graph",
                    "to": "display_graph",
                    "as": "x"
                },
                {
                    "from": "x_selected",
                    "to": "selected",
                    "as": "x"
                },
                {
                    "from": "x_selected_edge",
                    "to": "selected_edge",
                    "as": "x"
                },
                {
                    "from": "y",
                    "to": "clipboard",
                    "as": "y"
                },
                {
                    "from": "make_edge",
                    "to": "display_graph",
                    "as": "c"
                },
                {
                    "from": "make_edge",
                    "to": "display_graph",
                    "as": "shift_c"
                },
                {
                    "from": "set_display_graph",
                    "to": "graph_sim"
                },
                {
                    "from": "state",
                    "to": "set_selected",
                    "as": "state"
                },
                {
                    "from": "selected",
                    "to": "set_selected",
                    "as": "selected"
                },
                {
                    "from": "set_selected",
                    "to": "set_show_all",
                    "as": "state"
                },
                {
                    "from": "show_all",
                    "to": "set_show_all",
                    "as": "show_all"
                },
                {
                    "from": "set_show_all",
                    "to": "set_clipboard",
                    "as": "state"
                },
                {
                    "from": "clipboard",
                    "to": "set_clipboard",
                    "as": "clipboard"
                },
                {
                    "from": "set_clipboard",
                    "to": "set_selected_edge",
                    "as": "state"
                },
                {
                    "from": "set_selected_edge",
                    "to": "set_search",
                    "as": "state"
                },
                {
                    "from": "search",
                    "to": "set_search",
                    "as": "search"
                },
                {
                    "from": "set_search",
                    "to": "set_edit_value",
                    "as": "state"
                },
                {
                    "from": "edit_value",
                    "to": "set_edit_value",
                    "as": "edit_value"
                },
                {
                    "from": "set_edit_value",
                    "to": "set_editing",
                    "as": "state"
                },
                {
                    "from": "editing",
                    "to": "set_editing",
                    "as": "editing"
                },
                {
                    "from": "set_editing",
                    "to": "set_pending_edges",
                    "as": "state"
                },
                {
                    "from": "set_pending_edges",
                    "to": "set_display_graph",
                    "as": "state"
                },
                {
                    "from": "display_graph",
                    "to": "set_display_graph",
                    "as": "display_graph"
                },
                {
                    "from": "set_display_graph",
                    "to": "out",
                    "type": "resolve"
                },
                {
                    "from": "key_event",
                    "to": "update_graph_sim"
                },
                {
                    "from": "key_event",
                    "to": "update"
                },
                {
                    "from": "display_graph",
                    "to": "update",
                    "as": "display_graph"
                },
                {
                    "from": "selected",
                    "to": "update",
                    "as": "selected"
                },
                {
                    "from": "set_display_graph",
                    "to": "update",
                    "as": "state"
                },
                {
                    "from": "key_inputs",
                    "to": "update",
                    "as": "key"
                },
                {
                    "from": "key_event",
                    "to": "out",
                    "as": "payload",
                    "type": "resolve"
                },
                {
                    "from": "update",
                    "to": "out",
                    "as": "update",
                    "type": "resolve"
                },
                {
                    "from": "save",
                    "to": "out",
                    "as": "fx",
                    "type": "resolve"
                }
            ]
        },
        {
            "id": "update_sim",
            "args": [
                "display_graph",
                "nodes",
                "links",
                "fuse_links",
                "simulation",
                "display_graph_out",
                "selected",
                "levels",
                "show_all"
            ],
            "script": "return lib.scripts.updateSimulationNodes({display_graph, nodes, links, fuse_links, simulation, display_graph_out, selected, levels, show_all})"
        },
        {
            "id": "update_sim_in"
        },
        {
            "id": "update_sim_fn",
            "type": "execute_graph"
        },
        {
            "id": "update_sim_effect",
            "type": "wrap_effect_fn"
        },
        {
            "id": "onclick_graph_fn_in"
        },
        {
            "id": "onclick_graph_fn_body",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "state",
                    "args": [
                        "args"
                    ],
                    "script": "return args[0]"
                },
                {
                    "id": "mouse_event",
                    "args": [
                        "args"
                    ],
                    "script": "return args[1]"
                },
                {
                    "id": "set_down_xy",
                    "args": [
                        "ev"
                    ],
                    "script": "return ev.ty === 'down' ? {x: ev.x, y: ev.y} : {}"
                },
                {
                    "id": "create_node",
                    "args": [
                        "ev",
                        "state"
                    ],
                    "script": "return ev.ty === 'move' && state.downx !== undefined && state.downy !== undefined && (Math.abs(ev.x - state.downx) > 32 || Math.abs(ev.y - state.downy) > 32)  ? {x: ev.x, y: ev.y, args: [], id: Date.now().toString() } : {}"
                },
                {
                    "id": "out",
                    "args": [
                        "data",
                        "down",
                        "new_node"
                    ],
                    "script": "return {...data, downx: down?.x ?? data.downx, downy: down?.y ?? data.downy}"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "mouse_event",
                    "as": "args"
                },
                {
                    "from": "in",
                    "to": "state",
                    "as": "args"
                },
                {
                    "from": "mouse_event",
                    "to": "set_down_xy",
                    "as": "ev"
                },
                {
                    "from": "mouse_event",
                    "to": "create_node",
                    "as": "ev"
                },
                {
                    "from": "state",
                    "to": "create_node",
                    "as": "state"
                },
                {
                    "from": "set_down_xy",
                    "to": "out",
                    "as": "down"
                },
                {
                    "from": "create_node",
                    "to": "out",
                    "as": "new_node"
                },
                {
                    "from": "state",
                    "to": "out",
                    "as": "data"
                }
            ]
        },
        {
            "id": "onclick_graph_fn",
            "type": "execute_graph"
        },
        {
            "id": "onclick_node_fn_in"
        },
        {
            "id": "onclick_node_fn_body",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "state",
                    "args": [
                        "args"
                    ],
                    "script": "return args[0]"
                },
                {
                    "id": "event",
                    "args": [
                        "args"
                    ],
                    "script": "return args[1]"
                },
                {
                    "id": "node_id",
                    "args": [
                        "node_id"
                    ],
                    "script": "return node_id"
                },
                {
                    "id": "get_selected_node",
                    "args": [
                        "node_id",
                        "nodes"
                    ],
                    "script": "return nodes.find(n => n.node_id === node_id)"
                },
                {
                    "id": "selected_inputs",
                    "args": [
                        "event",
                        "selected",
                        "node"
                    ],
                    "script": "return event.ty !== 'down' ? [] : node.node_id === selected[0] ? 'expand_contract' : 'node_id'"
                },
                {
                    "id": "selected",
                    "type": "switch"
                },
                {
                    "id": "set_selected",
                    "args": [
                        "selected",
                        "state"
                    ],
                    "script": "state.selected = selected ? [selected] : state.selected; return state"
                },
                {
                    "id": "display_graph_inputs",
                    "args": [
                        "event",
                        "selected",
                        "node"
                    ],
                    "script": "return event.ty === 'down' && node.node_id === selected[0] ? ['expand_contract'] : []"
                },
                {
                    "id": "display_graph",
                    "type": "switch"
                },
                {
                    "id": "set_display_graph",
                    "args": [
                        "display_graph",
                        "state"
                    ],
                    "script": "state.display_graph = display_graph ?? state.display_graph; return state"
                },
                {
                    "id": "expand_contract",
                    "type": "expand_contract"
                },
                {
                    "id": "expand_contract_selected",
                    "args": [
                        "selected"
                    ],
                    "script": "return selected"
                },
                {
                    "id": "expand_contract_display_graph",
                    "args": [
                        "display_graph"
                    ],
                    "script": "return display_graph"
                },
                {
                    "id": "out",
                    "type": "update_and_run"
                }
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "event",
                    "as": "args"
                },
                {
                    "from": "in",
                    "to": "state",
                    "as": "args"
                },
                {
                    "from": "event",
                    "to": "node_id"
                },
                {
                    "from": "node_id",
                    "to": "selected_inputs",
                    "as": "node_id"
                },
                {
                    "from": "node_id",
                    "to": "get_selected_node",
                    "as": "node_id"
                },
                {
                    "from": "state",
                    "to": "selected_inputs"
                },
                {
                    "from": "state",
                    "to": "get_selected_node"
                },
                {
                    "from": "get_selected_node",
                    "to": "selected_inputs",
                    "as": "node"
                },
                {
                    "from": "event",
                    "to": "selected_inputs",
                    "as": "event"
                },
                {
                    "from": "selected_inputs",
                    "to": "selected",
                    "as": "input"
                },
                {
                    "from": "node_id",
                    "to": "selected",
                    "as": "node_id"
                },
                {
                    "from": "state",
                    "to": "set_selected",
                    "as": "state"
                },
                {
                    "from": "selected",
                    "to": "set_selected",
                    "as": "selected"
                },
                {
                    "from": "set_selected",
                    "to": "set_display_graph",
                    "as": "state"
                },
                {
                    "from": "display_graph",
                    "to": "set_display_graph",
                    "as": "display_graph"
                },
                {
                    "from": "get_selected_node",
                    "to": "display_graph_inputs",
                    "as": "node"
                },
                {
                    "from": "state",
                    "to": "display_graph_inputs"
                },
                {
                    "from": "event",
                    "to": "display_graph_inputs",
                    "as": "event"
                },
                {
                    "from": "display_graph_inputs",
                    "to": "display_graph",
                    "as": "input"
                },
                {
                    "from": "state",
                    "to": "expand_contract"
                },
                {
                    "from": "node_id",
                    "to": "expand_contract",
                    "as": "node_id"
                },
                {
                    "from": "expand_contract",
                    "to": "expand_contract_selected"
                },
                {
                    "from": "expand_contract",
                    "to": "expand_contract_display_graph"
                },
                {
                    "from": "expand_contract_selected",
                    "to": "selected",
                    "as": "expand_contract"
                },
                {
                    "from": "expand_contract_display_graph",
                    "to": "display_graph",
                    "as": "expand_contract"
                },
                {
                    "from": "event",
                    "to": "out",
                    "as": "payload"
                },
                {
                    "from": "set_display_graph",
                    "to": "out"
                }
            ]
        },
        {
            "id": "onclick_node_fn",
            "type": "execute_graph"
        },
        {
            "id": "editor_dom_type",
            "value": "div"
        },
        {
            "id": "editor_props",
            "value": {"key": "editor"}
        },
        {
            "id": "calculate_levels",
            "args": [
                "display_graph",
                "selected"
            ],
            "script": "return lib.scripts.calculateLevels(display_graph, selected)"
        },
        {
            "id": "editor",
            "nodes": [
                {
                    "id": "in"
                },
                {
                    "id": "wrapper",
                    "type": "run_h"
                },
                {
                    "id": "graph",
                    "type": "arg",
                    "value": "graph"
                },
                {
                    "id": "wrapper_dom_type",
                    "value": "div"
                },
                {
                    "id": "wrapper_props",
                    "value": {}
                },
                {
                    "id": "wrapper_children",
                    "args": [
                        "node_editor",
                        "edit_text",
                        "search_input",
                        "result"
                    ],
                    "script": "return [node_editor.el, edit_text.el, search_input.el, result.el]"
                },
                {
                    "id": "edit_text",
                    "nodes": [
                        {
                            "id": "in"
                        },
                        {
                            "id": "edit_text",
                            "type": "h"
                        },
                        {
                            "id": "edit_text_dom_type",
                            "value": "div"
                        },
                        {
                            "id": "edit_text_input",
                            "type": "h"
                        },
                        {
                            "id": "edit_text_textarea",
                            "type": "h"
                        },
                        {
                            "id": "edit_text_base_props",
                            "value": {
                                "id": "edit_value"
                            }
                        },
                        {
                            "id": "edit_text_props"
                        },
                        {
                            "id": "edit_text_children",
                            "args": [
                                "label",
                                "input",
                                "textarea",
                                "types"
                            ],
                            "script": "return [label.el, input.el, textarea.el, types.el]"
                        },
                        {
                            "id": "edit_text_textarea_dom_type",
                            "args": ["editing"],
                            "script": "return 'textarea'"
                        },
                        {
                            "id": "edit_text_textarea_props",
                            "args": [
                                "selected",
                                "selected_edge",
                                "display_graph",
                                "editing",
                                "edit_value"
                            ],
                            "script": "const start_value = edit_value ?? (!editing ? '' : (selected_edge ? display_graph.edges.find(e => e.from === selected_edge.from && e.to === selected_edge.to) : display_graph.nodes.find(n => n.id === selected[0]))[editing]); return Object.assign({class: 'textarea', value: typeof(start_value) === 'string' ? start_value : JSON.stringify(start_value), oninput: (s, payload) => ({...s, edit_value: payload.target.value})})"
                        },
                        {
                            "id": "edit_text_input_dom_type",
                            "args": ["editing"],
                            "script": "return 'input'"
                        },
                        {
                            "id": "edit_text_input_props",
                            "args": [
                                "selected",
                                "selected_edge",
                                "display_graph",
                                "editing",
                                "edit_value"
                            ],
                            "script": "const start_value = edit_value ?? (!editing ? '' : (selected_edge ? display_graph.edges.find(e => e.from === selected_edge.from && e.to === selected_edge.to) : display_graph.nodes.find(n => n.id === selected[0]))[editing]); return Object.assign({class: 'input', value: typeof(start_value) === 'string' ? start_value : JSON.stringify(start_value), oninput: (s, payload) => ({...s, edit_value: payload.target.value})}, editing === 'type' ? {list: 'type-options', type: 'text'} : {})"
                        },
                        {
                            "id": "edit_text_label",
                            "type": "h"
                        },
                        {
                            "id": "edit_text_label_dom_type",
                            "value": "p"
                        },
                        {
                            "id": "edit_text_label_text",
                            "type": "h_text"
                        },
                        {
                            "id": "editing",
                            "args": [
                                "editing"
                            ],
                            "script": "return editing || 'none'"
                        },
                        {
                            "id": "types",
                            "type": "h"
                        },
                        {
                            "id": "types_dom_type",
                            "value": "datalist"
                        },
                        {
                            "id": "types_props",
                            "value": {"id": "type-options"}
                        },
                        {
                            "id": "get_nodes",
                            "args": ["display_graph"],
                            "script": "return display_graph.nodes"
                        },
                        {
                            "id": "get_id",
                            "args": ["node"],
                            "script": "return node.id"
                        },
                        {
                            "id": "id_text",
                            "type": "h_text"
                        },
                        {
                            "id": "wrap_dom_type",
                            "value": "option"
                        },
                        {
                            "id": "wrap_option",
                            "type": "h"
                        },
                        {
                            "id": "out"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "edit_text_input_props"
                        },
                        {
                            "from": "in",
                            "to": "edit_text_input_dom_type"
                        },
                        {
                            "from": "in",
                            "to": "edit_text_textarea_props"
                        },
                        {
                            "from": "in",
                            "to": "edit_text_textarea_dom_type"
                        },
                        {
                            "from": "edit_text",
                            "to": "out"
                        },
                        {
                            "from": "edit_text_dom_type",
                            "to": "edit_text",
                            "as": "dom_type"
                        },
                        {
                            "from": "edit_text_base_props",
                            "to": "edit_text_props"
                        },
                        {
                            "from": "edit_text_props",
                            "to": "edit_text",
                            "as": "props"
                        },
                        {
                            "from": "edit_text_children",
                            "to": "edit_text",
                            "as": "children"
                        },
                        {
                            "from": "edit_text_input",
                            "to": "edit_text_children",
                            "as": "input"
                        },
                        {
                            "from": "edit_text_input_props",
                            "to": "edit_text_input",
                            "as": "props"
                        },
                        {
                            "from": "edit_text_input_dom_type",
                            "to": "edit_text_input",
                            "as": "dom_type"
                        },
                        {
                            "from": "edit_text_textarea",
                            "to": "edit_text_children",
                            "as": "textarea"
                        },
                        {
                            "from": "edit_text_textarea_props",
                            "to": "edit_text_textarea",
                            "as": "props"
                        },
                        {
                            "from": "edit_text_textarea_dom_type",
                            "to": "edit_text_textarea",
                            "as": "dom_type"
                        },
                        {
                            "from": "edit_text_label",
                            "to": "edit_text_children",
                            "as": "label"
                        },
                        {
                            "from": "edit_text_label_dom_type",
                            "to": "edit_text_label",
                            "as": "dom_type"
                        },
                        {
                            "from": "edit_text_label_text",
                            "to": "edit_text_label",
                            "as": "children"
                        },
                        {
                            "from": "types_dom_type",
                            "to": "types",
                            "as": "dom_type" 
                        },
                        {
                            "from": "types_props",
                            "to": "types",
                            "as": "props" 
                        },
                        {
                            "from": "types",
                            "to": "edit_text_children",
                            "as": "types" 
                        },
                        {
                            "from": "wrap_dom_type",
                            "to": "wrap_option",
                            "as": "dom_type"
                        },
                        {
                            "from": "id_text",
                            "to": "wrap_option",
                            "as": "children"
                        },
                        {
                            "from": "wrap_option",
                            "to": "types",
                            "as": "children"
                        },
                        {
                            "from": "in",
                            "to": "get_nodes"
                        },
                        {
                            "from": "get_nodes",
                            "to": "get_id",
                            "as": "node"
                        },
                        {
                            "from": "get_id",
                            "to": "id_text",
                            "as": "text"
                        },
                        {
                            "from": "in",
                            "to": "editing"
                        },
                        {
                            "from": "editing",
                            "to": "edit_text_label_text",
                            "as": "text"
                        },
                        {
                            "from": "editing",
                            "to": "edit_text_props",
                            "as": "class"
                        }
                    ]
                },
                {
                    "id": "result",
                    "nodes": [
                        {
                            "id": "in"
                        },
                        {
                            "id": "get_node",
                            "args": [
                                "display_graph",
                                "selected"
                            ],
                            "script": "return display_graph.nodes.find(n => n.id === selected[0])"
                        },
                        {
                            "id": "get_type",
                            "args": [
                                "type",
                                "script",
                                "value",
                                "nodes"
                            ],
                            "script": "return type?.display_type ? type.display_type : typeof value !== 'undefined' && typeof value !== 'object' ? typeof value : type ? (type.node_type ?? type) : nodes ? 'graph' : script ? 'script' : 'passthrough'"
                        },
                        {
                            "id": "get_node_display",
                            "args": [
                                "display_graph",
                                "type"
                            ],
                            "script": "return display_graph.nodes.find(n => n.id === type + '_display') ?? display_graph.nodes.find(n => n.id === 'default_node_display')"
                        },
                        {
                            "id": "get_error_display",
                            "args": [
                                "display_graph",
                                "type"
                            ],
                            "script": "return display_graph.nodes.find(n => n.id === 'default_error_display')"
                        },
                        {
                            "id": "result",
                            "type": "arg",
                            "value": "result"
                        },
                        {
                            "id": "display_graph",
                            "type": "arg",
                            "value": "display_graph"
                        },
                        {
                            "id": "run_node_display",
                            "args": [
                                "node",
                                "display",
                                "error",
                                "result",
                                "display_graph",
                                "node_inputs"
                            ],
                        "script": "try { const graph = {...display_graph, nodes: display_graph.nodes.concat([]), edges:display_graph.edges.concat([]), out: display.id, in: display.id + '/' + display.in}; const input = {state: new Map([[display.id + '/' +  display.in, {node, result: result?.get(node.id), input_results: Object.fromEntries(graph.edges.filter(e => e.to === node.id).map(e => [e.as ?? e.from, result?.get(e.from)]))}]]), graph, cache_id: 'rnd'}; return lib.no.executeGraph(input).get(display.id).el } catch(e){ return {error: e} }"
                        },
                        {
                            "id": "run_error_display",
                            "args": [
                                "node",
                                "error",
                                "error_display",
                                "display_graph"
                            ],
                            "script": "return !error ? undefined : lib.no.executeGraph({state: new Map([[error_display.id + '/' +  error_display.in, {node, error: error.toString()}]]), graph: {...display_graph, nodes: display_graph.nodes.concat([]), edges:display_graph.edges.concat([]), out: error_display.id, in: error_display.id + '/' + error_display.in}}).get(error_display.id)"
                        },
                        {
                            "id": "container_dom_type",
                            "value": "div"
                        },
                        {
                            "id": "container_props",
                            "args": [
                                "error"
                            ],
                            "script": "return {class: error ? 'error' : '', id: 'result'}"
                        },
                        {
                            "id": "container_children_inputs",
                            "args": ["error"],
                            "script": "return error? ['error_display'] : ['display']"
                        },
                        {
                            "id": "container_children",
                            "args": ["error_display", "display"],
                            "script": "return [error_display ?? display]"
                        },
                        {
                            "id": "container",
                            "type": "h"
                        },
                        {
                            "id": "text_value",
                            "args": [
                                "result",
                                "error"
                            ],
                            "script": "return error ?? result ?? ''"
                        },
                        {
                            "id": "out"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "container_props"
                        },
                        {
                            "from": "in",
                            "to": "get_node"
                        },
                        {
                            "from": "in",
                            "to": "get_node_display"
                        },
                        {
                            "from": "in",
                            "to": "get_error_display"
                        },
                        {
                            "from": "in",
                            "to": "run_error_display"
                        },
                        {
                            "from": "in",
                            "to": "container_children_inputs"
                        },
                        {
                            "from": "get_node",
                            "to": "get_type"
                        },
                        {
                            "from": "get_type",
                            "to": "get_node_display",
                            "as": "type"
                        },
                        {
                            "from": "get_type",
                            "to": "get_error_display",
                            "as": "type"
                        },
                        {
                            "from": "get_node",
                            "to": "run_node_display",
                            "as": "node"
                        },
                        {
                            "from": "get_node",
                            "to": "run_error_display",
                            "as": "node"
                        },
                        {
                            "from": "get_node_display",
                            "to": "run_node_display",
                            "as": "display"
                        },
                        {
                            "from": "display_graph",
                            "to": "run_node_display",
                            "as": "display_graph"
                        },
                        {
                            "from": "result",
                            "to": "run_node_display",
                            "as": "result"
                        },
                        {
                            "from": "get_error_display",
                            "to": "run_error_display",
                            "as": "error_display"
                        },
                        {
                            "from": "container_children_inputs",
                            "to": "container_children",
                            "as": "input"
                        },
                        {
                            "from": "run_node_display",
                            "to": "container_children",
                            "as": "display"
                        },
                        {
                            "from": "run_error_display",
                            "to": "container_children",
                            "as": "error_display"
                        },
                        {
                            "from": "run_node_display",
                            "to": "run_error_display"
                        },
                        {
                            "from": "container_props",
                            "to": "container",
                            "as": "props"
                        },
                        {
                            "from": "container_children",
                            "to": "container",
                            "as": "children"
                        },
                        {
                            "from": "container_dom_type",
                            "to": "container",
                            "as": "dom_type"
                        },
                        {
                            "from": "container",
                            "to": "out"
                        }
                    ]
                },
                {
                    "id": "search_input",
                    "nodes": [
                        {
                            "id": "in"
                        },
                        {
                            "id": "search_input_dom_type",
                            "value": "input"
                        },
                        {
                            "id": "search_input_props",
                            "args": [
                                "search",
                                "display_graph"
                            ],
                            "script": "return {id: `search-input`, type: 'text', onkeydown: (s, payload) => { if(payload.key === 'Enter'){ const direction = payload.shiftKey ? -1 : 1; const idx = (s.search_results.length + s.search_index + direction) % s.search_results.length; return {...s, selected: s.search_results.slice(idx, idx + 1), search_index: idx} } else { return s;} }, oninput: (s, payload) => { const search_results = new lib.Fuse(display_graph.nodes, {keys: ['name', 'id']}).search(payload.target.value).map(r => r.item.id); return {...s, search: payload.target.value, selected: search_results.length > 0 ? search_results.slice(0, 1) : s.selected, search_results, search_index: 0, levels: lib.scripts.calculateLevels(display_graph, search_results.length > 0 ? search_results.slice(0, 1) : s.selected)}}}"
                        },
                        {
                            "id": "out",
                            "type": "h"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "search_input_props"
                        },
                        {
                            "from": "search_input_dom_type",
                            "to": "out",
                            "as": "dom_type"
                        },
                        {
                            "from": "search_input_props",
                            "to": "out",
                            "as": "props"
                        }
                    ]
                },
                {
                    "id": "node_editor",
                    "nodes": [
                        {
                            "id": "in"
                        },
                        {
                            "id": "log",
                            "type": "log"
                        },
                        {
                            "id": "out",
                            "type": "h"
                        },
                        {
                            "id": "get_nodes",
                            "args": [
                                "nodes"
                            ],
                            "script": "return nodes ?? []"
                        },
                        {
                            "id": "get_links",
                            "args": [
                                "links"
                            ],
                            "script": "return links ?? []"
                        },
                        {
                            "id": "get_selected",
                            "args": [
                                "selected"
                            ],
                            "script": "return selected"
                        },
                        {
                            "id": "get_graph",
                            "args": [
                                "graph"
                            ],
                            "script": "return graph"
                        },
                        {
                            "id": "get_selected_node",
                            "args":["selected", "nodes"],
                            "script": "return nodes.find(n => n.node_id === selected[0])"
                        },
                        {
                            "id": "get_selected_edge",
                            "args": [
                                "selected_edge"
                            ],
                            "script": "return selected_edge"
                        },
                        {
                            "id": "get_onclick_node_fn",
                            "args": [
                                "onclick_node_fn"
                            ],
                            "script": "return onclick_node_fn"
                        },
                        {
                            "id": "get_levels",
                            "args": ["levels"],
                            "script": "return levels"
                        },
                        {
                            "id": "node_editor_props",
                            "args": [
                                "onclick_graph_fn",
                                "selected"
                            ],
                            "script": "return {width: window.innerWidth, height: window.innerHeight, viewBox: `${(selected?.x ?? (window.innerWidth * 0.5)) - (window.innerWidth * 0.5)} ${(selected?.y ?? (window.innerHeight * 0.5)) - (window.innerHeight * 0.5)} ${window.innerWidth} ${window.innerHeight}` /*, onmousedown: (_, payload) => [onclick_graph_fn, {x: payload.x, y: payload.y, ty: 'down'}], onmouseup: (_, payload) => [onclick_graph_fn, {x: payload.x, y: payload.y, ty: 'up'}], onmousemove: (_, payload) => [onclick_graph_fn, {x: payload.x, y: payload.y, ty: 'move'}]*/}"
                        },
                        {
                            "id": "node_editor_dom_type",
                            "value": "svg"
                        },
                        {
                            "id": "node_editor_children",
                            "args": [
                                "nodes",
                                "defs",
                                "links"
                            ],
                            "script": "return [defs.el].concat(nodes?.map(c => c.el) ?? []).concat(links?.flatMap(l => l.map(lc => lc.el)) ?? [])"
                        },
                        {
                            "id": "node_layout",
                            "args": ["node_inputs", "node_layout_map", "nodes", "graph", "onclick_node_fn", "selected", "selected_edge"],
                            "script": "return nodes.map(n => lib.no.executeGraph({state: new Map([[node_layout_map + '/in', Object.assign({node: n}, node_inputs)]]), graph: {...graph, in: '_' + n.node_id, out: node_layout_map}, cache_id: '_' + n.node_id}).get(node_layout_map))"
                        },
                        {
                            "id": "node_layout_map",
                            "nodes": [
                                {
                                    "id": "in"
                                },
                                {
                                    "id": "get_node",
                                    "args": [
                                        "node"
                                    ],
                                    "script": "return node"
                                },
                                {
                                    "id": "is_selected",
                                    "args": [
                                        "selected",
                                        "node_id"
                                    ],
                                    "script": "return selected.includes(node_id)"
                                },
                                {
                                    "id": "out"
                                },
                                {
                                    "id": "parent",
                                    "type": "h"
                                },
                                {
                                    "id": "parent_dom_type",
                                    "value": "svg"
                                },
                                {
                                    "id": "parent_attrs",
                                    "args": [
                                        "node",
                                        "meta"
                                    ],
                                    "script": "const mouseevent = (_, payload) => [meta.onclick_node_fn, {x: payload.x, y: payload.y, node_id: node.node_id, selected: [], ty: 'down'}]; return ({ x: node.x - 20, y: node.y - 20, id: node.node_id, onmousedown: mouseevent, width: 256, height: 64, id: node.node_child_id, class: `node ${meta.selected[0] === node.node_id ? 'selected': ''}`, opacity: meta.selected_edge?.from === node.node_id ? 1 : node.selected_distance !== undefined ? Math.max(0.05, 1 - (node.selected_distance * node.selected_distance + (!!node.selected_distance ? 2 : 0)) / 6) : 0.1})"

                                },
                                {
                                    "id": "children",
                                    "nodes": [
                                        {
                                            "id": "in"
                                        },
                                        {
                                            "id": "node_shape_attrs",
                                            "args": [
                                                "value",
                                                "script",
                                                "type",
                                                "selected_distance",
                                                "nodes"
                                            ],
                                            "script": "const r = 24 / ((Math.min(10, selected_distance ?? 10) * 0.5) + 1); return value !== undefined ? {class: 'shape value', points: `4,${4 + r} ${4 + r},${4 + r} ${4 + r * 0.5},4`} : script ? {class: 'shape script', width: r, height: r, x: 10, y: 10} : type ? {class: 'shape type', width: r, height: r, x: 10, y: 10} : nodes ? {class: 'shape graph', r: r * 0.5, cx: r * 0.5 + 4, cy: r * 0.5 + 4}  : {class: 'shape none', r: r * 0.5 , cx: r * 0.5 + 4, cy: r * 0.5 + 4}"
                                        },
                                        {
                                            "id": "default_color",
                                            "value": "blue"
                                        },
                                        {
                                            "id": "empty_array",
                                            "value": []
                                        },
                                        {
                                            "id": "node_shape_dom_type",
                                            "args": [
                                                "value",
                                                "script",
                                                "type",
                                                "nodes"
                                            ],
                                            "script": "return value !== undefined ? 'polygon' : script ? 'rect' : type ? 'rect' : nodes ? 'circle' : 'circle'"
                                        },
                                        {
                                            "id": "node_shape",
                                            "type": "h"
                                        },
                                        {
                                            "id": "text",
                                            "nodes": [
                                                {
                                                    "id": "in"
                                                },
                                                {
                                                    "id": "out"
                                                },
                                                {
                                                    "id": "node_id",
                                                    "value": "node_id"
                                                },
                                                {
                                                    "id": "node_type",
                                                    "value": "type"
                                                },
                                                {
                                                    "id": "node_name",
                                                    "value": "name"
                                                },
                                                {
                                                    "id": "node_value",
                                                    "value": "value"
                                                },
                                                {
                                                    "id": "node_selected_distance",
                                                    "value": "selected_distance"
                                                },
                                                {
                                                    "id": "get_id",
                                                    "type": "get"
                                                },
                                                {
                                                    "id": "get_name",
                                                    "type": "get"
                                                },
                                                {
                                                    "id": "get_value",
                                                    "args": [
                                                        "target",
                                                        "def"
                                                    ],
                                                    "script": "return target.value !== undefined ? (typeof target.value === 'object' ? JSON.stringify(target.value) : target.value.toString()) : def"
                                                },
                                                {
                                                    "id": "get_type",
                                                    "args": [
                                                        "target"
                                                    ],
                                                    "script": "return `type: ` + (target.value !== undefined ? 'value' : target.type ? JSON.stringify(target.type) : target.script ? 'script' : target.nodes ? `graph (${target.nodes.length}, ${target.edges.length})` : 'passthrough')"
                                                },
                                                {
                                                    "id": "get_selected_distance",
                                                    "type": "get"
                                                },
                                                {
                                                    "id": "shorten",
                                                    "args": [
                                                        "text"
                                                    ],
                                                    "script": "return text.substring(text.lastIndexOf('/') + 1)"
                                                },
                                                {
                                                    "id": "node_primary_text_attrs",
                                                    "value": {
                                                        "class": "primary",
                                                        "dy": ".6em",
                                                        "x": "48"
                                                    }
                                                },
                                                {
                                                    "id": "tspan_dom_type",
                                                    "value": "tspan"
                                                },
                                                {
                                                    "id": "node_primary_text_text",
                                                    "type": "h_text"
                                                },
                                                {
                                                    "id": "node_primary_text",
                                                    "type": "h"
                                                },
                                                {
                                                    "id": "node_secondary_text_attrs",
                                                    "value": {
                                                        "class": "secondary",
                                                        "dy": "1.2em",
                                                        "x": "48"
                                                    }
                                                },
                                                {
                                                    "id": "node_secondary_text_text",
                                                    "type": "h_text"
                                                },
                                                {
                                                    "id": "node_secondary_text",
                                                    "type": "h"
                                                },
                                                {
                                                    "id": "node_text_dom_type",
                                                    "value": "text"
                                                },
                                                {
                                                    "id": "node_text",
                                                    "type": "h"
                                                },
                                                {
                                                    "id": "script",
                                                    "value": "script"
                                                },
                                                {
                                                    "id": "node_text_props",
                                                    "args": [
                                                        "selected_distance"
                                                    ],
                                                    "script": "return { x: 48, y: 12 }"
                                                },
                                                {
                                                    "id": "node_text_children",
                                                    "args": [
                                                        "primary",
                                                        "secondary"
                                                    ],
                                                    "script": "return [primary.el, secondary.el]"
                                                },
                                                {
                                                    "id": "text",
                                                    "value": "text"
                                                }
                                            ],
                                            "edges": [
                                                {
                                                    "from": "in",
                                                    "to": "get_id",
                                                    "as": "target"
                                                },
                                                {
                                                    "from": "in",
                                                    "to": "get_type",
                                                    "as": "target"
                                                },
                                                {
                                                    "from": "in",
                                                    "to": "get_name",
                                                    "as": "target"
                                                },
                                                {
                                                    "from": "in",
                                                    "to": "get_value",
                                                    "as": "target"
                                                },
                                                {
                                                    "from": "in",
                                                    "to": "get_selected_distance",
                                                    "as": "target"
                                                },
                                                {
                                                    "from": "get_id",
                                                    "to": "get_value",
                                                    "as": "def"
                                                },
                                                {
                                                    "from": "get_value",
                                                    "to": "get_name",
                                                    "as": "default"
                                                },
                                                {
                                                    "from": "node_id",
                                                    "to": "get_id",
                                                    "as": "path"
                                                },
                                                {
                                                    "from": "node_type",
                                                    "to": "get_type",
                                                    "as": "path"
                                                },
                                                {
                                                    "from": "node_name",
                                                    "to": "get_name",
                                                    "as": "path"
                                                },
                                                {
                                                    "from": "node_selected_distance",
                                                    "to": "get_selected_distance",
                                                    "as": "path"
                                                },
                                                {
                                                    "from": "script",
                                                    "to": "get_type",
                                                    "as": "default_value"
                                                },
                                                {
                                                    "from": "get_name",
                                                    "to": "node_primary_text_text",
                                                    "as": "text"
                                                },
                                                {
                                                    "from": "get_type",
                                                    "to": "node_secondary_text_text",
                                                    "as": "text"
                                                },
                                                {
                                                    "from": "get_selected_distance",
                                                    "to": "node_text_props",
                                                    "as": "selected_distance"
                                                },
                                                {
                                                    "from": "node_text_props",
                                                    "to": "node_text",
                                                    "as": "props"
                                                },
                                                {
                                                    "from": "node_primary_text_text",
                                                    "to": "node_primary_text",
                                                    "as": "children"
                                                },
                                                {
                                                    "from": "node_primary_text_attrs",
                                                    "to": "node_primary_text",
                                                    "as": "props"
                                                },
                                                {
                                                    "from": "node_primary_text",
                                                    "to": "node_text_children",
                                                    "as": "primary"
                                                },
                                                {
                                                    "from": "node_secondary_text_text",
                                                    "to": "node_secondary_text",
                                                    "as": "children"
                                                },
                                                {
                                                    "from": "node_secondary_text_attrs",
                                                    "to": "node_secondary_text",
                                                    "as": "props"
                                                },
                                                {
                                                    "from": "tspan_dom_type",
                                                    "to": "node_primary_text",
                                                    "as": "dom_type"
                                                },
                                                {
                                                    "from": "node_secondary_text",
                                                    "to": "node_text_children",
                                                    "as": "secondary"
                                                },
                                                {
                                                    "from": "tspan_dom_type",
                                                    "to": "node_secondary_text",
                                                    "as": "dom_type"
                                                },
                                                {
                                                    "from": "node_text_children",
                                                    "to": "node_text",
                                                    "as": "children"
                                                },
                                                {
                                                    "from": "node_text_dom_type",
                                                    "to": "node_text",
                                                    "as": "dom_type"
                                                },
                                                {
                                                    "from": "node_text",
                                                    "to": "out"
                                                }
                                            ]
                                        },
                                        {
                                            "id": "order",
                                            "args": [
                                                "shape",
                                                "text"
                                            ],
                                            "script": "return [shape.el, text.el]"
                                        },
                                        {
                                            "id": "out"
                                        }
                                    ],
                                    "edges": [
                                        {
                                            "from": "in",
                                            "to": "node_shape_attrs"
                                        },
                                        {
                                            "from": "in",
                                            "to": "node_shape_dom_type"
                                        },
                                        {
                                            "from": "default_color",
                                            "to": "node_shape_attrs",
                                            "as": "color"
                                        },
                                        {
                                            "from": "empty_array",
                                            "to": "node_shape",
                                            "as": "children"
                                        },
                                        {
                                            "from": "node_shape_dom_type",
                                            "to": "node_shape",
                                            "as": "dom_type"
                                        },
                                        {
                                            "from": "in",
                                            "to": "text"
                                        },
                                        {
                                            "from": "node_shape_attrs",
                                            "to": "node_shape",
                                            "as": "props"
                                        },
                                        {
                                            "from": "node_shape",
                                            "to": "order",
                                            "as": "shape"
                                        },
                                        {
                                            "from": "text",
                                            "to": "order",
                                            "as": "text"
                                        },
                                        {
                                            "from": "order",
                                            "to": "out",
                                            "as": "children"
                                        }
                                    ]
                                }
                            ],
                            "edges": [
                                {
                                    "from": "args_in",
                                    "to": "in"
                                },
                                {
                                    "from": "in",
                                    "to": "get_node"
                                },
                                {
                                    "from": "in",
                                    "to": "is_selected"
                                },
                                {
                                    "from": "in",
                                    "to": "parent_attrs",
                                    "as": "meta"
                                },
                                {
                                    "from": "in",
                                    "to": "get_node_display"
                                },
                                {
                                    "from": "get_node",
                                    "to": "get_type"
                                },
                                {
                                    "from": "get_node",
                                    "to": "children"
                                },
                                {
                                    "from": "get_node",
                                    "to": "is_selected"
                                },
                                {
                                    "from": "is_selected",
                                    "to": "children",
                                    "as": "selected"
                                },
                                {
                                    "from": "children",
                                    "to": "parent"
                                },
                                {
                                    "from": "parent_attrs",
                                    "to": "parent",
                                    "as": "props"
                                },
                                {
                                    "from": "parent_dom_type",
                                    "to": "parent",
                                    "as": "dom_type"
                                },
                                {
                                    "from": "get_node",
                                    "to": "parent_attrs",
                                    "as": "node"
                                },
                                {
                                    "from": "parent",
                                    "to": "out"
                                }
                            ]
                        },
                        {
                            "id": "link_layout",
                            "args": ["node_inputs", "link_layout_map", "links", "graph", "selected_edge"],
                            "script": "return links.map(link => lib.no.executeGraph({state: new Map([[link_layout_map + '/in', Object.assign({link}, node_inputs)]]), graph: {...graph, edges: graph.edges.concat([{from: '_' + link.source.node_child_id, to: link_layout_map}]), in: '_' + link.source.node_child_id, out: link_layout_map}, cache_id: '_' + link.source.node_child_id + link.target.node_child_id}).get(link_layout_map))"
                        },
                        {
                            "id": "link_layout_map",
                            "nodes": [
                                {
                                    "id": "in"
                                },
                                {
                                    "id": "get_link",
                                    "args": [
                                        "link"
                                    ],
                                    "script": "return link ?? {}"
                                },
                                {
                                    "id": "get_selected_edge",
                                    "args": [
                                        "input"
                                    ],
                                    "script": "return input.selected_edge"
                                },
                                {
                                    "id": "edge_info_el",
                                    "type": "h"
                                },
                                {
                                    "id": "edge_info_el_children",
                                    "args": [
                                        "edge_as",
                                        "edge_type",
                                        "rect"
                                    ],
                                    "script": "return [rect.el, edge_as.el, edge_type.el]"
                                },
                                {
                                    "id": "edge_info_dom_type",
                                    "value": "svg"
                                },
                                {
                                    "id": "edge_info_props",
                                    "args": [
                                        "source",
                                        "target",
                                        "selected_distance",
                                        "sibling_index_normalized",
                                        "selected_edge"
                                    ],
                                    "script": "return ({x: Math.floor((sibling_index_normalized * 0.8 + 0.05) * (target.x - source.x) + source.x) + 16, y: Math.floor((sibling_index_normalized * 0.8 + 0.05) * (target.y - source.y) + source.y), z: selected_edge && source.node_id === selected_edge.from && target.node_id === selected_edge.to ? 100 : 200, opacity: selected_distance !== undefined ? Math.max(0.05, 1 - selected_distance * selected_distance / 2) : 0.1, class: {selected: selected_edge && (source.node_id === selected_edge.from + '_' + selected_edge.to || (source.node_id === selected_edge.from && target.node_id === selected_edge.to)), edge: true} })"
                                },
                                {
                                    "id": "edge_info_line_position",
                                    "value": 0.5,
                                    "min": 0,
                                    "max": 1,
                                    "step": 0.01
                                },
                                {
                                    "id": "edge_info_type_props",
                                    "value": {
                                        "font-size": 14,
                                        "y": 32
                                    }
                                },
                                {
                                    "id": "edge_info_type_el",
                                    "type": "svg_text"
                                },
                                {
                                    "id": "edge_info_type_text",
                                    "args": [
                                        "link"
                                    ],
                                    "script": "return link.type ?? ''"
                                },
                                {
                                    "id": "edge_info_as_props",
                                    "value": {
                                        "font-size": 14,
                                        "y": 16
                                    }
                                },
                                {
                                    "id": "edge_info_as_el",
                                    "type": "svg_text"
                                },
                                {
                                    "id": "edge_info_as_text",
                                    "args": [
                                        "link"
                                    ],
                                    "script": "return link.as ?? '*'"
                                },
                                {
                                    "id": "edge_info_rect_dom_type",
                                    "value": "rect"
                                },
                                {
                                    "id": "edge_info_rect",
                                    "type": "h"
                                },
                                {
                                    "id": "lerp_length",
                                    "value": 24
                                },
                                {
                                    "id": "line_lerp",
                                    "args": [
                                        "source",
                                        "target",
                                        "lerp_length",
                                        "selected_distance",
                                        "selected_edge"
                                    ],
                                    "script": "const length_x = Math.abs(source.x - target.x); const length_y = Math.abs(source.y - target.y); const length = Math.sqrt(length_x * length_x + length_y * length_y); return {selected_distance, selected_edge, source: {...source, x: source.x + (target.x - source.x) * lerp_length / length, y: source.y + (target.y - source.y) * lerp_length / length}, target: {...target, x: source.x + (target.x - source.x) * (1 - (lerp_length / length)), y: source.y + (target.y - source.y) * (1 - (lerp_length / length))}}"
                                },
                                {
                                    "id": "line_props",
                                    "args": [
                                        "source",
                                        "target",
                                        "selected_edge",
                                        "selected_distance"
                                    ],
                                    "script": "return ({x1: Math.floor(source.x), y1: Math.floor(source.y), x2: Math.floor(target.x), y2: Math.floor(target.y), class: `link ${selected_edge && (source.node_id === selected_edge.from + '_' + selected_edge.to || (source.node_id === selected_edge.from && target.node_id === selected_edge.to)) ? 'selected' : 'unselected'}`, 'marker-end': 'url(#arrow)', opacity: selected_distance !== undefined ? Math.max(0.05, 1 - selected_distance * selected_distance / 2) : 0.1})"
                                },
                                {
                                    "id": "line_dom_type",
                                    "value": "line"
                                },
                                {
                                    "id": "empty_array",
                                    "value": [
                                    ]
                                },
                                {
                                    "id": "line",
                                    "type": "h"
                                },
                                {
                                    "id": "out",
                                    "args": [
                                        "line",
                                        "edge_info"
                                    ],
                                    "script": "return [line, edge_info]"
                                }
                            ],
                            "edges": [
                                {
                                    "from": "in",
                                    "to": "get_link"
                                },
                                {
                                    "from": "in",
                                    "to": "line_props"
                                },
                                {
                                    "from": "in",
                                    "to": "get_selected_edge",
                                    "as": "input"
                                },
                                {
                                    "from": "get_link",
                                    "to": "line_lerp"
                                },
                                {
                                    "from": "get_selected_edge",
                                    "to": "line_props",
                                    "as": "selected_edge"
                                },
                                {
                                    "from": "get_selected_edge",
                                    "to": "line_lerp",
                                    "as": "selected_edge"
                                },
                                {
                                    "from": "get_selected_edge",
                                    "to": "edge_info_props",
                                    "as": "selected_edge"
                                },
                                {
                                    "from": "line_lerp",
                                    "to": "line_props"
                                },
                                {
                                    "from": "lerp_length",
                                    "to": "line_lerp",
                                    "as": "lerp_length"
                                },
                                {
                                    "from": "get_link",
                                    "to": "edge_info_props"
                                },
                                {
                                    "from": "in",
                                    "to": "edge_info_as_text"
                                },
                                {
                                    "from": "in",
                                    "to": "edge_info_type_text"
                                },
                                {
                                    "from": "edge_info_dom_type",
                                    "to": "edge_info_el",
                                    "as": "dom_type"
                                },
                                {
                                    "from": "edge_info_props",
                                    "to": "edge_info_el",
                                    "as": "props"
                                },
                                {
                                    "from": "edge_info_line_position",
                                    "to": "edge_info_props",
                                    "as": "line_position"
                                },
                                {
                                    "from": "edge_info_rect",
                                    "to": "edge_info_el_children",
                                    "as": "rect"
                                },
                                {
                                    "from": "edge_info_rect_dom_type",
                                    "to": "edge_info_rect",
                                    "as": "dom_type"
                                },
                                {
                                    "from": "edge_info_el_children",
                                    "to": "edge_info_el",
                                    "as": "children"
                                },
                                {
                                    "from": "edge_info_el",
                                    "to": "out",
                                    "as": "edge_info"
                                },
                                {
                                    "from": "edge_info_type_props",
                                    "to": "edge_info_type_el",
                                    "as": "props"
                                },
                                {
                                    "from": "edge_info_type_text",
                                    "to": "edge_info_type_el",
                                    "as": "text"
                                },
                                {
                                    "from": "edge_info_type_el",
                                    "to": "edge_info_el_children",
                                    "as": "edge_type"
                                },
                                {
                                    "from": "edge_info_as_props",
                                    "to": "edge_info_as_el",
                                    "as": "props"
                                },
                                {
                                    "from": "edge_info_as_text",
                                    "to": "edge_info_as_el",
                                    "as": "text"
                                },
                                {
                                    "from": "edge_info_as_el",
                                    "to": "edge_info_el_children",
                                    "as": "edge_as"
                                },
                                {
                                    "from": "line_props",
                                    "to": "line",
                                    "as": "props"
                                },
                                {
                                    "from": "line_dom_type",
                                    "to": "line",
                                    "as": "dom_type"
                                },
                                {
                                    "from": "empty_array",
                                    "to": "line",
                                    "as": "children"
                                },
                                {
                                    "from": "empty_array",
                                    "to": "line",
                                    "as": "children"
                                },
                                {
                                    "from": "line",
                                    "to": "out",
                                    "as": "line"
                                }
                            ]
                        },
                        {
                            "id": "line_end",
                            "type": "h"
                        },
                        {
                            "id": "line_end_props",
                            "value": {
                                "id": "arrow",
                                "refX": 8,
                                "refY": 4,
                                "markerWidth": 8,
                                "markerHeight": 8,
                                "markerUnits": "userSpaceOnUse",
                                "orient": "auto"
                            }
                        },
                        {
                            "id": "line_end_children",
                            "args": [
                                "children"
                            ],
                            "script": "return [children.el]"
                        },
                        {
                            "id": "arrow_path",
                            "type": "h"
                        },
                        {
                            "id": "arrow_path_props",
                            "value": {
                                "points": "1 1, 8 4, 1 8"
                            }
                        },
                        {
                            "id": "arrow_path_dom_type",
                            "value": "polyline"
                        },
                        {
                            "id": "fill_filter_flood_dom_type",
                            "value": "feFlood"
                        },
                        {
                            "id": "fill_filter_flood_props",
                            "value": {
                                "flood-color": "black"
                            }
                        },
                        {
                            "id": "fill_filter_flood",
                            "type": "h"
                        },
                        {
                            "id": "fill_filter_props",
                            "value": {
                                "id": "flood-background",
                                "width": 1,
                                "height": 1,
                                "x": 0,
                                "y": 0
                            }
                        },
                        {
                            "id": "fill_filter_flood_selected_dom_type",
                            "value": "feFlood"
                        },
                        {
                            "id": "fill_filter_flood_selected_props",
                            "value": {
                                "flood-color": "red"
                            }
                        },
                        {
                            "id": "fill_filter_flood_selected",
                            "type": "h"
                        },
                        {
                            "id": "fill_filter_selected_props",
                            "value": {
                                "id": "selected-flood-background",
                                "width": 1.2,
                                "height": 1.5,
                                "x": -0.1,
                                "y": -0.25
                            }
                        },
                        {
                            "id": "fill_filter_composite_props",
                            "value": {
                                "in": "SourceGraphic"
                            }
                        },
                        {
                            "id": "fill_filter_composite_dom_type",
                            "value": "feComposite"
                        },
                        {
                            "id": "fill_filter_composite",
                            "type": "h"
                        },
                        {
                            "id": "fill_filter_children",
                            "args": [
                                "comp",
                                "flood"
                            ],
                            "script": "return [flood.el, comp.el]"
                        },
                        {
                            "id": "fill_filter_selected_children",
                            "args": [
                                "comp",
                                "flood"
                            ],
                            "script": "return [flood.el, comp.el]"
                        },
                        {
                            "id": "fill_filter_dom_type",
                            "value": "filter"
                        },
                        {
                            "id": "fill_filter",
                            "type": "h"
                        },
                        {
                            "id": "fill_filter_selected",
                            "type": "h"
                        },
                        {
                            "id": "marker",
                            "value": "marker"
                        },
                        {
                            "id": "defs_children",
                            "args": [
                                "arrow",
                                "bg_color",
                                "bg_color_selected"
                            ],
                            "script": "return [bg_color.el, bg_color_selected.el, arrow.el]"
                        },
                        {
                            "id": "defs",
                            "type": "h"
                        },
                        {
                            "id": "defs_dom_type",
                            "value": "defs"
                        },
                        {
                            "id": "defs_props",
                            "value": {}
                        },
                        {
                            "id": "link_selected_distance",
                            "args": [
                                "link"
                            ],
                            "script": "return !link ? [] : link.selected_distance ? link.selected_distance : 10"
                        },
                        {
                            "id": "filter_links",
                            "type": "filter"
                        }
                    ],
                    "edges": [
                        {
                            "from": "in",
                            "to": "get_nodes"
                        },
                        {
                            "from": "in",
                            "to": "log",
                            "as": "input"
                        },
                        {
                            "from": "in",
                            "to": "get_links"
                        },
                        {
                            "from": "in",
                            "to": "get_selected"
                        },
                        {
                            "from": "in",
                            "to": "get_selected_edge"
                        },
                        {
                            "from": "in",
                            "to": "get_onclick_node_fn"
                        },
                        {
                            "from": "in",
                            "to": "get_levels"
                        },
                        {
                            "from": "get_nodes",
                            "to": "node_layout",
                            "as": "nodes"
                        },
                        {
                            "from": "get_links",
                            "to": "duplicate_nodes",
                            "as": "links"
                        },
                        {
                            "from": "get_levels",
                            "to": "duplicate_nodes",
                            "as": "levels"
                        },
                        {
                            "from": "in",
                            "to": "get_graph"
                        },
                        {
                            "from": "get_graph",
                            "to": "node_layout",
                            "as": "graph"
                        },
                        {
                            "from": "get_graph",
                            "to": "link_layout",
                            "as": "graph"
                        },
                        {
                            "from": "get_onclick_node_fn",
                            "to": "node_layout",
                            "as": "onclick_node_fn"
                        },
                        {
                            "from": "get_selected",
                            "to": "node_layout",
                            "as": "selected"
                        },
                        {
                            "from": "get_links",
                            "to": "link_selected_distance",
                            "as": "link"
                        },
                        {
                            "from": "get_selected_edge",
                            "to": "filter_links",
                            "as": "selected_edge"
                        },
                        {
                            "from": "get_selected_edge",
                            "to": "node_layout",
                            "as": "selected_edge"
                        },
                        {
                            "from": "get_selected_edge",
                            "to": "link_layout",
                            "as": "selected_edge"
                        },
                        {
                            "from": "link_selected_distance",
                            "to": "filter_links",
                            "as": "keep"
                        },
                        {
                            "from": "get_links",
                            "to": "filter_links"
                        },
                        {
                            "from": "get_links",
                            "to": "link_layout",
                            "as": "links"
                        },
                        {
                            "from": "link_layout_map",
                            "to": "link_layout",
                            "as": "link_layout_map",
                            "type": "ref"
                        },
                        {
                            "from": "in",
                            "to": "node_editor_props"
                        },
                        {
                            "from": "get_selected",
                            "to": "get_selected_node",
                            "as": "selected"
                        },
                        {
                            "from": "get_nodes",
                            "to": "get_selected_node",
                            "as": "nodes"
                        },
                        {
                            "from": "get_selected_node",
                            "to": "node_editor_props",
                            "as": "selected"
                        },
                        {
                            "from": "node_editor_props",
                            "to": "out",
                            "as": "props"
                        },
                        {
                            "from": "node_editor_dom_type",
                            "to": "out",
                            "as": "dom_type"
                        },
                        {
                            "from": "node_layout_map",
                            "to": "node_layout",
                            "as": "node_layout_map",
                            "type": "ref"
                        },
                        {
                            "from": "node_layout",
                            "to": "node_editor_children",
                            "as": "nodes"
                        },
                        {
                            "from": "get_nodes",
                            "to": "node_editor_children_inputs",
                            "as": "nodes"
                        },
                        {
                            "from": "link_layout",
                            "to": "node_editor_children",
                            "as": "links"
                        },
                        {
                            "from": "get_links",
                            "to": "node_editor_children_inputs",
                            "as": "links"
                        },
                        {
                            "from": "defs",
                            "to": "node_editor_children",
                            "as": "defs"
                        },
                        {
                            "from": "marker",
                            "to": "line_end",
                            "as": "dom_type"
                        },
                        {
                            "from": "arrow_path_props",
                            "to": "arrow_path",
                            "as": "props"
                        },
                        {
                            "from": "arrow_path_dom_type",
                            "to": "arrow_path",
                            "as": "dom_type"
                        },
                        {
                            "from": "arrow_path",
                            "to": "line_end",
                            "as": "children"
                        },
                        {
                            "from": "line_end_props",
                            "to": "line_end",
                            "as": "props"
                        },
                        {
                            "from": "line_end",
                            "to": "defs_children",
                            "as": "arrow"
                        },
                        {
                            "from": "fill_filter_flood_props",
                            "to": "fill_filter_flood",
                            "as": "props"
                        },
                        {
                            "from": "fill_filter_flood_dom_type",
                            "to": "fill_filter_flood",
                            "as": "dom_type"
                        },
                        {
                            "from": "fill_filter_flood",
                            "to": "fill_filter_children",
                            "as": "flood"
                        },
                        {
                            "from": "fill_filter_flood_selected_props",
                            "to": "fill_filter_flood_selected",
                            "as": "props"
                        },
                        {
                            "from": "fill_filter_flood_selected_dom_type",
                            "to": "fill_filter_flood_selected",
                            "as": "dom_type"
                        },
                        {
                            "from": "fill_filter_flood_selected",
                            "to": "fill_filter_selected_children",
                            "as": "flood"
                        },
                        {
                            "from": "fill_filter_composite_props",
                            "to": "fill_filter_composite",
                            "as": "props"
                        },
                        {
                            "from": "fill_filter_composite_dom_type",
                            "to": "fill_filter_composite",
                            "as": "dom_type"
                        },
                        {
                            "from": "fill_filter_composite",
                            "to": "fill_filter_children",
                            "as": "comp"
                        },
                        {
                            "from": "fill_filter_children",
                            "to": "fill_filter",
                            "as": "children"
                        },
                        {
                            "from": "fill_filter_props",
                            "to": "fill_filter",
                            "as": "props"
                        },
                        {
                            "from": "fill_filter_composite",
                            "to": "fill_filter_selected_children",
                            "as": "comp"
                        },
                        {
                            "from": "fill_filter_selected_children",
                            "to": "fill_filter_selected",
                            "as": "children"
                        },
                        {
                            "from": "fill_filter_selected_props",
                            "to": "fill_filter_selected",
                            "as": "props"
                        },
                        {
                            "from": "fill_filter_dom_type",
                            "to": "fill_filter",
                            "as": "dom_type"
                        },
                        {
                            "from": "fill_filter_dom_type",
                            "to": "fill_filter_selected",
                            "as": "dom_type"
                        },
                        {
                            "from": "fill_filter",
                            "to": "defs_children",
                            "as": "bg_color"
                        },
                        {
                            "from": "fill_filter_selected",
                            "to": "defs_children",
                            "as": "bg_color_selected"
                        },
                        {
                            "from": "defs_dom_type",
                            "to": "defs",
                            "as": "dom_type"
                        },
                        {
                            "from": "defs_props",
                            "to": "defs",
                            "as": "props"
                        },
                        {
                            "from": "defs_children",
                            "to": "defs",
                            "as": "children"
                        },
                        {
                            "from": "node_editor_children",
                            "to": "out",
                            "as": "children"
                        }
                    ]
                },
                {
                    "id": "out",
                    "args": ["hel"],
                    "script": "return hel;"
                }
            
            ],
            "edges": [
                {
                    "from": "in",
                    "to": "node_editor"
                },
                {
                    "from": "in",
                    "to": "edit_text"
                },
                {
                    "from": "in",
                    "to": "search_input"
                },
                {
                    "from": "in",
                    "to": "result"
                },
                {
                    "from": "graph",
                    "to": "wrapper",
                    "as": "graph"
                },
                {
                    "from": "node_editor",
                    "to": "wrapper_children",
                    "as": "node_editor"
                },
                {
                    "from": "edit_text",
                    "to": "wrapper_children",
                    "as": "edit_text"
                },
                {
                    "from": "search_input",
                    "to": "wrapper_children",
                    "as": "search_input"
                },
                {
                    "from": "result",
                    "to": "wrapper_children",
                    "as": "result"
                },
                {
                    "from": "wrapper_children",
                    "to": "wrapper",
                    "as": "children"
                },
                {
                    "from": "wrapper_dom_type",
                    "to": "wrapper",
                    "as": "dom_type"
                },
                {
                    "from": "wrapper_props",
                    "to": "wrapper",
                    "as": "props",
                    "type": "resolve"
                },
                {
                    "from": "wrapper",
                    "to": "out",
                    "as": "hel"
                }
            ]
        }
    ],
    "edges": [
        {
            "from": "in",
            "to": "get_graph",
            "as": "target"
        },
        {
            "from": "in",
            "to": "get_display_graph",
            "as": "target"
        },
        {
            "from": "get_display_graph",
            "to": "get_display_graph_out",
            "as": "target"
        },
        {
            "from": "graph",
            "to": "get_graph",
            "as": "path"
        },
        {
            "from": "display_graph",
            "to": "get_display_graph",
            "as": "path"
        },
        {
            "from": "display_graph_out",
            "to": "get_display_graph_out",
            "as": "path"
        },
        {
            "from": "hyperapp_view_in",
            "to": "hyperapp_view",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "editor",
            "to": "hyperapp_view",
            "type": "ref",
            "as": "out_node"
        },
        {
            "from": "get_graph",
            "to": "update_sim_fn",
            "as": "graph"
        },
        {
            "from": "get_display_graph_out",
            "to": "hyperapp_init_state",
            "as": "selected"
        },
        {
            "from": "update_sim_effect",
            "to": "hyperapp_init_state",
            "as": "update_sim_effect"
        },
        {
            "from": "hyperapp_view_in",
            "to": "onclick_node_fn"
        },
        {
            "from": "onclick_node_fn",
            "to": "editor",
            "as": "onclick_node_fn"
        },
        {
            "from": "onclick_node_fn_body",
            "to": "onclick_node_fn",
            "as": "out_node",
            "type": "ref"
        },
        {
            "from": "onclick_node_fn_in",
            "to": "onclick_node_fn_body"
        },
        {
            "from": "onclick_node_fn_in",
            "to": "onclick_node_fn",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "hyperapp_view_in",
            "to": "onclick_graph_fn"
        },
        {
            "from": "onclick_graph_fn",
            "to": "editor",
            "as": "onclick_graph_fn"
        },
        {
            "from": "onclick_graph_fn_body",
            "to": "onclick_graph_fn",
            "as": "out_node",
            "type": "ref"
        },
        {
            "from": "onclick_graph_fn_in",
            "to": "onclick_graph_fn_body"
        },
        {
            "from": "onclick_graph_fn_in",
            "to": "onclick_graph_fn",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "get_graph",
            "to": "onkey_fn",
            "as": "graph"
        },
        {
            "from": "onkey_fn",
            "to": "hyperapp_subscriptions",
            "as": "onkey_fn"
        },
        {
            "from": "onkey_fn_in",
            "to": "onkey_fn_body"
        },
        {
            "from": "onkey_fn_body",
            "to": "onkey_fn",
            "as": "out_node",
            "type": "ref"
        },
        {
            "from": "onkey_fn_in",
            "to": "onkey_fn",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "hyperapp_view",
            "to": "hyperapp_app",
            "as": "view"
        },
        {
            "from": "hyperapp_init_state",
            "to": "hyperapp_app",
            "as": "init"
        },
        {
            "from": "get_graph",
            "to": "hyperapp_view",
            "as": "graph"
        },
        {
            "from": "get_graph",
            "to": "hyperapp_init_state",
            "as": "graph"
        },
        {
            "from": "hyperapp_view_in",
            "to": "editor"
        },
        {
            "from": "get_graph",
            "to": "update_nodes",
            "as": "graph"
        },
        {
            "from": "get_display_graph",
            "to": "update_nodes",
            "as": "display_graph"
        },
        {
            "from": "get_display_graph",
            "to": "hyperapp_init_state",
            "as": "display_graph"
        },
        {
            "from": "in",
            "to": "update_nodes",
            "order": -1
        },
        {
            "from": "initial_state",
            "to": "update_nodes",
            "order": -1
        },
        {
            "from": "initial_state",
            "to": "graph_to_simulation",
            "order": -1
        },
        {
            "from": "get_display_graph_out",
            "to": "graph_to_simulation",
            "as": "selected"
        },
        {
            "from": "get_display_graph",
            "to": "graph_to_simulation",
            "as": "display_graph"
        },
        {
            "from": "get_display_graph_out",
            "to": "calculate_levels",
            "as": "selected"
        },
        {
            "from": "get_display_graph",
            "to": "calculate_levels",
            "as": "display_graph"
        },
        {
            "from": "calculate_levels",
            "to": "graph_to_simulation",
            "as": "levels"
        },
        {
            "from": "calculate_levels",
            "to": "hyperapp_init_state",
            "as": "levels"
        },
        {
            "from": "d3simulation",
            "to": "hyperapp_init_state",
            "as": "simulation"
        },
        {
            "from": "d3simulation",
            "to": "update_nodes",
            "as": "simulation"
        },
        {
            "from": "initial_state",
            "to": "hyperapp_init_state"
        },
        {
            "from": "in",
            "to": "hyperapp_init_state",
            "order": -1
        },
        {
            "from": "graph_to_simulation",
            "to": "hyperapp_init_state"
        },
        {
            "from": "hyperapp_init_state",
            "to": "update_nodes"
        },
        {
            "from": "update_nodes",
            "to": "hyperapp_app"
        },
        {
            "from": "d3simulation",
            "to": "hyperapp_subscriptions",
            "as": "simulation"
        },
        {
            "from": "hyperapp_subscriptions",
            "to": "hyperapp_app",
            "as": "subscriptions"
        },
        {
            "from": "update_sim_in",
            "to": "update_sim"
        },
        {
            "from": "update_sim_in",
            "to": "update_sim_fn",
            "as": "in_node",
            "type": "ref"
        },
        {
            "from": "update_sim",
            "to": "update_sim_fn",
            "as": "out_node",
            "type": "ref"
        },
        {
            "from": "update_sim_fn",
            "to": "update_sim_effect",
            "as": "fn"
        },
        {
            "from": "hyperapp_app",
            "to": "out" 
        }
    ]
}